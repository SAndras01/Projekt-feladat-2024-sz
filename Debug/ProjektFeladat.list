
ProjektFeladat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b6c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004d34  08004d34  00005d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d54  08004d54  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d54  08004d54  00005d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d5c  08004d5c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d64  08004d64  00005d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004d68  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08004d74  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004d74  0000615c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef99  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245f  00000000  00000000  00014fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00017438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a08  00000000  00000000  00018108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bc5  00000000  00000000  00018b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ebe  00000000  00000000  0003c6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdb75  00000000  00000000  0004d593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003594  00000000  00000000  0011b14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d1c 	.word	0x08004d1c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004d1c 	.word	0x08004d1c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <_ZN4GPIOC1EP12GPIO_TypeDeft>:
 *      Author: Andris
 */

#include "GPIO.hpp"

GPIO::GPIO(GPIO_TypeDef* GPIOx_p, uint16_t GPIO_Pin_p)
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	4613      	mov	r3, r2
 8000504:	80fb      	strh	r3, [r7, #6]
{
	this->GPIOx = GPIOx_p;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	68ba      	ldr	r2, [r7, #8]
 800050a:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin = GPIO_Pin_p;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	88fa      	ldrh	r2, [r7, #6]
 8000510:	809a      	strh	r2, [r3, #4]
}
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <_ZN4GPIO12digitalWriteE13GPIO_PinState>:

void GPIO::digitalWrite(GPIO_PinState state_p)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state_p);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	889b      	ldrh	r3, [r3, #4]
 8000534:	78fa      	ldrb	r2, [r7, #3]
 8000536:	4619      	mov	r1, r3
 8000538:	f001 fbda 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t>:

    //15 bit RTD value, LSB is do not care
    return rtdValue << 1;
}

MAX31865::MAX31865( SPI_HandleTypeDef *hspi_p, GPIO* csPin_p , GPIO* DRDYpin_p, RTD_type_t RTD_type_p )
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	2200      	movs	r2, #0
 8000556:	615a      	str	r2, [r3, #20]
{
	hspi = hspi_p;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	605a      	str	r2, [r3, #4]
	csPin = csPin_p;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	609a      	str	r2, [r3, #8]
	DRDYpin = DRDYpin_p;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	60da      	str	r2, [r3, #12]
	if(RTD_type_p == PT100)
 800056a:	7e3b      	ldrb	r3, [r7, #24]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d103      	bne.n	8000578 <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t+0x34>
	{
		r0 = 100;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2264      	movs	r2, #100	@ 0x64
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	e002      	b.n	800057e <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t+0x3a>
	}
	else
	{
		r0 = 1000;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	22e8      	movs	r2, #232	@ 0xe8
 800057c:	701a      	strb	r2, [r3, #0]
	}
}
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4618      	mov	r0, r3
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <_ZN8MAX318654initE24MAX31865_FilterSetting_t>:

HAL_StatusTypeDef MAX31865::init( MAX31865_FilterSetting_t filterSetting_p )
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef stat;

	//First wake up the sensor by reading a register (it will return junk)
	uint8_t buff[1];
	readNFromAddres(MAX31865_CONFIG_REG_ADDRESS, buff, 1);
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	2301      	movs	r3, #1
 800059e:	2100      	movs	r1, #0
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 f81d 	bl	80005e0 <_ZN8MAX3186515readNFromAddresEhPhm>

	//Turn the bias voltage on and set the filter
	uint8_t configValue = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	72fb      	strb	r3, [r7, #11]

	configValue |= MAX31865_CONFIG_VBIAS_ON;
 80005aa:	7afb      	ldrb	r3, [r7, #11]
 80005ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	72fb      	strb	r3, [r7, #11]

	//If 50Hz is set, set the bit, a bit value of 0 would set the 60Hz filter
	if ( filterSetting_p == MAX31865_FILTER_50HZ ) {configValue |= MAX31865_CONFIG_REG_FILTER_50Hz;}
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d104      	bne.n	80005c4 <_ZN8MAX318654initE24MAX31865_FilterSetting_t+0x38>
 80005ba:	7afb      	ldrb	r3, [r7, #11]
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	72fb      	strb	r3, [r7, #11]

	//Write the config register
	stat = writeNFromAddres(MAX31865_CONFIG_REG_ADDRESS, &configValue, 1);
 80005c4:	f107 020b 	add.w	r2, r7, #11
 80005c8:	2301      	movs	r3, #1
 80005ca:	2100      	movs	r1, #0
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f836 	bl	800063e <_ZN8MAX3186516writeNFromAddresEhPhm>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]

	return stat;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_ZN8MAX3186515readNFromAddresEhPhm>:

HAL_StatusTypeDef MAX31865::readNFromAddres( uint8_t addr_p, uint8_t* rBuff_p, uint32_t dataSize_p )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	607a      	str	r2, [r7, #4]
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	460b      	mov	r3, r1
 80005ee:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef stat;

	csPin -> digitalWrite( GPIO_PIN_RESET );
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff92 	bl	8000520 <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	stat = HAL_SPI_Transmit( hspi, &addr_p, 1, HAL_MAX_DELAY) ; // Transmit and receive data
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	6858      	ldr	r0, [r3, #4]
 8000600:	f107 010b 	add.w	r1, r7, #11
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	2201      	movs	r2, #1
 800060a:	f003 fb4e 	bl	8003caa <HAL_SPI_Transmit>
 800060e:	4603      	mov	r3, r0
 8000610:	75fb      	strb	r3, [r7, #23]
	stat = HAL_SPI_Receive( hspi, rBuff_p, dataSize_p, HAL_MAX_DELAY ); // Transmit and receive data
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6858      	ldr	r0, [r3, #4]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b29a      	uxth	r2, r3
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	f003 fc87 	bl	8003f32 <HAL_SPI_Receive>
 8000624:	4603      	mov	r3, r0
 8000626:	75fb      	strb	r3, [r7, #23]

	csPin -> digitalWrite( GPIO_PIN_SET );
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	2101      	movs	r1, #1
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff76 	bl	8000520 <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	return stat;
 8000634:	7dfb      	ldrb	r3, [r7, #23]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_ZN8MAX3186516writeNFromAddresEhPhm>:

HAL_StatusTypeDef MAX31865::writeNFromAddres( uint8_t addr_p, uint8_t* wBuff_p, uint32_t dataSize_p )
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b088      	sub	sp, #32
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	460b      	mov	r3, r1
 800064c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef stat;

	//The device has a maximum of 4 consiquential writable registers
	uint8_t msgBuff[4] = {0, 0, 0, 0};
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

	//Construct the package
	msgBuff[0] = addr_p | MAX31865_WRITE_OFFSET_MASK;
 8000652:	7afb      	ldrb	r3, [r7, #11]
 8000654:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	753b      	strb	r3, [r7, #20]

	for(uint32_t i = 0; i < dataSize_p; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
 8000660:	e00c      	b.n	800067c <_ZN8MAX3186516writeNFromAddresEhPhm+0x3e>
	{
		msgBuff[1+i] = wBuff_p[i];
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	441a      	add	r2, r3
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	3301      	adds	r3, #1
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	3320      	adds	r3, #32
 8000670:	443b      	add	r3, r7
 8000672:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint32_t i = 0; i < dataSize_p; i++)
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3301      	adds	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
 800067c:	69fa      	ldr	r2, [r7, #28]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d3ee      	bcc.n	8000662 <_ZN8MAX3186516writeNFromAddresEhPhm+0x24>
	}

	csPin -> digitalWrite( GPIO_PIN_RESET );
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff48 	bl	8000520 <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	stat = HAL_SPI_Transmit( hspi, msgBuff, dataSize_p+1, HAL_MAX_DELAY) ; // Transmit and receive data
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6858      	ldr	r0, [r3, #4]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b29b      	uxth	r3, r3
 8000698:	3301      	adds	r3, #1
 800069a:	b29a      	uxth	r2, r3
 800069c:	f107 0114 	add.w	r1, r7, #20
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	f003 fb01 	bl	8003caa <HAL_SPI_Transmit>
 80006a8:	4603      	mov	r3, r0
 80006aa:	76fb      	strb	r3, [r7, #27]

	csPin -> digitalWrite( GPIO_PIN_SET );
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	2101      	movs	r1, #1
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff34 	bl	8000520 <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	return stat;
 80006b8:	7efb      	ldrb	r3, [r7, #27]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>:
 */

#include "MS.hpp"

HAL_StatusTypeDef write2EEPROM(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout, uint8_t maxTries, uint8_t delayLen)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b08a      	sub	sp, #40	@ 0x28
 80006c6:	af04      	add	r7, sp, #16
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	4608      	mov	r0, r1
 80006cc:	4611      	mov	r1, r2
 80006ce:	461a      	mov	r2, r3
 80006d0:	4603      	mov	r3, r0
 80006d2:	817b      	strh	r3, [r7, #10]
 80006d4:	460b      	mov	r3, r1
 80006d6:	813b      	strh	r3, [r7, #8]
 80006d8:	4613      	mov	r3, r2
 80006da:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	HAL_Delay(delayLen);
 80006dc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f867 	bl	80017b4 <HAL_Delay>
	stat = HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 80006e6:	88f8      	ldrh	r0, [r7, #6]
 80006e8:	893a      	ldrh	r2, [r7, #8]
 80006ea:	8979      	ldrh	r1, [r7, #10]
 80006ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ee:	9302      	str	r3, [sp, #8]
 80006f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	4603      	mov	r3, r0
 80006fa:	68f8      	ldr	r0, [r7, #12]
 80006fc:	f001 fc56 	bl	8001fac <HAL_I2C_Mem_Write>
 8000700:	4603      	mov	r3, r0
 8000702:	75fb      	strb	r3, [r7, #23]

	uint8_t trycounter = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 8000708:	e00a      	b.n	8000720 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh+0x5e>
	{
		stat = HAL_I2C_IsDeviceReady(hi2c, DevAddress, 2, 100);
 800070a:	8979      	ldrh	r1, [r7, #10]
 800070c:	2364      	movs	r3, #100	@ 0x64
 800070e:	2202      	movs	r2, #2
 8000710:	68f8      	ldr	r0, [r7, #12]
 8000712:	f001 ff77 	bl	8002604 <HAL_I2C_IsDeviceReady>
 8000716:	4603      	mov	r3, r0
 8000718:	75fb      	strb	r3, [r7, #23]
		trycounter++;
 800071a:	7dbb      	ldrb	r3, [r7, #22]
 800071c:	3301      	adds	r3, #1
 800071e:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d004      	beq.n	8000730 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh+0x6e>
 8000726:	7dba      	ldrb	r2, [r7, #22]
 8000728:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800072c:	429a      	cmp	r2, r3
 800072e:	d9ec      	bls.n	800070a <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh+0x48>
	}

	return stat;
 8000730:	7dfb      	ldrb	r3, [r7, #23]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>:

HAL_StatusTypeDef readFromEEPROM(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout, uint8_t maxTries, uint8_t delayLen)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b08a      	sub	sp, #40	@ 0x28
 800073e:	af04      	add	r7, sp, #16
 8000740:	60f8      	str	r0, [r7, #12]
 8000742:	4608      	mov	r0, r1
 8000744:	4611      	mov	r1, r2
 8000746:	461a      	mov	r2, r3
 8000748:	4603      	mov	r3, r0
 800074a:	817b      	strh	r3, [r7, #10]
 800074c:	460b      	mov	r3, r1
 800074e:	813b      	strh	r3, [r7, #8]
 8000750:	4613      	mov	r3, r2
 8000752:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	HAL_Delay(delayLen);
 8000754:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f82b 	bl	80017b4 <HAL_Delay>
	stat = HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 800075e:	88f8      	ldrh	r0, [r7, #6]
 8000760:	893a      	ldrh	r2, [r7, #8]
 8000762:	8979      	ldrh	r1, [r7, #10]
 8000764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	4603      	mov	r3, r0
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f001 fd14 	bl	80021a0 <HAL_I2C_Mem_Read>
 8000778:	4603      	mov	r3, r0
 800077a:	75fb      	strb	r3, [r7, #23]

	uint8_t trycounter = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 8000780:	e011      	b.n	80007a6 <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh+0x6c>
	{
		stat = HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 8000782:	88f8      	ldrh	r0, [r7, #6]
 8000784:	893a      	ldrh	r2, [r7, #8]
 8000786:	8979      	ldrh	r1, [r7, #10]
 8000788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800078a:	9302      	str	r3, [sp, #8]
 800078c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	4603      	mov	r3, r0
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f001 fd02 	bl	80021a0 <HAL_I2C_Mem_Read>
 800079c:	4603      	mov	r3, r0
 800079e:	75fb      	strb	r3, [r7, #23]
		trycounter++;
 80007a0:	7dbb      	ldrb	r3, [r7, #22]
 80007a2:	3301      	adds	r3, #1
 80007a4:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d004      	beq.n	80007b6 <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh+0x7c>
 80007ac:	7dba      	ldrb	r2, [r7, #22]
 80007ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d9e5      	bls.n	8000782 <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh+0x48>
	}

	return stat;
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth>:

HAL_StatusTypeDef writeMultiPage( I2C_HandleTypeDef* I2Ccontroller, uint8_t EEPROMAddress, uint16_t start, uint8_t *data_p, uint16_t len, uint8_t pageLen )
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	@ 0x28
 80007c4:	af04      	add	r7, sp, #16
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	460b      	mov	r3, r1
 80007cc:	72fb      	strb	r3, [r7, #11]
 80007ce:	4613      	mov	r3, r2
 80007d0:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef stat;

	uint16_t remainder; //this much is left until the end of the current page
	while(len != 0)
 80007d2:	e068      	b.n	80008a6 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xe6>
	{
		remainder = (pageLen-((start)%pageLen));
 80007d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007d8:	b299      	uxth	r1, r3
 80007da:	893b      	ldrh	r3, [r7, #8]
 80007dc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80007e0:	fb93 f0f2 	sdiv	r0, r3, r2
 80007e4:	fb00 f202 	mul.w	r2, r0, r2
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	1acb      	subs	r3, r1, r3
 80007ee:	82bb      	strh	r3, [r7, #20]

		if( remainder <= len )
 80007f0:	8aba      	ldrh	r2, [r7, #20]
 80007f2:	8c3b      	ldrh	r3, [r7, #32]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d830      	bhi.n	800085a <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x9a>
		{
			HAL_Delay(5);
 80007f8:	2005      	movs	r0, #5
 80007fa:	f000 ffdb 	bl	80017b4 <HAL_Delay>
			stat = HAL_I2C_Mem_Write(I2Ccontroller, EEPROMAddress<<1, start, sizeof(start), data_p, remainder, HAL_MAX_DELAY);
 80007fe:	7afb      	ldrb	r3, [r7, #11]
 8000800:	b29b      	uxth	r3, r3
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	b299      	uxth	r1, r3
 8000806:	893a      	ldrh	r2, [r7, #8]
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	9302      	str	r3, [sp, #8]
 800080e:	8abb      	ldrh	r3, [r7, #20]
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2302      	movs	r3, #2
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f001 fbc7 	bl	8001fac <HAL_I2C_Mem_Write>
 800081e:	4603      	mov	r3, r0
 8000820:	75fb      	strb	r3, [r7, #23]

			while(stat != HAL_OK)
 8000822:	e00a      	b.n	800083a <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x7a>
			{
				stat = HAL_I2C_IsDeviceReady(I2Ccontroller, EEPROMAddress<<1, 2, 100);
 8000824:	7afb      	ldrb	r3, [r7, #11]
 8000826:	b29b      	uxth	r3, r3
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	b299      	uxth	r1, r3
 800082c:	2364      	movs	r3, #100	@ 0x64
 800082e:	2202      	movs	r2, #2
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f001 fee7 	bl	8002604 <HAL_I2C_IsDeviceReady>
 8000836:	4603      	mov	r3, r0
 8000838:	75fb      	strb	r3, [r7, #23]
			while(stat != HAL_OK)
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f1      	bne.n	8000824 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x64>
			}

			start += remainder; //shift the "writer"
 8000840:	893a      	ldrh	r2, [r7, #8]
 8000842:	8abb      	ldrh	r3, [r7, #20]
 8000844:	4413      	add	r3, r2
 8000846:	813b      	strh	r3, [r7, #8]
			len -= remainder; //decrease the remaining length
 8000848:	8c3a      	ldrh	r2, [r7, #32]
 800084a:	8abb      	ldrh	r3, [r7, #20]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	843b      	strh	r3, [r7, #32]
			data_p += remainder*sizeof(uint8_t); //shift the "reader"
 8000850:	8abb      	ldrh	r3, [r7, #20]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	e025      	b.n	80008a6 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xe6>
		}
		else//write the rest of the data
		{
			HAL_Delay(5);
 800085a:	2005      	movs	r0, #5
 800085c:	f000 ffaa 	bl	80017b4 <HAL_Delay>
			stat = HAL_I2C_Mem_Write(I2Ccontroller, EEPROMAddress<<1, start, sizeof(start), data_p, len, HAL_MAX_DELAY);
 8000860:	7afb      	ldrb	r3, [r7, #11]
 8000862:	b29b      	uxth	r3, r3
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	b299      	uxth	r1, r3
 8000868:	893a      	ldrh	r2, [r7, #8]
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	9302      	str	r3, [sp, #8]
 8000870:	8c3b      	ldrh	r3, [r7, #32]
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2302      	movs	r3, #2
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f001 fb96 	bl	8001fac <HAL_I2C_Mem_Write>
 8000880:	4603      	mov	r3, r0
 8000882:	75fb      	strb	r3, [r7, #23]

			while(stat != HAL_OK)
 8000884:	e00a      	b.n	800089c <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xdc>
			{
				stat = HAL_I2C_IsDeviceReady(I2Ccontroller, EEPROMAddress<<1, 2, 100);
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	b29b      	uxth	r3, r3
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	b299      	uxth	r1, r3
 800088e:	2364      	movs	r3, #100	@ 0x64
 8000890:	2202      	movs	r2, #2
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f001 feb6 	bl	8002604 <HAL_I2C_IsDeviceReady>
 8000898:	4603      	mov	r3, r0
 800089a:	75fb      	strb	r3, [r7, #23]
			while(stat != HAL_OK)
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f1      	bne.n	8000886 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xc6>
			}

			len = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	843b      	strh	r3, [r7, #32]
	while(len != 0)
 80008a6:	8c3b      	ldrh	r3, [r7, #32]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d193      	bne.n	80007d4 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x14>

		}
	}
	return stat;
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_Z12deleteRegionP17I2C_HandleTypeDefhtth>:

//Basically the same as writeMultiPage, with the exception that here an array filled with 128 0xFF is used as the data
HAL_StatusTypeDef deleteRegion( I2C_HandleTypeDef* I2Ccontroller, uint8_t EEPROMAddress, uint16_t start, uint16_t len, uint8_t pageLen )
{
 80008b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008ba:	b08d      	sub	sp, #52	@ 0x34
 80008bc:	af04      	add	r7, sp, #16
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	4608      	mov	r0, r1
 80008c2:	4611      	mov	r1, r2
 80008c4:	461a      	mov	r2, r3
 80008c6:	4603      	mov	r3, r0
 80008c8:	72fb      	strb	r3, [r7, #11]
 80008ca:	460b      	mov	r3, r1
 80008cc:	813b      	strh	r3, [r7, #8]
 80008ce:	4613      	mov	r3, r2
 80008d0:	80fb      	strh	r3, [r7, #6]
			len = 0;

		}
	}
	return stat;
}
 80008d2:	466b      	mov	r3, sp
 80008d4:	461e      	mov	r6, r3
	uint8_t ereaserBuffer[pageLen];
 80008d6:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 80008da:	460b      	mov	r3, r1
 80008dc:	3b01      	subs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	b2cb      	uxtb	r3, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	4698      	mov	r8, r3
 80008e6:	4691      	mov	r9, r2
 80008e8:	f04f 0200 	mov.w	r2, #0
 80008ec:	f04f 0300 	mov.w	r3, #0
 80008f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008fc:	b2cb      	uxtb	r3, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	461c      	mov	r4, r3
 8000902:	4615      	mov	r5, r2
 8000904:	f04f 0200 	mov.w	r2, #0
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	00eb      	lsls	r3, r5, #3
 800090e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000912:	00e2      	lsls	r2, r4, #3
 8000914:	460b      	mov	r3, r1
 8000916:	3307      	adds	r3, #7
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	ebad 0d03 	sub.w	sp, sp, r3
 8000920:	ab04      	add	r3, sp, #16
 8000922:	3300      	adds	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < pageLen; i++){ ereaserBuffer[i]=0xFF; }
 8000926:	2300      	movs	r3, #0
 8000928:	77fb      	strb	r3, [r7, #31]
 800092a:	e006      	b.n	800093a <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0x84>
 800092c:	7ffb      	ldrb	r3, [r7, #31]
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	21ff      	movs	r1, #255	@ 0xff
 8000932:	54d1      	strb	r1, [r2, r3]
 8000934:	7ffb      	ldrb	r3, [r7, #31]
 8000936:	3301      	adds	r3, #1
 8000938:	77fb      	strb	r3, [r7, #31]
 800093a:	7ffa      	ldrb	r2, [r7, #31]
 800093c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000940:	429a      	cmp	r2, r3
 8000942:	d3f3      	bcc.n	800092c <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0x76>
	while(len != 0)
 8000944:	e064      	b.n	8000a10 <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0x15a>
		remainder = (pageLen-((start)%pageLen));
 8000946:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800094a:	b299      	uxth	r1, r3
 800094c:	893b      	ldrh	r3, [r7, #8]
 800094e:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8000952:	fb93 f0f2 	sdiv	r0, r3, r2
 8000956:	fb00 f202 	mul.w	r2, r0, r2
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	b29b      	uxth	r3, r3
 800095e:	1acb      	subs	r3, r1, r3
 8000960:	827b      	strh	r3, [r7, #18]
		if( remainder <= len )
 8000962:	8a7a      	ldrh	r2, [r7, #18]
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	429a      	cmp	r2, r3
 8000968:	d82c      	bhi.n	80009c4 <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0x10e>
			HAL_Delay(5);
 800096a:	2005      	movs	r0, #5
 800096c:	f000 ff22 	bl	80017b4 <HAL_Delay>
			stat = HAL_I2C_Mem_Write(I2Ccontroller, EEPROMAddress<<1, start, sizeof(start), ereaserBuffer, remainder, HAL_MAX_DELAY);
 8000970:	7afb      	ldrb	r3, [r7, #11]
 8000972:	b29b      	uxth	r3, r3
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	b299      	uxth	r1, r3
 8000978:	893a      	ldrh	r2, [r7, #8]
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	8a7b      	ldrh	r3, [r7, #18]
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2302      	movs	r3, #2
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f001 fb0e 	bl	8001fac <HAL_I2C_Mem_Write>
 8000990:	4603      	mov	r3, r0
 8000992:	77bb      	strb	r3, [r7, #30]
			while(stat != HAL_OK)
 8000994:	e00a      	b.n	80009ac <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0xf6>
				stat = HAL_I2C_IsDeviceReady(I2Ccontroller, EEPROMAddress<<1, 2, 100);
 8000996:	7afb      	ldrb	r3, [r7, #11]
 8000998:	b29b      	uxth	r3, r3
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	b299      	uxth	r1, r3
 800099e:	2364      	movs	r3, #100	@ 0x64
 80009a0:	2202      	movs	r2, #2
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f001 fe2e 	bl	8002604 <HAL_I2C_IsDeviceReady>
 80009a8:	4603      	mov	r3, r0
 80009aa:	77bb      	strb	r3, [r7, #30]
			while(stat != HAL_OK)
 80009ac:	7fbb      	ldrb	r3, [r7, #30]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1f1      	bne.n	8000996 <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0xe0>
			start += remainder;
 80009b2:	893a      	ldrh	r2, [r7, #8]
 80009b4:	8a7b      	ldrh	r3, [r7, #18]
 80009b6:	4413      	add	r3, r2
 80009b8:	813b      	strh	r3, [r7, #8]
			len -= remainder;
 80009ba:	88fa      	ldrh	r2, [r7, #6]
 80009bc:	8a7b      	ldrh	r3, [r7, #18]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	80fb      	strh	r3, [r7, #6]
 80009c2:	e025      	b.n	8000a10 <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0x15a>
			HAL_Delay(5);
 80009c4:	2005      	movs	r0, #5
 80009c6:	f000 fef5 	bl	80017b4 <HAL_Delay>
			stat = HAL_I2C_Mem_Write(I2Ccontroller, EEPROMAddress<<1, start, sizeof(start), ereaserBuffer, len, HAL_MAX_DELAY);
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	b299      	uxth	r1, r3
 80009d2:	893a      	ldrh	r2, [r7, #8]
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2302      	movs	r3, #2
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f001 fae1 	bl	8001fac <HAL_I2C_Mem_Write>
 80009ea:	4603      	mov	r3, r0
 80009ec:	77bb      	strb	r3, [r7, #30]
			while(stat != HAL_OK)
 80009ee:	e00a      	b.n	8000a06 <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0x150>
				stat = HAL_I2C_IsDeviceReady(I2Ccontroller, EEPROMAddress<<1, 2, 100);
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	b299      	uxth	r1, r3
 80009f8:	2364      	movs	r3, #100	@ 0x64
 80009fa:	2202      	movs	r2, #2
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f001 fe01 	bl	8002604 <HAL_I2C_IsDeviceReady>
 8000a02:	4603      	mov	r3, r0
 8000a04:	77bb      	strb	r3, [r7, #30]
			while(stat != HAL_OK)
 8000a06:	7fbb      	ldrb	r3, [r7, #30]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1f1      	bne.n	80009f0 <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0x13a>
			len = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	80fb      	strh	r3, [r7, #6]
	while(len != 0)
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d197      	bne.n	8000946 <_Z12deleteRegionP17I2C_HandleTypeDefhtth+0x90>
	return stat;
 8000a16:	7fbb      	ldrb	r3, [r7, #30]
 8000a18:	46b5      	mov	sp, r6
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a24 <_ZN18MeasurementStorageC1EP17I2C_HandleTypeDefhht>:

MeasurementStorage::MeasurementStorage( I2C_HandleTypeDef* I2Ccontroller_p, uint8_t EEPROMAddress_p, uint8_t pageLen_p, uint16_t freePages_p )
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	461a      	mov	r2, r3
 8000a32:	460b      	mov	r3, r1
 8000a34:	71fb      	strb	r3, [r7, #7]
 8000a36:	4613      	mov	r3, r2
 8000a38:	71bb      	strb	r3, [r7, #6]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
{
	this -> I2Ccontroller = I2Ccontroller_p;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	609a      	str	r2, [r3, #8]
	this -> EEPROMAddress = EEPROMAddress_p;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	79fa      	ldrb	r2, [r7, #7]
 8000a50:	711a      	strb	r2, [r3, #4]
	this -> pageLen = pageLen_p;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	79ba      	ldrb	r2, [r7, #6]
 8000a56:	731a      	strb	r2, [r3, #12]
	this -> freePages = freePages_p;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	8b3a      	ldrh	r2, [r7, #24]
 8000a5c:	81da      	strh	r2, [r3, #14]
}
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_ZN18MeasurementStorage4initEy>:

void MeasurementStorage::init(uint64_t Timestamp_p)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	e9c7 2300 	strd	r2, r3, [r7]
	setTimestamp(Timestamp_p);
 8000a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f000 f8cc 	bl	8000c1a <_ZN18MeasurementStorage12setTimestampEy>
	resetCounter();
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f000 f895 	bl	8000bb2 <_ZN18MeasurementStorage12resetCounterEv>

	uint16_t maxSize = (pageLen * freePages) / MeasEntry::len;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	7b1b      	ldrb	r3, [r3, #12]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	89db      	ldrh	r3, [r3, #14]
 8000a92:	fb02 f303 	mul.w	r3, r2, r3
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <_ZN18MeasurementStorage4initEy+0x4c>)
 8000a98:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9c:	1052      	asrs	r2, r2, #1
 8000a9e:	17db      	asrs	r3, r3, #31
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	82fb      	strh	r3, [r7, #22]

	setMaxSize(maxSize);
 8000aa4:	8afb      	ldrh	r3, [r7, #22]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f000 f8e9 	bl	8000c80 <_ZN18MeasurementStorage10setMaxSizeEt>
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	66666667 	.word	0x66666667

08000abc <_ZN18MeasurementStorage16incrementCounterEv>:

void MeasurementStorage::incrementCounter()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af06      	add	r7, sp, #24
 8000ac2:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t counter = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	817b      	strh	r3, [r7, #10]
	uint16_t maxSize = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	813b      	strh	r3, [r7, #8]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6898      	ldr	r0, [r3, #8]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	b299      	uxth	r1, r3
 8000adc:	2305      	movs	r3, #5
 8000ade:	9304      	str	r3, [sp, #16]
 8000ae0:	2364      	movs	r3, #100	@ 0x64
 8000ae2:	9303      	str	r3, [sp, #12]
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	9302      	str	r3, [sp, #8]
 8000aea:	2302      	movs	r3, #2
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	f107 030a 	add.w	r3, r7, #10
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2302      	movs	r3, #2
 8000af6:	2208      	movs	r2, #8
 8000af8:	f7ff fe1f 	bl	800073a <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8000afc:	4603      	mov	r3, r0
 8000afe:	737b      	strb	r3, [r7, #13]
	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&maxSize, sizeof(uint16_t), HAL_MAX_DELAY);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6898      	ldr	r0, [r3, #8]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	b299      	uxth	r1, r3
 8000b0c:	2305      	movs	r3, #5
 8000b0e:	9304      	str	r3, [sp, #16]
 8000b10:	2364      	movs	r3, #100	@ 0x64
 8000b12:	9303      	str	r3, [sp, #12]
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	9302      	str	r3, [sp, #8]
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2302      	movs	r3, #2
 8000b26:	2208      	movs	r2, #8
 8000b28:	f7ff fe07 	bl	800073a <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	737b      	strb	r3, [r7, #13]

	counter++;
 8000b30:	897b      	ldrh	r3, [r7, #10]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	817b      	strh	r3, [r7, #10]

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6898      	ldr	r0, [r3, #8]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	b299      	uxth	r1, r3
 8000b44:	2305      	movs	r3, #5
 8000b46:	9304      	str	r3, [sp, #16]
 8000b48:	2364      	movs	r3, #100	@ 0x64
 8000b4a:	9303      	str	r3, [sp, #12]
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b50:	9302      	str	r3, [sp, #8]
 8000b52:	2302      	movs	r3, #2
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	f107 030a 	add.w	r3, r7, #10
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	2208      	movs	r2, #8
 8000b60:	f7ff fdaf 	bl	80006c2 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8000b64:	4603      	mov	r3, r0
 8000b66:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 8000b68:	7b7b      	ldrb	r3, [r7, #13]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00c      	beq.n	8000b88 <_ZN18MeasurementStorage16incrementCounterEv+0xcc>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d008      	beq.n	8000b88 <_ZN18MeasurementStorage16incrementCounterEv+0xcc>
	{
		errors += I2C_error;
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	3308      	adds	r3, #8
 8000b7a:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	89fa      	ldrh	r2, [r7, #14]
 8000b82:	4611      	mov	r1, r2
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	4798      	blx	r3
	}

	if( counter == maxSize && errorHandler != NULL)
 8000b88:	897a      	ldrh	r2, [r7, #10]
 8000b8a:	893b      	ldrh	r3, [r7, #8]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d10c      	bne.n	8000baa <_ZN18MeasurementStorage16incrementCounterEv+0xee>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d008      	beq.n	8000baa <_ZN18MeasurementStorage16incrementCounterEv+0xee>
	{
		errors += Overflow_write_error;
 8000b98:	89fb      	ldrh	r3, [r7, #14]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	89fa      	ldrh	r2, [r7, #14]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	4798      	blx	r3
	}
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_ZN18MeasurementStorage12resetCounterEv>:

void MeasurementStorage::resetCounter()
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b08a      	sub	sp, #40	@ 0x28
 8000bb6:	af06      	add	r7, sp, #24
 8000bb8:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t counter = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	817b      	strh	r3, [r7, #10]

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6898      	ldr	r0, [r3, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	2305      	movs	r3, #5
 8000bd0:	9304      	str	r3, [sp, #16]
 8000bd2:	2364      	movs	r3, #100	@ 0x64
 8000bd4:	9303      	str	r3, [sp, #12]
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	2302      	movs	r3, #2
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	f107 030a 	add.w	r3, r7, #10
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2302      	movs	r3, #2
 8000be8:	2208      	movs	r2, #8
 8000bea:	f7ff fd6a 	bl	80006c2 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00c      	beq.n	8000c12 <_ZN18MeasurementStorage12resetCounterEv+0x60>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d008      	beq.n	8000c12 <_ZN18MeasurementStorage12resetCounterEv+0x60>
	{
		errors += I2C_error;
 8000c00:	89fb      	ldrh	r3, [r7, #14]
 8000c02:	3308      	adds	r3, #8
 8000c04:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	89fa      	ldrh	r2, [r7, #14]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	4798      	blx	r3
	}
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_ZN18MeasurementStorage12setTimestampEy>:

void MeasurementStorage::setTimestamp(uint64_t timestamp_p)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b08c      	sub	sp, #48	@ 0x30
 8000c1e:	af06      	add	r7, sp, #24
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t errors = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef stat;

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, TIMESTAMP_ADDRESS, sizeof(uint16_t), (uint8_t*)&timestamp_p, sizeof(uint64_t), HAL_MAX_DELAY);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6898      	ldr	r0, [r3, #8]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	791b      	ldrb	r3, [r3, #4]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	b299      	uxth	r1, r3
 8000c36:	2305      	movs	r3, #5
 8000c38:	9304      	str	r3, [sp, #16]
 8000c3a:	2364      	movs	r3, #100	@ 0x64
 8000c3c:	9303      	str	r3, [sp, #12]
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	2308      	movs	r3, #8
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	463b      	mov	r3, r7
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f7ff fd37 	bl	80006c2 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8000c54:	4603      	mov	r3, r0
 8000c56:	757b      	strb	r3, [r7, #21]

	if( stat != HAL_OK && errorHandler != NULL)
 8000c58:	7d7b      	ldrb	r3, [r7, #21]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00c      	beq.n	8000c78 <_ZN18MeasurementStorage12setTimestampEy+0x5e>
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d008      	beq.n	8000c78 <_ZN18MeasurementStorage12setTimestampEy+0x5e>
	{
		errors += I2C_error;
 8000c66:	8afb      	ldrh	r3, [r7, #22]
 8000c68:	3308      	adds	r3, #8
 8000c6a:	82fb      	strh	r3, [r7, #22]
		errorHandler(this, errors);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	8afa      	ldrh	r2, [r7, #22]
 8000c72:	4611      	mov	r1, r2
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	4798      	blx	r3
	}
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN18MeasurementStorage10setMaxSizeEt>:

void MeasurementStorage::setMaxSize(uint16_t maxSize_p)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af06      	add	r7, sp, #24
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]
	uint16_t errors = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, MAX_SIZE_ADDRESS, sizeof(uint16_t), (uint8_t*)&maxSize_p, sizeof(uint16_t), HAL_MAX_DELAY);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6898      	ldr	r0, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	791b      	ldrb	r3, [r3, #4]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	9304      	str	r3, [sp, #16]
 8000ca0:	2364      	movs	r3, #100	@ 0x64
 8000ca2:	9303      	str	r3, [sp, #12]
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	2302      	movs	r3, #2
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	1cbb      	adds	r3, r7, #2
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	220a      	movs	r2, #10
 8000cb6:	f7ff fd04 	bl	80006c2 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 8000cbe:	7b7b      	ldrb	r3, [r7, #13]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00c      	beq.n	8000cde <_ZN18MeasurementStorage10setMaxSizeEt+0x5e>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d008      	beq.n	8000cde <_ZN18MeasurementStorage10setMaxSizeEt+0x5e>
	{
		errors += I2C_error;
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	3308      	adds	r3, #8
 8000cd0:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	89fa      	ldrh	r2, [r7, #14]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	4798      	blx	r3
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_ZN18MeasurementStorage11readCounterEv>:

uint16_t MeasurementStorage::readCounter()
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b08a      	sub	sp, #40	@ 0x28
 8000cea:	af06      	add	r7, sp, #24
 8000cec:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t counter = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	817b      	strh	r3, [r7, #10]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6898      	ldr	r0, [r3, #8]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	b299      	uxth	r1, r3
 8000d02:	2305      	movs	r3, #5
 8000d04:	9304      	str	r3, [sp, #16]
 8000d06:	2364      	movs	r3, #100	@ 0x64
 8000d08:	9303      	str	r3, [sp, #12]
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	9302      	str	r3, [sp, #8]
 8000d10:	2302      	movs	r3, #2
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	f107 030a 	add.w	r3, r7, #10
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	f7ff fd0c 	bl	800073a <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8000d22:	4603      	mov	r3, r0
 8000d24:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 8000d26:	7b7b      	ldrb	r3, [r7, #13]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00c      	beq.n	8000d46 <_ZN18MeasurementStorage11readCounterEv+0x60>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d008      	beq.n	8000d46 <_ZN18MeasurementStorage11readCounterEv+0x60>
	{
		errors += I2C_error;
 8000d34:	89fb      	ldrh	r3, [r7, #14]
 8000d36:	3308      	adds	r3, #8
 8000d38:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	89fa      	ldrh	r2, [r7, #14]
 8000d40:	4611      	mov	r1, r2
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	4798      	blx	r3
	}

	return counter;
 8000d46:	897b      	ldrh	r3, [r7, #10]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_ZN18MeasurementStorage8addEntryE9MeasEntry>:

	return maxSize;
}

void MeasurementStorage::addEntry(MeasEntry MeasEntry_p)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b08b      	sub	sp, #44	@ 0x2c
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t EntryBuffer[MeasEntry::len];
	for(uint8_t i = 0; i<MeasEntry::len; i++) { EntryBuffer[i] = 0; }
 8000d5e:	2300      	movs	r3, #0
 8000d60:	77fb      	strb	r3, [r7, #31]
 8000d62:	e008      	b.n	8000d76 <_ZN18MeasurementStorage8addEntryE9MeasEntry+0x26>
 8000d64:	7ffb      	ldrb	r3, [r7, #31]
 8000d66:	3320      	adds	r3, #32
 8000d68:	443b      	add	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000d70:	7ffb      	ldrb	r3, [r7, #31]
 8000d72:	3301      	adds	r3, #1
 8000d74:	77fb      	strb	r3, [r7, #31]
 8000d76:	7ffb      	ldrb	r3, [r7, #31]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d9f3      	bls.n	8000d64 <_ZN18MeasurementStorage8addEntryE9MeasEntry+0x14>

	memcpy((uint8_t*)(EntryBuffer), 									&(MeasEntry_p.measID), 		sizeof(uint8_t));
 8000d7c:	793b      	ldrb	r3, [r7, #4]
 8000d7e:	753b      	strb	r3, [r7, #20]
	memcpy((uint8_t*)(EntryBuffer+sizeof(uint8_t)), 					&(MeasEntry_p.deltaT), 		sizeof(uint16_t));
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	3301      	adds	r3, #1
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)(EntryBuffer+sizeof(uint8_t)+sizeof(uint16_t)), 	&(MeasEntry_p.measData), 	sizeof(uint16_t));
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	3303      	adds	r3, #3
 8000d90:	893a      	ldrh	r2, [r7, #8]
 8000d92:	801a      	strh	r2, [r3, #0]

	uint16_t counter = readCounter();
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff ffa6 	bl	8000ce6 <_ZN18MeasurementStorage11readCounterEv>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	83bb      	strh	r3, [r7, #28]
	uint16_t EntryAddr = pageLen + (counter * MeasEntry::len);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	7b1b      	ldrb	r3, [r3, #12]
 8000da2:	461a      	mov	r2, r3
 8000da4:	8bbb      	ldrh	r3, [r7, #28]
 8000da6:	4619      	mov	r1, r3
 8000da8:	0089      	lsls	r1, r1, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4413      	add	r3, r2
 8000db0:	837b      	strh	r3, [r7, #26]

	writeMultiPage(I2Ccontroller, EEPROMAddress, EntryAddr, EntryBuffer, MeasEntry::len, pageLen);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6898      	ldr	r0, [r3, #8]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	7919      	ldrb	r1, [r3, #4]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	7b1b      	ldrb	r3, [r3, #12]
 8000dbe:	f107 0414 	add.w	r4, r7, #20
 8000dc2:	8b7a      	ldrh	r2, [r7, #26]
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	4623      	mov	r3, r4
 8000dcc:	f7ff fcf8 	bl	80007c0 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth>

	incrementCounter();
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff fe73 	bl	8000abc <_ZN18MeasurementStorage16incrementCounterEv>
}
 8000dd6:	bf00      	nop
 8000dd8:	3724      	adds	r7, #36	@ 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd90      	pop	{r4, r7, pc}

08000dde <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry>:

bool MeasurementStorage::getEntryAt(uint16_t location_p, MeasEntry* entryBuffer_p)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b08e      	sub	sp, #56	@ 0x38
 8000de2:	af06      	add	r7, sp, #24
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	460b      	mov	r3, r1
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	817b      	strh	r3, [r7, #10]
	uint16_t errors = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	83fb      	strh	r3, [r7, #30]
	uint16_t count = readCounter();
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f7ff ff78 	bl	8000ce6 <_ZN18MeasurementStorage11readCounterEv>
 8000df6:	4603      	mov	r3, r0
 8000df8:	83bb      	strh	r3, [r7, #28]

	//Want to read outside of boundaries. -1, as counter of 0 means 0 stored, the "writer head" is set to 0, where as location starts from 0
	if(count == 0)
 8000dfa:	8bbb      	ldrh	r3, [r7, #28]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10e      	bne.n	8000e1e <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x40>
	{
		if( errorHandler != NULL)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d01d      	beq.n	8000e44 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x66>
		{
			errors += Empty_MS_error;
 8000e08:	8bfb      	ldrh	r3, [r7, #30]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	83fb      	strh	r3, [r7, #30]
			errorHandler(this, errors);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	8bfa      	ldrh	r2, [r7, #30]
 8000e14:	4611      	mov	r1, r2
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	4798      	blx	r3
			return false;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e046      	b.n	8000eac <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0xce>
		}
	}

	else if(location_p > count-1)
 8000e1e:	8bba      	ldrh	r2, [r7, #28]
 8000e20:	897b      	ldrh	r3, [r7, #10]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d80e      	bhi.n	8000e44 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x66>
	{
		if( errorHandler != NULL)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00a      	beq.n	8000e44 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x66>
		{
			errors += Overflow_read_error;
 8000e2e:	8bfb      	ldrh	r3, [r7, #30]
 8000e30:	3302      	adds	r3, #2
 8000e32:	83fb      	strh	r3, [r7, #30]
			errorHandler(this, errors);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	8bfa      	ldrh	r2, [r7, #30]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	4798      	blx	r3
			return false;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e033      	b.n	8000eac <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0xce>
		}
	}

	uint16_t EntryAddr = pageLen + (location_p * MeasEntry::len);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	7b1b      	ldrb	r3, [r3, #12]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	897b      	ldrh	r3, [r7, #10]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	0089      	lsls	r1, r1, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	837b      	strh	r3, [r7, #26]

	uint8_t readBuffer[MeasEntry::len];

	readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, EntryAddr, sizeof(uint16_t), readBuffer, MeasEntry::len, HAL_MAX_DELAY);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6898      	ldr	r0, [r3, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	b299      	uxth	r1, r3
 8000e64:	8b7a      	ldrh	r2, [r7, #26]
 8000e66:	2305      	movs	r3, #5
 8000e68:	9304      	str	r3, [sp, #16]
 8000e6a:	2364      	movs	r3, #100	@ 0x64
 8000e6c:	9303      	str	r3, [sp, #12]
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	2305      	movs	r3, #5
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f7ff fc5b 	bl	800073a <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>

	memcpy(&entryBuffer_p->measID, 		(uint8_t*)(readBuffer), 									sizeof(uint8_t));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7d3a      	ldrb	r2, [r7, #20]
 8000e88:	701a      	strb	r2, [r3, #0]
	memcpy(&entryBuffer_p->deltaT, 		(uint8_t*)(readBuffer+sizeof(uint8_t)),						sizeof(uint16_t));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	1c9a      	adds	r2, r3, #2
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	3301      	adds	r3, #1
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	8013      	strh	r3, [r2, #0]
	memcpy(&entryBuffer_p->measData,	(uint8_t*)(readBuffer+sizeof(uint8_t)+sizeof(uint16_t)),	sizeof(uint16_t));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	1d1a      	adds	r2, r3, #4
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	3303      	adds	r3, #3
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	8013      	strh	r3, [r2, #0]

	return true;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_Z8i2cScannP17I2C_HandleTypeDefPh>:
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void i2cScann(I2C_HandleTypeDef *hi2c_p, uint8_t* devicesBuffer_p)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	for(uint8_t i = 0; i<128; i++){ devicesBuffer_p[i] = 0; }
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
 8000ec2:	e007      	b.n	8000ed4 <_Z8i2cScannP17I2C_HandleTypeDefPh+0x20>
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	daf3      	bge.n	8000ec4 <_Z8i2cScannP17I2C_HandleTypeDefPh+0x10>

	uint8_t j = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<128; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	737b      	strb	r3, [r7, #13]
 8000ee4:	e018      	b.n	8000f18 <_Z8i2cScannP17I2C_HandleTypeDefPh+0x64>
	{
		status = HAL_I2C_IsDeviceReady(hi2c_p, i<<1, 2, 100);
 8000ee6:	7b7b      	ldrb	r3, [r7, #13]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	b299      	uxth	r1, r3
 8000eee:	2364      	movs	r3, #100	@ 0x64
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f001 fb86 	bl	8002604 <HAL_I2C_IsDeviceReady>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	733b      	strb	r3, [r7, #12]
		if(status == HAL_OK)
 8000efc:	7b3b      	ldrb	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d107      	bne.n	8000f12 <_Z8i2cScannP17I2C_HandleTypeDefPh+0x5e>
		{
			devicesBuffer_p[j] = i;
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	7b7a      	ldrb	r2, [r7, #13]
 8000f0a:	701a      	strb	r2, [r3, #0]
			j++;
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<128; i++)
 8000f12:	7b7b      	ldrb	r3, [r7, #13]
 8000f14:	3301      	adds	r3, #1
 8000f16:	737b      	strb	r3, [r7, #13]
 8000f18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dae2      	bge.n	8000ee6 <_Z8i2cScannP17I2C_HandleTypeDefPh+0x32>
		}
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	0000      	movs	r0, r0
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 8000f36:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f000 fbca 	bl	80016d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f880 	bl	8001040 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f000 f994 	bl	800126c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000f44:	f000 f964 	bl	8001210 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000f48:	f000 f8f2 	bl	8001130 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8000f4c:	f000 f924 	bl	8001198 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */

  uint8_t devices[128];
  i2cScann(&hi2c1, devices);
 8000f50:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8000f54:	4619      	mov	r1, r3
 8000f56:	4836      	ldr	r0, [pc, #216]	@ (8001030 <main+0x100>)
 8000f58:	f7ff ffac 	bl	8000eb4 <_Z8i2cScannP17I2C_HandleTypeDefPh>

  myPT100.init();
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4835      	ldr	r0, [pc, #212]	@ (8001034 <main+0x104>)
 8000f60:	f7ff fb14 	bl	800058c <_ZN8MAX318654initE24MAX31865_FilterSetting_t>

  deleteRegion(&hi2c1, 80, 0, 256, 128);
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2150      	movs	r1, #80	@ 0x50
 8000f70:	482f      	ldr	r0, [pc, #188]	@ (8001030 <main+0x100>)
 8000f72:	f7ff fca0 	bl	80008b6 <_Z12deleteRegionP17I2C_HandleTypeDefhtth>

  uint8_t firstTwoPage0[256];
  uint8_t firstTwoPage1[256];
  uint8_t EEPROM_ADDRESS = 80;
 8000f76:	2350      	movs	r3, #80	@ 0x50
 8000f78:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
  uint16_t memAddress = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8a7 3294 	strh.w	r3, [r7, #660]	@ 0x294

  readFromEEPROM(&hi2c1, EEPROM_ADDRESS<<1, memAddress, sizeof(memAddress), firstTwoPage0, sizeof(firstTwoPage0), HAL_MAX_DELAY);
 8000f82:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f8b7 2294 	ldrh.w	r2, [r7, #660]	@ 0x294
 8000f90:	2305      	movs	r3, #5
 8000f92:	9304      	str	r3, [sp, #16]
 8000f94:	2364      	movs	r3, #100	@ 0x64
 8000f96:	9303      	str	r3, [sp, #12]
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2302      	movs	r3, #2
 8000fac:	4820      	ldr	r0, [pc, #128]	@ (8001030 <main+0x100>)
 8000fae:	f7ff fbc4 	bl	800073a <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>

  myMS.init(12345678987654321012);
 8000fb2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001028 <main+0xf8>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	481f      	ldr	r0, [pc, #124]	@ (8001038 <main+0x108>)
 8000fba:	f7ff fd57 	bl	8000a6c <_ZN18MeasurementStorage4initEy>

  MeasEntry newEntry =
 8000fbe:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000fc2:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800103c <main+0x10c>)
 8000fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fcc:	6018      	str	r0, [r3, #0]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	8019      	strh	r1, [r3, #0]
		  .measID = 3,
		  .deltaT = 12345,
		  .measData = 7891
  };

  myMS.addEntry(newEntry);
 8000fd2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000fd6:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000fda:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000fde:	4816      	ldr	r0, [pc, #88]	@ (8001038 <main+0x108>)
 8000fe0:	f7ff feb6 	bl	8000d50 <_ZN18MeasurementStorage8addEntryE9MeasEntry>
  MeasEntry fetchedEntry;
  myMS.getEntryAt(0, &fetchedEntry);
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4813      	ldr	r0, [pc, #76]	@ (8001038 <main+0x108>)
 8000fec:	f7ff fef7 	bl	8000dde <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry>

  readFromEEPROM(&hi2c1, EEPROM_ADDRESS<<1, memAddress, sizeof(memAddress), firstTwoPage1, sizeof(firstTwoPage1), HAL_MAX_DELAY);
 8000ff0:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	b299      	uxth	r1, r3
 8000ffa:	f8b7 2294 	ldrh.w	r2, [r7, #660]	@ 0x294
 8000ffe:	2305      	movs	r3, #5
 8001000:	9304      	str	r3, [sp, #16]
 8001002:	2364      	movs	r3, #100	@ 0x64
 8001004:	9303      	str	r3, [sp, #12]
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2302      	movs	r3, #2
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <main+0x100>)
 800101c:	f7ff fb8d 	bl	800073a <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <main+0xf0>
 8001024:	f3af 8000 	nop.w
 8001028:	0a23d374 	.word	0x0a23d374
 800102c:	ab54a9a1 	.word	0xab54a9a1
 8001030:	20000028 	.word	0x20000028
 8001034:	2000012c 	.word	0x2000012c
 8001038:	20000148 	.word	0x20000148
 800103c:	08004d34 	.word	0x08004d34

08001040 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	@ 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2234      	movs	r2, #52	@ 0x34
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fe38 	bl	8004cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <_Z18SystemClock_Configv+0xe8>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	4a2e      	ldr	r2, [pc, #184]	@ (8001128 <_Z18SystemClock_Configv+0xe8>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	@ 0x40
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <_Z18SystemClock_Configv+0xe8>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001080:	2300      	movs	r3, #0
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4b29      	ldr	r3, [pc, #164]	@ (800112c <_Z18SystemClock_Configv+0xec>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800108c:	4a27      	ldr	r2, [pc, #156]	@ (800112c <_Z18SystemClock_Configv+0xec>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b25      	ldr	r3, [pc, #148]	@ (800112c <_Z18SystemClock_Configv+0xec>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010b4:	2310      	movs	r3, #16
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010be:	2304      	movs	r3, #4
 80010c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fac4 	bl	800365c <HAL_RCC_OscConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf14      	ite	ne
 80010da:	2301      	movne	r3, #1
 80010dc:	2300      	moveq	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 80010e4:	f000 f93e 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2302      	movs	r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2102      	movs	r1, #2
 8001104:	4618      	mov	r0, r3
 8001106:	f001 ff5f 	bl	8002fc8 <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	bf14      	ite	ne
 8001110:	2301      	movne	r3, #1
 8001112:	2300      	moveq	r3, #0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800111a:	f000 f923 	bl	8001364 <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	@ 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 8001136:	4a16      	ldr	r2, [pc, #88]	@ (8001190 <_ZL12MX_I2C1_Initv+0x60>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 800113c:	4a15      	ldr	r2, [pc, #84]	@ (8001194 <_ZL12MX_I2C1_Initv+0x64>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 800114e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116c:	4807      	ldr	r0, [pc, #28]	@ (800118c <_ZL12MX_I2C1_Initv+0x5c>)
 800116e:	f000 fdd9 	bl	8001d24 <HAL_I2C_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf14      	ite	ne
 8001178:	2301      	movne	r3, #1
 800117a:	2300      	moveq	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001182:	f000 f8ef 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000028 	.word	0x20000028
 8001190:	40005400 	.word	0x40005400
 8001194:	000186a0 	.word	0x000186a0

08001198 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 800119e:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <_ZL12MX_SPI1_Initv+0x74>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b6:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011be:	2201      	movs	r2, #1
 80011c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011cc:	2228      	movs	r2, #40	@ 0x28
 80011ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011e4:	220a      	movs	r2, #10
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e8:	4807      	ldr	r0, [pc, #28]	@ (8001208 <_ZL12MX_SPI1_Initv+0x70>)
 80011ea:	f002 fcd5 	bl	8003b98 <HAL_SPI_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf14      	ite	ne
 80011f4:	2301      	movne	r3, #1
 80011f6:	2300      	moveq	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80011fe:	f000 f8b1 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000007c 	.word	0x2000007c
 800120c:	40013000 	.word	0x40013000

08001210 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001216:	4a14      	ldr	r2, [pc, #80]	@ (8001268 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x54>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x54>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0d      	ldr	r3, [pc, #52]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x54>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001246:	4807      	ldr	r0, [pc, #28]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001248:	f003 fa78 	bl	800473c <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf14      	ite	ne
 8001252:	2301      	movne	r3, #1
 8001254:	2300      	moveq	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800125c:	f000 f882 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200000d4 	.word	0x200000d4
 8001268:	40004400 	.word	0x40004400

0800126c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b34      	ldr	r3, [pc, #208]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a33      	ldr	r2, [pc, #204]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a25      	ldr	r2, [pc, #148]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <_ZL12MX_GPIO_Initv+0xec>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_SENS_CS_GPIO_Port, TEMP_SENS_CS_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2110      	movs	r1, #16
 80012f6:	4819      	ldr	r0, [pc, #100]	@ (800135c <_ZL12MX_GPIO_Initv+0xf0>)
 80012f8:	f000 fcfa 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001302:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4813      	ldr	r0, [pc, #76]	@ (8001360 <_ZL12MX_GPIO_Initv+0xf4>)
 8001314:	f000 fb58 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_SENS_CS_Pin */
  GPIO_InitStruct.Pin = TEMP_SENS_CS_Pin;
 8001318:	2310      	movs	r3, #16
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEMP_SENS_CS_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	480b      	ldr	r0, [pc, #44]	@ (800135c <_ZL12MX_GPIO_Initv+0xf0>)
 8001330:	f000 fb4a 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_RDY_Pin */
  GPIO_InitStruct.Pin = TEMP_RDY_Pin;
 8001334:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_RDY_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <_ZL12MX_GPIO_Initv+0xf0>)
 800134a:	f000 fb3d 	bl	80019c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134e:	bf00      	nop
 8001350:	3728      	adds	r7, #40	@ 0x28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020800 	.word	0x40020800

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <Error_Handler+0x8>

08001370 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d120      	bne.n	80013c2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001386:	4293      	cmp	r3, r2
 8001388:	d11b      	bne.n	80013c2 <_Z41__static_initialization_and_destruction_0ii+0x52>
GPIO TEMP_SENS_CS(TEMP_SENS_CS_GPIO_Port, TEMP_SENS_CS_Pin);
 800138a:	2210      	movs	r2, #16
 800138c:	490f      	ldr	r1, [pc, #60]	@ (80013cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800138e:	4810      	ldr	r0, [pc, #64]	@ (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001390:	f7ff f8b2 	bl	80004f8 <_ZN4GPIOC1EP12GPIO_TypeDeft>
GPIO TEMP_RDY(TEMP_RDY_GPIO_Port, TEMP_RDY_Pin);
 8001394:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001398:	490c      	ldr	r1, [pc, #48]	@ (80013cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800139a:	480e      	ldr	r0, [pc, #56]	@ (80013d4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800139c:	f7ff f8ac 	bl	80004f8 <_ZN4GPIOC1EP12GPIO_TypeDeft>
MAX31865 myPT100(&hspi1, &TEMP_SENS_CS, &TEMP_RDY);
 80013a0:	2300      	movs	r3, #0
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80013a8:	490b      	ldr	r1, [pc, #44]	@ (80013d8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80013aa:	480c      	ldr	r0, [pc, #48]	@ (80013dc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80013ac:	f7ff f8ca 	bl	8000544 <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t>
MeasurementStorage myMS(&hi2c1, 80);
 80013b0:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	2250      	movs	r2, #80	@ 0x50
 80013ba:	4909      	ldr	r1, [pc, #36]	@ (80013e0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80013be:	f7ff fb31 	bl	8000a24 <_ZN18MeasurementStorageC1EP17I2C_HandleTypeDefhht>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020000 	.word	0x40020000
 80013d0:	2000011c 	.word	0x2000011c
 80013d4:	20000124 	.word	0x20000124
 80013d8:	2000007c 	.word	0x2000007c
 80013dc:	2000012c 	.word	0x2000012c
 80013e0:	20000028 	.word	0x20000028
 80013e4:	20000148 	.word	0x20000148

080013e8 <_GLOBAL__sub_I_hi2c1>:
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ffbd 	bl	8001370 <_Z41__static_initialization_and_destruction_0ii>
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	4a0f      	ldr	r2, [pc, #60]	@ (8001444 <HAL_MspInit+0x4c>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800140c:	6453      	str	r3, [r2, #68]	@ 0x44
 800140e:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <HAL_MspInit+0x4c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <HAL_MspInit+0x4c>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	@ 0x40
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_MspInit+0x4c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001436:	2007      	movs	r0, #7
 8001438:	f000 fa92 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800

08001448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	@ 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	@ (80014cc <HAL_I2C_MspInit+0x84>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12c      	bne.n	80014c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001486:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148c:	2312      	movs	r3, #18
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001498:	2304      	movs	r3, #4
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <HAL_I2C_MspInit+0x8c>)
 80014a4:	f000 fa90 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 80014b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_I2C_MspInit+0x88>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	@ 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40005400 	.word	0x40005400
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020400 	.word	0x40020400

080014d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a19      	ldr	r2, [pc, #100]	@ (800155c <HAL_SPI_MspInit+0x84>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d12b      	bne.n	8001552 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <HAL_SPI_MspInit+0x88>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <HAL_SPI_MspInit+0x88>)
 8001504:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001508:	6453      	str	r3, [r2, #68]	@ 0x44
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_SPI_MspInit+0x88>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_SPI_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a10      	ldr	r2, [pc, #64]	@ (8001560 <HAL_SPI_MspInit+0x88>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <HAL_SPI_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001532:	23e0      	movs	r3, #224	@ 0xe0
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001542:	2305      	movs	r3, #5
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <HAL_SPI_MspInit+0x8c>)
 800154e:	f000 fa3b 	bl	80019c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	@ 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40013000 	.word	0x40013000
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a19      	ldr	r2, [pc, #100]	@ (80015ec <HAL_UART_MspInit+0x84>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d12b      	bne.n	80015e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 8001594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_UART_MspInit+0x88>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c2:	230c      	movs	r3, #12
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d2:	2307      	movs	r3, #7
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <HAL_UART_MspInit+0x8c>)
 80015de:	f000 f9f3 	bl	80019c8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <NMI_Handler+0x4>

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <MemManage_Handler+0x4>

08001610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f000 f891 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <SystemInit+0x20>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001662:	4a05      	ldr	r2, [pc, #20]	@ (8001678 <SystemInit+0x20>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001680:	f7ff ffea 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	@ (80016bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016aa:	f003 fb13 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff fc3f 	bl	8000f30 <main>
  bx  lr    
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016c0:	08004d68 	.word	0x08004d68
  ldr r2, =_sbss
 80016c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016c8:	2000015c 	.word	0x2000015c

080016cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC_IRQHandler>
	...

080016d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <HAL_Init+0x40>)
 80016da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_Init+0x40>)
 80016e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <HAL_Init+0x40>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 f931 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f808 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fe78 	bl	80013f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f93b 	bl	80019ae <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f000 f911 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	@ (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000000 	.word	0x20000000
 800176c:	20000008 	.word	0x20000008
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008
 8001798:	20000158 	.word	0x20000158

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000158 	.word	0x20000158

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	@ (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	@ 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	@ 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f7ff ff8e 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	@ (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff47 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff5c 	bl	8001844 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff8e 	bl	80018b4 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5d 	bl	8001860 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffb0 	bl	800191c <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e165      	b.n	8001cb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e4:	2201      	movs	r2, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8154 	bne.w	8001caa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d017      	beq.n	8001ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80ae 	beq.w	8001caa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc8 <HAL_GPIO_Init+0x300>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a5c      	ldr	r2, [pc, #368]	@ (8001cc8 <HAL_GPIO_Init+0x300>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc8 <HAL_GPIO_Init+0x300>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a58      	ldr	r2, [pc, #352]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd0 <HAL_GPIO_Init+0x308>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d025      	beq.n	8001be2 <HAL_GPIO_Init+0x21a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4e      	ldr	r2, [pc, #312]	@ (8001cd4 <HAL_GPIO_Init+0x30c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01f      	beq.n	8001bde <HAL_GPIO_Init+0x216>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4d      	ldr	r2, [pc, #308]	@ (8001cd8 <HAL_GPIO_Init+0x310>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x212>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cdc <HAL_GPIO_Init+0x314>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x20e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ce0 <HAL_GPIO_Init+0x318>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x20a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ce4 <HAL_GPIO_Init+0x31c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x206>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a49      	ldr	r2, [pc, #292]	@ (8001ce8 <HAL_GPIO_Init+0x320>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x202>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e00c      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e00a      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x21c>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	@ (8001ccc <HAL_GPIO_Init+0x304>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b3a      	ldr	r3, [pc, #232]	@ (8001cec <HAL_GPIO_Init+0x324>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a31      	ldr	r2, [pc, #196]	@ (8001cec <HAL_GPIO_Init+0x324>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <HAL_GPIO_Init+0x324>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a26      	ldr	r2, [pc, #152]	@ (8001cec <HAL_GPIO_Init+0x324>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c56:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <HAL_GPIO_Init+0x324>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cec <HAL_GPIO_Init+0x324>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <HAL_GPIO_Init+0x324>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca4:	4a11      	ldr	r2, [pc, #68]	@ (8001cec <HAL_GPIO_Init+0x324>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f ae96 	bls.w	80019e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40021400 	.word	0x40021400
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e12b      	b.n	8001f8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fb7c 	bl	8001448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2224      	movs	r2, #36	@ 0x24
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d88:	f001 fa10 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8001d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4a81      	ldr	r2, [pc, #516]	@ (8001f98 <HAL_I2C_Init+0x274>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d807      	bhi.n	8001da8 <HAL_I2C_Init+0x84>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a80      	ldr	r2, [pc, #512]	@ (8001f9c <HAL_I2C_Init+0x278>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	bf94      	ite	ls
 8001da0:	2301      	movls	r3, #1
 8001da2:	2300      	movhi	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e006      	b.n	8001db6 <HAL_I2C_Init+0x92>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a7d      	ldr	r2, [pc, #500]	@ (8001fa0 <HAL_I2C_Init+0x27c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	bf94      	ite	ls
 8001db0:	2301      	movls	r3, #1
 8001db2:	2300      	movhi	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0e7      	b.n	8001f8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4a78      	ldr	r2, [pc, #480]	@ (8001fa4 <HAL_I2C_Init+0x280>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0c9b      	lsrs	r3, r3, #18
 8001dc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a6a      	ldr	r2, [pc, #424]	@ (8001f98 <HAL_I2C_Init+0x274>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d802      	bhi.n	8001df8 <HAL_I2C_Init+0xd4>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3301      	adds	r3, #1
 8001df6:	e009      	b.n	8001e0c <HAL_I2C_Init+0xe8>
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	4a69      	ldr	r2, [pc, #420]	@ (8001fa8 <HAL_I2C_Init+0x284>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	495c      	ldr	r1, [pc, #368]	@ (8001f98 <HAL_I2C_Init+0x274>)
 8001e28:	428b      	cmp	r3, r1
 8001e2a:	d819      	bhi.n	8001e60 <HAL_I2C_Init+0x13c>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1e59      	subs	r1, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3a:	1c59      	adds	r1, r3, #1
 8001e3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e40:	400b      	ands	r3, r1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <HAL_I2C_Init+0x138>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1e59      	subs	r1, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5a:	e051      	b.n	8001f00 <HAL_I2C_Init+0x1dc>
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	e04f      	b.n	8001f00 <HAL_I2C_Init+0x1dc>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <HAL_I2C_Init+0x168>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e58      	subs	r0, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	440b      	add	r3, r1
 8001e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	e012      	b.n	8001eb2 <HAL_I2C_Init+0x18e>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e58      	subs	r0, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	0099      	lsls	r1, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_Init+0x196>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e022      	b.n	8001f00 <HAL_I2C_Init+0x1dc>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_I2C_Init+0x1bc>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1e58      	subs	r0, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	440b      	add	r3, r1
 8001ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ede:	e00f      	b.n	8001f00 <HAL_I2C_Init+0x1dc>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e58      	subs	r0, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	0099      	lsls	r1, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	6809      	ldr	r1, [r1, #0]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6911      	ldr	r1, [r2, #16]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68d2      	ldr	r2, [r2, #12]
 8001f3a:	4311      	orrs	r1, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	000186a0 	.word	0x000186a0
 8001f9c:	001e847f 	.word	0x001e847f
 8001fa0:	003d08ff 	.word	0x003d08ff
 8001fa4:	431bde83 	.word	0x431bde83
 8001fa8:	10624dd3 	.word	0x10624dd3

08001fac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	817b      	strh	r3, [r7, #10]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	813b      	strh	r3, [r7, #8]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fc6:	f7ff fbe9 	bl	800179c <HAL_GetTick>
 8001fca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	f040 80d9 	bne.w	800218c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2319      	movs	r3, #25
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	496d      	ldr	r1, [pc, #436]	@ (8002198 <HAL_I2C_Mem_Write+0x1ec>)
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fdb9 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0cc      	b.n	800218e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_I2C_Mem_Write+0x56>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e0c5      	b.n	800218e <HAL_I2C_Mem_Write+0x1e2>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d007      	beq.n	8002028 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002036:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2221      	movs	r2, #33	@ 0x21
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2240      	movs	r2, #64	@ 0x40
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a3a      	ldr	r2, [r7, #32]
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002058:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a4d      	ldr	r2, [pc, #308]	@ (800219c <HAL_I2C_Mem_Write+0x1f0>)
 8002068:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800206a:	88f8      	ldrh	r0, [r7, #6]
 800206c:	893a      	ldrh	r2, [r7, #8]
 800206e:	8979      	ldrh	r1, [r7, #10]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	4603      	mov	r3, r0
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fbf0 	bl	8002860 <I2C_RequestMemoryWrite>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d052      	beq.n	800212c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e081      	b.n	800218e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fe7e 	bl	8002d90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d107      	bne.n	80020b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06b      	b.n	800218e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d11b      	bne.n	800212c <HAL_I2C_Mem_Write+0x180>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d017      	beq.n	800212c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1aa      	bne.n	800208a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fe71 	bl	8002e20 <I2C_WaitOnBTFFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	2b04      	cmp	r3, #4
 800214a:	d107      	bne.n	800215c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800215a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e016      	b.n	800218e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	00100002 	.word	0x00100002
 800219c:	ffff0000 	.word	0xffff0000

080021a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	@ 0x30
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	817b      	strh	r3, [r7, #10]
 80021b2:	460b      	mov	r3, r1
 80021b4:	813b      	strh	r3, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021ba:	f7ff faef 	bl	800179c <HAL_GetTick>
 80021be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	f040 8214 	bne.w	80025f6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2319      	movs	r3, #25
 80021d4:	2201      	movs	r2, #1
 80021d6:	497b      	ldr	r1, [pc, #492]	@ (80023c4 <HAL_I2C_Mem_Read+0x224>)
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fcbf 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
 80021e6:	e207      	b.n	80025f8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_I2C_Mem_Read+0x56>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e200      	b.n	80025f8 <HAL_I2C_Mem_Read+0x458>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d007      	beq.n	800221c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800222a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2222      	movs	r2, #34	@ 0x22
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2240      	movs	r2, #64	@ 0x40
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800224c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a5b      	ldr	r2, [pc, #364]	@ (80023c8 <HAL_I2C_Mem_Read+0x228>)
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800225e:	88f8      	ldrh	r0, [r7, #6]
 8002260:	893a      	ldrh	r2, [r7, #8]
 8002262:	8979      	ldrh	r1, [r7, #10]
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	4603      	mov	r3, r0
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fb8c 	bl	800298c <I2C_RequestMemoryRead>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1bc      	b.n	80025f8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d113      	bne.n	80022ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e190      	b.n	80025d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d11b      	bne.n	80022ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e170      	b.n	80025d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d11b      	bne.n	800232e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002304:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	e150      	b.n	80025d0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002344:	e144      	b.n	80025d0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234a:	2b03      	cmp	r3, #3
 800234c:	f200 80f1 	bhi.w	8002532 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002354:	2b01      	cmp	r3, #1
 8002356:	d123      	bne.n	80023a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800235a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fda7 	bl	8002eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e145      	b.n	80025f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800239e:	e117      	b.n	80025d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d14e      	bne.n	8002446 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ae:	2200      	movs	r2, #0
 80023b0:	4906      	ldr	r1, [pc, #24]	@ (80023cc <HAL_I2C_Mem_Read+0x22c>)
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fbd2 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e11a      	b.n	80025f8 <HAL_I2C_Mem_Read+0x458>
 80023c2:	bf00      	nop
 80023c4:	00100002 	.word	0x00100002
 80023c8:	ffff0000 	.word	0xffff0000
 80023cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002444:	e0c4      	b.n	80025d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244c:	2200      	movs	r2, #0
 800244e:	496c      	ldr	r1, [pc, #432]	@ (8002600 <HAL_I2C_Mem_Read+0x460>)
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fb83 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0cb      	b.n	80025f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800246e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a8:	2200      	movs	r2, #0
 80024aa:	4955      	ldr	r1, [pc, #340]	@ (8002600 <HAL_I2C_Mem_Read+0x460>)
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fb55 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e09d      	b.n	80025f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002530:	e04e      	b.n	80025d0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002534:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fcba 	bl	8002eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e058      	b.n	80025f8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b04      	cmp	r3, #4
 8002584:	d124      	bne.n	80025d0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258a:	2b03      	cmp	r3, #3
 800258c:	d107      	bne.n	800259e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f47f aeb6 	bne.w	8002346 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3728      	adds	r7, #40	@ 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	00010004 	.word	0x00010004

08002604 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	@ 0x28
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	460b      	mov	r3, r1
 8002612:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff f8c2 	bl	800179c <HAL_GetTick>
 8002618:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	f040 8111 	bne.w	800284e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2319      	movs	r3, #25
 8002632:	2201      	movs	r2, #1
 8002634:	4988      	ldr	r1, [pc, #544]	@ (8002858 <HAL_I2C_IsDeviceReady+0x254>)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fa90 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
 8002644:	e104      	b.n	8002850 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_I2C_IsDeviceReady+0x50>
 8002650:	2302      	movs	r3, #2
 8002652:	e0fd      	b.n	8002850 <HAL_I2C_IsDeviceReady+0x24c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b01      	cmp	r3, #1
 8002668:	d007      	beq.n	800267a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2224      	movs	r2, #36	@ 0x24
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4a70      	ldr	r2, [pc, #448]	@ (800285c <HAL_I2C_IsDeviceReady+0x258>)
 800269c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fa4e 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d4:	d103      	bne.n	80026de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e0b6      	b.n	8002850 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026f2:	f7ff f853 	bl	800179c <HAL_GetTick>
 80026f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b02      	cmp	r3, #2
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002726:	e025      	b.n	8002774 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002728:	f7ff f838 	bl	800179c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d302      	bcc.n	800273e <HAL_I2C_IsDeviceReady+0x13a>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d103      	bne.n	8002746 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	22a0      	movs	r2, #160	@ 0xa0
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2ba0      	cmp	r3, #160	@ 0xa0
 800277e:	d005      	beq.n	800278c <HAL_I2C_IsDeviceReady+0x188>
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <HAL_I2C_IsDeviceReady+0x188>
 8002786:	7dbb      	ldrb	r3, [r7, #22]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0cd      	beq.n	8002728 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d129      	bne.n	80027f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2319      	movs	r3, #25
 80027ce:	2201      	movs	r2, #1
 80027d0:	4921      	ldr	r1, [pc, #132]	@ (8002858 <HAL_I2C_IsDeviceReady+0x254>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f9c2 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e036      	b.n	8002850 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e02c      	b.n	8002850 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002804:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800280e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2319      	movs	r3, #25
 8002816:	2201      	movs	r2, #1
 8002818:	490f      	ldr	r1, [pc, #60]	@ (8002858 <HAL_I2C_IsDeviceReady+0x254>)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f99e 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e012      	b.n	8002850 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	3301      	adds	r3, #1
 800282e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	f4ff af32 	bcc.w	800269e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	00100002 	.word	0x00100002
 800285c:	ffff0000 	.word	0xffff0000

08002860 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	4608      	mov	r0, r1
 800286a:	4611      	mov	r1, r2
 800286c:	461a      	mov	r2, r3
 800286e:	4603      	mov	r3, r0
 8002870:	817b      	strh	r3, [r7, #10]
 8002872:	460b      	mov	r3, r1
 8002874:	813b      	strh	r3, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002888:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	2200      	movs	r2, #0
 8002892:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f960 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b0:	d103      	bne.n	80028ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e05f      	b.n	800297e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	6a3a      	ldr	r2, [r7, #32]
 80028d2:	492d      	ldr	r1, [pc, #180]	@ (8002988 <I2C_RequestMemoryWrite+0x128>)
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f9bb 	bl	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e04c      	b.n	800297e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fc:	6a39      	ldr	r1, [r7, #32]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa46 	bl	8002d90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	2b04      	cmp	r3, #4
 8002910:	d107      	bne.n	8002922 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002920:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e02b      	b.n	800297e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800292c:	893b      	ldrh	r3, [r7, #8]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	611a      	str	r2, [r3, #16]
 8002936:	e021      	b.n	800297c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	b29b      	uxth	r3, r3
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002948:	6a39      	ldr	r1, [r7, #32]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fa20 	bl	8002d90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	2b04      	cmp	r3, #4
 800295c:	d107      	bne.n	800296e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e005      	b.n	800297e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	00010002 	.word	0x00010002

0800298c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	4608      	mov	r0, r1
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	4603      	mov	r3, r0
 800299c:	817b      	strh	r3, [r7, #10]
 800299e:	460b      	mov	r3, r1
 80029a0:	813b      	strh	r3, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f8c2 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ec:	d103      	bne.n	80029f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0aa      	b.n	8002b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	4952      	ldr	r1, [pc, #328]	@ (8002b58 <I2C_RequestMemoryRead+0x1cc>)
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f91d 	bl	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e097      	b.n	8002b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a38:	6a39      	ldr	r1, [r7, #32]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f9a8 	bl	8002d90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00d      	beq.n	8002a62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d107      	bne.n	8002a5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e076      	b.n	8002b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d105      	bne.n	8002a74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a68:	893b      	ldrh	r3, [r7, #8]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	611a      	str	r2, [r3, #16]
 8002a72:	e021      	b.n	8002ab8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a74:	893b      	ldrh	r3, [r7, #8]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	6a39      	ldr	r1, [r7, #32]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f982 	bl	8002d90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d107      	bne.n	8002aaa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e050      	b.n	8002b50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aae:	893b      	ldrh	r3, [r7, #8]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aba:	6a39      	ldr	r1, [r7, #32]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f967 	bl	8002d90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d107      	bne.n	8002ae0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ade:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e035      	b.n	8002b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f82b 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b1a:	d103      	bne.n	8002b24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e013      	b.n	8002b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b28:	897b      	ldrh	r3, [r7, #10]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	6a3a      	ldr	r2, [r7, #32]
 8002b3c:	4906      	ldr	r1, [pc, #24]	@ (8002b58 <I2C_RequestMemoryRead+0x1cc>)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f886 	bl	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	00010002 	.word	0x00010002

08002b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b6c:	e048      	b.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d044      	beq.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b76:	f7fe fe11 	bl	800179c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d139      	bne.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10d      	bne.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2301      	moveq	r3, #1
 8002baa:	2300      	movne	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	e00c      	b.n	8002bcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d116      	bne.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e023      	b.n	8002c48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	0c1b      	lsrs	r3, r3, #16
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10d      	bne.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	43da      	mvns	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	e00c      	b.n	8002c40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d093      	beq.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c5e:	e071      	b.n	8002d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6e:	d123      	bne.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e067      	b.n	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d041      	beq.n	8002d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc0:	f7fe fd6c 	bl	800179c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d302      	bcc.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d136      	bne.n	8002d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10c      	bne.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e00b      	b.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	43da      	mvns	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4013      	ands	r3, r2
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e021      	b.n	8002d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d10c      	bne.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	43da      	mvns	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e00b      	b.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4013      	ands	r3, r2
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f47f af6d 	bne.w	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d9c:	e034      	b.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f8e3 	bl	8002f6a <I2C_IsAcknowledgeFailed>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e034      	b.n	8002e18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d028      	beq.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db6:	f7fe fcf1 	bl	800179c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d11d      	bne.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd6:	2b80      	cmp	r3, #128	@ 0x80
 8002dd8:	d016      	beq.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e007      	b.n	8002e18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e12:	2b80      	cmp	r3, #128	@ 0x80
 8002e14:	d1c3      	bne.n	8002d9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e2c:	e034      	b.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f89b 	bl	8002f6a <I2C_IsAcknowledgeFailed>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e034      	b.n	8002ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d028      	beq.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7fe fca9 	bl	800179c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d11d      	bne.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d016      	beq.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e007      	b.n	8002ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d1c3      	bne.n	8002e2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ebc:	e049      	b.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d119      	bne.n	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0210 	mvn.w	r2, #16
 8002ed4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e030      	b.n	8002f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7fe fc4c 	bl	800179c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11d      	bne.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f20:	2b40      	cmp	r3, #64	@ 0x40
 8002f22:	d016      	beq.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e007      	b.n	8002f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5c:	2b40      	cmp	r3, #64	@ 0x40
 8002f5e:	d1ae      	bne.n	8002ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f80:	d11b      	bne.n	8002fba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f043 0204 	orr.w	r2, r3, #4
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0cc      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b68      	ldr	r3, [pc, #416]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d90c      	bls.n	8003004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b65      	ldr	r3, [pc, #404]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b63      	ldr	r3, [pc, #396]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b59      	ldr	r3, [pc, #356]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a58      	ldr	r2, [pc, #352]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003034:	4b53      	ldr	r3, [pc, #332]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a52      	ldr	r2, [pc, #328]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b50      	ldr	r3, [pc, #320]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	494d      	ldr	r1, [pc, #308]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b47      	ldr	r3, [pc, #284]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b3f      	ldr	r3, [pc, #252]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3b      	ldr	r3, [pc, #236]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e067      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b37      	ldr	r3, [pc, #220]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4934      	ldr	r1, [pc, #208]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fb70 	bl	800179c <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe fb6c 	bl	800179c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e032      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4916      	ldr	r1, [pc, #88]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	490e      	ldr	r1, [pc, #56]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800314e:	f000 f855 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	490a      	ldr	r1, [pc, #40]	@ (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a09      	ldr	r2, [pc, #36]	@ (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800316a:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fad0 	bl	8001714 <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	08004d3c 	.word	0x08004d3c
 800318c:	20000000 	.word	0x20000000
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b03      	ldr	r3, [pc, #12]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000000 	.word	0x20000000

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b0:	f7ff fff0 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0a9b      	lsrs	r3, r3, #10
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4903      	ldr	r1, [pc, #12]	@ (80031d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	08004d4c 	.word	0x08004d4c

080031d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031d8:	f7ff ffdc 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	0b5b      	lsrs	r3, r3, #13
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4903      	ldr	r1, [pc, #12]	@ (80031f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	08004d4c 	.word	0x08004d4c

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003200:	b0ae      	sub	sp, #184	@ 0xb8
 8003202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003222:	4bcb      	ldr	r3, [pc, #812]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b0c      	cmp	r3, #12
 800322c:	f200 8206 	bhi.w	800363c <HAL_RCC_GetSysClockFreq+0x440>
 8003230:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	0800326d 	.word	0x0800326d
 800323c:	0800363d 	.word	0x0800363d
 8003240:	0800363d 	.word	0x0800363d
 8003244:	0800363d 	.word	0x0800363d
 8003248:	08003275 	.word	0x08003275
 800324c:	0800363d 	.word	0x0800363d
 8003250:	0800363d 	.word	0x0800363d
 8003254:	0800363d 	.word	0x0800363d
 8003258:	0800327d 	.word	0x0800327d
 800325c:	0800363d 	.word	0x0800363d
 8003260:	0800363d 	.word	0x0800363d
 8003264:	0800363d 	.word	0x0800363d
 8003268:	0800346d 	.word	0x0800346d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4bb9      	ldr	r3, [pc, #740]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x358>)
 800326e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003272:	e1e7      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003274:	4bb8      	ldr	r3, [pc, #736]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800327a:	e1e3      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327c:	4bb4      	ldr	r3, [pc, #720]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003284:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003288:	4bb1      	ldr	r3, [pc, #708]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d071      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003294:	4bae      	ldr	r3, [pc, #696]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032a0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80032a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032ba:	4622      	mov	r2, r4
 80032bc:	462b      	mov	r3, r5
 80032be:	f04f 0000 	mov.w	r0, #0
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	0159      	lsls	r1, r3, #5
 80032c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032cc:	0150      	lsls	r0, r2, #5
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4621      	mov	r1, r4
 80032d4:	1a51      	subs	r1, r2, r1
 80032d6:	6439      	str	r1, [r7, #64]	@ 0x40
 80032d8:	4629      	mov	r1, r5
 80032da:	eb63 0301 	sbc.w	r3, r3, r1
 80032de:	647b      	str	r3, [r7, #68]	@ 0x44
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80032ec:	4649      	mov	r1, r9
 80032ee:	018b      	lsls	r3, r1, #6
 80032f0:	4641      	mov	r1, r8
 80032f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032f6:	4641      	mov	r1, r8
 80032f8:	018a      	lsls	r2, r1, #6
 80032fa:	4641      	mov	r1, r8
 80032fc:	1a51      	subs	r1, r2, r1
 80032fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003300:	4649      	mov	r1, r9
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003314:	4649      	mov	r1, r9
 8003316:	00cb      	lsls	r3, r1, #3
 8003318:	4641      	mov	r1, r8
 800331a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331e:	4641      	mov	r1, r8
 8003320:	00ca      	lsls	r2, r1, #3
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	4603      	mov	r3, r0
 8003328:	4622      	mov	r2, r4
 800332a:	189b      	adds	r3, r3, r2
 800332c:	633b      	str	r3, [r7, #48]	@ 0x30
 800332e:	462b      	mov	r3, r5
 8003330:	460a      	mov	r2, r1
 8003332:	eb42 0303 	adc.w	r3, r2, r3
 8003336:	637b      	str	r3, [r7, #52]	@ 0x34
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003344:	4629      	mov	r1, r5
 8003346:	024b      	lsls	r3, r1, #9
 8003348:	4621      	mov	r1, r4
 800334a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800334e:	4621      	mov	r1, r4
 8003350:	024a      	lsls	r2, r1, #9
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800335a:	2200      	movs	r2, #0
 800335c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003360:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003364:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003368:	f7fc ff4e 	bl	8000208 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4613      	mov	r3, r2
 8003372:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003376:	e067      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003378:	4b75      	ldr	r3, [pc, #468]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003384:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003388:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800338c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003390:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003392:	2300      	movs	r3, #0
 8003394:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003396:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800339a:	4622      	mov	r2, r4
 800339c:	462b      	mov	r3, r5
 800339e:	f04f 0000 	mov.w	r0, #0
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	0159      	lsls	r1, r3, #5
 80033a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ac:	0150      	lsls	r0, r2, #5
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4621      	mov	r1, r4
 80033b4:	1a51      	subs	r1, r2, r1
 80033b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80033b8:	4629      	mov	r1, r5
 80033ba:	eb63 0301 	sbc.w	r3, r3, r1
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80033cc:	4649      	mov	r1, r9
 80033ce:	018b      	lsls	r3, r1, #6
 80033d0:	4641      	mov	r1, r8
 80033d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033d6:	4641      	mov	r1, r8
 80033d8:	018a      	lsls	r2, r1, #6
 80033da:	4641      	mov	r1, r8
 80033dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80033e0:	4649      	mov	r1, r9
 80033e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033fa:	4692      	mov	sl, r2
 80033fc:	469b      	mov	fp, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	eb1a 0303 	adds.w	r3, sl, r3
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	462b      	mov	r3, r5
 8003408:	eb4b 0303 	adc.w	r3, fp, r3
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800341a:	4629      	mov	r1, r5
 800341c:	028b      	lsls	r3, r1, #10
 800341e:	4621      	mov	r1, r4
 8003420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003424:	4621      	mov	r1, r4
 8003426:	028a      	lsls	r2, r1, #10
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003430:	2200      	movs	r2, #0
 8003432:	673b      	str	r3, [r7, #112]	@ 0x70
 8003434:	677a      	str	r2, [r7, #116]	@ 0x74
 8003436:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800343a:	f7fc fee5 	bl	8000208 <__aeabi_uldivmod>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4613      	mov	r3, r2
 8003444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003448:	4b41      	ldr	r3, [pc, #260]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800345a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800345e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800346a:	e0eb      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b38      	ldr	r3, [pc, #224]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003478:	4b35      	ldr	r3, [pc, #212]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d06b      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003484:	4b32      	ldr	r3, [pc, #200]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	2200      	movs	r2, #0
 800348c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800348e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003490:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	663b      	str	r3, [r7, #96]	@ 0x60
 8003498:	2300      	movs	r3, #0
 800349a:	667b      	str	r3, [r7, #100]	@ 0x64
 800349c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80034a0:	4622      	mov	r2, r4
 80034a2:	462b      	mov	r3, r5
 80034a4:	f04f 0000 	mov.w	r0, #0
 80034a8:	f04f 0100 	mov.w	r1, #0
 80034ac:	0159      	lsls	r1, r3, #5
 80034ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b2:	0150      	lsls	r0, r2, #5
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4621      	mov	r1, r4
 80034ba:	1a51      	subs	r1, r2, r1
 80034bc:	61b9      	str	r1, [r7, #24]
 80034be:	4629      	mov	r1, r5
 80034c0:	eb63 0301 	sbc.w	r3, r3, r1
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034d2:	4659      	mov	r1, fp
 80034d4:	018b      	lsls	r3, r1, #6
 80034d6:	4651      	mov	r1, sl
 80034d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034dc:	4651      	mov	r1, sl
 80034de:	018a      	lsls	r2, r1, #6
 80034e0:	4651      	mov	r1, sl
 80034e2:	ebb2 0801 	subs.w	r8, r2, r1
 80034e6:	4659      	mov	r1, fp
 80034e8:	eb63 0901 	sbc.w	r9, r3, r1
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003500:	4690      	mov	r8, r2
 8003502:	4699      	mov	r9, r3
 8003504:	4623      	mov	r3, r4
 8003506:	eb18 0303 	adds.w	r3, r8, r3
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	462b      	mov	r3, r5
 800350e:	eb49 0303 	adc.w	r3, r9, r3
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003520:	4629      	mov	r1, r5
 8003522:	024b      	lsls	r3, r1, #9
 8003524:	4621      	mov	r1, r4
 8003526:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800352a:	4621      	mov	r1, r4
 800352c:	024a      	lsls	r2, r1, #9
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003536:	2200      	movs	r2, #0
 8003538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800353a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800353c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003540:	f7fc fe62 	bl	8000208 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4613      	mov	r3, r2
 800354a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800354e:	e065      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x420>
 8003550:	40023800 	.word	0x40023800
 8003554:	00f42400 	.word	0x00f42400
 8003558:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355c:	4b3d      	ldr	r3, [pc, #244]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x458>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	2200      	movs	r2, #0
 8003564:	4618      	mov	r0, r3
 8003566:	4611      	mov	r1, r2
 8003568:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800356c:	653b      	str	r3, [r7, #80]	@ 0x50
 800356e:	2300      	movs	r3, #0
 8003570:	657b      	str	r3, [r7, #84]	@ 0x54
 8003572:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003576:	4642      	mov	r2, r8
 8003578:	464b      	mov	r3, r9
 800357a:	f04f 0000 	mov.w	r0, #0
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	0159      	lsls	r1, r3, #5
 8003584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003588:	0150      	lsls	r0, r2, #5
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4641      	mov	r1, r8
 8003590:	1a51      	subs	r1, r2, r1
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	4649      	mov	r1, r9
 8003596:	eb63 0301 	sbc.w	r3, r3, r1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035a8:	4659      	mov	r1, fp
 80035aa:	018b      	lsls	r3, r1, #6
 80035ac:	4651      	mov	r1, sl
 80035ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035b2:	4651      	mov	r1, sl
 80035b4:	018a      	lsls	r2, r1, #6
 80035b6:	4651      	mov	r1, sl
 80035b8:	1a54      	subs	r4, r2, r1
 80035ba:	4659      	mov	r1, fp
 80035bc:	eb63 0501 	sbc.w	r5, r3, r1
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	00eb      	lsls	r3, r5, #3
 80035ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ce:	00e2      	lsls	r2, r4, #3
 80035d0:	4614      	mov	r4, r2
 80035d2:	461d      	mov	r5, r3
 80035d4:	4643      	mov	r3, r8
 80035d6:	18e3      	adds	r3, r4, r3
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	464b      	mov	r3, r9
 80035dc:	eb45 0303 	adc.w	r3, r5, r3
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ee:	4629      	mov	r1, r5
 80035f0:	028b      	lsls	r3, r1, #10
 80035f2:	4621      	mov	r1, r4
 80035f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f8:	4621      	mov	r1, r4
 80035fa:	028a      	lsls	r2, r1, #10
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003604:	2200      	movs	r2, #0
 8003606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003608:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800360a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800360e:	f7fc fdfb 	bl	8000208 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4613      	mov	r3, r2
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800361c:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x458>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0f1b      	lsrs	r3, r3, #28
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800362a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800362e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800363a:	e003      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x45c>)
 800363e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003642:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003648:	4618      	mov	r0, r3
 800364a:	37b8      	adds	r7, #184	@ 0xb8
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	00f42400 	.word	0x00f42400

0800365c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e28d      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8083 	beq.w	8003782 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800367c:	4b94      	ldr	r3, [pc, #592]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b04      	cmp	r3, #4
 8003686:	d019      	beq.n	80036bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003688:	4b91      	ldr	r3, [pc, #580]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003690:	2b08      	cmp	r3, #8
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003694:	4b8e      	ldr	r3, [pc, #568]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036a0:	d00c      	beq.n	80036bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a2:	4b8b      	ldr	r3, [pc, #556]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d112      	bne.n	80036d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ae:	4b88      	ldr	r3, [pc, #544]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	4b84      	ldr	r3, [pc, #528]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d05b      	beq.n	8003780 <HAL_RCC_OscConfig+0x124>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d157      	bne.n	8003780 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e25a      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036dc:	d106      	bne.n	80036ec <HAL_RCC_OscConfig+0x90>
 80036de:	4b7c      	ldr	r3, [pc, #496]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a7b      	ldr	r2, [pc, #492]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e01d      	b.n	8003728 <HAL_RCC_OscConfig+0xcc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0xb4>
 80036f6:	4b76      	ldr	r3, [pc, #472]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a75      	ldr	r2, [pc, #468]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b73      	ldr	r3, [pc, #460]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a72      	ldr	r2, [pc, #456]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e00b      	b.n	8003728 <HAL_RCC_OscConfig+0xcc>
 8003710:	4b6f      	ldr	r3, [pc, #444]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a6e      	ldr	r2, [pc, #440]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b6c      	ldr	r3, [pc, #432]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6b      	ldr	r2, [pc, #428]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d013      	beq.n	8003758 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe f834 	bl	800179c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fe f830 	bl	800179c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	@ 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e21f      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b61      	ldr	r3, [pc, #388]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0xdc>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe f820 	bl	800179c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe f81c 	bl	800179c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	@ 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e20b      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003772:	4b57      	ldr	r3, [pc, #348]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x104>
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d06f      	beq.n	800386e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800378e:	4b50      	ldr	r3, [pc, #320]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800379a:	4b4d      	ldr	r3, [pc, #308]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
        || \
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80037a6:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b2:	4b47      	ldr	r3, [pc, #284]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d11c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037be:	4b44      	ldr	r3, [pc, #272]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d116      	bne.n	80037f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_RCC_OscConfig+0x186>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e1d3      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e2:	4b3b      	ldr	r3, [pc, #236]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4937      	ldr	r1, [pc, #220]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f6:	e03a      	b.n	800386e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d020      	beq.n	8003842 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003800:	4b34      	ldr	r3, [pc, #208]	@ (80038d4 <HAL_RCC_OscConfig+0x278>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fd ffc9 	bl	800179c <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380e:	f7fd ffc5 	bl	800179c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e1b4      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	4b2b      	ldr	r3, [pc, #172]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382c:	4b28      	ldr	r3, [pc, #160]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4925      	ldr	r1, [pc, #148]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
 8003840:	e015      	b.n	800386e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003842:	4b24      	ldr	r3, [pc, #144]	@ (80038d4 <HAL_RCC_OscConfig+0x278>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fd ffa8 	bl	800179c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003850:	f7fd ffa4 	bl	800179c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e193      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	4b1b      	ldr	r3, [pc, #108]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d036      	beq.n	80038e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003882:	4b15      	ldr	r3, [pc, #84]	@ (80038d8 <HAL_RCC_OscConfig+0x27c>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fd ff88 	bl	800179c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003890:	f7fd ff84 	bl	800179c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e173      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <HAL_RCC_OscConfig+0x274>)
 80038a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x234>
 80038ae:	e01b      	b.n	80038e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <HAL_RCC_OscConfig+0x27c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fd ff71 	bl	800179c <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	e00e      	b.n	80038dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038be:	f7fd ff6d 	bl	800179c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d907      	bls.n	80038dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e15c      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
 80038d0:	40023800 	.word	0x40023800
 80038d4:	42470000 	.word	0x42470000
 80038d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80038de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ea      	bne.n	80038be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8097 	beq.w	8003a24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fa:	4b83      	ldr	r3, [pc, #524]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003914:	6413      	str	r3, [r2, #64]	@ 0x40
 8003916:	4b7c      	ldr	r3, [pc, #496]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	4b79      	ldr	r3, [pc, #484]	@ (8003b0c <HAL_RCC_OscConfig+0x4b0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d118      	bne.n	8003964 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003932:	4b76      	ldr	r3, [pc, #472]	@ (8003b0c <HAL_RCC_OscConfig+0x4b0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a75      	ldr	r2, [pc, #468]	@ (8003b0c <HAL_RCC_OscConfig+0x4b0>)
 8003938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393e:	f7fd ff2d 	bl	800179c <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003946:	f7fd ff29 	bl	800179c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e118      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	4b6c      	ldr	r3, [pc, #432]	@ (8003b0c <HAL_RCC_OscConfig+0x4b0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d106      	bne.n	800397a <HAL_RCC_OscConfig+0x31e>
 800396c:	4b66      	ldr	r3, [pc, #408]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003970:	4a65      	ldr	r2, [pc, #404]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6713      	str	r3, [r2, #112]	@ 0x70
 8003978:	e01c      	b.n	80039b4 <HAL_RCC_OscConfig+0x358>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b05      	cmp	r3, #5
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0x340>
 8003982:	4b61      	ldr	r3, [pc, #388]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003986:	4a60      	ldr	r2, [pc, #384]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	6713      	str	r3, [r2, #112]	@ 0x70
 800398e:	4b5e      	ldr	r3, [pc, #376]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003992:	4a5d      	ldr	r2, [pc, #372]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6713      	str	r3, [r2, #112]	@ 0x70
 800399a:	e00b      	b.n	80039b4 <HAL_RCC_OscConfig+0x358>
 800399c:	4b5a      	ldr	r3, [pc, #360]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a0:	4a59      	ldr	r2, [pc, #356]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a8:	4b57      	ldr	r3, [pc, #348]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ac:	4a56      	ldr	r2, [pc, #344]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fd feee 	bl	800179c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fd feea 	bl	800179c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0d7      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	4b4b      	ldr	r3, [pc, #300]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ee      	beq.n	80039c4 <HAL_RCC_OscConfig+0x368>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fd fed8 	bl	800179c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fd fed4 	bl	800179c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e0c1      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a06:	4b40      	ldr	r3, [pc, #256]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ee      	bne.n	80039f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4b3b      	ldr	r3, [pc, #236]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80ad 	beq.w	8003b88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2e:	4b36      	ldr	r3, [pc, #216]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d060      	beq.n	8003afc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d145      	bne.n	8003ace <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b33      	ldr	r3, [pc, #204]	@ (8003b10 <HAL_RCC_OscConfig+0x4b4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fd fea8 	bl	800179c <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fd fea4 	bl	800179c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e093      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	4b29      	ldr	r3, [pc, #164]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	019b      	lsls	r3, r3, #6
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	3b01      	subs	r3, #1
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	071b      	lsls	r3, r3, #28
 8003a9a:	491b      	ldr	r1, [pc, #108]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b10 <HAL_RCC_OscConfig+0x4b4>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fd fe79 	bl	800179c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fd fe75 	bl	800179c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e064      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac0:	4b11      	ldr	r3, [pc, #68]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x452>
 8003acc:	e05c      	b.n	8003b88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	4b10      	ldr	r3, [pc, #64]	@ (8003b10 <HAL_RCC_OscConfig+0x4b4>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fd fe62 	bl	800179c <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fd fe5e 	bl	800179c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04d      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x480>
 8003afa:	e045      	b.n	8003b88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e040      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b14:	4b1f      	ldr	r3, [pc, #124]	@ (8003b94 <HAL_RCC_OscConfig+0x538>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d030      	beq.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d129      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d122      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d119      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d10f      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800

08003b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07b      	b.n	8003ca2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bba:	d009      	beq.n	8003bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
 8003bc2:	e005      	b.n	8003bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fc74 	bl	80014d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	ea42 0103 	orr.w	r1, r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	f003 0104 	and.w	r1, r3, #4
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	f003 0210 	and.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b088      	sub	sp, #32
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cba:	f7fd fd6f 	bl	800179c <HAL_GetTick>
 8003cbe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d001      	beq.n	8003cd4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e12a      	b.n	8003f2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_SPI_Transmit+0x36>
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e122      	b.n	8003f2a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_SPI_Transmit+0x48>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e11b      	b.n	8003f2a <HAL_SPI_Transmit+0x280>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d40:	d10f      	bne.n	8003d62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6c:	2b40      	cmp	r3, #64	@ 0x40
 8003d6e:	d007      	beq.n	8003d80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d88:	d152      	bne.n	8003e30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_SPI_Transmit+0xee>
 8003d92:	8b7b      	ldrh	r3, [r7, #26]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d145      	bne.n	8003e24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	881a      	ldrh	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	1c9a      	adds	r2, r3, #2
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dbc:	e032      	b.n	8003e24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d112      	bne.n	8003df2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	881a      	ldrh	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ddc:	1c9a      	adds	r2, r3, #2
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003df0:	e018      	b.n	8003e24 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df2:	f7fd fcd3 	bl	800179c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d803      	bhi.n	8003e0a <HAL_SPI_Transmit+0x160>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d102      	bne.n	8003e10 <HAL_SPI_Transmit+0x166>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e082      	b.n	8003f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1c7      	bne.n	8003dbe <HAL_SPI_Transmit+0x114>
 8003e2e:	e053      	b.n	8003ed8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_SPI_Transmit+0x194>
 8003e38:	8b7b      	ldrh	r3, [r7, #26]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d147      	bne.n	8003ece <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e64:	e033      	b.n	8003ece <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d113      	bne.n	8003e9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e9a:	e018      	b.n	8003ece <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e9c:	f7fd fc7e 	bl	800179c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d803      	bhi.n	8003eb4 <HAL_SPI_Transmit+0x20a>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d102      	bne.n	8003eba <HAL_SPI_Transmit+0x210>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e02d      	b.n	8003f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1c6      	bne.n	8003e66 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fbd9 	bl	8004694 <SPI_EndRxTxTransaction>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b088      	sub	sp, #32
 8003f36:	af02      	add	r7, sp, #8
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d001      	beq.n	8003f52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e104      	b.n	800415c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f5a:	d112      	bne.n	8003f82 <HAL_SPI_Receive+0x50>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10e      	bne.n	8003f82 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2204      	movs	r2, #4
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f6c:	88fa      	ldrh	r2, [r7, #6]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f8f3 	bl	8004164 <HAL_SPI_TransmitReceive>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	e0ec      	b.n	800415c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f82:	f7fd fc0b 	bl	800179c <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_SPI_Receive+0x62>
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0e1      	b.n	800415c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_SPI_Receive+0x74>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e0da      	b.n	800415c <HAL_SPI_Receive+0x22a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	88fa      	ldrh	r2, [r7, #6]
 8003fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff4:	d10f      	bne.n	8004016 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004014:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	d007      	beq.n	8004034 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004032:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d170      	bne.n	800411e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800403c:	e035      	b.n	80040aa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d115      	bne.n	8004078 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f103 020c 	add.w	r2, r3, #12
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004058:	7812      	ldrb	r2, [r2, #0]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004076:	e018      	b.n	80040aa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004078:	f7fd fb90 	bl	800179c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d803      	bhi.n	8004090 <HAL_SPI_Receive+0x15e>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d102      	bne.n	8004096 <HAL_SPI_Receive+0x164>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e058      	b.n	800415c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1c4      	bne.n	800403e <HAL_SPI_Receive+0x10c>
 80040b4:	e038      	b.n	8004128 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d113      	bne.n	80040ec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	b292      	uxth	r2, r2
 80040d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	1c9a      	adds	r2, r3, #2
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040ea:	e018      	b.n	800411e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ec:	f7fd fb56 	bl	800179c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d803      	bhi.n	8004104 <HAL_SPI_Receive+0x1d2>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d102      	bne.n	800410a <HAL_SPI_Receive+0x1d8>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e01e      	b.n	800415c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1c6      	bne.n	80040b6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	6839      	ldr	r1, [r7, #0]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fa4b 	bl	80045c8 <SPI_EndRxTransaction>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800415a:	2300      	movs	r3, #0
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	@ 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004172:	2301      	movs	r3, #1
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004176:	f7fd fb11 	bl	800179c <HAL_GetTick>
 800417a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004182:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800418a:	887b      	ldrh	r3, [r7, #2]
 800418c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800418e:	7ffb      	ldrb	r3, [r7, #31]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d00c      	beq.n	80041ae <HAL_SPI_TransmitReceive+0x4a>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800419a:	d106      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <HAL_SPI_TransmitReceive+0x46>
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d001      	beq.n	80041ae <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80041aa:	2302      	movs	r3, #2
 80041ac:	e17f      	b.n	80044ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_SPI_TransmitReceive+0x5c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_SPI_TransmitReceive+0x5c>
 80041ba:	887b      	ldrh	r3, [r7, #2]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e174      	b.n	80044ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x6e>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e16d      	b.n	80044ae <HAL_SPI_TransmitReceive+0x34a>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d003      	beq.n	80041ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2205      	movs	r2, #5
 80041ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	887a      	ldrh	r2, [r7, #2]
 80041fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	887a      	ldrh	r2, [r7, #2]
 8004216:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422e:	2b40      	cmp	r3, #64	@ 0x40
 8004230:	d007      	beq.n	8004242 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800424a:	d17e      	bne.n	800434a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_SPI_TransmitReceive+0xf6>
 8004254:	8afb      	ldrh	r3, [r7, #22]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d16c      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	1c9a      	adds	r2, r3, #2
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427e:	e059      	b.n	8004334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b02      	cmp	r3, #2
 800428c:	d11b      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x162>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d016      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x162>
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	2b01      	cmp	r3, #1
 800429c:	d113      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	881a      	ldrh	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d119      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x1a4>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d014      	beq.n	8004308 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	b292      	uxth	r2, r2
 80042ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	1c9a      	adds	r2, r3, #2
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004304:	2301      	movs	r3, #1
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004308:	f7fd fa48 	bl	800179c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004314:	429a      	cmp	r2, r3
 8004316:	d80d      	bhi.n	8004334 <HAL_SPI_TransmitReceive+0x1d0>
 8004318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d009      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0bc      	b.n	80044ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1a0      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x11c>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d19b      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x11c>
 8004348:	e082      	b.n	8004450 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x1f4>
 8004352:	8afb      	ldrh	r3, [r7, #22]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d171      	bne.n	800443c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	7812      	ldrb	r2, [r2, #0]
 8004364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800437e:	e05d      	b.n	800443c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b02      	cmp	r3, #2
 800438c:	d11c      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x264>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d017      	beq.n	80043c8 <HAL_SPI_TransmitReceive+0x264>
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	2b01      	cmp	r3, #1
 800439c:	d114      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	7812      	ldrb	r2, [r2, #0]
 80043aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d119      	bne.n	800440a <HAL_SPI_TransmitReceive+0x2a6>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d014      	beq.n	800440a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004406:	2301      	movs	r3, #1
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800440a:	f7fd f9c7 	bl	800179c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	429a      	cmp	r2, r3
 8004418:	d803      	bhi.n	8004422 <HAL_SPI_TransmitReceive+0x2be>
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d102      	bne.n	8004428 <HAL_SPI_TransmitReceive+0x2c4>
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e038      	b.n	80044ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d19c      	bne.n	8004380 <HAL_SPI_TransmitReceive+0x21c>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d197      	bne.n	8004380 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f91d 	bl	8004694 <SPI_EndRxTxTransaction>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e01d      	b.n	80044ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3728      	adds	r7, #40	@ 0x28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044c8:	f7fd f968 	bl	800179c <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	4413      	add	r3, r2
 80044d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044d8:	f7fd f960 	bl	800179c <HAL_GetTick>
 80044dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044de:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	015b      	lsls	r3, r3, #5
 80044e4:	0d1b      	lsrs	r3, r3, #20
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ee:	e054      	b.n	800459a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d050      	beq.n	800459a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f8:	f7fd f950 	bl	800179c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	429a      	cmp	r2, r3
 8004506:	d902      	bls.n	800450e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d13d      	bne.n	800458a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800451c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004526:	d111      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004530:	d004      	beq.n	800453c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453a:	d107      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800454a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004554:	d10f      	bne.n	8004576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e017      	b.n	80045ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3b01      	subs	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d19b      	bne.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000000 	.word	0x20000000

080045c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045dc:	d111      	bne.n	8004602 <SPI_EndRxTransaction+0x3a>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e6:	d004      	beq.n	80045f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f0:	d107      	bne.n	8004602 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004600:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800460a:	d12a      	bne.n	8004662 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004614:	d012      	beq.n	800463c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2200      	movs	r2, #0
 800461e:	2180      	movs	r1, #128	@ 0x80
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff ff49 	bl	80044b8 <SPI_WaitFlagStateUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d02d      	beq.n	8004688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e026      	b.n	800468a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	2101      	movs	r1, #1
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff ff36 	bl	80044b8 <SPI_WaitFlagStateUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01a      	beq.n	8004688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e013      	b.n	800468a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2200      	movs	r2, #0
 800466a:	2101      	movs	r1, #1
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff ff23 	bl	80044b8 <SPI_WaitFlagStateUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e000      	b.n	800468a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2201      	movs	r2, #1
 80046a8:	2102      	movs	r1, #2
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff ff04 	bl	80044b8 <SPI_WaitFlagStateUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ba:	f043 0220 	orr.w	r2, r3, #32
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e032      	b.n	800472c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <SPI_EndRxTxTransaction+0xa0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004738 <SPI_EndRxTxTransaction+0xa4>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	0d5b      	lsrs	r3, r3, #21
 80046d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046e4:	d112      	bne.n	800470c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2200      	movs	r2, #0
 80046ee:	2180      	movs	r1, #128	@ 0x80
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff fee1 	bl	80044b8 <SPI_WaitFlagStateUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d016      	beq.n	800472a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e00f      	b.n	800472c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3b01      	subs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004722:	2b80      	cmp	r3, #128	@ 0x80
 8004724:	d0f2      	beq.n	800470c <SPI_EndRxTxTransaction+0x78>
 8004726:	e000      	b.n	800472a <SPI_EndRxTxTransaction+0x96>
        break;
 8004728:	bf00      	nop
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000000 	.word	0x20000000
 8004738:	165e9f81 	.word	0x165e9f81

0800473c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e042      	b.n	80047d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fc ff00 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	@ 0x24
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800477e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f82b 	bl	80047dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e0:	b0c0      	sub	sp, #256	@ 0x100
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	68d9      	ldr	r1, [r3, #12]
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	ea40 0301 	orr.w	r3, r0, r1
 8004804:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	431a      	orrs	r2, r3
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	431a      	orrs	r2, r3
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004834:	f021 010c 	bic.w	r1, r1, #12
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004842:	430b      	orrs	r3, r1
 8004844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004856:	6999      	ldr	r1, [r3, #24]
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	ea40 0301 	orr.w	r3, r0, r1
 8004862:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa8 <UART_SetConfig+0x2cc>)
 800486c:	429a      	cmp	r2, r3
 800486e:	d005      	beq.n	800487c <UART_SetConfig+0xa0>
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b8d      	ldr	r3, [pc, #564]	@ (8004aac <UART_SetConfig+0x2d0>)
 8004878:	429a      	cmp	r2, r3
 800487a:	d104      	bne.n	8004886 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800487c:	f7fe fcaa 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8004880:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004884:	e003      	b.n	800488e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004886:	f7fe fc91 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 800488a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004898:	f040 810c 	bne.w	8004ab4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800489c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048ae:	4622      	mov	r2, r4
 80048b0:	462b      	mov	r3, r5
 80048b2:	1891      	adds	r1, r2, r2
 80048b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048b6:	415b      	adcs	r3, r3
 80048b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048be:	4621      	mov	r1, r4
 80048c0:	eb12 0801 	adds.w	r8, r2, r1
 80048c4:	4629      	mov	r1, r5
 80048c6:	eb43 0901 	adc.w	r9, r3, r1
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048de:	4690      	mov	r8, r2
 80048e0:	4699      	mov	r9, r3
 80048e2:	4623      	mov	r3, r4
 80048e4:	eb18 0303 	adds.w	r3, r8, r3
 80048e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048ec:	462b      	mov	r3, r5
 80048ee:	eb49 0303 	adc.w	r3, r9, r3
 80048f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004902:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004906:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800490a:	460b      	mov	r3, r1
 800490c:	18db      	adds	r3, r3, r3
 800490e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004910:	4613      	mov	r3, r2
 8004912:	eb42 0303 	adc.w	r3, r2, r3
 8004916:	657b      	str	r3, [r7, #84]	@ 0x54
 8004918:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800491c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004920:	f7fb fc72 	bl	8000208 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4b61      	ldr	r3, [pc, #388]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 800492a:	fba3 2302 	umull	r2, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	011c      	lsls	r4, r3, #4
 8004932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004936:	2200      	movs	r2, #0
 8004938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800493c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004940:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	1891      	adds	r1, r2, r2
 800494a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800494c:	415b      	adcs	r3, r3
 800494e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004950:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004954:	4641      	mov	r1, r8
 8004956:	eb12 0a01 	adds.w	sl, r2, r1
 800495a:	4649      	mov	r1, r9
 800495c:	eb43 0b01 	adc.w	fp, r3, r1
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800496c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004974:	4692      	mov	sl, r2
 8004976:	469b      	mov	fp, r3
 8004978:	4643      	mov	r3, r8
 800497a:	eb1a 0303 	adds.w	r3, sl, r3
 800497e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004982:	464b      	mov	r3, r9
 8004984:	eb4b 0303 	adc.w	r3, fp, r3
 8004988:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004998:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800499c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049a0:	460b      	mov	r3, r1
 80049a2:	18db      	adds	r3, r3, r3
 80049a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049a6:	4613      	mov	r3, r2
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049b6:	f7fb fc27 	bl	8000208 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 80049c2:	fba3 2301 	umull	r2, r3, r3, r1
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	2264      	movs	r2, #100	@ 0x64
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	1acb      	subs	r3, r1, r3
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049d6:	4b36      	ldr	r3, [pc, #216]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 80049d8:	fba3 2302 	umull	r2, r3, r3, r2
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049e4:	441c      	add	r4, r3
 80049e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049f8:	4642      	mov	r2, r8
 80049fa:	464b      	mov	r3, r9
 80049fc:	1891      	adds	r1, r2, r2
 80049fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a00:	415b      	adcs	r3, r3
 8004a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a08:	4641      	mov	r1, r8
 8004a0a:	1851      	adds	r1, r2, r1
 8004a0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a0e:	4649      	mov	r1, r9
 8004a10:	414b      	adcs	r3, r1
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a20:	4659      	mov	r1, fp
 8004a22:	00cb      	lsls	r3, r1, #3
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	00ca      	lsls	r2, r1, #3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	4642      	mov	r2, r8
 8004a36:	189b      	adds	r3, r3, r2
 8004a38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	460a      	mov	r2, r1
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	18db      	adds	r3, r3, r3
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a62:	4613      	mov	r3, r2
 8004a64:	eb42 0303 	adc.w	r3, r2, r3
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a72:	f7fb fbc9 	bl	8000208 <__aeabi_uldivmod>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 8004a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	2164      	movs	r1, #100	@ 0x64
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	3332      	adds	r3, #50	@ 0x32
 8004a8e:	4a08      	ldr	r2, [pc, #32]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	f003 0207 	and.w	r2, r3, #7
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4422      	add	r2, r4
 8004aa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004aa4:	e106      	b.n	8004cb4 <UART_SetConfig+0x4d8>
 8004aa6:	bf00      	nop
 8004aa8:	40011000 	.word	0x40011000
 8004aac:	40011400 	.word	0x40011400
 8004ab0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004abe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ac2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	464b      	mov	r3, r9
 8004aca:	1891      	adds	r1, r2, r2
 8004acc:	6239      	str	r1, [r7, #32]
 8004ace:	415b      	adcs	r3, r3
 8004ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	1854      	adds	r4, r2, r1
 8004ada:	4649      	mov	r1, r9
 8004adc:	eb43 0501 	adc.w	r5, r3, r1
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	00eb      	lsls	r3, r5, #3
 8004aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aee:	00e2      	lsls	r2, r4, #3
 8004af0:	4614      	mov	r4, r2
 8004af2:	461d      	mov	r5, r3
 8004af4:	4643      	mov	r3, r8
 8004af6:	18e3      	adds	r3, r4, r3
 8004af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004afc:	464b      	mov	r3, r9
 8004afe:	eb45 0303 	adc.w	r3, r5, r3
 8004b02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b22:	4629      	mov	r1, r5
 8004b24:	008b      	lsls	r3, r1, #2
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	008a      	lsls	r2, r1, #2
 8004b30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b34:	f7fb fb68 	bl	8000208 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4b60      	ldr	r3, [pc, #384]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	011c      	lsls	r4, r3, #4
 8004b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	61b9      	str	r1, [r7, #24]
 8004b60:	415b      	adcs	r3, r3
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b68:	4641      	mov	r1, r8
 8004b6a:	1851      	adds	r1, r2, r1
 8004b6c:	6139      	str	r1, [r7, #16]
 8004b6e:	4649      	mov	r1, r9
 8004b70:	414b      	adcs	r3, r1
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b80:	4659      	mov	r1, fp
 8004b82:	00cb      	lsls	r3, r1, #3
 8004b84:	4651      	mov	r1, sl
 8004b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	00ca      	lsls	r2, r1, #3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	4642      	mov	r2, r8
 8004b96:	189b      	adds	r3, r3, r2
 8004b98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	eb42 0303 	adc.w	r3, r2, r3
 8004ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bc0:	4649      	mov	r1, r9
 8004bc2:	008b      	lsls	r3, r1, #2
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bca:	4641      	mov	r1, r8
 8004bcc:	008a      	lsls	r2, r1, #2
 8004bce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bd2:	f7fb fb19 	bl	8000208 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4b38      	ldr	r3, [pc, #224]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004bde:	fba3 2301 	umull	r2, r3, r3, r1
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2264      	movs	r2, #100	@ 0x64
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	1acb      	subs	r3, r1, r3
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	3332      	adds	r3, #50	@ 0x32
 8004bf0:	4a33      	ldr	r2, [pc, #204]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bfc:	441c      	add	r4, r3
 8004bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c02:	2200      	movs	r2, #0
 8004c04:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c06:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	1891      	adds	r1, r2, r2
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	415b      	adcs	r3, r3
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	1851      	adds	r1, r2, r1
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	4649      	mov	r1, r9
 8004c24:	414b      	adcs	r3, r1
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c34:	4659      	mov	r1, fp
 8004c36:	00cb      	lsls	r3, r1, #3
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3e:	4651      	mov	r1, sl
 8004c40:	00ca      	lsls	r2, r1, #3
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	189b      	adds	r3, r3, r2
 8004c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c4e:	464b      	mov	r3, r9
 8004c50:	460a      	mov	r2, r1
 8004c52:	eb42 0303 	adc.w	r3, r2, r3
 8004c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c62:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c70:	4649      	mov	r1, r9
 8004c72:	008b      	lsls	r3, r1, #2
 8004c74:	4641      	mov	r1, r8
 8004c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	008a      	lsls	r2, r1, #2
 8004c7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c82:	f7fb fac1 	bl	8000208 <__aeabi_uldivmod>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	2164      	movs	r1, #100	@ 0x64
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	3332      	adds	r3, #50	@ 0x32
 8004c9e:	4a08      	ldr	r2, [pc, #32]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	f003 020f 	and.w	r2, r3, #15
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4422      	add	r2, r4
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc0:	51eb851f 	.word	0x51eb851f

08004cc4 <memset>:
 8004cc4:	4402      	add	r2, r0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d100      	bne.n	8004cce <memset+0xa>
 8004ccc:	4770      	bx	lr
 8004cce:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd2:	e7f9      	b.n	8004cc8 <memset+0x4>

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2600      	movs	r6, #0
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f000 f818 	bl	8004d1c <_init>
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08004d5c 	.word	0x08004d5c
 8004d10:	08004d5c 	.word	0x08004d5c
 8004d14:	08004d5c 	.word	0x08004d5c
 8004d18:	08004d64 	.word	0x08004d64

08004d1c <_init>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr

08004d28 <_fini>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	bf00      	nop
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr
