
ProjektFeladat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800f980  0800f980  00010980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fee8  0800fee8  000116f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fee8  0800fee8  00010ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fef0  0800fef0  000116f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800fef0  0800fef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fefc  0800fefc  00010efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006f8  20000000  0800ff00  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  200006f8  080105f8  000116f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000dbc  080105f8  00011dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000116f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e1b  00000000  00000000  00011728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c1  00000000  00000000  00027543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0002a708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff6  00000000  00000000  0002bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026899  00000000  00000000  0002cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c3c  00000000  00000000  000533e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9e95  00000000  00000000  0006c023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145eb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007234  00000000  00000000  00145efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0014d130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200006f8 	.word	0x200006f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f964 	.word	0x0800f964

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200006fc 	.word	0x200006fc
 800020c:	0800f964 	.word	0x0800f964

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <_ZN4GPIOC1EP12GPIO_TypeDeft>:
 *      Author: Andris
 */

#include "GPIO.hpp"

GPIO::GPIO(GPIO_TypeDef* GPIOx_p, uint16_t GPIO_Pin_p)
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	4613      	mov	r3, r2
 8001050:	80fb      	strh	r3, [r7, #6]
{
	this->GPIOx = GPIOx_p;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin = GPIO_Pin_p;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	88fa      	ldrh	r2, [r7, #6]
 800105c:	809a      	strh	r2, [r3, #4]
}
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>:

void GPIO::digitalWrite(GPIO_PinState state_p)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state_p);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	889b      	ldrh	r3, [r3, #4]
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	4619      	mov	r1, r3
 8001084:	f002 f900 	bl	8003288 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN8MAX3186511tempFromRTDEt>:
 */

#include "MAX31865.hpp"

float MAX31865::tempFromRTD(uint16_t rtdValue_p)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
    float resistance = (rtdValue_p >> 1) * R_REF / 32768.0; // 430.0 value of reference resistor
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	f240 13a7 	movw	r3, #423	@ 0x1a7
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa69 	bl	8000584 <__aeabi_i2d>
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <_ZN8MAX3186511tempFromRTDEt+0x90>)
 80010b8:	f7ff fbf8 	bl	80008ac <__aeabi_ddiv>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fdc0 	bl	8000c48 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]
    float temperature = (resistance - r0) / 0.385; // 0.385 is the temperature coefficient
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e0:	ee17 0a90 	vmov	r0, s15
 80010e4:	f7ff fa60 	bl	80005a8 <__aeabi_f2d>
 80010e8:	a30b      	add	r3, pc, #44	@ (adr r3, 8001118 <_ZN8MAX3186511tempFromRTDEt+0x88>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fbdd 	bl	80008ac <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fda5 	bl	8000c48 <__aeabi_d2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	60bb      	str	r3, [r7, #8]
    return temperature;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	ee07 3a90 	vmov	s15, r3
}
 8001108:	eeb0 0a67 	vmov.f32	s0, s15
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	0a3d70a4 	.word	0x0a3d70a4
 800111c:	3fd8a3d7 	.word	0x3fd8a3d7
 8001120:	40e00000 	.word	0x40e00000

08001124 <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t>:

    //15 bit RTD value, LSB is do not care
    return rtdValue << 1;
}

MAX31865::MAX31865( SPI_HandleTypeDef *hspi_p, GPIO* csPin_p , GPIO* DRDYpin_p, RTD_type_t RTD_type_p )
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
{
	hspi = hspi_p;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	605a      	str	r2, [r3, #4]
	csPin = csPin_p;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
	DRDYpin = DRDYpin_p;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	60da      	str	r2, [r3, #12]
	if(RTD_type_p == PT100)
 800114a:	7e3b      	ldrb	r3, [r7, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t+0x34>
	{
		r0 = 100;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2264      	movs	r2, #100	@ 0x64
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e002      	b.n	800115e <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t+0x3a>
	}
	else
	{
		r0 = 1000;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	22e8      	movs	r2, #232	@ 0xe8
 800115c:	701a      	strb	r2, [r3, #0]
	}
}
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_ZN8MAX318654initE24MAX31865_FilterSetting_t>:

HAL_StatusTypeDef MAX31865::init( MAX31865_FilterSetting_t filterSetting_p )
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef stat;

	//First wake up the sensor by reading a register (it will return junk)
	uint8_t buff[1];
	readNFromAddres(MAX31865_CONFIG_REG_ADDRESS, buff, 1);
 8001178:	f107 020c 	add.w	r2, r7, #12
 800117c:	2301      	movs	r3, #1
 800117e:	2100      	movs	r1, #0
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f81d 	bl	80011c0 <_ZN8MAX3186515readNFromAddresEhPhm>

	//Turn the bias voltage on and set the filter
	uint8_t configValue = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	72fb      	strb	r3, [r7, #11]

	configValue |= MAX31865_CONFIG_VBIAS_ON;
 800118a:	7afb      	ldrb	r3, [r7, #11]
 800118c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001190:	b2db      	uxtb	r3, r3
 8001192:	72fb      	strb	r3, [r7, #11]

	//If 50Hz is set, set the bit, a bit value of 0 would set the 60Hz filter
	if ( filterSetting_p == MAX31865_FILTER_50HZ ) {configValue |= MAX31865_CONFIG_REG_FILTER_50Hz;}
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d104      	bne.n	80011a4 <_ZN8MAX318654initE24MAX31865_FilterSetting_t+0x38>
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	72fb      	strb	r3, [r7, #11]

	//Write the config register
	stat = writeNFromAddres(MAX31865_CONFIG_REG_ADDRESS, &configValue, 1);
 80011a4:	f107 020b 	add.w	r2, r7, #11
 80011a8:	2301      	movs	r3, #1
 80011aa:	2100      	movs	r1, #0
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f836 	bl	800121e <_ZN8MAX3186516writeNFromAddresEhPhm>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]

	return stat;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZN8MAX3186515readNFromAddresEhPhm>:

HAL_StatusTypeDef MAX31865::readNFromAddres( uint8_t addr_p, uint8_t* rBuff_p, uint32_t dataSize_p )
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	460b      	mov	r3, r1
 80011ce:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef stat;

	csPin -> digitalWrite( GPIO_PIN_RESET );
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff48 	bl	800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	stat = HAL_SPI_Transmit( hspi, &addr_p, 1, HAL_MAX_DELAY) ; // Transmit and receive data
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6858      	ldr	r0, [r3, #4]
 80011e0:	f107 010b 	add.w	r1, r7, #11
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	2201      	movs	r2, #1
 80011ea:	f004 f84a 	bl	8005282 <HAL_SPI_Transmit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	75fb      	strb	r3, [r7, #23]
	stat = HAL_SPI_Receive( hspi, rBuff_p, dataSize_p, HAL_MAX_DELAY ); // Transmit and receive data
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6858      	ldr	r0, [r3, #4]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f004 f983 	bl	800550a <HAL_SPI_Receive>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]

	csPin -> digitalWrite( GPIO_PIN_SET );
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2101      	movs	r1, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff2c 	bl	800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	return stat;
 8001214:	7dfb      	ldrb	r3, [r7, #23]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_ZN8MAX3186516writeNFromAddresEhPhm>:

HAL_StatusTypeDef MAX31865::writeNFromAddres( uint8_t addr_p, uint8_t* wBuff_p, uint32_t dataSize_p )
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b088      	sub	sp, #32
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	460b      	mov	r3, r1
 800122c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef stat;

	//The device has a maximum of 4 consiquential writable registers
	uint8_t msgBuff[4] = {0, 0, 0, 0};
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]

	//Construct the package
	msgBuff[0] = addr_p | MAX31865_WRITE_OFFSET_MASK;
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001238:	b2db      	uxtb	r3, r3
 800123a:	753b      	strb	r3, [r7, #20]

	for(uint32_t i = 0; i < dataSize_p; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	e00c      	b.n	800125c <_ZN8MAX3186516writeNFromAddresEhPhm+0x3e>
	{
		msgBuff[1+i] = wBuff_p[i];
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	441a      	add	r2, r3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	3301      	adds	r3, #1
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	3320      	adds	r3, #32
 8001250:	443b      	add	r3, r7
 8001252:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint32_t i = 0; i < dataSize_p; i++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d3ee      	bcc.n	8001242 <_ZN8MAX3186516writeNFromAddresEhPhm+0x24>
	}

	csPin -> digitalWrite( GPIO_PIN_RESET );
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fefe 	bl	800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	stat = HAL_SPI_Transmit( hspi, msgBuff, dataSize_p+1, HAL_MAX_DELAY) ; // Transmit and receive data
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6858      	ldr	r0, [r3, #4]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	3301      	adds	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	f107 0114 	add.w	r1, r7, #20
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	f003 fffd 	bl	8005282 <HAL_SPI_Transmit>
 8001288:	4603      	mov	r3, r0
 800128a:	76fb      	strb	r3, [r7, #27]

	csPin -> digitalWrite( GPIO_PIN_SET );
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff feea 	bl	800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	return stat;
 8001298:	7efb      	ldrb	r3, [r7, #27]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_ZN8MAX3186518startContinousMeasEv>:

	return getTemp();
}

void MAX31865::startContinousMeas()
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef stat;
	uint16_t errors = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	81fb      	strh	r3, [r7, #14]
	uint8_t configValue;

	//read current config register
	stat = readNFromAddres(MAX31865_CONFIG_REG_ADDRESS, &configValue, 1);
 80012ae:	f107 020c 	add.w	r2, r7, #12
 80012b2:	2301      	movs	r3, #1
 80012b4:	2100      	movs	r1, #0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff82 	bl	80011c0 <_ZN8MAX3186515readNFromAddresEhPhm>
 80012bc:	4603      	mov	r3, r0
 80012be:	737b      	strb	r3, [r7, #13]

	//new config value
	configValue |= MAX31865_CONFIG_AUTO_CONV;
 80012c0:	7b3b      	ldrb	r3, [r7, #12]
 80012c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	733b      	strb	r3, [r7, #12]

	//set new config value
	stat = writeNFromAddres(MAX31865_CONFIG_REG_ADDRESS, &configValue, 1);
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	2301      	movs	r3, #1
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa3 	bl	800121e <_ZN8MAX3186516writeNFromAddresEhPhm>
 80012d8:	4603      	mov	r3, r0
 80012da:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 80012dc:	7b7b      	ldrb	r3, [r7, #13]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <_ZN8MAX3186518startContinousMeasEv+0x5a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d008      	beq.n	80012fc <_ZN8MAX3186518startContinousMeasEv+0x5a>
	{
		errors += SPI_error;
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	3340      	adds	r3, #64	@ 0x40
 80012ee:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	89fa      	ldrh	r2, [r7, #14]
 80012f6:	4611      	mov	r1, r2
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
	}
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZN8MAX318657getTempEv>:
		errorHandler(this, errors);
	}
}

float MAX31865::getTemp()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef stat;
	uint16_t errors = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	81fb      	strh	r3, [r7, #14]
	uint8_t RTDbuff[2] = {0, 0};
 8001310:	2300      	movs	r3, #0
 8001312:	813b      	strh	r3, [r7, #8]

	stat = readNFromAddres(MAX31865_RTD_MSB_REG_ADDRESS, RTDbuff, 2);
 8001314:	f107 0208 	add.w	r2, r7, #8
 8001318:	2302      	movs	r3, #2
 800131a:	2101      	movs	r1, #1
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff4f 	bl	80011c0 <_ZN8MAX3186515readNFromAddresEhPhm>
 8001322:	4603      	mov	r3, r0
 8001324:	737b      	strb	r3, [r7, #13]

	uint16_t RTD = (RTDbuff[0] << 8) | RTDbuff[1]; // Combine
 8001326:	7a3b      	ldrb	r3, [r7, #8]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	7a7b      	ldrb	r3, [r7, #9]
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21b      	sxth	r3, r3
 8001334:	817b      	strh	r3, [r7, #10]

	if( ( RTD & (uint16_t) 0x1 ) != 0 ) //RTD LSB D0 ( = fault bit)  is set
 8001336:	897b      	ldrh	r3, [r7, #10]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00d      	beq.n	800135c <_ZN8MAX318657getTempEv+0x58>
	{
		if( errorHandler != NULL )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <_ZN8MAX318657getTempEv+0x58>
		{
			errors += RTD_fault_general;
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800134e:	81fb      	strh	r3, [r7, #14]
			errorHandler(this, errors);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	89fa      	ldrh	r2, [r7, #14]
 8001356:	4611      	mov	r1, r2
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	4798      	blx	r3
		}
	}

	return tempFromRTD(RTD);
 800135c:	897b      	ldrh	r3, [r7, #10]
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fe95 	bl	8001090 <_ZN8MAX3186511tempFromRTDEt>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
	if( stat != HAL_OK && errorHandler != NULL)
	{
		errors += SPI_error;
		errorHandler(this, errors);
	}
}
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>:
 */

#include "MS.hpp"

HAL_StatusTypeDef write2EEPROM(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout, uint8_t maxTries, uint8_t delayLen)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af04      	add	r7, sp, #16
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4603      	mov	r3, r0
 8001384:	817b      	strh	r3, [r7, #10]
 8001386:	460b      	mov	r3, r1
 8001388:	813b      	strh	r3, [r7, #8]
 800138a:	4613      	mov	r3, r2
 800138c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	HAL_Delay(delayLen);
 800138e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fbfc 	bl	8002b90 <HAL_Delay>
	stat = HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 8001398:	88f8      	ldrh	r0, [r7, #6]
 800139a:	893a      	ldrh	r2, [r7, #8]
 800139c:	8979      	ldrh	r1, [r7, #10]
 800139e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4603      	mov	r3, r0
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f002 f8c9 	bl	8003544 <HAL_I2C_Mem_Write>
 80013b2:	4603      	mov	r3, r0
 80013b4:	75fb      	strb	r3, [r7, #23]

	uint8_t trycounter = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 80013ba:	e00a      	b.n	80013d2 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh+0x5e>
	{
		stat = HAL_I2C_IsDeviceReady(hi2c, DevAddress, 2, 100);
 80013bc:	8979      	ldrh	r1, [r7, #10]
 80013be:	2364      	movs	r3, #100	@ 0x64
 80013c0:	2202      	movs	r2, #2
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f002 fbea 	bl	8003b9c <HAL_I2C_IsDeviceReady>
 80013c8:	4603      	mov	r3, r0
 80013ca:	75fb      	strb	r3, [r7, #23]
		trycounter++;
 80013cc:	7dbb      	ldrb	r3, [r7, #22]
 80013ce:	3301      	adds	r3, #1
 80013d0:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh+0x6e>
 80013d8:	7dba      	ldrb	r2, [r7, #22]
 80013da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013de:	429a      	cmp	r2, r3
 80013e0:	d9ec      	bls.n	80013bc <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh+0x48>
	}

	return stat;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>:

HAL_StatusTypeDef readFromEEPROM(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout, uint8_t maxTries, uint8_t delayLen)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af04      	add	r7, sp, #16
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	817b      	strh	r3, [r7, #10]
 80013fe:	460b      	mov	r3, r1
 8001400:	813b      	strh	r3, [r7, #8]
 8001402:	4613      	mov	r3, r2
 8001404:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	HAL_Delay(delayLen);
 8001406:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fbc0 	bl	8002b90 <HAL_Delay>
	stat = HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 8001410:	88f8      	ldrh	r0, [r7, #6]
 8001412:	893a      	ldrh	r2, [r7, #8]
 8001414:	8979      	ldrh	r1, [r7, #10]
 8001416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	4603      	mov	r3, r0
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f002 f987 	bl	8003738 <HAL_I2C_Mem_Read>
 800142a:	4603      	mov	r3, r0
 800142c:	75fb      	strb	r3, [r7, #23]

	uint8_t trycounter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 8001432:	e011      	b.n	8001458 <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh+0x6c>
	{
		stat = HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 8001434:	88f8      	ldrh	r0, [r7, #6]
 8001436:	893a      	ldrh	r2, [r7, #8]
 8001438:	8979      	ldrh	r1, [r7, #10]
 800143a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4603      	mov	r3, r0
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f002 f975 	bl	8003738 <HAL_I2C_Mem_Read>
 800144e:	4603      	mov	r3, r0
 8001450:	75fb      	strb	r3, [r7, #23]
		trycounter++;
 8001452:	7dbb      	ldrb	r3, [r7, #22]
 8001454:	3301      	adds	r3, #1
 8001456:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh+0x7c>
 800145e:	7dba      	ldrb	r2, [r7, #22]
 8001460:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001464:	429a      	cmp	r2, r3
 8001466:	d9e5      	bls.n	8001434 <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh+0x48>
	}

	return stat;
 8001468:	7dfb      	ldrb	r3, [r7, #23]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth>:

HAL_StatusTypeDef writeMultiPage( I2C_HandleTypeDef* I2Ccontroller, uint8_t EEPROMAddress, uint16_t start, uint8_t *data_p, uint16_t len, uint8_t pageLen )
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b08a      	sub	sp, #40	@ 0x28
 8001476:	af04      	add	r7, sp, #16
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	72fb      	strb	r3, [r7, #11]
 8001480:	4613      	mov	r3, r2
 8001482:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef stat;

	uint16_t remainder; //this much is left until the end of the current page
	while(len != 0)
 8001484:	e068      	b.n	8001558 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xe6>
	{
		remainder = (pageLen-((start)%pageLen));
 8001486:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800148a:	b299      	uxth	r1, r3
 800148c:	893b      	ldrh	r3, [r7, #8]
 800148e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001492:	fb93 f0f2 	sdiv	r0, r3, r2
 8001496:	fb00 f202 	mul.w	r2, r0, r2
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	1acb      	subs	r3, r1, r3
 80014a0:	82bb      	strh	r3, [r7, #20]

		if( remainder <= len )
 80014a2:	8aba      	ldrh	r2, [r7, #20]
 80014a4:	8c3b      	ldrh	r3, [r7, #32]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d830      	bhi.n	800150c <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x9a>
		{
			HAL_Delay(5);
 80014aa:	2005      	movs	r0, #5
 80014ac:	f001 fb70 	bl	8002b90 <HAL_Delay>
			stat = HAL_I2C_Mem_Write(I2Ccontroller, EEPROMAddress<<1, start, sizeof(start), data_p, remainder, HAL_MAX_DELAY);
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	b299      	uxth	r1, r3
 80014b8:	893a      	ldrh	r2, [r7, #8]
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	8abb      	ldrh	r3, [r7, #20]
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2302      	movs	r3, #2
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f002 f83a 	bl	8003544 <HAL_I2C_Mem_Write>
 80014d0:	4603      	mov	r3, r0
 80014d2:	75fb      	strb	r3, [r7, #23]

			while(stat != HAL_OK)
 80014d4:	e00a      	b.n	80014ec <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x7a>
			{
				stat = HAL_I2C_IsDeviceReady(I2Ccontroller, EEPROMAddress<<1, 2, 100);
 80014d6:	7afb      	ldrb	r3, [r7, #11]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	b299      	uxth	r1, r3
 80014de:	2364      	movs	r3, #100	@ 0x64
 80014e0:	2202      	movs	r2, #2
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f002 fb5a 	bl	8003b9c <HAL_I2C_IsDeviceReady>
 80014e8:	4603      	mov	r3, r0
 80014ea:	75fb      	strb	r3, [r7, #23]
			while(stat != HAL_OK)
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f1      	bne.n	80014d6 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x64>
			}

			start += remainder; //shift the "writer"
 80014f2:	893a      	ldrh	r2, [r7, #8]
 80014f4:	8abb      	ldrh	r3, [r7, #20]
 80014f6:	4413      	add	r3, r2
 80014f8:	813b      	strh	r3, [r7, #8]
			len -= remainder; //decrease the remaining length
 80014fa:	8c3a      	ldrh	r2, [r7, #32]
 80014fc:	8abb      	ldrh	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	843b      	strh	r3, [r7, #32]
			data_p += remainder*sizeof(uint8_t); //shift the "reader"
 8001502:	8abb      	ldrh	r3, [r7, #20]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e025      	b.n	8001558 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xe6>
		}
		else//write the rest of the data
		{
			HAL_Delay(5);
 800150c:	2005      	movs	r0, #5
 800150e:	f001 fb3f 	bl	8002b90 <HAL_Delay>
			stat = HAL_I2C_Mem_Write(I2Ccontroller, EEPROMAddress<<1, start, sizeof(start), data_p, len, HAL_MAX_DELAY);
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	b29b      	uxth	r3, r3
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b299      	uxth	r1, r3
 800151a:	893a      	ldrh	r2, [r7, #8]
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	8c3b      	ldrh	r3, [r7, #32]
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2302      	movs	r3, #2
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f002 f809 	bl	8003544 <HAL_I2C_Mem_Write>
 8001532:	4603      	mov	r3, r0
 8001534:	75fb      	strb	r3, [r7, #23]

			while(stat != HAL_OK)
 8001536:	e00a      	b.n	800154e <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xdc>
			{
				stat = HAL_I2C_IsDeviceReady(I2Ccontroller, EEPROMAddress<<1, 2, 100);
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	b29b      	uxth	r3, r3
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	b299      	uxth	r1, r3
 8001540:	2364      	movs	r3, #100	@ 0x64
 8001542:	2202      	movs	r2, #2
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f002 fb29 	bl	8003b9c <HAL_I2C_IsDeviceReady>
 800154a:	4603      	mov	r3, r0
 800154c:	75fb      	strb	r3, [r7, #23]
			while(stat != HAL_OK)
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f1      	bne.n	8001538 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xc6>
			}

			len = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	843b      	strh	r3, [r7, #32]
	while(len != 0)
 8001558:	8c3b      	ldrh	r3, [r7, #32]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d193      	bne.n	8001486 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x14>

		}
	}
	return stat;
 800155e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_ZN18MeasurementStorageC1EP17I2C_HandleTypeDefhht>:
		}
	}
	return stat;
}

MeasurementStorage::MeasurementStorage( I2C_HandleTypeDef* I2Ccontroller_p, uint8_t EEPROMAddress_p, uint8_t pageLen_p, uint16_t freePages_p )
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	460b      	mov	r3, r1
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	4613      	mov	r3, r2
 800157c:	71bb      	strb	r3, [r7, #6]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
{
	this -> I2Ccontroller = I2Ccontroller_p;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	609a      	str	r2, [r3, #8]
	this -> EEPROMAddress = EEPROMAddress_p;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	79fa      	ldrb	r2, [r7, #7]
 8001594:	711a      	strb	r2, [r3, #4]
	this -> pageLen = pageLen_p;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	79ba      	ldrb	r2, [r7, #6]
 800159a:	731a      	strb	r2, [r3, #12]
	this -> freePages = freePages_p;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8b3a      	ldrh	r2, [r7, #24]
 80015a0:	81da      	strh	r2, [r3, #14]
}
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN18MeasurementStorage4initEy>:

void MeasurementStorage::init(uint64_t Timestamp_p)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	e9c7 2300 	strd	r2, r3, [r7]
	setTimestamp(Timestamp_p);
 80015bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f8cc 	bl	800175e <_ZN18MeasurementStorage12setTimestampEy>
	resetCounter();
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f895 	bl	80016f6 <_ZN18MeasurementStorage12resetCounterEv>

	uint16_t maxSize = (pageLen * freePages) / MeasEntry::len;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	7b1b      	ldrb	r3, [r3, #12]
 80015d0:	461a      	mov	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	89db      	ldrh	r3, [r3, #14]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <_ZN18MeasurementStorage4initEy+0x4c>)
 80015dc:	fb82 1203 	smull	r1, r2, r2, r3
 80015e0:	441a      	add	r2, r3
 80015e2:	1092      	asrs	r2, r2, #2
 80015e4:	17db      	asrs	r3, r3, #31
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	82fb      	strh	r3, [r7, #22]

	setMaxSize(maxSize);
 80015ea:	8afb      	ldrh	r3, [r7, #22]
 80015ec:	4619      	mov	r1, r3
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 f8e8 	bl	80017c4 <_ZN18MeasurementStorage10setMaxSizeEt>
}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	92492493 	.word	0x92492493

08001600 <_ZN18MeasurementStorage16incrementCounterEv>:

void MeasurementStorage::incrementCounter()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af06      	add	r7, sp, #24
 8001606:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t counter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	817b      	strh	r3, [r7, #10]
	uint16_t maxSize = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	813b      	strh	r3, [r7, #8]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6898      	ldr	r0, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	791b      	ldrb	r3, [r3, #4]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b299      	uxth	r1, r3
 8001620:	2305      	movs	r3, #5
 8001622:	9304      	str	r3, [sp, #16]
 8001624:	2364      	movs	r3, #100	@ 0x64
 8001626:	9303      	str	r3, [sp, #12]
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	2302      	movs	r3, #2
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	f107 030a 	add.w	r3, r7, #10
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2302      	movs	r3, #2
 800163a:	2208      	movs	r2, #8
 800163c:	f7ff fed6 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001640:	4603      	mov	r3, r0
 8001642:	737b      	strb	r3, [r7, #13]
	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&maxSize, sizeof(uint16_t), HAL_MAX_DELAY);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6898      	ldr	r0, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	791b      	ldrb	r3, [r3, #4]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	b299      	uxth	r1, r3
 8001650:	2305      	movs	r3, #5
 8001652:	9304      	str	r3, [sp, #16]
 8001654:	2364      	movs	r3, #100	@ 0x64
 8001656:	9303      	str	r3, [sp, #12]
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2302      	movs	r3, #2
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2302      	movs	r3, #2
 800166a:	2208      	movs	r2, #8
 800166c:	f7ff febe 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001670:	4603      	mov	r3, r0
 8001672:	737b      	strb	r3, [r7, #13]

	counter++;
 8001674:	897b      	ldrh	r3, [r7, #10]
 8001676:	3301      	adds	r3, #1
 8001678:	b29b      	uxth	r3, r3
 800167a:	817b      	strh	r3, [r7, #10]

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6898      	ldr	r0, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	791b      	ldrb	r3, [r3, #4]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	b299      	uxth	r1, r3
 8001688:	2305      	movs	r3, #5
 800168a:	9304      	str	r3, [sp, #16]
 800168c:	2364      	movs	r3, #100	@ 0x64
 800168e:	9303      	str	r3, [sp, #12]
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	2302      	movs	r3, #2
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	f107 030a 	add.w	r3, r7, #10
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2302      	movs	r3, #2
 80016a2:	2208      	movs	r2, #8
 80016a4:	f7ff fe66 	bl	8001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 80016a8:	4603      	mov	r3, r0
 80016aa:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 80016ac:	7b7b      	ldrb	r3, [r7, #13]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00c      	beq.n	80016cc <_ZN18MeasurementStorage16incrementCounterEv+0xcc>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <_ZN18MeasurementStorage16incrementCounterEv+0xcc>
	{
		errors += I2C_error;
 80016ba:	89fb      	ldrh	r3, [r7, #14]
 80016bc:	3308      	adds	r3, #8
 80016be:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	89fa      	ldrh	r2, [r7, #14]
 80016c6:	4611      	mov	r1, r2
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
	}

	if( counter == maxSize && errorHandler != NULL)
 80016cc:	897a      	ldrh	r2, [r7, #10]
 80016ce:	893b      	ldrh	r3, [r7, #8]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d10c      	bne.n	80016ee <_ZN18MeasurementStorage16incrementCounterEv+0xee>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <_ZN18MeasurementStorage16incrementCounterEv+0xee>
	{
		errors += Overflow_write_error;
 80016dc:	89fb      	ldrh	r3, [r7, #14]
 80016de:	3301      	adds	r3, #1
 80016e0:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	89fa      	ldrh	r2, [r7, #14]
 80016e8:	4611      	mov	r1, r2
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
	}
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_ZN18MeasurementStorage12resetCounterEv>:

void MeasurementStorage::resetCounter()
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b08a      	sub	sp, #40	@ 0x28
 80016fa:	af06      	add	r7, sp, #24
 80016fc:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t counter = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	817b      	strh	r3, [r7, #10]

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6898      	ldr	r0, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	791b      	ldrb	r3, [r3, #4]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	b299      	uxth	r1, r3
 8001712:	2305      	movs	r3, #5
 8001714:	9304      	str	r3, [sp, #16]
 8001716:	2364      	movs	r3, #100	@ 0x64
 8001718:	9303      	str	r3, [sp, #12]
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	2302      	movs	r3, #2
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	f107 030a 	add.w	r3, r7, #10
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2302      	movs	r3, #2
 800172c:	2208      	movs	r2, #8
 800172e:	f7ff fe21 	bl	8001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001732:	4603      	mov	r3, r0
 8001734:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 8001736:	7b7b      	ldrb	r3, [r7, #13]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00c      	beq.n	8001756 <_ZN18MeasurementStorage12resetCounterEv+0x60>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <_ZN18MeasurementStorage12resetCounterEv+0x60>
	{
		errors += I2C_error;
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	3308      	adds	r3, #8
 8001748:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	89fa      	ldrh	r2, [r7, #14]
 8001750:	4611      	mov	r1, r2
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
	}
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_ZN18MeasurementStorage12setTimestampEy>:

void MeasurementStorage::setTimestamp(uint64_t timestamp_p)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b08c      	sub	sp, #48	@ 0x30
 8001762:	af06      	add	r7, sp, #24
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t errors = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef stat;

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, TIMESTAMP_ADDRESS, sizeof(uint16_t), (uint8_t*)&timestamp_p, sizeof(uint64_t), HAL_MAX_DELAY);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6898      	ldr	r0, [r3, #8]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	b299      	uxth	r1, r3
 800177a:	2305      	movs	r3, #5
 800177c:	9304      	str	r3, [sp, #16]
 800177e:	2364      	movs	r3, #100	@ 0x64
 8001780:	9303      	str	r3, [sp, #12]
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	2308      	movs	r3, #8
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	463b      	mov	r3, r7
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2302      	movs	r3, #2
 8001792:	2200      	movs	r2, #0
 8001794:	f7ff fdee 	bl	8001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001798:	4603      	mov	r3, r0
 800179a:	757b      	strb	r3, [r7, #21]

	if( stat != HAL_OK && errorHandler != NULL)
 800179c:	7d7b      	ldrb	r3, [r7, #21]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <_ZN18MeasurementStorage12setTimestampEy+0x5e>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <_ZN18MeasurementStorage12setTimestampEy+0x5e>
	{
		errors += I2C_error;
 80017aa:	8afb      	ldrh	r3, [r7, #22]
 80017ac:	3308      	adds	r3, #8
 80017ae:	82fb      	strh	r3, [r7, #22]
		errorHandler(this, errors);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	8afa      	ldrh	r2, [r7, #22]
 80017b6:	4611      	mov	r1, r2
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	4798      	blx	r3
	}
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_ZN18MeasurementStorage10setMaxSizeEt>:

void MeasurementStorage::setMaxSize(uint16_t maxSize_p)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	@ 0x28
 80017c8:	af06      	add	r7, sp, #24
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
	uint16_t errors = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, MAX_SIZE_ADDRESS, sizeof(uint16_t), (uint8_t*)&maxSize_p, sizeof(uint16_t), HAL_MAX_DELAY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6898      	ldr	r0, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	791b      	ldrb	r3, [r3, #4]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	b299      	uxth	r1, r3
 80017e0:	2305      	movs	r3, #5
 80017e2:	9304      	str	r3, [sp, #16]
 80017e4:	2364      	movs	r3, #100	@ 0x64
 80017e6:	9303      	str	r3, [sp, #12]
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	2302      	movs	r3, #2
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	1cbb      	adds	r3, r7, #2
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2302      	movs	r3, #2
 80017f8:	220a      	movs	r2, #10
 80017fa:	f7ff fdbb 	bl	8001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 80017fe:	4603      	mov	r3, r0
 8001800:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 8001802:	7b7b      	ldrb	r3, [r7, #13]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <_ZN18MeasurementStorage10setMaxSizeEt+0x5e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <_ZN18MeasurementStorage10setMaxSizeEt+0x5e>
	{
		errors += I2C_error;
 8001810:	89fb      	ldrh	r3, [r7, #14]
 8001812:	3308      	adds	r3, #8
 8001814:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	89fa      	ldrh	r2, [r7, #14]
 800181c:	4611      	mov	r1, r2
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
	}
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_ZN18MeasurementStorage11readCounterEv>:

uint16_t MeasurementStorage::readCounter()
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b08a      	sub	sp, #40	@ 0x28
 800182e:	af06      	add	r7, sp, #24
 8001830:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t counter = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	817b      	strh	r3, [r7, #10]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6898      	ldr	r0, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	791b      	ldrb	r3, [r3, #4]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	b299      	uxth	r1, r3
 8001846:	2305      	movs	r3, #5
 8001848:	9304      	str	r3, [sp, #16]
 800184a:	2364      	movs	r3, #100	@ 0x64
 800184c:	9303      	str	r3, [sp, #12]
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	2302      	movs	r3, #2
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	f107 030a 	add.w	r3, r7, #10
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2302      	movs	r3, #2
 8001860:	2208      	movs	r2, #8
 8001862:	f7ff fdc3 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001866:	4603      	mov	r3, r0
 8001868:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 800186a:	7b7b      	ldrb	r3, [r7, #13]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <_ZN18MeasurementStorage11readCounterEv+0x60>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <_ZN18MeasurementStorage11readCounterEv+0x60>
	{
		errors += I2C_error;
 8001878:	89fb      	ldrh	r3, [r7, #14]
 800187a:	3308      	adds	r3, #8
 800187c:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	89fa      	ldrh	r2, [r7, #14]
 8001884:	4611      	mov	r1, r2
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
	}

	return counter;
 800188a:	897b      	ldrh	r3, [r7, #10]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZN18MeasurementStorage13readTimestampEv>:

uint64_t MeasurementStorage::readTimestamp()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	@ 0x30
 8001898:	af06      	add	r7, sp, #24
 800189a:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef stat;
	uint64_t timestamp = 0;
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, TIMESTAMP_ADDRESS, sizeof(uint16_t), (uint8_t*)&timestamp, sizeof(uint64_t), HAL_MAX_DELAY);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6898      	ldr	r0, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	791b      	ldrb	r3, [r3, #4]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b299      	uxth	r1, r3
 80018b8:	2305      	movs	r3, #5
 80018ba:	9304      	str	r3, [sp, #16]
 80018bc:	2364      	movs	r3, #100	@ 0x64
 80018be:	9303      	str	r3, [sp, #12]
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	2308      	movs	r3, #8
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2302      	movs	r3, #2
 80018d2:	2200      	movs	r2, #0
 80018d4:	f7ff fd8a 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 80018d8:	4603      	mov	r3, r0
 80018da:	757b      	strb	r3, [r7, #21]

	if( stat != HAL_OK && errorHandler != NULL)
 80018dc:	7d7b      	ldrb	r3, [r7, #21]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <_ZN18MeasurementStorage13readTimestampEv+0x68>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <_ZN18MeasurementStorage13readTimestampEv+0x68>
	{
		errors += I2C_error;
 80018ea:	8afb      	ldrh	r3, [r7, #22]
 80018ec:	3308      	adds	r3, #8
 80018ee:	82fb      	strh	r3, [r7, #22]
		errorHandler(this, errors);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	8afa      	ldrh	r2, [r7, #22]
 80018f6:	4611      	mov	r1, r2
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
	}

	return timestamp;
 80018fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_ZN18MeasurementStorage10getMaxSizeEv>:

uint16_t MeasurementStorage::getMaxSize()
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b08a      	sub	sp, #40	@ 0x28
 800190e:	af06      	add	r7, sp, #24
 8001910:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t maxSize = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	817b      	strh	r3, [r7, #10]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, MAX_SIZE_ADDRESS, sizeof(uint16_t), (uint8_t*)&maxSize, sizeof(uint16_t), HAL_MAX_DELAY);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6898      	ldr	r0, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	791b      	ldrb	r3, [r3, #4]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b299      	uxth	r1, r3
 8001926:	2305      	movs	r3, #5
 8001928:	9304      	str	r3, [sp, #16]
 800192a:	2364      	movs	r3, #100	@ 0x64
 800192c:	9303      	str	r3, [sp, #12]
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	2302      	movs	r3, #2
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	f107 030a 	add.w	r3, r7, #10
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2302      	movs	r3, #2
 8001940:	220a      	movs	r2, #10
 8001942:	f7ff fd53 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001946:	4603      	mov	r3, r0
 8001948:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 800194a:	7b7b      	ldrb	r3, [r7, #13]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00c      	beq.n	800196a <_ZN18MeasurementStorage10getMaxSizeEv+0x60>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <_ZN18MeasurementStorage10getMaxSizeEv+0x60>
	{
		errors += I2C_error;
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	3308      	adds	r3, #8
 800195c:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	89fa      	ldrh	r2, [r7, #14]
 8001964:	4611      	mov	r1, r2
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
	}

	return maxSize;
 800196a:	897b      	ldrh	r3, [r7, #10]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZN18MeasurementStorage8addEntryE9MeasEntry>:

void MeasurementStorage::addEntry(MeasEntry MeasEntry_p)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b08b      	sub	sp, #44	@ 0x2c
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t EntryBuffer[MeasEntry::len];
	for(uint8_t i = 0; i<MeasEntry::len; i++) { EntryBuffer[i] = 0; }
 8001982:	2300      	movs	r3, #0
 8001984:	77fb      	strb	r3, [r7, #31]
 8001986:	e008      	b.n	800199a <_ZN18MeasurementStorage8addEntryE9MeasEntry+0x26>
 8001988:	7ffb      	ldrb	r3, [r7, #31]
 800198a:	3320      	adds	r3, #32
 800198c:	443b      	add	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	3301      	adds	r3, #1
 8001998:	77fb      	strb	r3, [r7, #31]
 800199a:	7ffb      	ldrb	r3, [r7, #31]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d9f3      	bls.n	8001988 <_ZN18MeasurementStorage8addEntryE9MeasEntry+0x14>

	memcpy((uint8_t*)(EntryBuffer), 									&(MeasEntry_p.measID), 		sizeof(uint8_t));
 80019a0:	793b      	ldrb	r3, [r7, #4]
 80019a2:	743b      	strb	r3, [r7, #16]
	memcpy((uint8_t*)(EntryBuffer+sizeof(uint8_t)), 					&(MeasEntry_p.deltaT), 		sizeof(uint16_t));
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	3301      	adds	r3, #1
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)(EntryBuffer+sizeof(uint8_t)+sizeof(uint16_t)), 	&(MeasEntry_p.measData), 	sizeof(uint32_t));
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	3303      	adds	r3, #3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	601a      	str	r2, [r3, #0]

	uint16_t counter = readCounter();
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff ff36 	bl	800182a <_ZN18MeasurementStorage11readCounterEv>
 80019be:	4603      	mov	r3, r0
 80019c0:	83bb      	strh	r3, [r7, #28]
	uint16_t EntryAddr = pageLen + (counter * MeasEntry::len);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	7b1b      	ldrb	r3, [r3, #12]
 80019c6:	461a      	mov	r2, r3
 80019c8:	8bbb      	ldrh	r3, [r7, #28]
 80019ca:	4619      	mov	r1, r3
 80019cc:	00c9      	lsls	r1, r1, #3
 80019ce:	1acb      	subs	r3, r1, r3
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	837b      	strh	r3, [r7, #26]

	writeMultiPage(I2Ccontroller, EEPROMAddress, EntryAddr, EntryBuffer, MeasEntry::len, pageLen);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6898      	ldr	r0, [r3, #8]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	7919      	ldrb	r1, [r3, #4]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	7b1b      	ldrb	r3, [r3, #12]
 80019e2:	f107 0410 	add.w	r4, r7, #16
 80019e6:	8b7a      	ldrh	r2, [r7, #26]
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	2307      	movs	r3, #7
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4623      	mov	r3, r4
 80019f0:	f7ff fd3f 	bl	8001472 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth>

	incrementCounter();
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fe03 	bl	8001600 <_ZN18MeasurementStorage16incrementCounterEv>
}
 80019fa:	bf00      	nop
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd90      	pop	{r4, r7, pc}

08001a02 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry>:

bool MeasurementStorage::getEntryAt(uint16_t location_p, MeasEntry* entryBuffer_p)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b08e      	sub	sp, #56	@ 0x38
 8001a06:	af06      	add	r7, sp, #24
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	817b      	strh	r3, [r7, #10]
	uint16_t errors = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	83fb      	strh	r3, [r7, #30]
	uint16_t count = readCounter();
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f7ff ff08 	bl	800182a <_ZN18MeasurementStorage11readCounterEv>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	83bb      	strh	r3, [r7, #28]
	uint16_t maxSize = getMaxSize();
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff ff73 	bl	800190a <_ZN18MeasurementStorage10getMaxSizeEv>
 8001a24:	4603      	mov	r3, r0
 8001a26:	837b      	strh	r3, [r7, #26]

	//Want to read outside of boundaries. -1, as counter of 0 means 0 stored, the "writer head" is set to 0, where as location starts from 0
	if(count == 0)
 8001a28:	8bbb      	ldrh	r3, [r7, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x4a>
	{
		if( errorHandler != NULL)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x46>
		{
			errors += Empty_MS_error;
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	83fb      	strh	r3, [r7, #30]
			errorHandler(this, errors);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	8bfa      	ldrh	r2, [r7, #30]
 8001a42:	4611      	mov	r1, r2
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	4798      	blx	r3
		}
		return false;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e05c      	b.n	8001b06 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x104>
	}

	else if( (location_p > maxSize-1) or (count > maxSize))
 8001a4c:	8b7a      	ldrh	r2, [r7, #26]
 8001a4e:	897b      	ldrh	r3, [r7, #10]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d903      	bls.n	8001a5c <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x5a>
 8001a54:	8bba      	ldrh	r2, [r7, #28]
 8001a56:	8b7b      	ldrh	r3, [r7, #26]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d90e      	bls.n	8001a7a <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x78>
	{
		if( errorHandler != NULL)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x74>
		{
			errors += Maxsize_error;
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	3310      	adds	r3, #16
 8001a68:	83fb      	strh	r3, [r7, #30]
			errorHandler(this, errors);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	8bfa      	ldrh	r2, [r7, #30]
 8001a70:	4611      	mov	r1, r2
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	4798      	blx	r3
		}
		return false;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e045      	b.n	8001b06 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x104>
	}

	else if(location_p > count-1)
 8001a7a:	8bba      	ldrh	r2, [r7, #28]
 8001a7c:	897b      	ldrh	r3, [r7, #10]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d80e      	bhi.n	8001aa0 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x9e>
	{
		if( errorHandler != NULL)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x9a>
		{
			errors += Overflow_read_error;
 8001a8a:	8bfb      	ldrh	r3, [r7, #30]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	83fb      	strh	r3, [r7, #30]
			errorHandler(this, errors);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	8bfa      	ldrh	r2, [r7, #30]
 8001a96:	4611      	mov	r1, r2
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	4798      	blx	r3
		}
		return false;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e032      	b.n	8001b06 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x104>
	}

	uint16_t EntryAddr = pageLen + (location_p * MeasEntry::len);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	897b      	ldrh	r3, [r7, #10]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	00c9      	lsls	r1, r1, #3
 8001aac:	1acb      	subs	r3, r1, r3
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	833b      	strh	r3, [r7, #24]

	uint8_t readBuffer[MeasEntry::len];

	readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, EntryAddr, sizeof(uint16_t), readBuffer, MeasEntry::len, HAL_MAX_DELAY);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6898      	ldr	r0, [r3, #8]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	8b3a      	ldrh	r2, [r7, #24]
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	9304      	str	r3, [sp, #16]
 8001ac6:	2364      	movs	r3, #100	@ 0x64
 8001ac8:	9303      	str	r3, [sp, #12]
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2302      	movs	r3, #2
 8001adc:	f7ff fc86 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>

	memcpy(&entryBuffer_p->measID, 		(uint8_t*)(readBuffer), 									sizeof(uint8_t));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7c3a      	ldrb	r2, [r7, #16]
 8001ae4:	701a      	strb	r2, [r3, #0]
	memcpy(&entryBuffer_p->deltaT, 		(uint8_t*)(readBuffer+sizeof(uint8_t)),						sizeof(uint16_t));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	1c9a      	adds	r2, r3, #2
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	3301      	adds	r3, #1
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	8013      	strh	r3, [r2, #0]
	memcpy(&entryBuffer_p->measData,	(uint8_t*)(readBuffer+sizeof(uint8_t)+sizeof(uint16_t)),	sizeof(uint32_t));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	1d1a      	adds	r2, r3, #4
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	3303      	adds	r3, #3
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6013      	str	r3, [r2, #0]

	return true;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_Z8i2cScannP17I2C_HandleTypeDefPh>:
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void i2cScann(I2C_HandleTypeDef *hi2c_p, uint8_t* devicesBuffer_p)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	for(uint8_t i = 0; i<128; i++){ devicesBuffer_p[i] = 0; }
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e007      	b.n	8001b2e <_Z8i2cScannP17I2C_HandleTypeDefPh+0x20>
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	daf3      	bge.n	8001b1e <_Z8i2cScannP17I2C_HandleTypeDefPh+0x10>

	uint8_t j = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<128; i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	737b      	strb	r3, [r7, #13]
 8001b3e:	e018      	b.n	8001b72 <_Z8i2cScannP17I2C_HandleTypeDefPh+0x64>
	{
		status = HAL_I2C_IsDeviceReady(hi2c_p, i<<1, 2, 100);
 8001b40:	7b7b      	ldrb	r3, [r7, #13]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	b299      	uxth	r1, r3
 8001b48:	2364      	movs	r3, #100	@ 0x64
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f002 f825 	bl	8003b9c <HAL_I2C_IsDeviceReady>
 8001b52:	4603      	mov	r3, r0
 8001b54:	733b      	strb	r3, [r7, #12]
		if(status == HAL_OK)
 8001b56:	7b3b      	ldrb	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <_Z8i2cScannP17I2C_HandleTypeDefPh+0x5e>
		{
			devicesBuffer_p[j] = i;
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	4413      	add	r3, r2
 8001b62:	7b7a      	ldrb	r2, [r7, #13]
 8001b64:	701a      	strb	r2, [r3, #0]
			j++;
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<128; i++)
 8001b6c:	7b7b      	ldrb	r3, [r7, #13]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	737b      	strb	r3, [r7, #13]
 8001b72:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	dae2      	bge.n	8001b40 <_Z8i2cScannP17I2C_HandleTypeDefPh+0x32>
		}
	}
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_Z13handleMessagev>:

void handleMessage()
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

	uint8_t matchResult = sscanf((const char*)FinalData, "%s %s", commandBuffer, argBuffer);
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001b8c:	4a6d      	ldr	r2, [pc, #436]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001b8e:	496e      	ldr	r1, [pc, #440]	@ (8001d48 <_Z13handleMessagev+0x1c4>)
 8001b90:	486e      	ldr	r0, [pc, #440]	@ (8001d4c <_Z13handleMessagev+0x1c8>)
 8001b92:	f006 fb75 	bl	8008280 <sscanf>
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]

	if(matchResult > 0)
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80ca 	beq.w	8001d36 <_Z13handleMessagev+0x1b2>
	{
		if( strcmp((const char*) commandBuffer, MEAS_command) == 0)
 8001ba2:	4b6b      	ldr	r3, [pc, #428]	@ (8001d50 <_Z13handleMessagev+0x1cc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4866      	ldr	r0, [pc, #408]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001baa:	f7fe fb31 	bl	8000210 <strcmp>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d103      	bne.n	8001bbc <_Z13handleMessagev+0x38>
		{
			currentState = MEAS;
 8001bb4:	4b67      	ldr	r3, [pc, #412]	@ (8001d54 <_Z13handleMessagev+0x1d0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
					currentCommState = INIT;
				}
			}
		}
	}//matchresult
}
 8001bba:	e0bc      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if( strcmp((const char*) commandBuffer, COMM_command) == 0)
 8001bbc:	4b66      	ldr	r3, [pc, #408]	@ (8001d58 <_Z13handleMessagev+0x1d4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4860      	ldr	r0, [pc, #384]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001bc4:	f7fe fb24 	bl	8000210 <strcmp>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <_Z13handleMessagev+0x52>
			currentState = COMM;
 8001bce:	4b61      	ldr	r3, [pc, #388]	@ (8001d54 <_Z13handleMessagev+0x1d0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
}
 8001bd4:	e0af      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if( strcmp((const char*) commandBuffer, GETSTATE_command) == 0)
 8001bd6:	4b61      	ldr	r3, [pc, #388]	@ (8001d5c <_Z13handleMessagev+0x1d8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4859      	ldr	r0, [pc, #356]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001bde:	f7fe fb17 	bl	8000210 <strcmp>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d11e      	bne.n	8001c26 <_Z13handleMessagev+0xa2>
			switch (currentState)
 8001be8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d54 <_Z13handleMessagev+0x1d0>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <_Z13handleMessagev+0x72>
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d006      	beq.n	8001c02 <_Z13handleMessagev+0x7e>
					break;
 8001bf4:	e00b      	b.n	8001c0e <_Z13handleMessagev+0x8a>
					snprintf(msg, Buffer_Size, "MEAS\r\n");
 8001bf6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d60 <_Z13handleMessagev+0x1dc>)
 8001bf8:	2164      	movs	r1, #100	@ 0x64
 8001bfa:	485a      	ldr	r0, [pc, #360]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001bfc:	f006 fb0c 	bl	8008218 <snprintf>
					break;
 8001c00:	e005      	b.n	8001c0e <_Z13handleMessagev+0x8a>
					snprintf(msg, Buffer_Size, "COMM\r\n");
 8001c02:	4a59      	ldr	r2, [pc, #356]	@ (8001d68 <_Z13handleMessagev+0x1e4>)
 8001c04:	2164      	movs	r1, #100	@ 0x64
 8001c06:	4857      	ldr	r0, [pc, #348]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c08:	f006 fb06 	bl	8008218 <snprintf>
					break;
 8001c0c:	bf00      	nop
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001c0e:	4855      	ldr	r0, [pc, #340]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c10:	f7fe fb5e 	bl	80002d0 <strlen>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	4951      	ldr	r1, [pc, #324]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c1e:	4853      	ldr	r0, [pc, #332]	@ (8001d6c <_Z13handleMessagev+0x1e8>)
 8001c20:	f004 fd3e 	bl	80066a0 <HAL_UART_Transmit>
}
 8001c24:	e087      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if( strcmp((const char*) commandBuffer, WHOAMI_command) == 0)
 8001c26:	4b52      	ldr	r3, [pc, #328]	@ (8001d70 <_Z13handleMessagev+0x1ec>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4845      	ldr	r0, [pc, #276]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001c2e:	f7fe faef 	bl	8000210 <strcmp>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d110      	bne.n	8001c5a <_Z13handleMessagev+0xd6>
			snprintf(msg, Buffer_Size, "MEAS_STATION\r\n");
 8001c38:	4a4e      	ldr	r2, [pc, #312]	@ (8001d74 <_Z13handleMessagev+0x1f0>)
 8001c3a:	2164      	movs	r1, #100	@ 0x64
 8001c3c:	4849      	ldr	r0, [pc, #292]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c3e:	f006 faeb 	bl	8008218 <snprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001c42:	4848      	ldr	r0, [pc, #288]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c44:	f7fe fb44 	bl	80002d0 <strlen>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c50:	4944      	ldr	r1, [pc, #272]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c52:	4846      	ldr	r0, [pc, #280]	@ (8001d6c <_Z13handleMessagev+0x1e8>)
 8001c54:	f004 fd24 	bl	80066a0 <HAL_UART_Transmit>
}
 8001c58:	e06d      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if( strcmp((const char*) commandBuffer, DISPLAYMEAS_command) == 0)
 8001c5a:	4b47      	ldr	r3, [pc, #284]	@ (8001d78 <_Z13handleMessagev+0x1f4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4838      	ldr	r0, [pc, #224]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001c62:	f7fe fad5 	bl	8000210 <strcmp>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d119      	bne.n	8001ca0 <_Z13handleMessagev+0x11c>
			if(strcmp((const char*) argBuffer, DISPLAYMEAS_arg_true) == 0)
 8001c6c:	4b43      	ldr	r3, [pc, #268]	@ (8001d7c <_Z13handleMessagev+0x1f8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	4833      	ldr	r0, [pc, #204]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001c74:	f7fe facc 	bl	8000210 <strcmp>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <_Z13handleMessagev+0x102>
				displayMeas = true;
 8001c7e:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <_Z13handleMessagev+0x1fc>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
}
 8001c84:	e057      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
			else if(strcmp((const char*) argBuffer, DISPLAYMEAS_arg_false) == 0)
 8001c86:	4b3f      	ldr	r3, [pc, #252]	@ (8001d84 <_Z13handleMessagev+0x200>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482c      	ldr	r0, [pc, #176]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001c8e:	f7fe fabf 	bl	8000210 <strcmp>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d14e      	bne.n	8001d36 <_Z13handleMessagev+0x1b2>
				displayMeas = false;
 8001c98:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <_Z13handleMessagev+0x1fc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	e04a      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if(matchResult == 2 && strcmp((const char*) commandBuffer, FREQ_command) == 0)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d10e      	bne.n	8001cc4 <_Z13handleMessagev+0x140>
 8001ca6:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <_Z13handleMessagev+0x204>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4825      	ldr	r0, [pc, #148]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001cae:	f7fe faaf 	bl	8000210 <strcmp>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <_Z13handleMessagev+0x140>
			sscanf((const char*)argBuffer, "%lu", &measFrequency);
 8001cb8:	4a34      	ldr	r2, [pc, #208]	@ (8001d8c <_Z13handleMessagev+0x208>)
 8001cba:	4935      	ldr	r1, [pc, #212]	@ (8001d90 <_Z13handleMessagev+0x20c>)
 8001cbc:	4820      	ldr	r0, [pc, #128]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001cbe:	f006 fadf 	bl	8008280 <sscanf>
}
 8001cc2:	e038      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if(currentState == COMM)
 8001cc4:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <_Z13handleMessagev+0x1d0>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d134      	bne.n	8001d36 <_Z13handleMessagev+0x1b2>
			if( strcmp((const char*) commandBuffer, CommIDLE_command) == 0)
 8001ccc:	4b31      	ldr	r3, [pc, #196]	@ (8001d94 <_Z13handleMessagev+0x210>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481c      	ldr	r0, [pc, #112]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001cd4:	f7fe fa9c 	bl	8000210 <strcmp>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <_Z13handleMessagev+0x162>
				currentCommState = IDLE;
 8001cde:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <_Z13handleMessagev+0x214>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e00b      	b.n	8001cfe <_Z13handleMessagev+0x17a>
			else if( strcmp((const char*) commandBuffer, CommREADOUT_command) == 0)
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d9c <_Z13handleMessagev+0x218>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4815      	ldr	r0, [pc, #84]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001cee:	f7fe fa8f 	bl	8000210 <strcmp>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_Z13handleMessagev+0x17a>
				currentCommState = READOUT;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	@ (8001d98 <_Z13handleMessagev+0x214>)
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	701a      	strb	r2, [r3, #0]
			if(matchResult == 2 && strcmp((const char*) commandBuffer, CommINIT_command) == 0)
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d118      	bne.n	8001d36 <_Z13handleMessagev+0x1b2>
 8001d04:	4b26      	ldr	r3, [pc, #152]	@ (8001da0 <_Z13handleMessagev+0x21c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480e      	ldr	r0, [pc, #56]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001d0c:	f7fe fa80 	bl	8000210 <strcmp>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <_Z13handleMessagev+0x1b2>
				if( sscanf((const char*)argBuffer, "%llu", &initTimeastamp) == 1)
 8001d16:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <_Z13handleMessagev+0x220>)
 8001d18:	4923      	ldr	r1, [pc, #140]	@ (8001da8 <_Z13handleMessagev+0x224>)
 8001d1a:	4809      	ldr	r0, [pc, #36]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001d1c:	f006 fab0 	bl	8008280 <sscanf>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	bf0c      	ite	eq
 8001d26:	2301      	moveq	r3, #1
 8001d28:	2300      	movne	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <_Z13handleMessagev+0x1b2>
					currentCommState = INIT;
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <_Z13handleMessagev+0x214>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200008c0 	.word	0x200008c0
 8001d44:	2000085c 	.word	0x2000085c
 8001d48:	0800f9e8 	.word	0x0800f9e8
 8001d4c:	20000a04 	.word	0x20000a04
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000929 	.word	0x20000929
 8001d58:	2000000c 	.word	0x2000000c
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	0800f9f0 	.word	0x0800f9f0
 8001d64:	20000938 	.word	0x20000938
 8001d68:	0800f9f8 	.word	0x0800f9f8
 8001d6c:	20000808 	.word	0x20000808
 8001d70:	20000014 	.word	0x20000014
 8001d74:	0800fa00 	.word	0x0800fa00
 8001d78:	2000001c 	.word	0x2000001c
 8001d7c:	20000020 	.word	0x20000020
 8001d80:	20000004 	.word	0x20000004
 8001d84:	20000024 	.word	0x20000024
 8001d88:	20000018 	.word	0x20000018
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	0800fa10 	.word	0x0800fa10
 8001d94:	20000028 	.word	0x20000028
 8001d98:	2000092a 	.word	0x2000092a
 8001d9c:	20000030 	.word	0x20000030
 8001da0:	2000002c 	.word	0x2000002c
 8001da4:	20000930 	.word	0x20000930
 8001da8:	0800fa14 	.word	0x0800fa14

08001dac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	sendComplete = true;
 8001db4:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <HAL_UART_TxCpltCallback+0x1c>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000034 	.word	0x20000034

08001dcc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) // Ellenőrizni, hogy melyik UART periféria váltotta ki a megszakítást
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <HAL_UART_RxCpltCallback+0x7c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d130      	bne.n	8001e40 <HAL_UART_RxCpltCallback+0x74>
    {
    	if(idx > Buffer_Size)
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b64      	cmp	r3, #100	@ 0x64
 8001de4:	d902      	bls.n	8001dec <HAL_UART_RxCpltCallback+0x20>
    	{
    		idx = 0;
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
    	}

    	memcpy(RxData+idx, tmp, 1);
 8001dec:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <HAL_UART_RxCpltCallback+0x84>)
 8001df4:	4413      	add	r3, r2
 8001df6:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <HAL_UART_RxCpltCallback+0x88>)
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	701a      	strb	r2, [r3, #0]
    	idx++;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001e06:	701a      	strb	r2, [r3, #0]

    	if (tmp[0] == '\r')
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_UART_RxCpltCallback+0x88>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b0d      	cmp	r3, #13
 8001e0e:	d112      	bne.n	8001e36 <HAL_UART_RxCpltCallback+0x6a>
    	{
    		RxData[idx-1] = '\0';//change \r to \0
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <HAL_UART_RxCpltCallback+0x84>)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	54d1      	strb	r1, [r2, r3]
    		memcpy(FinalData, RxData, Buffer_Size);
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e58 <HAL_UART_RxCpltCallback+0x8c>)
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_UART_RxCpltCallback+0x84>)
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	2364      	movs	r3, #100	@ 0x64
 8001e26:	461a      	mov	r2, r3
 8001e28:	f006 fb46 	bl	80084b8 <memcpy>
    		idx = 0;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
    		handleMessage();
 8001e32:	f7ff fea7 	bl	8001b84 <_Z13handleMessagev>
    	}


    	HAL_UART_Receive_IT(&huart2, tmp, 1);
 8001e36:	2201      	movs	r2, #1
 8001e38:	4906      	ldr	r1, [pc, #24]	@ (8001e54 <HAL_UART_RxCpltCallback+0x88>)
 8001e3a:	4808      	ldr	r0, [pc, #32]	@ (8001e5c <HAL_UART_RxCpltCallback+0x90>)
 8001e3c:	f004 fcbb 	bl	80067b6 <HAL_UART_Receive_IT>

    }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40004400 	.word	0x40004400
 8001e4c:	20000a68 	.word	0x20000a68
 8001e50:	2000099c 	.word	0x2000099c
 8001e54:	20000a00 	.word	0x20000a00
 8001e58:	20000a04 	.word	0x20000a04
 8001e5c:	20000808 	.word	0x20000808

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b0aa      	sub	sp, #168	@ 0xa8
 8001e64:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e66:	f000 fe21 	bl	8002aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e6a:	f000 f931 	bl	80020d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6e:	f000 faa3 	bl	80023b8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001e72:	f000 fa73 	bl	800235c <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8001e76:	f000 f9a3 	bl	80021c0 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8001e7a:	f000 f9d5 	bl	8002228 <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 8001e7e:	f000 fa0f 	bl	80022a0 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  myPT100.init();
 8001e82:	2101      	movs	r1, #1
 8001e84:	487f      	ldr	r0, [pc, #508]	@ (8002084 <main+0x224>)
 8001e86:	f7ff f971 	bl	800116c <_ZN8MAX318654initE24MAX31865_FilterSetting_t>
  myPT100.startContinousMeas();
 8001e8a:	487e      	ldr	r0, [pc, #504]	@ (8002084 <main+0x224>)
 8001e8c:	f7ff fa09 	bl	80012a2 <_ZN8MAX3186518startContinousMeasEv>

  uint8_t devices[128];
  i2cScann(&hi2c1, devices);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	487c      	ldr	r0, [pc, #496]	@ (8002088 <main+0x228>)
 8001e98:	f7ff fe39 	bl	8001b0e <_Z8i2cScannP17I2C_HandleTypeDefPh>

  readFromEEPROM(&hi2c1, EEPROM_ADDRESS<<1, memAddress, sizeof(memAddress), firstTwoPage1, sizeof(firstTwoPage1), HAL_MAX_DELAY);

  */

  HAL_UART_Receive_IT(&huart2, tmp, 1);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	497b      	ldr	r1, [pc, #492]	@ (800208c <main+0x22c>)
 8001ea0:	487b      	ldr	r0, [pc, #492]	@ (8002090 <main+0x230>)
 8001ea2:	f004 fc88 	bl	80067b6 <HAL_UART_Receive_IT>

  bool onEntry_meas = true;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  bool onEntry_comm = true;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
    /* USER CODE BEGIN 3 */
	  /* switch-case -> állapotgép
	   * az állapotot lehessen lekérdezni is, ezt a beérkező parancsokat kezelő fgv.-ben kell kezelni.
	   *
	   * */
		switch (currentState)
 8001eb2:	4b78      	ldr	r3, [pc, #480]	@ (8002094 <main+0x234>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <main+0x60>
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d05e      	beq.n	8001f7c <main+0x11c>
						break;
				}
			}
				break;
			default:
				break;
 8001ebe:	e0df      	b.n	8002080 <main+0x220>
				if(onEntry_meas)//Start the timer
 8001ec0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <main+0x80>
					HAL_TIM_Base_Start_IT(&htim3);
 8001ec8:	4873      	ldr	r0, [pc, #460]	@ (8002098 <main+0x238>)
 8001eca:	f003 ff73 	bl	8005db4 <HAL_TIM_Base_Start_IT>
					onEntry_meas = false;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					onEntry_comm = true;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
					currentCommState = IDLE; //The next time COMM state is entered it will be idle
 8001eda:	4b70      	ldr	r3, [pc, #448]	@ (800209c <main+0x23c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
				if(timeInterruptTick)//Storing the Data
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80020a0 <main+0x240>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d040      	beq.n	8001f6a <main+0x10a>
					float tempMeas = myPT100.getTemp();
 8001ee8:	4866      	ldr	r0, [pc, #408]	@ (8002084 <main+0x224>)
 8001eea:	f7ff fa0b 	bl	8001304 <_ZN8MAX318657getTempEv>
 8001eee:	eef0 7a40 	vmov.f32	s15, s0
 8001ef2:	edc7 7a02 	vstr	s15, [r7, #8]
					memcpy(&data32, (const float*)&tempMeas, sizeof(uint32_t));
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	607b      	str	r3, [r7, #4]
					if(displayMeas)
 8001efa:	4b6a      	ldr	r3, [pc, #424]	@ (80020a4 <main+0x244>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d017      	beq.n	8001f32 <main+0xd2>
						snprintf(msg, Buffer_Size, "%0.3f \r\n", tempMeas);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fb4f 	bl	80005a8 <__aeabi_f2d>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	e9cd 2300 	strd	r2, r3, [sp]
 8001f12:	4a65      	ldr	r2, [pc, #404]	@ (80020a8 <main+0x248>)
 8001f14:	2164      	movs	r1, #100	@ 0x64
 8001f16:	4865      	ldr	r0, [pc, #404]	@ (80020ac <main+0x24c>)
 8001f18:	f006 f97e 	bl	8008218 <snprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f1c:	4863      	ldr	r0, [pc, #396]	@ (80020ac <main+0x24c>)
 8001f1e:	f7fe f9d7 	bl	80002d0 <strlen>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	4960      	ldr	r1, [pc, #384]	@ (80020ac <main+0x24c>)
 8001f2c:	4858      	ldr	r0, [pc, #352]	@ (8002090 <main+0x230>)
 8001f2e:	f004 fbb7 	bl	80066a0 <HAL_UART_Transmit>
					currentMeas.measID = 1;
 8001f32:	4b5f      	ldr	r3, [pc, #380]	@ (80020b0 <main+0x250>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
					currentMeas.deltaT = measFrequency+idleTime;
 8001f38:	4b5e      	ldr	r3, [pc, #376]	@ (80020b4 <main+0x254>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	@ (80020b8 <main+0x258>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	4b59      	ldr	r3, [pc, #356]	@ (80020b0 <main+0x250>)
 8001f4a:	805a      	strh	r2, [r3, #2]
					idleTime = 0;
 8001f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80020b8 <main+0x258>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
					currentMeas.measData = data32;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a56      	ldr	r2, [pc, #344]	@ (80020b0 <main+0x250>)
 8001f56:	6053      	str	r3, [r2, #4]
					myMS.addEntry(currentMeas);
 8001f58:	4b55      	ldr	r3, [pc, #340]	@ (80020b0 <main+0x250>)
 8001f5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f5e:	4857      	ldr	r0, [pc, #348]	@ (80020bc <main+0x25c>)
 8001f60:	f7ff fd08 	bl	8001974 <_ZN18MeasurementStorage8addEntryE9MeasEntry>
					timeInterruptTick = false;
 8001f64:	4b4e      	ldr	r3, [pc, #312]	@ (80020a0 <main+0x240>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
				HAL_SuspendTick();
 8001f6a:	f000 fe35 	bl	8002bd8 <HAL_SuspendTick>
				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001f6e:	2101      	movs	r1, #1
 8001f70:	2000      	movs	r0, #0
 8001f72:	f002 faf5 	bl	8004560 <HAL_PWR_EnterSLEEPMode>
				HAL_ResumeTick();
 8001f76:	f000 fe3f 	bl	8002bf8 <HAL_ResumeTick>
				break;
 8001f7a:	e081      	b.n	8002080 <main+0x220>
				if(onEntry_comm)
 8001f7c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <main+0x130>
					onEntry_meas = true;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					onEntry_comm = false;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
				switch (currentCommState)
 8001f90:	4b42      	ldr	r3, [pc, #264]	@ (800209c <main+0x23c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d00f      	beq.n	8001fb8 <main+0x158>
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	dc6d      	bgt.n	8002078 <main+0x218>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d06d      	beq.n	800207c <main+0x21c>
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d169      	bne.n	8002078 <main+0x218>
						myMS.init(initTimeastamp);
 8001fa4:	4b46      	ldr	r3, [pc, #280]	@ (80020c0 <main+0x260>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	4844      	ldr	r0, [pc, #272]	@ (80020bc <main+0x25c>)
 8001fac:	f7ff fb00 	bl	80015b0 <_ZN18MeasurementStorage4initEy>
						currentCommState = IDLE;
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800209c <main+0x23c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
						break;
 8001fb6:	e062      	b.n	800207e <main+0x21e>
						uint16_t cnt = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
						sniprintf(msg, Buffer_Size, "%llu; %u;\r\n", myMS.readTimestamp(), myMS.readCounter());
 8001fbe:	483f      	ldr	r0, [pc, #252]	@ (80020bc <main+0x25c>)
 8001fc0:	f7ff fc68 	bl	8001894 <_ZN18MeasurementStorage13readTimestampEv>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	460d      	mov	r5, r1
 8001fc8:	483c      	ldr	r0, [pc, #240]	@ (80020bc <main+0x25c>)
 8001fca:	f7ff fc2e 	bl	800182a <_ZN18MeasurementStorage11readCounterEv>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	9302      	str	r3, [sp, #8]
 8001fd2:	e9cd 4500 	strd	r4, r5, [sp]
 8001fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80020c4 <main+0x264>)
 8001fd8:	2164      	movs	r1, #100	@ 0x64
 8001fda:	4834      	ldr	r0, [pc, #208]	@ (80020ac <main+0x24c>)
 8001fdc:	f005 fb5c 	bl	8007698 <sniprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001fe0:	4832      	ldr	r0, [pc, #200]	@ (80020ac <main+0x24c>)
 8001fe2:	f7fe f975 	bl	80002d0 <strlen>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	492f      	ldr	r1, [pc, #188]	@ (80020ac <main+0x24c>)
 8001ff0:	4827      	ldr	r0, [pc, #156]	@ (8002090 <main+0x230>)
 8001ff2:	f004 fb55 	bl	80066a0 <HAL_UART_Transmit>
							if( !myMS.getEntryAt(cnt, &entryBuffer) )
 8001ff6:	f107 020c 	add.w	r2, r7, #12
 8001ffa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001ffe:	4619      	mov	r1, r3
 8002000:	482e      	ldr	r0, [pc, #184]	@ (80020bc <main+0x25c>)
 8002002:	f7ff fcfe 	bl	8001a02 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry>
 8002006:	4603      	mov	r3, r0
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11d      	bne.n	800204e <main+0x1ee>
								cnt++;
 8002012:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002016:	3301      	adds	r3, #1
 8002018:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
								snprintf(msg, Buffer_Size, "%u, %u, %lu;\r\n", entryBuffer.measID, entryBuffer.deltaT, entryBuffer.measData);
 800201c:	7b3b      	ldrb	r3, [r7, #12]
 800201e:	4619      	mov	r1, r3
 8002020:	89fb      	ldrh	r3, [r7, #14]
 8002022:	461a      	mov	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	9200      	str	r2, [sp, #0]
 800202a:	460b      	mov	r3, r1
 800202c:	4a26      	ldr	r2, [pc, #152]	@ (80020c8 <main+0x268>)
 800202e:	2164      	movs	r1, #100	@ 0x64
 8002030:	481e      	ldr	r0, [pc, #120]	@ (80020ac <main+0x24c>)
 8002032:	f006 f8f1 	bl	8008218 <snprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002036:	481d      	ldr	r0, [pc, #116]	@ (80020ac <main+0x24c>)
 8002038:	f7fe f94a 	bl	80002d0 <strlen>
 800203c:	4603      	mov	r3, r0
 800203e:	b29a      	uxth	r2, r3
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	4919      	ldr	r1, [pc, #100]	@ (80020ac <main+0x24c>)
 8002046:	4812      	ldr	r0, [pc, #72]	@ (8002090 <main+0x230>)
 8002048:	f004 fb2a 	bl	80066a0 <HAL_UART_Transmit>
							if( !myMS.getEntryAt(cnt, &entryBuffer) )
 800204c:	e7d3      	b.n	8001ff6 <main+0x196>
								break;
 800204e:	bf00      	nop
						snprintf(msg, Buffer_Size, "END\r\n");
 8002050:	4a1e      	ldr	r2, [pc, #120]	@ (80020cc <main+0x26c>)
 8002052:	2164      	movs	r1, #100	@ 0x64
 8002054:	4815      	ldr	r0, [pc, #84]	@ (80020ac <main+0x24c>)
 8002056:	f006 f8df 	bl	8008218 <snprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800205a:	4814      	ldr	r0, [pc, #80]	@ (80020ac <main+0x24c>)
 800205c:	f7fe f938 	bl	80002d0 <strlen>
 8002060:	4603      	mov	r3, r0
 8002062:	b29a      	uxth	r2, r3
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	4910      	ldr	r1, [pc, #64]	@ (80020ac <main+0x24c>)
 800206a:	4809      	ldr	r0, [pc, #36]	@ (8002090 <main+0x230>)
 800206c:	f004 fb18 	bl	80066a0 <HAL_UART_Transmit>
						currentCommState = IDLE;
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <main+0x23c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
						break;
 8002076:	e002      	b.n	800207e <main+0x21e>
						break;
 8002078:	bf00      	nop
 800207a:	e000      	b.n	800207e <main+0x21e>
						break;
 800207c:	bf00      	nop
				break;
 800207e:	bf00      	nop
		}

  }
 8002080:	e717      	b.n	8001eb2 <main+0x52>
 8002082:	bf00      	nop
 8002084:	20000a7c 	.word	0x20000a7c
 8002088:	20000714 	.word	0x20000714
 800208c:	20000a00 	.word	0x20000a00
 8002090:	20000808 	.word	0x20000808
 8002094:	20000929 	.word	0x20000929
 8002098:	200007c0 	.word	0x200007c0
 800209c:	2000092a 	.word	0x2000092a
 80020a0:	20000928 	.word	0x20000928
 80020a4:	20000004 	.word	0x20000004
 80020a8:	0800fa1c 	.word	0x0800fa1c
 80020ac:	20000938 	.word	0x20000938
 80020b0:	20000854 	.word	0x20000854
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000850 	.word	0x20000850
 80020bc:	20000a98 	.word	0x20000a98
 80020c0:	20000930 	.word	0x20000930
 80020c4:	0800fa28 	.word	0x0800fa28
 80020c8:	0800fa34 	.word	0x0800fa34
 80020cc:	0800fa44 	.word	0x0800fa44

080020d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b094      	sub	sp, #80	@ 0x50
 80020d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	2234      	movs	r2, #52	@ 0x34
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f006 f957 	bl	8008392 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	4b2f      	ldr	r3, [pc, #188]	@ (80021b8 <_Z18SystemClock_Configv+0xe8>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	4a2e      	ldr	r2, [pc, #184]	@ (80021b8 <_Z18SystemClock_Configv+0xe8>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002102:	6413      	str	r3, [r2, #64]	@ 0x40
 8002104:	4b2c      	ldr	r3, [pc, #176]	@ (80021b8 <_Z18SystemClock_Configv+0xe8>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <_Z18SystemClock_Configv+0xec>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <_Z18SystemClock_Configv+0xec>)
 800211e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <_Z18SystemClock_Configv+0xec>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002130:	2302      	movs	r3, #2
 8002132:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002134:	2301      	movs	r3, #1
 8002136:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002138:	2310      	movs	r3, #16
 800213a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213c:	2302      	movs	r3, #2
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002140:	2300      	movs	r3, #0
 8002142:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002144:	2310      	movs	r3, #16
 8002146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002148:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800214c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800214e:	2304      	movs	r3, #4
 8002150:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002152:	2302      	movs	r3, #2
 8002154:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002156:	2302      	movs	r3, #2
 8002158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4618      	mov	r0, r3
 8002160:	f002 fd68 	bl	8004c34 <HAL_RCC_OscConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8002174:	f000 f9da 	bl	800252c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002178:	230f      	movs	r3, #15
 800217a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800217c:	2302      	movs	r3, #2
 800217e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002188:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2102      	movs	r1, #2
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fa03 	bl	80045a0 <HAL_RCC_ClockConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80021aa:	f000 f9bf 	bl	800252c <Error_Handler>
  }
}
 80021ae:	bf00      	nop
 80021b0:	3750      	adds	r7, #80	@ 0x50
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40007000 	.word	0x40007000

080021c0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021c4:	4b15      	ldr	r3, [pc, #84]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021c6:	4a16      	ldr	r2, [pc, #88]	@ (8002220 <_ZL12MX_I2C1_Initv+0x60>)
 80021c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021ca:	4b14      	ldr	r3, [pc, #80]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021cc:	4a15      	ldr	r2, [pc, #84]	@ (8002224 <_ZL12MX_I2C1_Initv+0x64>)
 80021ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021fc:	4807      	ldr	r0, [pc, #28]	@ (800221c <_ZL12MX_I2C1_Initv+0x5c>)
 80021fe:	f001 f85d 	bl	80032bc <HAL_I2C_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002212:	f000 f98b 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000714 	.word	0x20000714
 8002220:	40005400 	.word	0x40005400
 8002224:	000186a0 	.word	0x000186a0

08002228 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800222c:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 800222e:	4a1b      	ldr	r2, [pc, #108]	@ (800229c <_ZL12MX_SPI1_Initv+0x74>)
 8002230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 8002234:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002238:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800223a:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002246:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 800224e:	2201      	movs	r2, #1
 8002250:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 8002254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002258:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 800225c:	2228      	movs	r2, #40	@ 0x28
 800225e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 800226e:	2200      	movs	r2, #0
 8002270:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 8002274:	220a      	movs	r2, #10
 8002276:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002278:	4807      	ldr	r0, [pc, #28]	@ (8002298 <_ZL12MX_SPI1_Initv+0x70>)
 800227a:	f002 ff79 	bl	8005170 <HAL_SPI_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800228e:	f000 f94d 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000768 	.word	0x20000768
 800229c:	40013000 	.word	0x40013000

080022a0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	463b      	mov	r3, r7
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022bc:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <_ZL12MX_TIM3_Initv+0xb4>)
 80022be:	4a26      	ldr	r2, [pc, #152]	@ (8002358 <_ZL12MX_TIM3_Initv+0xb8>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80022c2:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <_ZL12MX_TIM3_Initv+0xb4>)
 80022c4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80022c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ca:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <_ZL12MX_TIM3_Initv+0xb4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80022d0:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <_ZL12MX_TIM3_Initv+0xb4>)
 80022d2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80022d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <_ZL12MX_TIM3_Initv+0xb4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022de:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <_ZL12MX_TIM3_Initv+0xb4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022e4:	481b      	ldr	r0, [pc, #108]	@ (8002354 <_ZL12MX_TIM3_Initv+0xb4>)
 80022e6:	f003 fd15 	bl	8005d14 <HAL_TIM_Base_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 80022fa:	f000 f917 	bl	800252c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002302:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	4619      	mov	r1, r3
 800230a:	4812      	ldr	r0, [pc, #72]	@ (8002354 <_ZL12MX_TIM3_Initv+0xb4>)
 800230c:	f003 feb2 	bl	8006074 <HAL_TIM_ConfigClockSource>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf14      	ite	ne
 8002316:	2301      	movne	r3, #1
 8002318:	2300      	moveq	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8002320:	f000 f904 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800232c:	463b      	mov	r3, r7
 800232e:	4619      	mov	r1, r3
 8002330:	4808      	ldr	r0, [pc, #32]	@ (8002354 <_ZL12MX_TIM3_Initv+0xb4>)
 8002332:	f004 f8d5 	bl	80064e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8002346:	f000 f8f1 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200007c0 	.word	0x200007c0
 8002358:	40000400 	.word	0x40000400

0800235c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002362:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002366:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800236c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002374:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800237a:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002392:	4807      	ldr	r0, [pc, #28]	@ (80023b0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002394:	f004 f934 	bl	8006600 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80023a8:	f000 f8c0 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000808 	.word	0x20000808
 80023b4:	40004400 	.word	0x40004400

080023b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b34      	ldr	r3, [pc, #208]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a33      	ldr	r2, [pc, #204]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a2c      	ldr	r2, [pc, #176]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 80023f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b2a      	ldr	r3, [pc, #168]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b26      	ldr	r3, [pc, #152]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a25      	ldr	r2, [pc, #148]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6313      	str	r3, [r2, #48]	@ 0x30
 8002416:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a1e      	ldr	r2, [pc, #120]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <_ZL12MX_GPIO_Initv+0xec>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_SENS_CS_GPIO_Port, TEMP_SENS_CS_Pin, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	2110      	movs	r1, #16
 8002442:	4819      	ldr	r0, [pc, #100]	@ (80024a8 <_ZL12MX_GPIO_Initv+0xf0>)
 8002444:	f000 ff20 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800244e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4619      	mov	r1, r3
 800245e:	4813      	ldr	r0, [pc, #76]	@ (80024ac <_ZL12MX_GPIO_Initv+0xf4>)
 8002460:	f000 fd7e 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_SENS_CS_Pin */
  GPIO_InitStruct.Pin = TEMP_SENS_CS_Pin;
 8002464:	2310      	movs	r3, #16
 8002466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEMP_SENS_CS_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	480b      	ldr	r0, [pc, #44]	@ (80024a8 <_ZL12MX_GPIO_Initv+0xf0>)
 800247c:	f000 fd70 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_RDY_Pin */
  GPIO_InitStruct.Pin = TEMP_RDY_Pin;
 8002480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_RDY_GPIO_Port, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4804      	ldr	r0, [pc, #16]	@ (80024a8 <_ZL12MX_GPIO_Initv+0xf0>)
 8002496:	f000 fd63 	bl	8002f60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	@ 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020800 	.word	0x40020800

080024b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a16      	ldr	r2, [pc, #88]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d122      	bne.n	8002506 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		timerInterruptCntr++;
 80024c0:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80024c8:	6013      	str	r3, [r2, #0]
		if(currentState != MEAS)
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			idleTime++;
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024da:	6013      	str	r3, [r2, #0]
		}
		if(( (timerInterruptCntr % measFrequency) == 0 ) && currentState == MEAS)
 80024dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a10      	ldr	r2, [pc, #64]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80024e8:	fb01 f202 	mul.w	r2, r1, r2
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_TIM_PeriodElapsedCallback+0x56>
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			timeInterruptTick = true;
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
			timerInterruptCntr = 0;
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
		}
		/*char msg2[20];
		snprintf(msg2, 20, "Interrupt Called\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*)msg2, 20, HAL_MAX_DELAY);*/
	}
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	200007c0 	.word	0x200007c0
 8002518:	20000924 	.word	0x20000924
 800251c:	20000929 	.word	0x20000929
 8002520:	20000850 	.word	0x20000850
 8002524:	20000000 	.word	0x20000000
 8002528:	20000928 	.word	0x20000928

0800252c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002530:	b672      	cpsid	i
}
 8002532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <Error_Handler+0x8>

08002538 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af02      	add	r7, sp, #8
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d120      	bne.n	800258a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800254e:	4293      	cmp	r3, r2
 8002550:	d11b      	bne.n	800258a <_Z41__static_initialization_and_destruction_0ii+0x52>
GPIO TEMP_SENS_CS(TEMP_SENS_CS_GPIO_Port, TEMP_SENS_CS_Pin);
 8002552:	2210      	movs	r2, #16
 8002554:	490f      	ldr	r1, [pc, #60]	@ (8002594 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002556:	4810      	ldr	r0, [pc, #64]	@ (8002598 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002558:	f7fe fd74 	bl	8001044 <_ZN4GPIOC1EP12GPIO_TypeDeft>
GPIO TEMP_RDY(TEMP_RDY_GPIO_Port, TEMP_RDY_Pin);
 800255c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002560:	490c      	ldr	r1, [pc, #48]	@ (8002594 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002562:	480e      	ldr	r0, [pc, #56]	@ (800259c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002564:	f7fe fd6e 	bl	8001044 <_ZN4GPIOC1EP12GPIO_TypeDeft>
MAX31865 myPT100(&hspi1, &TEMP_SENS_CS, &TEMP_RDY);
 8002568:	2300      	movs	r3, #0
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002570:	490b      	ldr	r1, [pc, #44]	@ (80025a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002572:	480c      	ldr	r0, [pc, #48]	@ (80025a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002574:	f7fe fdd6 	bl	8001124 <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t>
MeasurementStorage myMS(&hi2c1, 80);
 8002578:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	2250      	movs	r2, #80	@ 0x50
 8002582:	4909      	ldr	r1, [pc, #36]	@ (80025a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002584:	4809      	ldr	r0, [pc, #36]	@ (80025ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002586:	f7fe ffef 	bl	8001568 <_ZN18MeasurementStorageC1EP17I2C_HandleTypeDefhht>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40020000 	.word	0x40020000
 8002598:	20000a6c 	.word	0x20000a6c
 800259c:	20000a74 	.word	0x20000a74
 80025a0:	20000768 	.word	0x20000768
 80025a4:	20000a7c 	.word	0x20000a7c
 80025a8:	20000714 	.word	0x20000714
 80025ac:	20000a98 	.word	0x20000a98

080025b0 <_GLOBAL__sub_I_hi2c1>:
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7ff ffbd 	bl	8002538 <_Z41__static_initialization_and_destruction_0ii>
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	4b10      	ldr	r3, [pc, #64]	@ (800260c <HAL_MspInit+0x4c>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	4a0f      	ldr	r2, [pc, #60]	@ (800260c <HAL_MspInit+0x4c>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_MspInit+0x4c>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_MspInit+0x4c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	4a08      	ldr	r2, [pc, #32]	@ (800260c <HAL_MspInit+0x4c>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_MspInit+0x4c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025fe:	2007      	movs	r0, #7
 8002600:	f000 fbda 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_I2C_MspInit+0x84>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12c      	bne.n	800268c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a17      	ldr	r2, [pc, #92]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800264e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002654:	2312      	movs	r3, #18
 8002656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002660:	2304      	movs	r3, #4
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	4619      	mov	r1, r3
 800266a:	480c      	ldr	r0, [pc, #48]	@ (800269c <HAL_I2C_MspInit+0x8c>)
 800266c:	f000 fc78 	bl	8002f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	4a07      	ldr	r2, [pc, #28]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 800267a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800267e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800268c:	bf00      	nop
 800268e:	3728      	adds	r7, #40	@ 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40005400 	.word	0x40005400
 8002698:	40023800 	.word	0x40023800
 800269c:	40020400 	.word	0x40020400

080026a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	@ 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a19      	ldr	r2, [pc, #100]	@ (8002724 <HAL_SPI_MspInit+0x84>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12b      	bne.n	800271a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	4b18      	ldr	r3, [pc, #96]	@ (8002728 <HAL_SPI_MspInit+0x88>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	4a17      	ldr	r2, [pc, #92]	@ (8002728 <HAL_SPI_MspInit+0x88>)
 80026cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_SPI_MspInit+0x88>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <HAL_SPI_MspInit+0x88>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a10      	ldr	r2, [pc, #64]	@ (8002728 <HAL_SPI_MspInit+0x88>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <HAL_SPI_MspInit+0x88>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026fa:	23e0      	movs	r3, #224	@ 0xe0
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800270a:	2305      	movs	r3, #5
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4619      	mov	r1, r3
 8002714:	4805      	ldr	r0, [pc, #20]	@ (800272c <HAL_SPI_MspInit+0x8c>)
 8002716:	f000 fc23 	bl	8002f60 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800271a:	bf00      	nop
 800271c:	3728      	adds	r7, #40	@ 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40013000 	.word	0x40013000
 8002728:	40023800 	.word	0x40023800
 800272c:	40020000 	.word	0x40020000

08002730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0e      	ldr	r2, [pc, #56]	@ (8002778 <HAL_TIM_Base_MspInit+0x48>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d115      	bne.n	800276e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <HAL_TIM_Base_MspInit+0x4c>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	4a0c      	ldr	r2, [pc, #48]	@ (800277c <HAL_TIM_Base_MspInit+0x4c>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6413      	str	r3, [r2, #64]	@ 0x40
 8002752:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_TIM_Base_MspInit+0x4c>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	201d      	movs	r0, #29
 8002764:	f000 fb33 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002768:	201d      	movs	r0, #29
 800276a:	f000 fb4c 	bl	8002e06 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40000400 	.word	0x40000400
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	@ 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1d      	ldr	r2, [pc, #116]	@ (8002814 <HAL_UART_MspInit+0x94>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d133      	bne.n	800280a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002818 <HAL_UART_MspInit+0x98>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002818 <HAL_UART_MspInit+0x98>)
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b2:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <HAL_UART_MspInit+0x98>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <HAL_UART_MspInit+0x98>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a14      	ldr	r2, [pc, #80]	@ (8002818 <HAL_UART_MspInit+0x98>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <HAL_UART_MspInit+0x98>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027da:	230c      	movs	r3, #12
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ea:	2307      	movs	r3, #7
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	4809      	ldr	r0, [pc, #36]	@ (800281c <HAL_UART_MspInit+0x9c>)
 80027f6:	f000 fbb3 	bl	8002f60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2026      	movs	r0, #38	@ 0x26
 8002800:	f000 fae5 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002804:	2026      	movs	r0, #38	@ 0x26
 8002806:	f000 fafe 	bl	8002e06 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	@ 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40004400 	.word	0x40004400
 8002818:	40023800 	.word	0x40023800
 800281c:	40020000 	.word	0x40020000

08002820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <NMI_Handler+0x4>

08002828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <HardFault_Handler+0x4>

08002830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002834:	bf00      	nop
 8002836:	e7fd      	b.n	8002834 <MemManage_Handler+0x4>

08002838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <BusFault_Handler+0x4>

08002840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <UsageFault_Handler+0x4>

08002848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002876:	f000 f96b 	bl	8002b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002884:	4802      	ldr	r0, [pc, #8]	@ (8002890 <TIM3_IRQHandler+0x10>)
 8002886:	f003 fb05 	bl	8005e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200007c0 	.word	0x200007c0

08002894 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002898:	4802      	ldr	r0, [pc, #8]	@ (80028a4 <USART2_IRQHandler+0x10>)
 800289a:	f003 ffb1 	bl	8006800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000808 	.word	0x20000808

080028a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return 1;
 80028ac:	2301      	movs	r3, #1
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_kill>:

int _kill(int pid, int sig)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028c2:	f005 fdcb 	bl	800845c <__errno>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2216      	movs	r2, #22
 80028ca:	601a      	str	r2, [r3, #0]
  return -1;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_exit>:

void _exit (int status)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ffe7 	bl	80028b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028ea:	bf00      	nop
 80028ec:	e7fd      	b.n	80028ea <_exit+0x12>

080028ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e00a      	b.n	8002916 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002900:	f3af 8000 	nop.w
 8002904:	4601      	mov	r1, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	60ba      	str	r2, [r7, #8]
 800290c:	b2ca      	uxtb	r2, r1
 800290e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3301      	adds	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	dbf0      	blt.n	8002900 <_read+0x12>
  }

  return len;
 800291e:	687b      	ldr	r3, [r7, #4]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	e009      	b.n	800294e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	60ba      	str	r2, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3301      	adds	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	dbf1      	blt.n	800293a <_write+0x12>
  }
  return len;
 8002956:	687b      	ldr	r3, [r7, #4]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <_close>:

int _close(int file)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002988:	605a      	str	r2, [r3, #4]
  return 0;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_isatty>:

int _isatty(int file)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029a0:	2301      	movs	r3, #1
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d0:	4a14      	ldr	r2, [pc, #80]	@ (8002a24 <_sbrk+0x5c>)
 80029d2:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <_sbrk+0x60>)
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029dc:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <_sbrk+0x64>)
 80029e6:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <_sbrk+0x68>)
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <_sbrk+0x64>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d207      	bcs.n	8002a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f8:	f005 fd30 	bl	800845c <__errno>
 80029fc:	4603      	mov	r3, r0
 80029fe:	220c      	movs	r2, #12
 8002a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	e009      	b.n	8002a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a08:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <_sbrk+0x64>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a0e:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	4a05      	ldr	r2, [pc, #20]	@ (8002a2c <_sbrk+0x64>)
 8002a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20020000 	.word	0x20020000
 8002a28:	00000400 	.word	0x00000400
 8002a2c:	20000aa8 	.word	0x20000aa8
 8002a30:	20000dc0 	.word	0x20000dc0

08002a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <SystemInit+0x20>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3e:	4a05      	ldr	r2, [pc, #20]	@ (8002a54 <SystemInit+0x20>)
 8002a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a5c:	f7ff ffea 	bl	8002a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a60:	480c      	ldr	r0, [pc, #48]	@ (8002a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a62:	490d      	ldr	r1, [pc, #52]	@ (8002a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a64:	4a0d      	ldr	r2, [pc, #52]	@ (8002a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a68:	e002      	b.n	8002a70 <LoopCopyDataInit>

08002a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6e:	3304      	adds	r3, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a74:	d3f9      	bcc.n	8002a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a76:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a78:	4c0a      	ldr	r4, [pc, #40]	@ (8002aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a7c:	e001      	b.n	8002a82 <LoopFillZerobss>

08002a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a80:	3204      	adds	r2, #4

08002a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a84:	d3fb      	bcc.n	8002a7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a86:	f005 fcef 	bl	8008468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8a:	f7ff f9e9 	bl	8001e60 <main>
  bx  lr    
 8002a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a98:	200006f8 	.word	0x200006f8
  ldr r2, =_sidata
 8002a9c:	0800ff00 	.word	0x0800ff00
  ldr r2, =_sbss
 8002aa0:	200006f8 	.word	0x200006f8
  ldr r4, =_ebss
 8002aa4:	20000dbc 	.word	0x20000dbc

08002aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa8:	e7fe      	b.n	8002aa8 <ADC_IRQHandler>
	...

08002aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <HAL_Init+0x40>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8002aec <HAL_Init+0x40>)
 8002ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_Init+0x40>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <HAL_Init+0x40>)
 8002ac2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac8:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a07      	ldr	r2, [pc, #28]	@ (8002aec <HAL_Init+0x40>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f000 f96f 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f000 f808 	bl	8002af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae0:	f7ff fd6e 	bl	80025c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00

08002af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af8:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <HAL_InitTick+0x54>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_InitTick+0x58>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f987 	bl	8002e22 <HAL_SYSTICK_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00e      	b.n	8002b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d80a      	bhi.n	8002b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b24:	2200      	movs	r2, #0
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f000 f94f 	bl	8002dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b30:	4a06      	ldr	r2, [pc, #24]	@ (8002b4c <HAL_InitTick+0x5c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000038 	.word	0x20000038
 8002b48:	20000040 	.word	0x20000040
 8002b4c:	2000003c 	.word	0x2000003c

08002b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b54:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_IncTick+0x20>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_IncTick+0x24>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a04      	ldr	r2, [pc, #16]	@ (8002b74 <HAL_IncTick+0x24>)
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000040 	.word	0x20000040
 8002b74:	20000aac 	.word	0x20000aac

08002b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	@ (8002b8c <HAL_GetTick+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000aac 	.word	0x20000aac

08002b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff ffee 	bl	8002b78 <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d005      	beq.n	8002bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_Delay+0x44>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bb6:	bf00      	nop
 8002bb8:	f7ff ffde 	bl	8002b78 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8f7      	bhi.n	8002bb8 <HAL_Delay+0x28>
  {
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000040 	.word	0x20000040

08002bd8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_SuspendTick+0x1c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <HAL_SuspendTick+0x1c>)
 8002be2:	f023 0302 	bic.w	r3, r3, #2
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e010 	.word	0xe000e010

08002bf8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_ResumeTick+0x1c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_ResumeTick+0x1c>)
 8002c02:	f043 0302 	orr.w	r3, r3, #2
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000e010 	.word	0xe000e010

08002c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4a:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60d3      	str	r3, [r2, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c64:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <__NVIC_GetPriorityGrouping+0x18>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	f003 0307 	and.w	r3, r3, #7
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db0b      	blt.n	8002ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4907      	ldr	r1, [pc, #28]	@ (8002cb4 <__NVIC_EnableIRQ+0x38>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	@ (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	@ (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	@ 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	@ 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d84:	d301      	bcc.n	8002d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00f      	b.n	8002daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <SysTick_Config+0x40>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d92:	210f      	movs	r1, #15
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	f7ff ff8e 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <SysTick_Config+0x40>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da2:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <SysTick_Config+0x40>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	e000e010 	.word	0xe000e010

08002db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff29 	bl	8002c18 <__NVIC_SetPriorityGrouping>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de0:	f7ff ff3e 	bl	8002c60 <__NVIC_GetPriorityGrouping>
 8002de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	6978      	ldr	r0, [r7, #20]
 8002dec:	f7ff ff8e 	bl	8002d0c <NVIC_EncodePriority>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff5d 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff31 	bl	8002c7c <__NVIC_EnableIRQ>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ffa2 	bl	8002d74 <SysTick_Config>
 8002e30:	4603      	mov	r3, r0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff fe96 	bl	8002b78 <HAL_GetTick>
 8002e4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d008      	beq.n	8002e6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2280      	movs	r2, #128	@ 0x80
 8002e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e052      	b.n	8002f12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0216 	bic.w	r2, r2, #22
 8002e7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <HAL_DMA_Abort+0x62>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0208 	bic.w	r2, r2, #8
 8002eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ebc:	e013      	b.n	8002ee6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ebe:	f7ff fe5b 	bl	8002b78 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d90c      	bls.n	8002ee6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e015      	b.n	8002f12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e4      	bne.n	8002ebe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef8:	223f      	movs	r2, #63	@ 0x3f
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2280      	movs	r2, #128	@ 0x80
 8002f32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e00c      	b.n	8002f52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	e165      	b.n	8003248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f040 8154 	bne.w	8003242 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d005      	beq.n	8002fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d130      	bne.n	8003014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 0201 	and.w	r2, r3, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b03      	cmp	r3, #3
 800301e:	d017      	beq.n	8003050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d123      	bne.n	80030a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0203 	and.w	r2, r3, #3
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80ae 	beq.w	8003242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003260 <HAL_GPIO_Init+0x300>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003260 <HAL_GPIO_Init+0x300>)
 80030f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003260 <HAL_GPIO_Init+0x300>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003102:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_GPIO_Init+0x304>)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3302      	adds	r3, #2
 800310a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	220f      	movs	r2, #15
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4f      	ldr	r2, [pc, #316]	@ (8003268 <HAL_GPIO_Init+0x308>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d025      	beq.n	800317a <HAL_GPIO_Init+0x21a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4e      	ldr	r2, [pc, #312]	@ (800326c <HAL_GPIO_Init+0x30c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01f      	beq.n	8003176 <HAL_GPIO_Init+0x216>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4d      	ldr	r2, [pc, #308]	@ (8003270 <HAL_GPIO_Init+0x310>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d019      	beq.n	8003172 <HAL_GPIO_Init+0x212>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a4c      	ldr	r2, [pc, #304]	@ (8003274 <HAL_GPIO_Init+0x314>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_GPIO_Init+0x20e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a4b      	ldr	r2, [pc, #300]	@ (8003278 <HAL_GPIO_Init+0x318>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00d      	beq.n	800316a <HAL_GPIO_Init+0x20a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4a      	ldr	r2, [pc, #296]	@ (800327c <HAL_GPIO_Init+0x31c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <HAL_GPIO_Init+0x206>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a49      	ldr	r2, [pc, #292]	@ (8003280 <HAL_GPIO_Init+0x320>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_GPIO_Init+0x202>
 800315e:	2306      	movs	r3, #6
 8003160:	e00c      	b.n	800317c <HAL_GPIO_Init+0x21c>
 8003162:	2307      	movs	r3, #7
 8003164:	e00a      	b.n	800317c <HAL_GPIO_Init+0x21c>
 8003166:	2305      	movs	r3, #5
 8003168:	e008      	b.n	800317c <HAL_GPIO_Init+0x21c>
 800316a:	2304      	movs	r3, #4
 800316c:	e006      	b.n	800317c <HAL_GPIO_Init+0x21c>
 800316e:	2303      	movs	r3, #3
 8003170:	e004      	b.n	800317c <HAL_GPIO_Init+0x21c>
 8003172:	2302      	movs	r3, #2
 8003174:	e002      	b.n	800317c <HAL_GPIO_Init+0x21c>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_GPIO_Init+0x21c>
 800317a:	2300      	movs	r3, #0
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	f002 0203 	and.w	r2, r2, #3
 8003182:	0092      	lsls	r2, r2, #2
 8003184:	4093      	lsls	r3, r2
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800318c:	4935      	ldr	r1, [pc, #212]	@ (8003264 <HAL_GPIO_Init+0x304>)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	3302      	adds	r3, #2
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319a:	4b3a      	ldr	r3, [pc, #232]	@ (8003284 <HAL_GPIO_Init+0x324>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031be:	4a31      	ldr	r2, [pc, #196]	@ (8003284 <HAL_GPIO_Init+0x324>)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003284 <HAL_GPIO_Init+0x324>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e8:	4a26      	ldr	r2, [pc, #152]	@ (8003284 <HAL_GPIO_Init+0x324>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ee:	4b25      	ldr	r3, [pc, #148]	@ (8003284 <HAL_GPIO_Init+0x324>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003212:	4a1c      	ldr	r2, [pc, #112]	@ (8003284 <HAL_GPIO_Init+0x324>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003218:	4b1a      	ldr	r3, [pc, #104]	@ (8003284 <HAL_GPIO_Init+0x324>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800323c:	4a11      	ldr	r2, [pc, #68]	@ (8003284 <HAL_GPIO_Init+0x324>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3301      	adds	r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2b0f      	cmp	r3, #15
 800324c:	f67f ae96 	bls.w	8002f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3724      	adds	r7, #36	@ 0x24
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	40013800 	.word	0x40013800
 8003268:	40020000 	.word	0x40020000
 800326c:	40020400 	.word	0x40020400
 8003270:	40020800 	.word	0x40020800
 8003274:	40020c00 	.word	0x40020c00
 8003278:	40021000 	.word	0x40021000
 800327c:	40021400 	.word	0x40021400
 8003280:	40021800 	.word	0x40021800
 8003284:	40013c00 	.word	0x40013c00

08003288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
 8003294:	4613      	mov	r3, r2
 8003296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032a4:	e003      	b.n	80032ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	041a      	lsls	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e12b      	b.n	8003526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff f994 	bl	8002610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	@ 0x24
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800330e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800331e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003320:	f001 fa30 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8003324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4a81      	ldr	r2, [pc, #516]	@ (8003530 <HAL_I2C_Init+0x274>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d807      	bhi.n	8003340 <HAL_I2C_Init+0x84>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a80      	ldr	r2, [pc, #512]	@ (8003534 <HAL_I2C_Init+0x278>)
 8003334:	4293      	cmp	r3, r2
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e006      	b.n	800334e <HAL_I2C_Init+0x92>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a7d      	ldr	r2, [pc, #500]	@ (8003538 <HAL_I2C_Init+0x27c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	bf94      	ite	ls
 8003348:	2301      	movls	r3, #1
 800334a:	2300      	movhi	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0e7      	b.n	8003526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a78      	ldr	r2, [pc, #480]	@ (800353c <HAL_I2C_Init+0x280>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0c9b      	lsrs	r3, r3, #18
 8003360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a6a      	ldr	r2, [pc, #424]	@ (8003530 <HAL_I2C_Init+0x274>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d802      	bhi.n	8003390 <HAL_I2C_Init+0xd4>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	3301      	adds	r3, #1
 800338e:	e009      	b.n	80033a4 <HAL_I2C_Init+0xe8>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	4a69      	ldr	r2, [pc, #420]	@ (8003540 <HAL_I2C_Init+0x284>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	3301      	adds	r3, #1
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	495c      	ldr	r1, [pc, #368]	@ (8003530 <HAL_I2C_Init+0x274>)
 80033c0:	428b      	cmp	r3, r1
 80033c2:	d819      	bhi.n	80033f8 <HAL_I2C_Init+0x13c>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1e59      	subs	r1, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d2:	1c59      	adds	r1, r3, #1
 80033d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033d8:	400b      	ands	r3, r1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_I2C_Init+0x138>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e59      	subs	r1, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f2:	e051      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 80033f4:	2304      	movs	r3, #4
 80033f6:	e04f      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d111      	bne.n	8003424 <HAL_I2C_Init+0x168>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e58      	subs	r0, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e012      	b.n	800344a <HAL_I2C_Init+0x18e>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	0099      	lsls	r1, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	fbb0 f3f3 	udiv	r3, r0, r3
 800343a:	3301      	adds	r3, #1
 800343c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Init+0x196>
 800344e:	2301      	movs	r3, #1
 8003450:	e022      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10e      	bne.n	8003478 <HAL_I2C_Init+0x1bc>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1e58      	subs	r0, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	460b      	mov	r3, r1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	440b      	add	r3, r1
 8003468:	fbb0 f3f3 	udiv	r3, r0, r3
 800346c:	3301      	adds	r3, #1
 800346e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003476:	e00f      	b.n	8003498 <HAL_I2C_Init+0x1dc>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	0099      	lsls	r1, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	fbb0 f3f3 	udiv	r3, r0, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6809      	ldr	r1, [r1, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6911      	ldr	r1, [r2, #16]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68d2      	ldr	r2, [r2, #12]
 80034d2:	4311      	orrs	r1, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	430b      	orrs	r3, r1
 80034da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	000186a0 	.word	0x000186a0
 8003534:	001e847f 	.word	0x001e847f
 8003538:	003d08ff 	.word	0x003d08ff
 800353c:	431bde83 	.word	0x431bde83
 8003540:	10624dd3 	.word	0x10624dd3

08003544 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4603      	mov	r3, r0
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	460b      	mov	r3, r1
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800355e:	f7ff fb0b 	bl	8002b78 <HAL_GetTick>
 8003562:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	f040 80d9 	bne.w	8003724 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2319      	movs	r3, #25
 8003578:	2201      	movs	r2, #1
 800357a:	496d      	ldr	r1, [pc, #436]	@ (8003730 <HAL_I2C_Mem_Write+0x1ec>)
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fdb9 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
 800358a:	e0cc      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_I2C_Mem_Write+0x56>
 8003596:	2302      	movs	r3, #2
 8003598:	e0c5      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d007      	beq.n	80035c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2221      	movs	r2, #33	@ 0x21
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2240      	movs	r2, #64	@ 0x40
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a4d      	ldr	r2, [pc, #308]	@ (8003734 <HAL_I2C_Mem_Write+0x1f0>)
 8003600:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003602:	88f8      	ldrh	r0, [r7, #6]
 8003604:	893a      	ldrh	r2, [r7, #8]
 8003606:	8979      	ldrh	r1, [r7, #10]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4603      	mov	r3, r0
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fbf0 	bl	8003df8 <I2C_RequestMemoryWrite>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d052      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e081      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fe7e 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2b04      	cmp	r3, #4
 8003638:	d107      	bne.n	800364a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06b      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d11b      	bne.n	80036c4 <HAL_I2C_Mem_Write+0x180>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1aa      	bne.n	8003622 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fe71 	bl	80043b8 <I2C_WaitOnBTFFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d107      	bne.n	80036f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e016      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	00100002 	.word	0x00100002
 8003734:	ffff0000 	.word	0xffff0000

08003738 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	@ 0x30
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	461a      	mov	r2, r3
 8003746:	4603      	mov	r3, r0
 8003748:	817b      	strh	r3, [r7, #10]
 800374a:	460b      	mov	r3, r1
 800374c:	813b      	strh	r3, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003752:	f7ff fa11 	bl	8002b78 <HAL_GetTick>
 8003756:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b20      	cmp	r3, #32
 8003762:	f040 8214 	bne.w	8003b8e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2319      	movs	r3, #25
 800376c:	2201      	movs	r2, #1
 800376e:	497b      	ldr	r1, [pc, #492]	@ (800395c <HAL_I2C_Mem_Read+0x224>)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fcbf 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	e207      	b.n	8003b90 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_I2C_Mem_Read+0x56>
 800378a:	2302      	movs	r3, #2
 800378c:	e200      	b.n	8003b90 <HAL_I2C_Mem_Read+0x458>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d007      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2222      	movs	r2, #34	@ 0x22
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2240      	movs	r2, #64	@ 0x40
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80037e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003960 <HAL_I2C_Mem_Read+0x228>)
 80037f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037f6:	88f8      	ldrh	r0, [r7, #6]
 80037f8:	893a      	ldrh	r2, [r7, #8]
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4603      	mov	r3, r0
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fb8c 	bl	8003f24 <I2C_RequestMemoryRead>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e1bc      	b.n	8003b90 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d113      	bne.n	8003846 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	e190      	b.n	8003b68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384a:	2b01      	cmp	r3, #1
 800384c:	d11b      	bne.n	8003886 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800385c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e170      	b.n	8003b68 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388a:	2b02      	cmp	r3, #2
 800388c:	d11b      	bne.n	80038c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800389c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	e150      	b.n	8003b68 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038dc:	e144      	b.n	8003b68 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	f200 80f1 	bhi.w	8003aca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d123      	bne.n	8003938 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fda7 	bl	8004448 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e145      	b.n	8003b90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003936:	e117      	b.n	8003b68 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393c:	2b02      	cmp	r3, #2
 800393e:	d14e      	bne.n	80039de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003946:	2200      	movs	r2, #0
 8003948:	4906      	ldr	r1, [pc, #24]	@ (8003964 <HAL_I2C_Mem_Read+0x22c>)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fbd2 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e11a      	b.n	8003b90 <HAL_I2C_Mem_Read+0x458>
 800395a:	bf00      	nop
 800395c:	00100002 	.word	0x00100002
 8003960:	ffff0000 	.word	0xffff0000
 8003964:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039dc:	e0c4      	b.n	8003b68 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e4:	2200      	movs	r2, #0
 80039e6:	496c      	ldr	r1, [pc, #432]	@ (8003b98 <HAL_I2C_Mem_Read+0x460>)
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fb83 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0cb      	b.n	8003b90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a40:	2200      	movs	r2, #0
 8003a42:	4955      	ldr	r1, [pc, #340]	@ (8003b98 <HAL_I2C_Mem_Read+0x460>)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fb55 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e09d      	b.n	8003b90 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ac8:	e04e      	b.n	8003b68 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003acc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fcba 	bl	8004448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e058      	b.n	8003b90 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d124      	bne.n	8003b68 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d107      	bne.n	8003b36 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b34:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f47f aeb6 	bne.w	80038de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	@ 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	00010004 	.word	0x00010004

08003b9c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	@ 0x28
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bac:	f7fe ffe4 	bl	8002b78 <HAL_GetTick>
 8003bb0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	f040 8111 	bne.w	8003de6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2319      	movs	r3, #25
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4988      	ldr	r1, [pc, #544]	@ (8003df0 <HAL_I2C_IsDeviceReady+0x254>)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fa90 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e104      	b.n	8003de8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_I2C_IsDeviceReady+0x50>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e0fd      	b.n	8003de8 <HAL_I2C_IsDeviceReady+0x24c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d007      	beq.n	8003c12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2224      	movs	r2, #36	@ 0x24
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a70      	ldr	r2, [pc, #448]	@ (8003df4 <HAL_I2C_IsDeviceReady+0x258>)
 8003c34:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fa4e 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c6c:	d103      	bne.n	8003c76 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e0b6      	b.n	8003de8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c7a:	897b      	ldrh	r3, [r7, #10]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c88:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe ff75 	bl	8002b78 <HAL_GetTick>
 8003c8e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cbe:	e025      	b.n	8003d0c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cc0:	f7fe ff5a 	bl	8002b78 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d302      	bcc.n	8003cd6 <HAL_I2C_IsDeviceReady+0x13a>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	22a0      	movs	r2, #160	@ 0xa0
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d16:	d005      	beq.n	8003d24 <HAL_I2C_IsDeviceReady+0x188>
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <HAL_I2C_IsDeviceReady+0x188>
 8003d1e:	7dbb      	ldrb	r3, [r7, #22]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0cd      	beq.n	8003cc0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d129      	bne.n	8003d8e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d48:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2319      	movs	r3, #25
 8003d66:	2201      	movs	r2, #1
 8003d68:	4921      	ldr	r1, [pc, #132]	@ (8003df0 <HAL_I2C_IsDeviceReady+0x254>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f9c2 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e036      	b.n	8003de8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e02c      	b.n	8003de8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003da6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2319      	movs	r3, #25
 8003dae:	2201      	movs	r2, #1
 8003db0:	490f      	ldr	r1, [pc, #60]	@ (8003df0 <HAL_I2C_IsDeviceReady+0x254>)
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f99e 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e012      	b.n	8003de8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	f4ff af32 	bcc.w	8003c36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	00100002 	.word	0x00100002
 8003df4:	ffff0000 	.word	0xffff0000

08003df8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	817b      	strh	r3, [r7, #10]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	813b      	strh	r3, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f960 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e48:	d103      	bne.n	8003e52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e05f      	b.n	8003f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e56:	897b      	ldrh	r3, [r7, #10]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	492d      	ldr	r1, [pc, #180]	@ (8003f20 <I2C_RequestMemoryWrite+0x128>)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f9bb 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e04c      	b.n	8003f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e94:	6a39      	ldr	r1, [r7, #32]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fa46 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d107      	bne.n	8003eba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e02b      	b.n	8003f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec4:	893b      	ldrh	r3, [r7, #8]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	611a      	str	r2, [r3, #16]
 8003ece:	e021      	b.n	8003f14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed0:	893b      	ldrh	r3, [r7, #8]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee0:	6a39      	ldr	r1, [r7, #32]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa20 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d107      	bne.n	8003f06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e005      	b.n	8003f16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f0a:	893b      	ldrh	r3, [r7, #8]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	00010002 	.word	0x00010002

08003f24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f8c2 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f84:	d103      	bne.n	8003f8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e0aa      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	4952      	ldr	r1, [pc, #328]	@ (80040f0 <I2C_RequestMemoryRead+0x1cc>)
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f91d 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e097      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd0:	6a39      	ldr	r1, [r7, #32]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f9a8 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e076      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004000:	893b      	ldrh	r3, [r7, #8]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	e021      	b.n	8004050 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b29b      	uxth	r3, r3
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800401c:	6a39      	ldr	r1, [r7, #32]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f982 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	2b04      	cmp	r3, #4
 8004030:	d107      	bne.n	8004042 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004040:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e050      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004046:	893b      	ldrh	r3, [r7, #8]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004052:	6a39      	ldr	r1, [r7, #32]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f967 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004064:	2b04      	cmp	r3, #4
 8004066:	d107      	bne.n	8004078 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004076:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e035      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800408a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	2200      	movs	r2, #0
 8004094:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f82b 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040b2:	d103      	bne.n	80040bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e013      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040c0:	897b      	ldrh	r3, [r7, #10]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	4906      	ldr	r1, [pc, #24]	@ (80040f0 <I2C_RequestMemoryRead+0x1cc>)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f886 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	00010002 	.word	0x00010002

080040f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004104:	e048      	b.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d044      	beq.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fe fd33 	bl	8002b78 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d139      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d10d      	bne.n	800414a <I2C_WaitOnFlagUntilTimeout+0x56>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	43da      	mvns	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	e00c      	b.n	8004164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	43da      	mvns	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	429a      	cmp	r2, r3
 8004168:	d116      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e023      	b.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	0c1b      	lsrs	r3, r3, #16
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10d      	bne.n	80041be <I2C_WaitOnFlagUntilTimeout+0xca>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	43da      	mvns	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	e00c      	b.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	43da      	mvns	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d093      	beq.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f6:	e071      	b.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004206:	d123      	bne.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e067      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d041      	beq.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fe fc8e 	bl	8002b78 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d136      	bne.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10c      	bne.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e00b      	b.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	43da      	mvns	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e021      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10c      	bne.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	e00b      	b.n	8004318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	43da      	mvns	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f47f af6d 	bne.w	80041f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004334:	e034      	b.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f8e3 	bl	8004502 <I2C_IsAcknowledgeFailed>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e034      	b.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d028      	beq.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434e:	f7fe fc13 	bl	8002b78 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11d      	bne.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436e:	2b80      	cmp	r3, #128	@ 0x80
 8004370:	d016      	beq.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e007      	b.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043aa:	2b80      	cmp	r3, #128	@ 0x80
 80043ac:	d1c3      	bne.n	8004336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c4:	e034      	b.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f89b 	bl	8004502 <I2C_IsAcknowledgeFailed>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e034      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d028      	beq.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe fbcb 	bl	8002b78 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11d      	bne.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d016      	beq.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e007      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d1c3      	bne.n	80043c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004454:	e049      	b.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d119      	bne.n	8004498 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0210 	mvn.w	r2, #16
 800446c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e030      	b.n	80044fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004498:	f7fe fb6e 	bl	8002b78 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11d      	bne.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	d016      	beq.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e007      	b.n	80044fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d1ae      	bne.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004518:	d11b      	bne.n	8004552 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004522:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	f043 0204 	orr.w	r2, r3, #4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800456c:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <HAL_PWR_EnterSLEEPMode+0x3c>)
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	4a0a      	ldr	r2, [pc, #40]	@ (800459c <HAL_PWR_EnterSLEEPMode+0x3c>)
 8004572:	f023 0304 	bic.w	r3, r3, #4
 8004576:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800457e:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8004580:	e005      	b.n	800458e <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d001      	beq.n	800458c <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8004588:	bf40      	sev
      __WFE();
 800458a:	bf20      	wfe
    __WFE();
 800458c:	bf20      	wfe
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0cc      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b4:	4b68      	ldr	r3, [pc, #416]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d90c      	bls.n	80045dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b65      	ldr	r3, [pc, #404]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b63      	ldr	r3, [pc, #396]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0b8      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d020      	beq.n	800462a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f4:	4b59      	ldr	r3, [pc, #356]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4a58      	ldr	r2, [pc, #352]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800460c:	4b53      	ldr	r3, [pc, #332]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4a52      	ldr	r2, [pc, #328]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004618:	4b50      	ldr	r3, [pc, #320]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	494d      	ldr	r1, [pc, #308]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d044      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463e:	4b47      	ldr	r3, [pc, #284]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d119      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e07f      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d003      	beq.n	800465e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800465a:	2b03      	cmp	r3, #3
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b3f      	ldr	r3, [pc, #252]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e06f      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466e:	4b3b      	ldr	r3, [pc, #236]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e067      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467e:	4b37      	ldr	r3, [pc, #220]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4934      	ldr	r1, [pc, #208]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004690:	f7fe fa72 	bl	8002b78 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fe fa6e 	bl	8002b78 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e04f      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	4b2b      	ldr	r3, [pc, #172]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 020c 	and.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1eb      	bne.n	8004698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c0:	4b25      	ldr	r3, [pc, #148]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d20c      	bcs.n	80046e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b22      	ldr	r3, [pc, #136]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b20      	ldr	r3, [pc, #128]	@ (8004758 <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e032      	b.n	800474e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f4:	4b19      	ldr	r3, [pc, #100]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4916      	ldr	r1, [pc, #88]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004712:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	490e      	ldr	r1, [pc, #56]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004726:	f000 f855 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 800472a:	4602      	mov	r2, r0
 800472c:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	490a      	ldr	r1, [pc, #40]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 8004738:	5ccb      	ldrb	r3, [r1, r3]
 800473a:	fa22 f303 	lsr.w	r3, r2, r3
 800473e:	4a09      	ldr	r2, [pc, #36]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004742:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe f9d2 	bl	8002af0 <HAL_InitTick>

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40023c00 	.word	0x40023c00
 800475c:	40023800 	.word	0x40023800
 8004760:	0800fa4c 	.word	0x0800fa4c
 8004764:	20000038 	.word	0x20000038
 8004768:	2000003c 	.word	0x2000003c

0800476c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	@ (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000038 	.word	0x20000038

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004788:	f7ff fff0 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0a9b      	lsrs	r3, r3, #10
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4903      	ldr	r1, [pc, #12]	@ (80047a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40023800 	.word	0x40023800
 80047a8:	0800fa5c 	.word	0x0800fa5c

080047ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047b0:	f7ff ffdc 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047b4:	4602      	mov	r2, r0
 80047b6:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0b5b      	lsrs	r3, r3, #13
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	4903      	ldr	r1, [pc, #12]	@ (80047d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c2:	5ccb      	ldrb	r3, [r1, r3]
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40023800 	.word	0x40023800
 80047d0:	0800fa5c 	.word	0x0800fa5c

080047d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b0ae      	sub	sp, #184	@ 0xb8
 80047da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047fa:	4bcb      	ldr	r3, [pc, #812]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x354>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b0c      	cmp	r3, #12
 8004804:	f200 8206 	bhi.w	8004c14 <HAL_RCC_GetSysClockFreq+0x440>
 8004808:	a201      	add	r2, pc, #4	@ (adr r2, 8004810 <HAL_RCC_GetSysClockFreq+0x3c>)
 800480a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004845 	.word	0x08004845
 8004814:	08004c15 	.word	0x08004c15
 8004818:	08004c15 	.word	0x08004c15
 800481c:	08004c15 	.word	0x08004c15
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004c15 	.word	0x08004c15
 8004828:	08004c15 	.word	0x08004c15
 800482c:	08004c15 	.word	0x08004c15
 8004830:	08004855 	.word	0x08004855
 8004834:	08004c15 	.word	0x08004c15
 8004838:	08004c15 	.word	0x08004c15
 800483c:	08004c15 	.word	0x08004c15
 8004840:	08004a45 	.word	0x08004a45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004844:	4bb9      	ldr	r3, [pc, #740]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x358>)
 8004846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800484a:	e1e7      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800484c:	4bb8      	ldr	r3, [pc, #736]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x35c>)
 800484e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004852:	e1e3      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004854:	4bb4      	ldr	r3, [pc, #720]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800485c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004860:	4bb1      	ldr	r3, [pc, #708]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d071      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486c:	4bae      	ldr	r3, [pc, #696]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x354>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004878:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800487c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004884:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004888:	2300      	movs	r3, #0
 800488a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800488e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004892:	4622      	mov	r2, r4
 8004894:	462b      	mov	r3, r5
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	0159      	lsls	r1, r3, #5
 80048a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a4:	0150      	lsls	r0, r2, #5
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4621      	mov	r1, r4
 80048ac:	1a51      	subs	r1, r2, r1
 80048ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80048b0:	4629      	mov	r1, r5
 80048b2:	eb63 0301 	sbc.w	r3, r3, r1
 80048b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80048c4:	4649      	mov	r1, r9
 80048c6:	018b      	lsls	r3, r1, #6
 80048c8:	4641      	mov	r1, r8
 80048ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ce:	4641      	mov	r1, r8
 80048d0:	018a      	lsls	r2, r1, #6
 80048d2:	4641      	mov	r1, r8
 80048d4:	1a51      	subs	r1, r2, r1
 80048d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048d8:	4649      	mov	r1, r9
 80048da:	eb63 0301 	sbc.w	r3, r3, r1
 80048de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80048ec:	4649      	mov	r1, r9
 80048ee:	00cb      	lsls	r3, r1, #3
 80048f0:	4641      	mov	r1, r8
 80048f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f6:	4641      	mov	r1, r8
 80048f8:	00ca      	lsls	r2, r1, #3
 80048fa:	4610      	mov	r0, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	4622      	mov	r2, r4
 8004902:	189b      	adds	r3, r3, r2
 8004904:	633b      	str	r3, [r7, #48]	@ 0x30
 8004906:	462b      	mov	r3, r5
 8004908:	460a      	mov	r2, r1
 800490a:	eb42 0303 	adc.w	r3, r2, r3
 800490e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800491c:	4629      	mov	r1, r5
 800491e:	024b      	lsls	r3, r1, #9
 8004920:	4621      	mov	r1, r4
 8004922:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004926:	4621      	mov	r1, r4
 8004928:	024a      	lsls	r2, r1, #9
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004938:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800493c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004940:	f7fc f9d2 	bl	8000ce8 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4613      	mov	r3, r2
 800494a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800494e:	e067      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004950:	4b75      	ldr	r3, [pc, #468]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	099b      	lsrs	r3, r3, #6
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800495c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004960:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800496a:	2300      	movs	r3, #0
 800496c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800496e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004972:	4622      	mov	r2, r4
 8004974:	462b      	mov	r3, r5
 8004976:	f04f 0000 	mov.w	r0, #0
 800497a:	f04f 0100 	mov.w	r1, #0
 800497e:	0159      	lsls	r1, r3, #5
 8004980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004984:	0150      	lsls	r0, r2, #5
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4621      	mov	r1, r4
 800498c:	1a51      	subs	r1, r2, r1
 800498e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004990:	4629      	mov	r1, r5
 8004992:	eb63 0301 	sbc.w	r3, r3, r1
 8004996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80049a4:	4649      	mov	r1, r9
 80049a6:	018b      	lsls	r3, r1, #6
 80049a8:	4641      	mov	r1, r8
 80049aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ae:	4641      	mov	r1, r8
 80049b0:	018a      	lsls	r2, r1, #6
 80049b2:	4641      	mov	r1, r8
 80049b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80049b8:	4649      	mov	r1, r9
 80049ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049d2:	4692      	mov	sl, r2
 80049d4:	469b      	mov	fp, r3
 80049d6:	4623      	mov	r3, r4
 80049d8:	eb1a 0303 	adds.w	r3, sl, r3
 80049dc:	623b      	str	r3, [r7, #32]
 80049de:	462b      	mov	r3, r5
 80049e0:	eb4b 0303 	adc.w	r3, fp, r3
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80049f2:	4629      	mov	r1, r5
 80049f4:	028b      	lsls	r3, r1, #10
 80049f6:	4621      	mov	r1, r4
 80049f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049fc:	4621      	mov	r1, r4
 80049fe:	028a      	lsls	r2, r1, #10
 8004a00:	4610      	mov	r0, r2
 8004a02:	4619      	mov	r1, r3
 8004a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a08:	2200      	movs	r2, #0
 8004a0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004a12:	f7fc f969 	bl	8000ce8 <__aeabi_uldivmod>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a20:	4b41      	ldr	r3, [pc, #260]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a42:	e0eb      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a44:	4b38      	ldr	r3, [pc, #224]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a50:	4b35      	ldr	r3, [pc, #212]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d06b      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5c:	4b32      	ldr	r3, [pc, #200]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	099b      	lsrs	r3, r3, #6
 8004a62:	2200      	movs	r2, #0
 8004a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a70:	2300      	movs	r3, #0
 8004a72:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a78:	4622      	mov	r2, r4
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	f04f 0000 	mov.w	r0, #0
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	0159      	lsls	r1, r3, #5
 8004a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8a:	0150      	lsls	r0, r2, #5
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4621      	mov	r1, r4
 8004a92:	1a51      	subs	r1, r2, r1
 8004a94:	61b9      	str	r1, [r7, #24]
 8004a96:	4629      	mov	r1, r5
 8004a98:	eb63 0301 	sbc.w	r3, r3, r1
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004aaa:	4659      	mov	r1, fp
 8004aac:	018b      	lsls	r3, r1, #6
 8004aae:	4651      	mov	r1, sl
 8004ab0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ab4:	4651      	mov	r1, sl
 8004ab6:	018a      	lsls	r2, r1, #6
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ebb2 0801 	subs.w	r8, r2, r1
 8004abe:	4659      	mov	r1, fp
 8004ac0:	eb63 0901 	sbc.w	r9, r3, r1
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ad4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ad8:	4690      	mov	r8, r2
 8004ada:	4699      	mov	r9, r3
 8004adc:	4623      	mov	r3, r4
 8004ade:	eb18 0303 	adds.w	r3, r8, r3
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	462b      	mov	r3, r5
 8004ae6:	eb49 0303 	adc.w	r3, r9, r3
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004af8:	4629      	mov	r1, r5
 8004afa:	024b      	lsls	r3, r1, #9
 8004afc:	4621      	mov	r1, r4
 8004afe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b02:	4621      	mov	r1, r4
 8004b04:	024a      	lsls	r2, r1, #9
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b0e:	2200      	movs	r2, #0
 8004b10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b12:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004b14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b18:	f7fc f8e6 	bl	8000ce8 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b26:	e065      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x420>
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	00f42400 	.word	0x00f42400
 8004b30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b34:	4b3d      	ldr	r3, [pc, #244]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x458>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	099b      	lsrs	r3, r3, #6
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	4611      	mov	r1, r2
 8004b40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b46:	2300      	movs	r3, #0
 8004b48:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004b4e:	4642      	mov	r2, r8
 8004b50:	464b      	mov	r3, r9
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f04f 0100 	mov.w	r1, #0
 8004b5a:	0159      	lsls	r1, r3, #5
 8004b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b60:	0150      	lsls	r0, r2, #5
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4641      	mov	r1, r8
 8004b68:	1a51      	subs	r1, r2, r1
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b80:	4659      	mov	r1, fp
 8004b82:	018b      	lsls	r3, r1, #6
 8004b84:	4651      	mov	r1, sl
 8004b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	018a      	lsls	r2, r1, #6
 8004b8e:	4651      	mov	r1, sl
 8004b90:	1a54      	subs	r4, r2, r1
 8004b92:	4659      	mov	r1, fp
 8004b94:	eb63 0501 	sbc.w	r5, r3, r1
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	00eb      	lsls	r3, r5, #3
 8004ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba6:	00e2      	lsls	r2, r4, #3
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461d      	mov	r5, r3
 8004bac:	4643      	mov	r3, r8
 8004bae:	18e3      	adds	r3, r4, r3
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	eb45 0303 	adc.w	r3, r5, r3
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	028b      	lsls	r3, r1, #10
 8004bca:	4621      	mov	r1, r4
 8004bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	028a      	lsls	r2, r1, #10
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bdc:	2200      	movs	r2, #0
 8004bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004be0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004be2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004be6:	f7fc f87f 	bl	8000ce8 <__aeabi_uldivmod>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4613      	mov	r3, r2
 8004bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x458>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	0f1b      	lsrs	r3, r3, #28
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c12:	e003      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c14:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	37b8      	adds	r7, #184	@ 0xb8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	00f42400 	.word	0x00f42400

08004c34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e28d      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8083 	beq.w	8004d5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c54:	4b94      	ldr	r3, [pc, #592]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d019      	beq.n	8004c94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c60:	4b91      	ldr	r3, [pc, #580]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c6c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c78:	d00c      	beq.n	8004c94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7a:	4b8b      	ldr	r3, [pc, #556]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d112      	bne.n	8004cac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c86:	4b88      	ldr	r3, [pc, #544]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c92:	d10b      	bne.n	8004cac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c94:	4b84      	ldr	r3, [pc, #528]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d05b      	beq.n	8004d58 <HAL_RCC_OscConfig+0x124>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d157      	bne.n	8004d58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e25a      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb4:	d106      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x90>
 8004cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a7b      	ldr	r2, [pc, #492]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e01d      	b.n	8004d00 <HAL_RCC_OscConfig+0xcc>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xb4>
 8004cce:	4b76      	ldr	r3, [pc, #472]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a75      	ldr	r2, [pc, #468]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	4b73      	ldr	r3, [pc, #460]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a72      	ldr	r2, [pc, #456]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e00b      	b.n	8004d00 <HAL_RCC_OscConfig+0xcc>
 8004ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a6e      	ldr	r2, [pc, #440]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a6b      	ldr	r2, [pc, #428]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fd ff36 	bl	8002b78 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d10:	f7fd ff32 	bl	8002b78 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	@ 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e21f      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b61      	ldr	r3, [pc, #388]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0xdc>
 8004d2e:	e014      	b.n	8004d5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fd ff22 	bl	8002b78 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d38:	f7fd ff1e 	bl	8002b78 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	@ 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e20b      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	4b57      	ldr	r3, [pc, #348]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x104>
 8004d56:	e000      	b.n	8004d5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d06f      	beq.n	8004e46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d66:	4b50      	ldr	r3, [pc, #320]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d017      	beq.n	8004da2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d72:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d105      	bne.n	8004d8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d92:	2b0c      	cmp	r3, #12
 8004d94:	d11c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d96:	4b44      	ldr	r3, [pc, #272]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d116      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da2:	4b41      	ldr	r3, [pc, #260]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <HAL_RCC_OscConfig+0x186>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e1d3      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dba:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4937      	ldr	r1, [pc, #220]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dce:	e03a      	b.n	8004e46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d020      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd8:	4b34      	ldr	r3, [pc, #208]	@ (8004eac <HAL_RCC_OscConfig+0x278>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fd fecb 	bl	8002b78 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de6:	f7fd fec7 	bl	8002b78 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e1b4      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df8:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e04:	4b28      	ldr	r3, [pc, #160]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4925      	ldr	r1, [pc, #148]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	600b      	str	r3, [r1, #0]
 8004e18:	e015      	b.n	8004e46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1a:	4b24      	ldr	r3, [pc, #144]	@ (8004eac <HAL_RCC_OscConfig+0x278>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fd feaa 	bl	8002b78 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e28:	f7fd fea6 	bl	8002b78 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e193      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d036      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d016      	beq.n	8004e88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e5a:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <HAL_RCC_OscConfig+0x27c>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e60:	f7fd fe8a 	bl	8002b78 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e68:	f7fd fe86 	bl	8002b78 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e173      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x234>
 8004e86:	e01b      	b.n	8004ec0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e88:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <HAL_RCC_OscConfig+0x27c>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8e:	f7fd fe73 	bl	8002b78 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e94:	e00e      	b.n	8004eb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e96:	f7fd fe6f 	bl	8002b78 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d907      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e15c      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	42470000 	.word	0x42470000
 8004eb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ea      	bne.n	8004e96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8097 	beq.w	8004ffc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed2:	4b83      	ldr	r3, [pc, #524]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10f      	bne.n	8004efe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eee:	4b7c      	ldr	r3, [pc, #496]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efe:	4b79      	ldr	r3, [pc, #484]	@ (80050e4 <HAL_RCC_OscConfig+0x4b0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d118      	bne.n	8004f3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f0a:	4b76      	ldr	r3, [pc, #472]	@ (80050e4 <HAL_RCC_OscConfig+0x4b0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a75      	ldr	r2, [pc, #468]	@ (80050e4 <HAL_RCC_OscConfig+0x4b0>)
 8004f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f16:	f7fd fe2f 	bl	8002b78 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1e:	f7fd fe2b 	bl	8002b78 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e118      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <HAL_RCC_OscConfig+0x4b0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f0      	beq.n	8004f1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d106      	bne.n	8004f52 <HAL_RCC_OscConfig+0x31e>
 8004f44:	4b66      	ldr	r3, [pc, #408]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f48:	4a65      	ldr	r2, [pc, #404]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f50:	e01c      	b.n	8004f8c <HAL_RCC_OscConfig+0x358>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x340>
 8004f5a:	4b61      	ldr	r3, [pc, #388]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5e:	4a60      	ldr	r2, [pc, #384]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	f043 0304 	orr.w	r3, r3, #4
 8004f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f66:	4b5e      	ldr	r3, [pc, #376]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6a:	4a5d      	ldr	r2, [pc, #372]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f72:	e00b      	b.n	8004f8c <HAL_RCC_OscConfig+0x358>
 8004f74:	4b5a      	ldr	r3, [pc, #360]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f78:	4a59      	ldr	r2, [pc, #356]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f80:	4b57      	ldr	r3, [pc, #348]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f84:	4a56      	ldr	r2, [pc, #344]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004f86:	f023 0304 	bic.w	r3, r3, #4
 8004f8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d015      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f94:	f7fd fdf0 	bl	8002b78 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9c:	f7fd fdec 	bl	8002b78 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e0d7      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0ee      	beq.n	8004f9c <HAL_RCC_OscConfig+0x368>
 8004fbe:	e014      	b.n	8004fea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fd fdda 	bl	8002b78 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc8:	f7fd fdd6 	bl	8002b78 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0c1      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fde:	4b40      	ldr	r3, [pc, #256]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ee      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d105      	bne.n	8004ffc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8004ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ffa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80ad 	beq.w	8005160 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005006:	4b36      	ldr	r3, [pc, #216]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	2b08      	cmp	r3, #8
 8005010:	d060      	beq.n	80050d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d145      	bne.n	80050a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501a:	4b33      	ldr	r3, [pc, #204]	@ (80050e8 <HAL_RCC_OscConfig+0x4b4>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fd fdaa 	bl	8002b78 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fd fda6 	bl	8002b78 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e093      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	4b29      	ldr	r3, [pc, #164]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	491b      	ldr	r1, [pc, #108]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 8005074:	4313      	orrs	r3, r2
 8005076:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005078:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <HAL_RCC_OscConfig+0x4b4>)
 800507a:	2201      	movs	r2, #1
 800507c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507e:	f7fd fd7b 	bl	8002b78 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005086:	f7fd fd77 	bl	8002b78 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e064      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005098:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCC_OscConfig+0x452>
 80050a4:	e05c      	b.n	8005160 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a6:	4b10      	ldr	r3, [pc, #64]	@ (80050e8 <HAL_RCC_OscConfig+0x4b4>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fd fd64 	bl	8002b78 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b4:	f7fd fd60 	bl	8002b78 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e04d      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c6:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <HAL_RCC_OscConfig+0x4ac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x480>
 80050d2:	e045      	b.n	8005160 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d107      	bne.n	80050ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e040      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40007000 	.word	0x40007000
 80050e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050ec:	4b1f      	ldr	r3, [pc, #124]	@ (800516c <HAL_RCC_OscConfig+0x538>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d030      	beq.n	800515c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d129      	bne.n	800515c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d122      	bne.n	800515c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800511c:	4013      	ands	r3, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005122:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	4293      	cmp	r3, r2
 8005126:	d119      	bne.n	800515c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	3b01      	subs	r3, #1
 8005136:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d10f      	bne.n	800515c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005146:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d107      	bne.n	800515c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800

08005170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e07b      	b.n	800527a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d108      	bne.n	800519c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005192:	d009      	beq.n	80051a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	61da      	str	r2, [r3, #28]
 800519a:	e005      	b.n	80051a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fd fa6c 	bl	80026a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522c:	ea42 0103 	orr.w	r1, r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	f003 0104 	and.w	r1, r3, #4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	f003 0210 	and.w	r2, r3, #16
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005268:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b088      	sub	sp, #32
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005292:	f7fd fc71 	bl	8002b78 <HAL_GetTick>
 8005296:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d001      	beq.n	80052ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
 80052aa:	e12a      	b.n	8005502 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_SPI_Transmit+0x36>
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e122      	b.n	8005502 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_SPI_Transmit+0x48>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e11b      	b.n	8005502 <HAL_SPI_Transmit+0x280>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2203      	movs	r2, #3
 80052d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005318:	d10f      	bne.n	800533a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005338:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d007      	beq.n	8005358 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005360:	d152      	bne.n	8005408 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_SPI_Transmit+0xee>
 800536a:	8b7b      	ldrh	r3, [r7, #26]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d145      	bne.n	80053fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005374:	881a      	ldrh	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	1c9a      	adds	r2, r3, #2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005394:	e032      	b.n	80053fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d112      	bne.n	80053ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	881a      	ldrh	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	1c9a      	adds	r2, r3, #2
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053c8:	e018      	b.n	80053fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ca:	f7fd fbd5 	bl	8002b78 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d803      	bhi.n	80053e2 <HAL_SPI_Transmit+0x160>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d102      	bne.n	80053e8 <HAL_SPI_Transmit+0x166>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d109      	bne.n	80053fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e082      	b.n	8005502 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1c7      	bne.n	8005396 <HAL_SPI_Transmit+0x114>
 8005406:	e053      	b.n	80054b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_Transmit+0x194>
 8005410:	8b7b      	ldrh	r3, [r7, #26]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d147      	bne.n	80054a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800543c:	e033      	b.n	80054a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b02      	cmp	r3, #2
 800544a:	d113      	bne.n	8005474 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005472:	e018      	b.n	80054a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005474:	f7fd fb80 	bl	8002b78 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d803      	bhi.n	800548c <HAL_SPI_Transmit+0x20a>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d102      	bne.n	8005492 <HAL_SPI_Transmit+0x210>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d109      	bne.n	80054a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e02d      	b.n	8005502 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1c6      	bne.n	800543e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fbd9 	bl	8005c6c <SPI_EndRxTxTransaction>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005500:	2300      	movs	r3, #0
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b088      	sub	sp, #32
 800550e:	af02      	add	r7, sp, #8
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d001      	beq.n	800552a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005526:	2302      	movs	r3, #2
 8005528:	e104      	b.n	8005734 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005532:	d112      	bne.n	800555a <HAL_SPI_Receive+0x50>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10e      	bne.n	800555a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2204      	movs	r2, #4
 8005540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f8f3 	bl	800573c <HAL_SPI_TransmitReceive>
 8005556:	4603      	mov	r3, r0
 8005558:	e0ec      	b.n	8005734 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800555a:	f7fd fb0d 	bl	8002b78 <HAL_GetTick>
 800555e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_SPI_Receive+0x62>
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0e1      	b.n	8005734 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_SPI_Receive+0x74>
 800557a:	2302      	movs	r3, #2
 800557c:	e0da      	b.n	8005734 <HAL_SPI_Receive+0x22a>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2204      	movs	r2, #4
 800558a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	88fa      	ldrh	r2, [r7, #6]
 800559e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055cc:	d10f      	bne.n	80055ee <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f8:	2b40      	cmp	r3, #64	@ 0x40
 80055fa:	d007      	beq.n	800560c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800560a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d170      	bne.n	80056f6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005614:	e035      	b.n	8005682 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	d115      	bne.n	8005650 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f103 020c 	add.w	r2, r3, #12
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	7812      	ldrb	r2, [r2, #0]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800564e:	e018      	b.n	8005682 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005650:	f7fd fa92 	bl	8002b78 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d803      	bhi.n	8005668 <HAL_SPI_Receive+0x15e>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d102      	bne.n	800566e <HAL_SPI_Receive+0x164>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e058      	b.n	8005734 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1c4      	bne.n	8005616 <HAL_SPI_Receive+0x10c>
 800568c:	e038      	b.n	8005700 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d113      	bne.n	80056c4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a6:	b292      	uxth	r2, r2
 80056a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056c2:	e018      	b.n	80056f6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c4:	f7fd fa58 	bl	8002b78 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d803      	bhi.n	80056dc <HAL_SPI_Receive+0x1d2>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d102      	bne.n	80056e2 <HAL_SPI_Receive+0x1d8>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e01e      	b.n	8005734 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1c6      	bne.n	800568e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fa4b 	bl	8005ba0 <SPI_EndRxTransaction>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005732:	2300      	movs	r3, #0
  }
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	@ 0x28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800574a:	2301      	movs	r3, #1
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800574e:	f7fd fa13 	bl	8002b78 <HAL_GetTick>
 8005752:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800575a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005762:	887b      	ldrh	r3, [r7, #2]
 8005764:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d00c      	beq.n	8005786 <HAL_SPI_TransmitReceive+0x4a>
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005772:	d106      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x46>
 800577c:	7ffb      	ldrb	r3, [r7, #31]
 800577e:	2b04      	cmp	r3, #4
 8005780:	d001      	beq.n	8005786 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
 8005784:	e17f      	b.n	8005a86 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_SPI_TransmitReceive+0x5c>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <HAL_SPI_TransmitReceive+0x5c>
 8005792:	887b      	ldrh	r3, [r7, #2]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e174      	b.n	8005a86 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x6e>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e16d      	b.n	8005a86 <HAL_SPI_TransmitReceive+0x34a>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d003      	beq.n	80057c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2205      	movs	r2, #5
 80057c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	887a      	ldrh	r2, [r7, #2]
 80057d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	887a      	ldrh	r2, [r7, #2]
 80057dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	887a      	ldrh	r2, [r7, #2]
 80057ee:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005806:	2b40      	cmp	r3, #64	@ 0x40
 8005808:	d007      	beq.n	800581a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005818:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005822:	d17e      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_SPI_TransmitReceive+0xf6>
 800582c:	8afb      	ldrh	r3, [r7, #22]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d16c      	bne.n	800590c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	881a      	ldrh	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	1c9a      	adds	r2, r3, #2
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005856:	e059      	b.n	800590c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b02      	cmp	r3, #2
 8005864:	d11b      	bne.n	800589e <HAL_SPI_TransmitReceive+0x162>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d016      	beq.n	800589e <HAL_SPI_TransmitReceive+0x162>
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	2b01      	cmp	r3, #1
 8005874:	d113      	bne.n	800589e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	881a      	ldrh	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005886:	1c9a      	adds	r2, r3, #2
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d119      	bne.n	80058e0 <HAL_SPI_TransmitReceive+0x1a4>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d014      	beq.n	80058e0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	b292      	uxth	r2, r2
 80058c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c8:	1c9a      	adds	r2, r3, #2
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058dc:	2301      	movs	r3, #1
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058e0:	f7fd f94a 	bl	8002b78 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d80d      	bhi.n	800590c <HAL_SPI_TransmitReceive+0x1d0>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d009      	beq.n	800590c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0bc      	b.n	8005a86 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1a0      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x11c>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d19b      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x11c>
 8005920:	e082      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_SPI_TransmitReceive+0x1f4>
 800592a:	8afb      	ldrh	r3, [r7, #22]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d171      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	7812      	ldrb	r2, [r2, #0]
 800593c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005956:	e05d      	b.n	8005a14 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b02      	cmp	r3, #2
 8005964:	d11c      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x264>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d017      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x264>
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	2b01      	cmp	r3, #1
 8005974:	d114      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	7812      	ldrb	r2, [r2, #0]
 8005982:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d119      	bne.n	80059e2 <HAL_SPI_TransmitReceive+0x2a6>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d014      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059de:	2301      	movs	r3, #1
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059e2:	f7fd f8c9 	bl	8002b78 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d803      	bhi.n	80059fa <HAL_SPI_TransmitReceive+0x2be>
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d102      	bne.n	8005a00 <HAL_SPI_TransmitReceive+0x2c4>
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e038      	b.n	8005a86 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d19c      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x21c>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d197      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f91d 	bl	8005c6c <SPI_EndRxTxTransaction>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e01d      	b.n	8005a86 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
  }
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3728      	adds	r7, #40	@ 0x28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005aa0:	f7fd f86a 	bl	8002b78 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	4413      	add	r3, r2
 8005aae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ab0:	f7fd f862 	bl	8002b78 <HAL_GetTick>
 8005ab4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ab6:	4b39      	ldr	r3, [pc, #228]	@ (8005b9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	015b      	lsls	r3, r3, #5
 8005abc:	0d1b      	lsrs	r3, r3, #20
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
 8005ac4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ac6:	e054      	b.n	8005b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d050      	beq.n	8005b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ad0:	f7fd f852 	bl	8002b78 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d902      	bls.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d13d      	bne.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005afe:	d111      	bne.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b08:	d004      	beq.n	8005b14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b12:	d107      	bne.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b2c:	d10f      	bne.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e017      	b.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	bf0c      	ite	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	2300      	movne	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d19b      	bne.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000038 	.word	0x20000038

08005ba0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bb4:	d111      	bne.n	8005bda <SPI_EndRxTransaction+0x3a>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bbe:	d004      	beq.n	8005bca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc8:	d107      	bne.n	8005bda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be2:	d12a      	bne.n	8005c3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bec:	d012      	beq.n	8005c14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2180      	movs	r1, #128	@ 0x80
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff ff49 	bl	8005a90 <SPI_WaitFlagStateUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02d      	beq.n	8005c60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e026      	b.n	8005c62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff ff36 	bl	8005a90 <SPI_WaitFlagStateUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01a      	beq.n	8005c60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e013      	b.n	8005c62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2200      	movs	r2, #0
 8005c42:	2101      	movs	r1, #1
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7ff ff23 	bl	8005a90 <SPI_WaitFlagStateUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c54:	f043 0220 	orr.w	r2, r3, #32
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e000      	b.n	8005c62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	2102      	movs	r1, #2
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff ff04 	bl	8005a90 <SPI_WaitFlagStateUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c92:	f043 0220 	orr.w	r2, r3, #32
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e032      	b.n	8005d04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005d0c <SPI_EndRxTxTransaction+0xa0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d10 <SPI_EndRxTxTransaction+0xa4>)
 8005ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca8:	0d5b      	lsrs	r3, r3, #21
 8005caa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cbc:	d112      	bne.n	8005ce4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2180      	movs	r1, #128	@ 0x80
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff fee1 	bl	8005a90 <SPI_WaitFlagStateUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d016      	beq.n	8005d02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd8:	f043 0220 	orr.w	r2, r3, #32
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e00f      	b.n	8005d04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cfa:	2b80      	cmp	r3, #128	@ 0x80
 8005cfc:	d0f2      	beq.n	8005ce4 <SPI_EndRxTxTransaction+0x78>
 8005cfe:	e000      	b.n	8005d02 <SPI_EndRxTxTransaction+0x96>
        break;
 8005d00:	bf00      	nop
  }

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000038 	.word	0x20000038
 8005d10:	165e9f81 	.word	0x165e9f81

08005d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e041      	b.n	8005daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fc fcf8 	bl	8002730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f000 fa7e 	bl	8006254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d001      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e04e      	b.n	8005e6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a23      	ldr	r2, [pc, #140]	@ (8005e78 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x80>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df6:	d01d      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x80>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e7c <HAL_TIM_Base_Start_IT+0xc8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x80>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1e      	ldr	r2, [pc, #120]	@ (8005e80 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x80>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1c      	ldr	r2, [pc, #112]	@ (8005e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x80>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x80>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a19      	ldr	r2, [pc, #100]	@ (8005e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0x80>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a18      	ldr	r2, [pc, #96]	@ (8005e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d111      	bne.n	8005e58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b06      	cmp	r3, #6
 8005e44:	d010      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e56:	e007      	b.n	8005e68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40001800 	.word	0x40001800

08005e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d020      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0202 	mvn.w	r2, #2
 8005ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f999 	bl	8006216 <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f98b 	bl	8006202 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f99c 	bl	800622a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0204 	mvn.w	r2, #4
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f973 	bl	8006216 <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f965 	bl	8006202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f976 	bl	800622a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d020      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01b      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0208 	mvn.w	r2, #8
 8005f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2204      	movs	r2, #4
 8005f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f94d 	bl	8006216 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f93f 	bl	8006202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f950 	bl	800622a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0310 	and.w	r3, r3, #16
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d020      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01b      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0210 	mvn.w	r2, #16
 8005fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f927 	bl	8006216 <HAL_TIM_IC_CaptureCallback>
 8005fc8:	e005      	b.n	8005fd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f919 	bl	8006202 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f92a 	bl	800622a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0201 	mvn.w	r2, #1
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fc fa58 	bl	80024b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00c      	beq.n	8006024 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fae4 	bl	80065ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f8fb 	bl	800623e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0220 	mvn.w	r2, #32
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fab6 	bl	80065d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_TIM_ConfigClockSource+0x1c>
 800608c:	2302      	movs	r3, #2
 800608e:	e0b4      	b.n	80061fa <HAL_TIM_ConfigClockSource+0x186>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060c8:	d03e      	beq.n	8006148 <HAL_TIM_ConfigClockSource+0xd4>
 80060ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ce:	f200 8087 	bhi.w	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d6:	f000 8086 	beq.w	80061e6 <HAL_TIM_ConfigClockSource+0x172>
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060de:	d87f      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060e0:	2b70      	cmp	r3, #112	@ 0x70
 80060e2:	d01a      	beq.n	800611a <HAL_TIM_ConfigClockSource+0xa6>
 80060e4:	2b70      	cmp	r3, #112	@ 0x70
 80060e6:	d87b      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060e8:	2b60      	cmp	r3, #96	@ 0x60
 80060ea:	d050      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x11a>
 80060ec:	2b60      	cmp	r3, #96	@ 0x60
 80060ee:	d877      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060f0:	2b50      	cmp	r3, #80	@ 0x50
 80060f2:	d03c      	beq.n	800616e <HAL_TIM_ConfigClockSource+0xfa>
 80060f4:	2b50      	cmp	r3, #80	@ 0x50
 80060f6:	d873      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 80060f8:	2b40      	cmp	r3, #64	@ 0x40
 80060fa:	d058      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x13a>
 80060fc:	2b40      	cmp	r3, #64	@ 0x40
 80060fe:	d86f      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006100:	2b30      	cmp	r3, #48	@ 0x30
 8006102:	d064      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x15a>
 8006104:	2b30      	cmp	r3, #48	@ 0x30
 8006106:	d86b      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006108:	2b20      	cmp	r3, #32
 800610a:	d060      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x15a>
 800610c:	2b20      	cmp	r3, #32
 800610e:	d867      	bhi.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d05c      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x15a>
 8006114:	2b10      	cmp	r3, #16
 8006116:	d05a      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x15a>
 8006118:	e062      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800612a:	f000 f9b9 	bl	80064a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800613c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	609a      	str	r2, [r3, #8]
      break;
 8006146:	e04f      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006158:	f000 f9a2 	bl	80064a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800616a:	609a      	str	r2, [r3, #8]
      break;
 800616c:	e03c      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800617a:	461a      	mov	r2, r3
 800617c:	f000 f916 	bl	80063ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2150      	movs	r1, #80	@ 0x50
 8006186:	4618      	mov	r0, r3
 8006188:	f000 f96f 	bl	800646a <TIM_ITRx_SetConfig>
      break;
 800618c:	e02c      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800619a:	461a      	mov	r2, r3
 800619c:	f000 f935 	bl	800640a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2160      	movs	r1, #96	@ 0x60
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f95f 	bl	800646a <TIM_ITRx_SetConfig>
      break;
 80061ac:	e01c      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ba:	461a      	mov	r2, r3
 80061bc:	f000 f8f6 	bl	80063ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2140      	movs	r1, #64	@ 0x40
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 f94f 	bl	800646a <TIM_ITRx_SetConfig>
      break;
 80061cc:	e00c      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f000 f946 	bl	800646a <TIM_ITRx_SetConfig>
      break;
 80061de:	e003      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	73fb      	strb	r3, [r7, #15]
      break;
 80061e4:	e000      	b.n	80061e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a46      	ldr	r2, [pc, #280]	@ (8006380 <TIM_Base_SetConfig+0x12c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006272:	d00f      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a43      	ldr	r2, [pc, #268]	@ (8006384 <TIM_Base_SetConfig+0x130>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00b      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a42      	ldr	r2, [pc, #264]	@ (8006388 <TIM_Base_SetConfig+0x134>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a41      	ldr	r2, [pc, #260]	@ (800638c <TIM_Base_SetConfig+0x138>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a40      	ldr	r2, [pc, #256]	@ (8006390 <TIM_Base_SetConfig+0x13c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d108      	bne.n	80062a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800629a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a35      	ldr	r2, [pc, #212]	@ (8006380 <TIM_Base_SetConfig+0x12c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d02b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b4:	d027      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a32      	ldr	r2, [pc, #200]	@ (8006384 <TIM_Base_SetConfig+0x130>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d023      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a31      	ldr	r2, [pc, #196]	@ (8006388 <TIM_Base_SetConfig+0x134>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01f      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a30      	ldr	r2, [pc, #192]	@ (800638c <TIM_Base_SetConfig+0x138>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006390 <TIM_Base_SetConfig+0x13c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d017      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006394 <TIM_Base_SetConfig+0x140>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006398 <TIM_Base_SetConfig+0x144>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00f      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2c      	ldr	r2, [pc, #176]	@ (800639c <TIM_Base_SetConfig+0x148>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00b      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2b      	ldr	r2, [pc, #172]	@ (80063a0 <TIM_Base_SetConfig+0x14c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	@ (80063a4 <TIM_Base_SetConfig+0x150>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a29      	ldr	r2, [pc, #164]	@ (80063a8 <TIM_Base_SetConfig+0x154>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d108      	bne.n	8006318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800630c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a10      	ldr	r2, [pc, #64]	@ (8006380 <TIM_Base_SetConfig+0x12c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a12      	ldr	r2, [pc, #72]	@ (8006390 <TIM_Base_SetConfig+0x13c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d103      	bne.n	8006354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d105      	bne.n	8006372 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f023 0201 	bic.w	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	611a      	str	r2, [r3, #16]
  }
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40010400 	.word	0x40010400
 8006394:	40014000 	.word	0x40014000
 8006398:	40014400 	.word	0x40014400
 800639c:	40014800 	.word	0x40014800
 80063a0:	40001800 	.word	0x40001800
 80063a4:	40001c00 	.word	0x40001c00
 80063a8:	40002000 	.word	0x40002000

080063ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f023 0201 	bic.w	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f023 030a 	bic.w	r3, r3, #10
 80063e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	621a      	str	r2, [r3, #32]
}
 80063fe:	bf00      	nop
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800640a:	b480      	push	{r7}
 800640c:	b087      	sub	sp, #28
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f023 0210 	bic.w	r2, r3, #16
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	031b      	lsls	r3, r3, #12
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006446:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	4313      	orrs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	f043 0307 	orr.w	r3, r3, #7
 800648c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	609a      	str	r2, [r3, #8]
}
 8006494:	bf00      	nop
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	021a      	lsls	r2, r3, #8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	609a      	str	r2, [r3, #8]
}
 80064d4:	bf00      	nop
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e05a      	b.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a21      	ldr	r2, [pc, #132]	@ (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d022      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006544:	d01d      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1d      	ldr	r2, [pc, #116]	@ (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d018      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1b      	ldr	r2, [pc, #108]	@ (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d013      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1a      	ldr	r2, [pc, #104]	@ (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a18      	ldr	r2, [pc, #96]	@ (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d009      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a17      	ldr	r2, [pc, #92]	@ (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a15      	ldr	r2, [pc, #84]	@ (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d10c      	bne.n	800659c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	4313      	orrs	r3, r2
 8006592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	40010000 	.word	0x40010000
 80065c0:	40000400 	.word	0x40000400
 80065c4:	40000800 	.word	0x40000800
 80065c8:	40000c00 	.word	0x40000c00
 80065cc:	40010400 	.word	0x40010400
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40001800 	.word	0x40001800

080065d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e042      	b.n	8006698 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fc f8aa 	bl	8002780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2224      	movs	r2, #36	@ 0x24
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fdb3 	bl	80071b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695a      	ldr	r2, [r3, #20]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	@ 0x28
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d175      	bne.n	80067ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <HAL_UART_Transmit+0x2c>
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e06e      	b.n	80067ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2221      	movs	r2, #33	@ 0x21
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066de:	f7fc fa4b 	bl	8002b78 <HAL_GetTick>
 80066e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	88fa      	ldrh	r2, [r7, #6]
 80066e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	88fa      	ldrh	r2, [r7, #6]
 80066ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066f8:	d108      	bne.n	800670c <HAL_UART_Transmit+0x6c>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e003      	b.n	8006714 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006710:	2300      	movs	r3, #0
 8006712:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006714:	e02e      	b.n	8006774 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2200      	movs	r2, #0
 800671e:	2180      	movs	r1, #128	@ 0x80
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fb15 	bl	8006d50 <UART_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e03a      	b.n	80067ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800674c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	3302      	adds	r3, #2
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	e007      	b.n	8006766 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	781a      	ldrb	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	3301      	adds	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1cb      	bne.n	8006716 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2200      	movs	r2, #0
 8006786:	2140      	movs	r1, #64	@ 0x40
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fae1 	bl	8006d50 <UART_WaitOnFlagUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e006      	b.n	80067ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	e000      	b.n	80067ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067ac:	2302      	movs	r3, #2
  }
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3720      	adds	r7, #32
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	4613      	mov	r3, r2
 80067c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d112      	bne.n	80067f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <HAL_UART_Receive_IT+0x26>
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e00b      	b.n	80067f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	461a      	mov	r2, r3
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fb08 	bl	8006e02 <UART_Start_Receive_IT>
 80067f2:	4603      	mov	r3, r0
 80067f4:	e000      	b.n	80067f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80067f6:	2302      	movs	r3, #2
  }
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b0ba      	sub	sp, #232	@ 0xe8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006826:	2300      	movs	r3, #0
 8006828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800682c:	2300      	movs	r3, #0
 800682e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800683e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10f      	bne.n	8006866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <HAL_UART_IRQHandler+0x66>
 8006852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fbe8 	bl	8007034 <UART_Receive_IT>
      return;
 8006864:	e25b      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 80de 	beq.w	8006a2c <HAL_UART_IRQHandler+0x22c>
 8006870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006880:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80d1 	beq.w	8006a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_UART_IRQHandler+0xae>
 8006896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a6:	f043 0201 	orr.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_UART_IRQHandler+0xd2>
 80068ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ca:	f043 0202 	orr.w	r2, r3, #2
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_UART_IRQHandler+0xf6>
 80068de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ee:	f043 0204 	orr.w	r2, r3, #4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <HAL_UART_IRQHandler+0x126>
 8006902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800690e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691e:	f043 0208 	orr.w	r2, r3, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 81f2 	beq.w	8006d14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d008      	beq.n	800694e <HAL_UART_IRQHandler+0x14e>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fb73 	bl	8007034 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006958:	2b40      	cmp	r3, #64	@ 0x40
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <HAL_UART_IRQHandler+0x17a>
 8006972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d04f      	beq.n	8006a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa7b 	bl	8006e76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698a:	2b40      	cmp	r3, #64	@ 0x40
 800698c:	d141      	bne.n	8006a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3314      	adds	r3, #20
 8006994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3314      	adds	r3, #20
 80069b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1d9      	bne.n	800698e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d013      	beq.n	8006a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e6:	4a7e      	ldr	r2, [pc, #504]	@ (8006be0 <HAL_UART_IRQHandler+0x3e0>)
 80069e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fc fa93 	bl	8002f1a <HAL_DMA_Abort_IT>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a04:	4610      	mov	r0, r2
 8006a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a08:	e00e      	b.n	8006a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f98a 	bl	8006d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a10:	e00a      	b.n	8006a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f986 	bl	8006d24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a18:	e006      	b.n	8006a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f982 	bl	8006d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a26:	e175      	b.n	8006d14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	bf00      	nop
    return;
 8006a2a:	e173      	b.n	8006d14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f040 814f 	bne.w	8006cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8148 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8141 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a72:	2b40      	cmp	r3, #64	@ 0x40
 8006a74:	f040 80b6 	bne.w	8006be4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8145 	beq.w	8006d18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a96:	429a      	cmp	r2, r3
 8006a98:	f080 813e 	bcs.w	8006d18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aa2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aae:	f000 8088 	beq.w	8006bc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ade:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d9      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e1      	bne.n	8006afe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e3      	bne.n	8006b3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006ba4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ba6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006baa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e3      	bne.n	8006b80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fc f93c 	bl	8002e3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f8ad 	bl	8006d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bde:	e09b      	b.n	8006d18 <HAL_UART_IRQHandler+0x518>
 8006be0:	08006f3d 	.word	0x08006f3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 808e 	beq.w	8006d1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8089 	beq.w	8006d1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	330c      	adds	r3, #12
 8006c10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e3      	bne.n	8006c0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3314      	adds	r3, #20
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	623b      	str	r3, [r7, #32]
   return(result);
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3314      	adds	r3, #20
 8006c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c66:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e3      	bne.n	8006c42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0310 	bic.w	r3, r3, #16
 8006c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	330c      	adds	r3, #12
 8006ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006cac:	61fa      	str	r2, [r7, #28]
 8006cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	69b9      	ldr	r1, [r7, #24]
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e3      	bne.n	8006c88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f833 	bl	8006d38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cd2:	e023      	b.n	8006d1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x4f4>
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f939 	bl	8006f64 <UART_Transmit_IT>
    return;
 8006cf2:	e014      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00e      	beq.n	8006d1e <HAL_UART_IRQHandler+0x51e>
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f979 	bl	8007004 <UART_EndTransmit_IT>
    return;
 8006d12:	e004      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
    return;
 8006d14:	bf00      	nop
 8006d16:	e002      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d1c:	bf00      	nop
  }
}
 8006d1e:	37e8      	adds	r7, #232	@ 0xe8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d60:	e03b      	b.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d68:	d037      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d6a:	f7fb ff05 	bl	8002b78 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	6a3a      	ldr	r2, [r7, #32]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d302      	bcc.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e03a      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d023      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b80      	cmp	r3, #128	@ 0x80
 8006d96:	d020      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b40      	cmp	r3, #64	@ 0x40
 8006d9c:	d01d      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d116      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 f857 	bl	8006e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2208      	movs	r2, #8
 8006dcc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e00f      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d0b4      	beq.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	88fa      	ldrh	r2, [r7, #6]
 8006e20:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2222      	movs	r2, #34	@ 0x22
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0220 	orr.w	r2, r2, #32
 8006e66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b095      	sub	sp, #84	@ 0x54
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e5      	bne.n	8006e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3314      	adds	r3, #20
 8006eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e5      	bne.n	8006eb2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d119      	bne.n	8006f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f023 0310 	bic.w	r3, r3, #16
 8006f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f0e:	61ba      	str	r2, [r7, #24]
 8006f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6979      	ldr	r1, [r7, #20]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e5      	bne.n	8006eee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f30:	bf00      	nop
 8006f32:	3754      	adds	r7, #84	@ 0x54
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff fee4 	bl	8006d24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b21      	cmp	r3, #33	@ 0x21
 8006f76:	d13e      	bne.n	8006ff6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f80:	d114      	bne.n	8006fac <UART_Transmit_IT+0x48>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d110      	bne.n	8006fac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	1c9a      	adds	r2, r3, #2
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]
 8006faa:	e008      	b.n	8006fbe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	1c59      	adds	r1, r3, #1
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6211      	str	r1, [r2, #32]
 8006fb6:	781a      	ldrb	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10f      	bne.n	8006ff2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fe0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ff0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e000      	b.n	8006ff8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ff6:	2302      	movs	r3, #2
  }
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800701a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fa fec1 	bl	8001dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08c      	sub	sp, #48	@ 0x30
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b22      	cmp	r3, #34	@ 0x22
 8007046:	f040 80ae 	bne.w	80071a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007052:	d117      	bne.n	8007084 <UART_Receive_IT+0x50>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d113      	bne.n	8007084 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800705c:	2300      	movs	r3, #0
 800705e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007064:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	b29b      	uxth	r3, r3
 800706e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007072:	b29a      	uxth	r2, r3
 8007074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007076:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	1c9a      	adds	r2, r3, #2
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	629a      	str	r2, [r3, #40]	@ 0x28
 8007082:	e026      	b.n	80070d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007096:	d007      	beq.n	80070a8 <UART_Receive_IT+0x74>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <UART_Receive_IT+0x82>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d106      	bne.n	80070b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	e008      	b.n	80070c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29b      	uxth	r3, r3
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4619      	mov	r1, r3
 80070e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d15d      	bne.n	80071a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0220 	bic.w	r2, r2, #32
 80070f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0201 	bic.w	r2, r2, #1
 8007114:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007128:	2b01      	cmp	r3, #1
 800712a:	d135      	bne.n	8007198 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	613b      	str	r3, [r7, #16]
   return(result);
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f023 0310 	bic.w	r3, r3, #16
 8007148:	627b      	str	r3, [r7, #36]	@ 0x24
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007152:	623a      	str	r2, [r7, #32]
 8007154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	69f9      	ldr	r1, [r7, #28]
 8007158:	6a3a      	ldr	r2, [r7, #32]
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e5      	bne.n	8007132 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b10      	cmp	r3, #16
 8007172:	d10a      	bne.n	800718a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fdd1 	bl	8006d38 <HAL_UARTEx_RxEventCallback>
 8007196:	e002      	b.n	800719e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7fa fe17 	bl	8001dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	e002      	b.n	80071a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e000      	b.n	80071a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
  }
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3730      	adds	r7, #48	@ 0x30
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b4:	b0c0      	sub	sp, #256	@ 0x100
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071cc:	68d9      	ldr	r1, [r3, #12]
 80071ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	ea40 0301 	orr.w	r3, r0, r1
 80071d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007208:	f021 010c 	bic.w	r1, r1, #12
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007216:	430b      	orrs	r3, r1
 8007218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722a:	6999      	ldr	r1, [r3, #24]
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	ea40 0301 	orr.w	r3, r0, r1
 8007236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b8f      	ldr	r3, [pc, #572]	@ (800747c <UART_SetConfig+0x2cc>)
 8007240:	429a      	cmp	r2, r3
 8007242:	d005      	beq.n	8007250 <UART_SetConfig+0xa0>
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b8d      	ldr	r3, [pc, #564]	@ (8007480 <UART_SetConfig+0x2d0>)
 800724c:	429a      	cmp	r2, r3
 800724e:	d104      	bne.n	800725a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007250:	f7fd faac 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8007254:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007258:	e003      	b.n	8007262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800725a:	f7fd fa93 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 800725e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800726c:	f040 810c 	bne.w	8007488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007274:	2200      	movs	r2, #0
 8007276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800727a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800727e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007282:	4622      	mov	r2, r4
 8007284:	462b      	mov	r3, r5
 8007286:	1891      	adds	r1, r2, r2
 8007288:	65b9      	str	r1, [r7, #88]	@ 0x58
 800728a:	415b      	adcs	r3, r3
 800728c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800728e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007292:	4621      	mov	r1, r4
 8007294:	eb12 0801 	adds.w	r8, r2, r1
 8007298:	4629      	mov	r1, r5
 800729a:	eb43 0901 	adc.w	r9, r3, r1
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	f04f 0300 	mov.w	r3, #0
 80072a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072b2:	4690      	mov	r8, r2
 80072b4:	4699      	mov	r9, r3
 80072b6:	4623      	mov	r3, r4
 80072b8:	eb18 0303 	adds.w	r3, r8, r3
 80072bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072c0:	462b      	mov	r3, r5
 80072c2:	eb49 0303 	adc.w	r3, r9, r3
 80072c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072de:	460b      	mov	r3, r1
 80072e0:	18db      	adds	r3, r3, r3
 80072e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80072e4:	4613      	mov	r3, r2
 80072e6:	eb42 0303 	adc.w	r3, r2, r3
 80072ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072f4:	f7f9 fcf8 	bl	8000ce8 <__aeabi_uldivmod>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4b61      	ldr	r3, [pc, #388]	@ (8007484 <UART_SetConfig+0x2d4>)
 80072fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	011c      	lsls	r4, r3, #4
 8007306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800730a:	2200      	movs	r2, #0
 800730c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007310:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	1891      	adds	r1, r2, r2
 800731e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007320:	415b      	adcs	r3, r3
 8007322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007328:	4641      	mov	r1, r8
 800732a:	eb12 0a01 	adds.w	sl, r2, r1
 800732e:	4649      	mov	r1, r9
 8007330:	eb43 0b01 	adc.w	fp, r3, r1
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007348:	4692      	mov	sl, r2
 800734a:	469b      	mov	fp, r3
 800734c:	4643      	mov	r3, r8
 800734e:	eb1a 0303 	adds.w	r3, sl, r3
 8007352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007356:	464b      	mov	r3, r9
 8007358:	eb4b 0303 	adc.w	r3, fp, r3
 800735c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800736c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007374:	460b      	mov	r3, r1
 8007376:	18db      	adds	r3, r3, r3
 8007378:	643b      	str	r3, [r7, #64]	@ 0x40
 800737a:	4613      	mov	r3, r2
 800737c:	eb42 0303 	adc.w	r3, r2, r3
 8007380:	647b      	str	r3, [r7, #68]	@ 0x44
 8007382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800738a:	f7f9 fcad 	bl	8000ce8 <__aeabi_uldivmod>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4611      	mov	r1, r2
 8007394:	4b3b      	ldr	r3, [pc, #236]	@ (8007484 <UART_SetConfig+0x2d4>)
 8007396:	fba3 2301 	umull	r2, r3, r3, r1
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	2264      	movs	r2, #100	@ 0x64
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	1acb      	subs	r3, r1, r3
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073aa:	4b36      	ldr	r3, [pc, #216]	@ (8007484 <UART_SetConfig+0x2d4>)
 80073ac:	fba3 2302 	umull	r2, r3, r3, r2
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80073b8:	441c      	add	r4, r3
 80073ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073cc:	4642      	mov	r2, r8
 80073ce:	464b      	mov	r3, r9
 80073d0:	1891      	adds	r1, r2, r2
 80073d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073d4:	415b      	adcs	r3, r3
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073dc:	4641      	mov	r1, r8
 80073de:	1851      	adds	r1, r2, r1
 80073e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80073e2:	4649      	mov	r1, r9
 80073e4:	414b      	adcs	r3, r1
 80073e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073f4:	4659      	mov	r1, fp
 80073f6:	00cb      	lsls	r3, r1, #3
 80073f8:	4651      	mov	r1, sl
 80073fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073fe:	4651      	mov	r1, sl
 8007400:	00ca      	lsls	r2, r1, #3
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	4603      	mov	r3, r0
 8007408:	4642      	mov	r2, r8
 800740a:	189b      	adds	r3, r3, r2
 800740c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007410:	464b      	mov	r3, r9
 8007412:	460a      	mov	r2, r1
 8007414:	eb42 0303 	adc.w	r3, r2, r3
 8007418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007428:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800742c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007430:	460b      	mov	r3, r1
 8007432:	18db      	adds	r3, r3, r3
 8007434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007436:	4613      	mov	r3, r2
 8007438:	eb42 0303 	adc.w	r3, r2, r3
 800743c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800743e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007446:	f7f9 fc4f 	bl	8000ce8 <__aeabi_uldivmod>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4b0d      	ldr	r3, [pc, #52]	@ (8007484 <UART_SetConfig+0x2d4>)
 8007450:	fba3 1302 	umull	r1, r3, r3, r2
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	2164      	movs	r1, #100	@ 0x64
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	3332      	adds	r3, #50	@ 0x32
 8007462:	4a08      	ldr	r2, [pc, #32]	@ (8007484 <UART_SetConfig+0x2d4>)
 8007464:	fba2 2303 	umull	r2, r3, r2, r3
 8007468:	095b      	lsrs	r3, r3, #5
 800746a:	f003 0207 	and.w	r2, r3, #7
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4422      	add	r2, r4
 8007476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007478:	e106      	b.n	8007688 <UART_SetConfig+0x4d8>
 800747a:	bf00      	nop
 800747c:	40011000 	.word	0x40011000
 8007480:	40011400 	.word	0x40011400
 8007484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800748c:	2200      	movs	r2, #0
 800748e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007492:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800749a:	4642      	mov	r2, r8
 800749c:	464b      	mov	r3, r9
 800749e:	1891      	adds	r1, r2, r2
 80074a0:	6239      	str	r1, [r7, #32]
 80074a2:	415b      	adcs	r3, r3
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074aa:	4641      	mov	r1, r8
 80074ac:	1854      	adds	r4, r2, r1
 80074ae:	4649      	mov	r1, r9
 80074b0:	eb43 0501 	adc.w	r5, r3, r1
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	00eb      	lsls	r3, r5, #3
 80074be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074c2:	00e2      	lsls	r2, r4, #3
 80074c4:	4614      	mov	r4, r2
 80074c6:	461d      	mov	r5, r3
 80074c8:	4643      	mov	r3, r8
 80074ca:	18e3      	adds	r3, r4, r3
 80074cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074d0:	464b      	mov	r3, r9
 80074d2:	eb45 0303 	adc.w	r3, r5, r3
 80074d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074ea:	f04f 0200 	mov.w	r2, #0
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074f6:	4629      	mov	r1, r5
 80074f8:	008b      	lsls	r3, r1, #2
 80074fa:	4621      	mov	r1, r4
 80074fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007500:	4621      	mov	r1, r4
 8007502:	008a      	lsls	r2, r1, #2
 8007504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007508:	f7f9 fbee 	bl	8000ce8 <__aeabi_uldivmod>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4b60      	ldr	r3, [pc, #384]	@ (8007694 <UART_SetConfig+0x4e4>)
 8007512:	fba3 2302 	umull	r2, r3, r3, r2
 8007516:	095b      	lsrs	r3, r3, #5
 8007518:	011c      	lsls	r4, r3, #4
 800751a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800751e:	2200      	movs	r2, #0
 8007520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007524:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800752c:	4642      	mov	r2, r8
 800752e:	464b      	mov	r3, r9
 8007530:	1891      	adds	r1, r2, r2
 8007532:	61b9      	str	r1, [r7, #24]
 8007534:	415b      	adcs	r3, r3
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800753c:	4641      	mov	r1, r8
 800753e:	1851      	adds	r1, r2, r1
 8007540:	6139      	str	r1, [r7, #16]
 8007542:	4649      	mov	r1, r9
 8007544:	414b      	adcs	r3, r1
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007554:	4659      	mov	r1, fp
 8007556:	00cb      	lsls	r3, r1, #3
 8007558:	4651      	mov	r1, sl
 800755a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800755e:	4651      	mov	r1, sl
 8007560:	00ca      	lsls	r2, r1, #3
 8007562:	4610      	mov	r0, r2
 8007564:	4619      	mov	r1, r3
 8007566:	4603      	mov	r3, r0
 8007568:	4642      	mov	r2, r8
 800756a:	189b      	adds	r3, r3, r2
 800756c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007570:	464b      	mov	r3, r9
 8007572:	460a      	mov	r2, r1
 8007574:	eb42 0303 	adc.w	r3, r2, r3
 8007578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007586:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007594:	4649      	mov	r1, r9
 8007596:	008b      	lsls	r3, r1, #2
 8007598:	4641      	mov	r1, r8
 800759a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800759e:	4641      	mov	r1, r8
 80075a0:	008a      	lsls	r2, r1, #2
 80075a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075a6:	f7f9 fb9f 	bl	8000ce8 <__aeabi_uldivmod>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	4b38      	ldr	r3, [pc, #224]	@ (8007694 <UART_SetConfig+0x4e4>)
 80075b2:	fba3 2301 	umull	r2, r3, r3, r1
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	2264      	movs	r2, #100	@ 0x64
 80075ba:	fb02 f303 	mul.w	r3, r2, r3
 80075be:	1acb      	subs	r3, r1, r3
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	3332      	adds	r3, #50	@ 0x32
 80075c4:	4a33      	ldr	r2, [pc, #204]	@ (8007694 <UART_SetConfig+0x4e4>)
 80075c6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ca:	095b      	lsrs	r3, r3, #5
 80075cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075d0:	441c      	add	r4, r3
 80075d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075d6:	2200      	movs	r2, #0
 80075d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80075da:	677a      	str	r2, [r7, #116]	@ 0x74
 80075dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075e0:	4642      	mov	r2, r8
 80075e2:	464b      	mov	r3, r9
 80075e4:	1891      	adds	r1, r2, r2
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	415b      	adcs	r3, r3
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075f0:	4641      	mov	r1, r8
 80075f2:	1851      	adds	r1, r2, r1
 80075f4:	6039      	str	r1, [r7, #0]
 80075f6:	4649      	mov	r1, r9
 80075f8:	414b      	adcs	r3, r1
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007608:	4659      	mov	r1, fp
 800760a:	00cb      	lsls	r3, r1, #3
 800760c:	4651      	mov	r1, sl
 800760e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007612:	4651      	mov	r1, sl
 8007614:	00ca      	lsls	r2, r1, #3
 8007616:	4610      	mov	r0, r2
 8007618:	4619      	mov	r1, r3
 800761a:	4603      	mov	r3, r0
 800761c:	4642      	mov	r2, r8
 800761e:	189b      	adds	r3, r3, r2
 8007620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007622:	464b      	mov	r3, r9
 8007624:	460a      	mov	r2, r1
 8007626:	eb42 0303 	adc.w	r3, r2, r3
 800762a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	663b      	str	r3, [r7, #96]	@ 0x60
 8007636:	667a      	str	r2, [r7, #100]	@ 0x64
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007644:	4649      	mov	r1, r9
 8007646:	008b      	lsls	r3, r1, #2
 8007648:	4641      	mov	r1, r8
 800764a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800764e:	4641      	mov	r1, r8
 8007650:	008a      	lsls	r2, r1, #2
 8007652:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007656:	f7f9 fb47 	bl	8000ce8 <__aeabi_uldivmod>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <UART_SetConfig+0x4e4>)
 8007660:	fba3 1302 	umull	r1, r3, r3, r2
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	2164      	movs	r1, #100	@ 0x64
 8007668:	fb01 f303 	mul.w	r3, r1, r3
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	011b      	lsls	r3, r3, #4
 8007670:	3332      	adds	r3, #50	@ 0x32
 8007672:	4a08      	ldr	r2, [pc, #32]	@ (8007694 <UART_SetConfig+0x4e4>)
 8007674:	fba2 2303 	umull	r2, r3, r2, r3
 8007678:	095b      	lsrs	r3, r3, #5
 800767a:	f003 020f 	and.w	r2, r3, #15
 800767e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4422      	add	r2, r4
 8007686:	609a      	str	r2, [r3, #8]
}
 8007688:	bf00      	nop
 800768a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800768e:	46bd      	mov	sp, r7
 8007690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007694:	51eb851f 	.word	0x51eb851f

08007698 <sniprintf>:
 8007698:	b40c      	push	{r2, r3}
 800769a:	b530      	push	{r4, r5, lr}
 800769c:	4b17      	ldr	r3, [pc, #92]	@ (80076fc <sniprintf+0x64>)
 800769e:	1e0c      	subs	r4, r1, #0
 80076a0:	681d      	ldr	r5, [r3, #0]
 80076a2:	b09d      	sub	sp, #116	@ 0x74
 80076a4:	da08      	bge.n	80076b8 <sniprintf+0x20>
 80076a6:	238b      	movs	r3, #139	@ 0x8b
 80076a8:	602b      	str	r3, [r5, #0]
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	b01d      	add	sp, #116	@ 0x74
 80076b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076b4:	b002      	add	sp, #8
 80076b6:	4770      	bx	lr
 80076b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80076bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076c0:	bf14      	ite	ne
 80076c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076c6:	4623      	moveq	r3, r4
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	9307      	str	r3, [sp, #28]
 80076cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80076d0:	9002      	str	r0, [sp, #8]
 80076d2:	9006      	str	r0, [sp, #24]
 80076d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80076da:	ab21      	add	r3, sp, #132	@ 0x84
 80076dc:	a902      	add	r1, sp, #8
 80076de:	4628      	mov	r0, r5
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	f000 f88b 	bl	80077fc <_svfiprintf_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	bfbc      	itt	lt
 80076ea:	238b      	movlt	r3, #139	@ 0x8b
 80076ec:	602b      	strlt	r3, [r5, #0]
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	d0dd      	beq.n	80076ae <sniprintf+0x16>
 80076f2:	9b02      	ldr	r3, [sp, #8]
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
 80076f8:	e7d9      	b.n	80076ae <sniprintf+0x16>
 80076fa:	bf00      	nop
 80076fc:	20000050 	.word	0x20000050

08007700 <__ssprint_r>:
 8007700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	6893      	ldr	r3, [r2, #8]
 8007706:	f8d2 b000 	ldr.w	fp, [r2]
 800770a:	9001      	str	r0, [sp, #4]
 800770c:	460c      	mov	r4, r1
 800770e:	4617      	mov	r7, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d157      	bne.n	80077c4 <__ssprint_r+0xc4>
 8007714:	2000      	movs	r0, #0
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
 800771a:	b003      	add	sp, #12
 800771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007720:	e9db a800 	ldrd	sl, r8, [fp]
 8007724:	f10b 0b08 	add.w	fp, fp, #8
 8007728:	68a6      	ldr	r6, [r4, #8]
 800772a:	6820      	ldr	r0, [r4, #0]
 800772c:	f1b8 0f00 	cmp.w	r8, #0
 8007730:	d0f6      	beq.n	8007720 <__ssprint_r+0x20>
 8007732:	45b0      	cmp	r8, r6
 8007734:	d32e      	bcc.n	8007794 <__ssprint_r+0x94>
 8007736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800773a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800773e:	d029      	beq.n	8007794 <__ssprint_r+0x94>
 8007740:	6921      	ldr	r1, [r4, #16]
 8007742:	6965      	ldr	r5, [r4, #20]
 8007744:	eba0 0901 	sub.w	r9, r0, r1
 8007748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800774c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007750:	f109 0001 	add.w	r0, r9, #1
 8007754:	106d      	asrs	r5, r5, #1
 8007756:	4440      	add	r0, r8
 8007758:	4285      	cmp	r5, r0
 800775a:	bf38      	it	cc
 800775c:	4605      	movcc	r5, r0
 800775e:	0553      	lsls	r3, r2, #21
 8007760:	d534      	bpl.n	80077cc <__ssprint_r+0xcc>
 8007762:	9801      	ldr	r0, [sp, #4]
 8007764:	4629      	mov	r1, r5
 8007766:	f000 ffdb 	bl	8008720 <_malloc_r>
 800776a:	4606      	mov	r6, r0
 800776c:	2800      	cmp	r0, #0
 800776e:	d038      	beq.n	80077e2 <__ssprint_r+0xe2>
 8007770:	464a      	mov	r2, r9
 8007772:	6921      	ldr	r1, [r4, #16]
 8007774:	f000 fea0 	bl	80084b8 <memcpy>
 8007778:	89a2      	ldrh	r2, [r4, #12]
 800777a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800777e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007782:	81a2      	strh	r2, [r4, #12]
 8007784:	6126      	str	r6, [r4, #16]
 8007786:	6165      	str	r5, [r4, #20]
 8007788:	444e      	add	r6, r9
 800778a:	eba5 0509 	sub.w	r5, r5, r9
 800778e:	6026      	str	r6, [r4, #0]
 8007790:	60a5      	str	r5, [r4, #8]
 8007792:	4646      	mov	r6, r8
 8007794:	4546      	cmp	r6, r8
 8007796:	bf28      	it	cs
 8007798:	4646      	movcs	r6, r8
 800779a:	4632      	mov	r2, r6
 800779c:	4651      	mov	r1, sl
 800779e:	6820      	ldr	r0, [r4, #0]
 80077a0:	f000 fddd 	bl	800835e <memmove>
 80077a4:	68a2      	ldr	r2, [r4, #8]
 80077a6:	1b92      	subs	r2, r2, r6
 80077a8:	60a2      	str	r2, [r4, #8]
 80077aa:	6822      	ldr	r2, [r4, #0]
 80077ac:	4432      	add	r2, r6
 80077ae:	6022      	str	r2, [r4, #0]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	eba2 0308 	sub.w	r3, r2, r8
 80077b6:	44c2      	add	sl, r8
 80077b8:	60bb      	str	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0aa      	beq.n	8007714 <__ssprint_r+0x14>
 80077be:	f04f 0800 	mov.w	r8, #0
 80077c2:	e7b1      	b.n	8007728 <__ssprint_r+0x28>
 80077c4:	f04f 0a00 	mov.w	sl, #0
 80077c8:	46d0      	mov	r8, sl
 80077ca:	e7ad      	b.n	8007728 <__ssprint_r+0x28>
 80077cc:	9801      	ldr	r0, [sp, #4]
 80077ce:	462a      	mov	r2, r5
 80077d0:	f001 f9ec 	bl	8008bac <_realloc_r>
 80077d4:	4606      	mov	r6, r0
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d1d4      	bne.n	8007784 <__ssprint_r+0x84>
 80077da:	6921      	ldr	r1, [r4, #16]
 80077dc:	9801      	ldr	r0, [sp, #4]
 80077de:	f000 fedf 	bl	80085a0 <_free_r>
 80077e2:	9a01      	ldr	r2, [sp, #4]
 80077e4:	230c      	movs	r3, #12
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ee:	81a3      	strh	r3, [r4, #12]
 80077f0:	2300      	movs	r3, #0
 80077f2:	60bb      	str	r3, [r7, #8]
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	e78d      	b.n	8007716 <__ssprint_r+0x16>
	...

080077fc <_svfiprintf_r>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	461d      	mov	r5, r3
 8007802:	898b      	ldrh	r3, [r1, #12]
 8007804:	b0bb      	sub	sp, #236	@ 0xec
 8007806:	468b      	mov	fp, r1
 8007808:	0619      	lsls	r1, r3, #24
 800780a:	9001      	str	r0, [sp, #4]
 800780c:	9202      	str	r2, [sp, #8]
 800780e:	d514      	bpl.n	800783a <_svfiprintf_r+0x3e>
 8007810:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007814:	b98b      	cbnz	r3, 800783a <_svfiprintf_r+0x3e>
 8007816:	2140      	movs	r1, #64	@ 0x40
 8007818:	f000 ff82 	bl	8008720 <_malloc_r>
 800781c:	f8cb 0000 	str.w	r0, [fp]
 8007820:	f8cb 0010 	str.w	r0, [fp, #16]
 8007824:	b930      	cbnz	r0, 8007834 <_svfiprintf_r+0x38>
 8007826:	9a01      	ldr	r2, [sp, #4]
 8007828:	230c      	movs	r3, #12
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	f04f 33ff 	mov.w	r3, #4294967295
 8007830:	9304      	str	r3, [sp, #16]
 8007832:	e3df      	b.n	8007ff4 <_svfiprintf_r+0x7f8>
 8007834:	2340      	movs	r3, #64	@ 0x40
 8007836:	f8cb 3014 	str.w	r3, [fp, #20]
 800783a:	2300      	movs	r3, #0
 800783c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8007840:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007844:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007848:	ae11      	add	r6, sp, #68	@ 0x44
 800784a:	960e      	str	r6, [sp, #56]	@ 0x38
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	9b02      	ldr	r3, [sp, #8]
 8007850:	461c      	mov	r4, r3
 8007852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007856:	b10a      	cbz	r2, 800785c <_svfiprintf_r+0x60>
 8007858:	2a25      	cmp	r2, #37	@ 0x25
 800785a:	d1f9      	bne.n	8007850 <_svfiprintf_r+0x54>
 800785c:	9a02      	ldr	r2, [sp, #8]
 800785e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007860:	1aa7      	subs	r7, r4, r2
 8007862:	d00c      	beq.n	800787e <_svfiprintf_r+0x82>
 8007864:	443b      	add	r3, r7
 8007866:	9310      	str	r3, [sp, #64]	@ 0x40
 8007868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786a:	3301      	adds	r3, #1
 800786c:	2b07      	cmp	r3, #7
 800786e:	e9c6 2700 	strd	r2, r7, [r6]
 8007872:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007874:	dc76      	bgt.n	8007964 <_svfiprintf_r+0x168>
 8007876:	3608      	adds	r6, #8
 8007878:	9b04      	ldr	r3, [sp, #16]
 800787a:	443b      	add	r3, r7
 800787c:	9304      	str	r3, [sp, #16]
 800787e:	7823      	ldrb	r3, [r4, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 83ce 	beq.w	8008022 <_svfiprintf_r+0x826>
 8007886:	2300      	movs	r3, #0
 8007888:	f04f 32ff 	mov.w	r2, #4294967295
 800788c:	3401      	adds	r4, #1
 800788e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8007892:	9200      	str	r2, [sp, #0]
 8007894:	9303      	str	r3, [sp, #12]
 8007896:	4699      	mov	r9, r3
 8007898:	4622      	mov	r2, r4
 800789a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800789e:	9202      	str	r2, [sp, #8]
 80078a0:	f1a3 0220 	sub.w	r2, r3, #32
 80078a4:	2a5a      	cmp	r2, #90	@ 0x5a
 80078a6:	f200 8318 	bhi.w	8007eda <_svfiprintf_r+0x6de>
 80078aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80078ae:	009a      	.short	0x009a
 80078b0:	03160316 	.word	0x03160316
 80078b4:	031600a2 	.word	0x031600a2
 80078b8:	03160316 	.word	0x03160316
 80078bc:	03160082 	.word	0x03160082
 80078c0:	00a50316 	.word	0x00a50316
 80078c4:	031600af 	.word	0x031600af
 80078c8:	00b100ac 	.word	0x00b100ac
 80078cc:	00cc0316 	.word	0x00cc0316
 80078d0:	00cf00cf 	.word	0x00cf00cf
 80078d4:	00cf00cf 	.word	0x00cf00cf
 80078d8:	00cf00cf 	.word	0x00cf00cf
 80078dc:	00cf00cf 	.word	0x00cf00cf
 80078e0:	031600cf 	.word	0x031600cf
 80078e4:	03160316 	.word	0x03160316
 80078e8:	03160316 	.word	0x03160316
 80078ec:	03160316 	.word	0x03160316
 80078f0:	03160316 	.word	0x03160316
 80078f4:	010600f9 	.word	0x010600f9
 80078f8:	03160316 	.word	0x03160316
 80078fc:	03160316 	.word	0x03160316
 8007900:	03160316 	.word	0x03160316
 8007904:	03160316 	.word	0x03160316
 8007908:	03160316 	.word	0x03160316
 800790c:	03160154 	.word	0x03160154
 8007910:	03160316 	.word	0x03160316
 8007914:	0316019b 	.word	0x0316019b
 8007918:	0316027d 	.word	0x0316027d
 800791c:	029d0316 	.word	0x029d0316
 8007920:	03160316 	.word	0x03160316
 8007924:	03160316 	.word	0x03160316
 8007928:	03160316 	.word	0x03160316
 800792c:	03160316 	.word	0x03160316
 8007930:	03160316 	.word	0x03160316
 8007934:	010800f9 	.word	0x010800f9
 8007938:	03160316 	.word	0x03160316
 800793c:	00df0316 	.word	0x00df0316
 8007940:	00f30108 	.word	0x00f30108
 8007944:	00ec0316 	.word	0x00ec0316
 8007948:	01340316 	.word	0x01340316
 800794c:	018a0156 	.word	0x018a0156
 8007950:	031600f3 	.word	0x031600f3
 8007954:	0098019b 	.word	0x0098019b
 8007958:	0316027f 	.word	0x0316027f
 800795c:	00650316 	.word	0x00650316
 8007960:	00980316 	.word	0x00980316
 8007964:	9801      	ldr	r0, [sp, #4]
 8007966:	aa0e      	add	r2, sp, #56	@ 0x38
 8007968:	4659      	mov	r1, fp
 800796a:	f7ff fec9 	bl	8007700 <__ssprint_r>
 800796e:	2800      	cmp	r0, #0
 8007970:	f040 833b 	bne.w	8007fea <_svfiprintf_r+0x7ee>
 8007974:	ae11      	add	r6, sp, #68	@ 0x44
 8007976:	e77f      	b.n	8007878 <_svfiprintf_r+0x7c>
 8007978:	4a99      	ldr	r2, [pc, #612]	@ (8007be0 <_svfiprintf_r+0x3e4>)
 800797a:	9205      	str	r2, [sp, #20]
 800797c:	f019 0220 	ands.w	r2, r9, #32
 8007980:	f000 8234 	beq.w	8007dec <_svfiprintf_r+0x5f0>
 8007984:	3507      	adds	r5, #7
 8007986:	f025 0507 	bic.w	r5, r5, #7
 800798a:	462f      	mov	r7, r5
 800798c:	686d      	ldr	r5, [r5, #4]
 800798e:	f857 4b08 	ldr.w	r4, [r7], #8
 8007992:	f019 0f01 	tst.w	r9, #1
 8007996:	d009      	beq.n	80079ac <_svfiprintf_r+0x1b0>
 8007998:	ea54 0205 	orrs.w	r2, r4, r5
 800799c:	bf1f      	itttt	ne
 800799e:	2230      	movne	r2, #48	@ 0x30
 80079a0:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80079a4:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80079a8:	f049 0902 	orrne.w	r9, r9, #2
 80079ac:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 80079b0:	e113      	b.n	8007bda <_svfiprintf_r+0x3de>
 80079b2:	9801      	ldr	r0, [sp, #4]
 80079b4:	f000 fd08 	bl	80083c8 <_localeconv_r>
 80079b8:	6843      	ldr	r3, [r0, #4]
 80079ba:	9308      	str	r3, [sp, #32]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7f8 fc87 	bl	80002d0 <strlen>
 80079c2:	9007      	str	r0, [sp, #28]
 80079c4:	9801      	ldr	r0, [sp, #4]
 80079c6:	f000 fcff 	bl	80083c8 <_localeconv_r>
 80079ca:	6883      	ldr	r3, [r0, #8]
 80079cc:	9306      	str	r3, [sp, #24]
 80079ce:	9b07      	ldr	r3, [sp, #28]
 80079d0:	b12b      	cbz	r3, 80079de <_svfiprintf_r+0x1e2>
 80079d2:	9b06      	ldr	r3, [sp, #24]
 80079d4:	b11b      	cbz	r3, 80079de <_svfiprintf_r+0x1e2>
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b10b      	cbz	r3, 80079de <_svfiprintf_r+0x1e2>
 80079da:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 80079de:	9c02      	ldr	r4, [sp, #8]
 80079e0:	e75a      	b.n	8007898 <_svfiprintf_r+0x9c>
 80079e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f9      	bne.n	80079de <_svfiprintf_r+0x1e2>
 80079ea:	2320      	movs	r3, #32
 80079ec:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80079f0:	e7f5      	b.n	80079de <_svfiprintf_r+0x1e2>
 80079f2:	f049 0901 	orr.w	r9, r9, #1
 80079f6:	e7f2      	b.n	80079de <_svfiprintf_r+0x1e2>
 80079f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	daed      	bge.n	80079de <_svfiprintf_r+0x1e2>
 8007a02:	425b      	negs	r3, r3
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	f049 0904 	orr.w	r9, r9, #4
 8007a0a:	e7e8      	b.n	80079de <_svfiprintf_r+0x1e2>
 8007a0c:	232b      	movs	r3, #43	@ 0x2b
 8007a0e:	e7ed      	b.n	80079ec <_svfiprintf_r+0x1f0>
 8007a10:	9a02      	ldr	r2, [sp, #8]
 8007a12:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a18:	d111      	bne.n	8007a3e <_svfiprintf_r+0x242>
 8007a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1e:	9202      	str	r2, [sp, #8]
 8007a20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	e7da      	b.n	80079de <_svfiprintf_r+0x1e2>
 8007a28:	9b00      	ldr	r3, [sp, #0]
 8007a2a:	fb00 1303 	mla	r3, r0, r3, r1
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007a34:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8007a38:	2909      	cmp	r1, #9
 8007a3a:	d9f5      	bls.n	8007a28 <_svfiprintf_r+0x22c>
 8007a3c:	e72f      	b.n	800789e <_svfiprintf_r+0xa2>
 8007a3e:	2100      	movs	r1, #0
 8007a40:	9100      	str	r1, [sp, #0]
 8007a42:	200a      	movs	r0, #10
 8007a44:	e7f6      	b.n	8007a34 <_svfiprintf_r+0x238>
 8007a46:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 8007a4a:	e7c8      	b.n	80079de <_svfiprintf_r+0x1e2>
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	9a02      	ldr	r2, [sp, #8]
 8007a50:	9103      	str	r1, [sp, #12]
 8007a52:	200a      	movs	r0, #10
 8007a54:	9903      	ldr	r1, [sp, #12]
 8007a56:	3b30      	subs	r3, #48	@ 0x30
 8007a58:	fb00 3301 	mla	r3, r0, r1, r3
 8007a5c:	9303      	str	r3, [sp, #12]
 8007a5e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007a62:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8007a66:	2909      	cmp	r1, #9
 8007a68:	d9f4      	bls.n	8007a54 <_svfiprintf_r+0x258>
 8007a6a:	e718      	b.n	800789e <_svfiprintf_r+0xa2>
 8007a6c:	9b02      	ldr	r3, [sp, #8]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b68      	cmp	r3, #104	@ 0x68
 8007a72:	bf01      	itttt	eq
 8007a74:	9b02      	ldreq	r3, [sp, #8]
 8007a76:	3301      	addeq	r3, #1
 8007a78:	9302      	streq	r3, [sp, #8]
 8007a7a:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 8007a7e:	bf18      	it	ne
 8007a80:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 8007a84:	e7ab      	b.n	80079de <_svfiprintf_r+0x1e2>
 8007a86:	9b02      	ldr	r3, [sp, #8]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b6c      	cmp	r3, #108	@ 0x6c
 8007a8c:	d105      	bne.n	8007a9a <_svfiprintf_r+0x29e>
 8007a8e:	9b02      	ldr	r3, [sp, #8]
 8007a90:	3301      	adds	r3, #1
 8007a92:	9302      	str	r3, [sp, #8]
 8007a94:	f049 0920 	orr.w	r9, r9, #32
 8007a98:	e7a1      	b.n	80079de <_svfiprintf_r+0x1e2>
 8007a9a:	f049 0910 	orr.w	r9, r9, #16
 8007a9e:	e79e      	b.n	80079de <_svfiprintf_r+0x1e2>
 8007aa0:	462f      	mov	r7, r5
 8007aa2:	2400      	movs	r4, #0
 8007aa4:	f857 3b04 	ldr.w	r3, [r7], #4
 8007aa8:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8007aac:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 8007ab8:	e0aa      	b.n	8007c10 <_svfiprintf_r+0x414>
 8007aba:	f049 0910 	orr.w	r9, r9, #16
 8007abe:	f019 0f20 	tst.w	r9, #32
 8007ac2:	d011      	beq.n	8007ae8 <_svfiprintf_r+0x2ec>
 8007ac4:	3507      	adds	r5, #7
 8007ac6:	f025 0507 	bic.w	r5, r5, #7
 8007aca:	462f      	mov	r7, r5
 8007acc:	686d      	ldr	r5, [r5, #4]
 8007ace:	f857 4b08 	ldr.w	r4, [r7], #8
 8007ad2:	2d00      	cmp	r5, #0
 8007ad4:	da06      	bge.n	8007ae4 <_svfiprintf_r+0x2e8>
 8007ad6:	4264      	negs	r4, r4
 8007ad8:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8007adc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8007ae0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e048      	b.n	8007b7a <_svfiprintf_r+0x37e>
 8007ae8:	462f      	mov	r7, r5
 8007aea:	f019 0f10 	tst.w	r9, #16
 8007aee:	f857 5b04 	ldr.w	r5, [r7], #4
 8007af2:	d002      	beq.n	8007afa <_svfiprintf_r+0x2fe>
 8007af4:	462c      	mov	r4, r5
 8007af6:	17ed      	asrs	r5, r5, #31
 8007af8:	e7eb      	b.n	8007ad2 <_svfiprintf_r+0x2d6>
 8007afa:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8007afe:	d003      	beq.n	8007b08 <_svfiprintf_r+0x30c>
 8007b00:	b22c      	sxth	r4, r5
 8007b02:	f345 35c0 	sbfx	r5, r5, #15, #1
 8007b06:	e7e4      	b.n	8007ad2 <_svfiprintf_r+0x2d6>
 8007b08:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8007b0c:	d0f2      	beq.n	8007af4 <_svfiprintf_r+0x2f8>
 8007b0e:	b26c      	sxtb	r4, r5
 8007b10:	f345 15c0 	sbfx	r5, r5, #7, #1
 8007b14:	e7dd      	b.n	8007ad2 <_svfiprintf_r+0x2d6>
 8007b16:	f019 0f20 	tst.w	r9, #32
 8007b1a:	d007      	beq.n	8007b2c <_svfiprintf_r+0x330>
 8007b1c:	9a04      	ldr	r2, [sp, #16]
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	9904      	ldr	r1, [sp, #16]
 8007b22:	17d2      	asrs	r2, r2, #31
 8007b24:	e9c3 1200 	strd	r1, r2, [r3]
 8007b28:	3504      	adds	r5, #4
 8007b2a:	e690      	b.n	800784e <_svfiprintf_r+0x52>
 8007b2c:	f019 0f10 	tst.w	r9, #16
 8007b30:	d003      	beq.n	8007b3a <_svfiprintf_r+0x33e>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	9a04      	ldr	r2, [sp, #16]
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e7f6      	b.n	8007b28 <_svfiprintf_r+0x32c>
 8007b3a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8007b3e:	d003      	beq.n	8007b48 <_svfiprintf_r+0x34c>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	9a04      	ldr	r2, [sp, #16]
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e7ef      	b.n	8007b28 <_svfiprintf_r+0x32c>
 8007b48:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8007b4c:	d0f1      	beq.n	8007b32 <_svfiprintf_r+0x336>
 8007b4e:	682b      	ldr	r3, [r5, #0]
 8007b50:	9a04      	ldr	r2, [sp, #16]
 8007b52:	701a      	strb	r2, [r3, #0]
 8007b54:	e7e8      	b.n	8007b28 <_svfiprintf_r+0x32c>
 8007b56:	f049 0910 	orr.w	r9, r9, #16
 8007b5a:	f019 0320 	ands.w	r3, r9, #32
 8007b5e:	d01e      	beq.n	8007b9e <_svfiprintf_r+0x3a2>
 8007b60:	3507      	adds	r5, #7
 8007b62:	f025 0507 	bic.w	r5, r5, #7
 8007b66:	462f      	mov	r7, r5
 8007b68:	686d      	ldr	r5, [r5, #4]
 8007b6a:	f857 4b08 	ldr.w	r4, [r7], #8
 8007b6e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8007b72:	2300      	movs	r3, #0
 8007b74:	2200      	movs	r2, #0
 8007b76:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8007b7a:	9a00      	ldr	r2, [sp, #0]
 8007b7c:	3201      	adds	r2, #1
 8007b7e:	f000 8259 	beq.w	8008034 <_svfiprintf_r+0x838>
 8007b82:	ea54 0205 	orrs.w	r2, r4, r5
 8007b86:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 8007b8a:	f040 8258 	bne.w	800803e <_svfiprintf_r+0x842>
 8007b8e:	9a00      	ldr	r2, [sp, #0]
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	f000 8199 	beq.w	8007ec8 <_svfiprintf_r+0x6cc>
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	f040 8254 	bne.w	8008044 <_svfiprintf_r+0x848>
 8007b9c:	e13d      	b.n	8007e1a <_svfiprintf_r+0x61e>
 8007b9e:	462f      	mov	r7, r5
 8007ba0:	f019 0510 	ands.w	r5, r9, #16
 8007ba4:	f857 4b04 	ldr.w	r4, [r7], #4
 8007ba8:	d001      	beq.n	8007bae <_svfiprintf_r+0x3b2>
 8007baa:	461d      	mov	r5, r3
 8007bac:	e7df      	b.n	8007b6e <_svfiprintf_r+0x372>
 8007bae:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8007bb2:	d001      	beq.n	8007bb8 <_svfiprintf_r+0x3bc>
 8007bb4:	b2a4      	uxth	r4, r4
 8007bb6:	e7da      	b.n	8007b6e <_svfiprintf_r+0x372>
 8007bb8:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8007bbc:	d0d7      	beq.n	8007b6e <_svfiprintf_r+0x372>
 8007bbe:	b2e4      	uxtb	r4, r4
 8007bc0:	e7f3      	b.n	8007baa <_svfiprintf_r+0x3ae>
 8007bc2:	462f      	mov	r7, r5
 8007bc4:	f647 0330 	movw	r3, #30768	@ 0x7830
 8007bc8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8007bcc:	f857 4b04 	ldr.w	r4, [r7], #4
 8007bd0:	4b03      	ldr	r3, [pc, #12]	@ (8007be0 <_svfiprintf_r+0x3e4>)
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	2500      	movs	r5, #0
 8007bd6:	f049 0902 	orr.w	r9, r9, #2
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e7ca      	b.n	8007b74 <_svfiprintf_r+0x378>
 8007bde:	bf00      	nop
 8007be0:	0800fa75 	.word	0x0800fa75
 8007be4:	9b00      	ldr	r3, [sp, #0]
 8007be6:	462f      	mov	r7, r5
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	f04f 0500 	mov.w	r5, #0
 8007bee:	f857 8b04 	ldr.w	r8, [r7], #4
 8007bf2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8007bf6:	f000 80d2 	beq.w	8007d9e <_svfiprintf_r+0x5a2>
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4640      	mov	r0, r8
 8007c00:	f7f8 fb16 	bl	8000230 <memchr>
 8007c04:	4604      	mov	r4, r0
 8007c06:	b118      	cbz	r0, 8007c10 <_svfiprintf_r+0x414>
 8007c08:	eba0 0308 	sub.w	r3, r0, r8
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	462c      	mov	r4, r5
 8007c10:	9d00      	ldr	r5, [sp, #0]
 8007c12:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007c16:	42a5      	cmp	r5, r4
 8007c18:	bfb8      	it	lt
 8007c1a:	4625      	movlt	r5, r4
 8007c1c:	b103      	cbz	r3, 8007c20 <_svfiprintf_r+0x424>
 8007c1e:	3501      	adds	r5, #1
 8007c20:	f019 0302 	ands.w	r3, r9, #2
 8007c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c26:	bf18      	it	ne
 8007c28:	3502      	addne	r5, #2
 8007c2a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 8007c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c30:	d123      	bne.n	8007c7a <_svfiprintf_r+0x47e>
 8007c32:	9b03      	ldr	r3, [sp, #12]
 8007c34:	eba3 0a05 	sub.w	sl, r3, r5
 8007c38:	f1ba 0f00 	cmp.w	sl, #0
 8007c3c:	dd1d      	ble.n	8007c7a <_svfiprintf_r+0x47e>
 8007c3e:	4bac      	ldr	r3, [pc, #688]	@ (8007ef0 <_svfiprintf_r+0x6f4>)
 8007c40:	6033      	str	r3, [r6, #0]
 8007c42:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8007c46:	f1ba 0f10 	cmp.w	sl, #16
 8007c4a:	f102 0201 	add.w	r2, r2, #1
 8007c4e:	f106 0008 	add.w	r0, r6, #8
 8007c52:	f300 8153 	bgt.w	8007efc <_svfiprintf_r+0x700>
 8007c56:	eb0c 010a 	add.w	r1, ip, sl
 8007c5a:	2a07      	cmp	r2, #7
 8007c5c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007c60:	f8c6 a004 	str.w	sl, [r6, #4]
 8007c64:	f340 815e 	ble.w	8007f24 <_svfiprintf_r+0x728>
 8007c68:	9801      	ldr	r0, [sp, #4]
 8007c6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	f7ff fd47 	bl	8007700 <__ssprint_r>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	f040 81b9 	bne.w	8007fea <_svfiprintf_r+0x7ee>
 8007c78:	ae11      	add	r6, sp, #68	@ 0x44
 8007c7a:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8007c7e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007c82:	b161      	cbz	r1, 8007c9e <_svfiprintf_r+0x4a2>
 8007c84:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8007c88:	3301      	adds	r3, #1
 8007c8a:	6031      	str	r1, [r6, #0]
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	440a      	add	r2, r1
 8007c90:	2b07      	cmp	r3, #7
 8007c92:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007c96:	6071      	str	r1, [r6, #4]
 8007c98:	f300 8146 	bgt.w	8007f28 <_svfiprintf_r+0x72c>
 8007c9c:	3608      	adds	r6, #8
 8007c9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ca0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007ca4:	b159      	cbz	r1, 8007cbe <_svfiprintf_r+0x4c2>
 8007ca6:	a90d      	add	r1, sp, #52	@ 0x34
 8007ca8:	3301      	adds	r3, #1
 8007caa:	6031      	str	r1, [r6, #0]
 8007cac:	2102      	movs	r1, #2
 8007cae:	440a      	add	r2, r1
 8007cb0:	2b07      	cmp	r3, #7
 8007cb2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007cb6:	6071      	str	r1, [r6, #4]
 8007cb8:	f300 813f 	bgt.w	8007f3a <_svfiprintf_r+0x73e>
 8007cbc:	3608      	adds	r6, #8
 8007cbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cc0:	2b80      	cmp	r3, #128	@ 0x80
 8007cc2:	d123      	bne.n	8007d0c <_svfiprintf_r+0x510>
 8007cc4:	9b03      	ldr	r3, [sp, #12]
 8007cc6:	eba3 0a05 	sub.w	sl, r3, r5
 8007cca:	f1ba 0f00 	cmp.w	sl, #0
 8007cce:	dd1d      	ble.n	8007d0c <_svfiprintf_r+0x510>
 8007cd0:	4b88      	ldr	r3, [pc, #544]	@ (8007ef4 <_svfiprintf_r+0x6f8>)
 8007cd2:	6033      	str	r3, [r6, #0]
 8007cd4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8007cd8:	f1ba 0f10 	cmp.w	sl, #16
 8007cdc:	f102 0201 	add.w	r2, r2, #1
 8007ce0:	f106 0008 	add.w	r0, r6, #8
 8007ce4:	f300 8132 	bgt.w	8007f4c <_svfiprintf_r+0x750>
 8007ce8:	eb0c 010a 	add.w	r1, ip, sl
 8007cec:	2a07      	cmp	r2, #7
 8007cee:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007cf2:	f8c6 a004 	str.w	sl, [r6, #4]
 8007cf6:	f340 813d 	ble.w	8007f74 <_svfiprintf_r+0x778>
 8007cfa:	9801      	ldr	r0, [sp, #4]
 8007cfc:	aa0e      	add	r2, sp, #56	@ 0x38
 8007cfe:	4659      	mov	r1, fp
 8007d00:	f7ff fcfe 	bl	8007700 <__ssprint_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f040 8170 	bne.w	8007fea <_svfiprintf_r+0x7ee>
 8007d0a:	ae11      	add	r6, sp, #68	@ 0x44
 8007d0c:	9b00      	ldr	r3, [sp, #0]
 8007d0e:	1ae4      	subs	r4, r4, r3
 8007d10:	2c00      	cmp	r4, #0
 8007d12:	dd1a      	ble.n	8007d4a <_svfiprintf_r+0x54e>
 8007d14:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007d18:	4876      	ldr	r0, [pc, #472]	@ (8007ef4 <_svfiprintf_r+0x6f8>)
 8007d1a:	6030      	str	r0, [r6, #0]
 8007d1c:	2c10      	cmp	r4, #16
 8007d1e:	f103 0301 	add.w	r3, r3, #1
 8007d22:	f106 0108 	add.w	r1, r6, #8
 8007d26:	f300 8127 	bgt.w	8007f78 <_svfiprintf_r+0x77c>
 8007d2a:	6074      	str	r4, [r6, #4]
 8007d2c:	2b07      	cmp	r3, #7
 8007d2e:	4414      	add	r4, r2
 8007d30:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8007d34:	f340 8131 	ble.w	8007f9a <_svfiprintf_r+0x79e>
 8007d38:	9801      	ldr	r0, [sp, #4]
 8007d3a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	f7ff fcdf 	bl	8007700 <__ssprint_r>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f040 8151 	bne.w	8007fea <_svfiprintf_r+0x7ee>
 8007d48:	ae11      	add	r6, sp, #68	@ 0x44
 8007d4a:	9b00      	ldr	r3, [sp, #0]
 8007d4c:	9a00      	ldr	r2, [sp, #0]
 8007d4e:	6073      	str	r3, [r6, #4]
 8007d50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d52:	f8c6 8000 	str.w	r8, [r6]
 8007d56:	4413      	add	r3, r2
 8007d58:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	2b07      	cmp	r3, #7
 8007d60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d62:	f300 811c 	bgt.w	8007f9e <_svfiprintf_r+0x7a2>
 8007d66:	f106 0308 	add.w	r3, r6, #8
 8007d6a:	f019 0f04 	tst.w	r9, #4
 8007d6e:	f040 811e 	bne.w	8007fae <_svfiprintf_r+0x7b2>
 8007d72:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8007d76:	42aa      	cmp	r2, r5
 8007d78:	bfac      	ite	ge
 8007d7a:	189b      	addge	r3, r3, r2
 8007d7c:	195b      	addlt	r3, r3, r5
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d82:	b13b      	cbz	r3, 8007d94 <_svfiprintf_r+0x598>
 8007d84:	9801      	ldr	r0, [sp, #4]
 8007d86:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d88:	4659      	mov	r1, fp
 8007d8a:	f7ff fcb9 	bl	8007700 <__ssprint_r>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f040 812b 	bne.w	8007fea <_svfiprintf_r+0x7ee>
 8007d94:	2300      	movs	r3, #0
 8007d96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d98:	463d      	mov	r5, r7
 8007d9a:	ae11      	add	r6, sp, #68	@ 0x44
 8007d9c:	e557      	b.n	800784e <_svfiprintf_r+0x52>
 8007d9e:	4640      	mov	r0, r8
 8007da0:	f7f8 fa96 	bl	80002d0 <strlen>
 8007da4:	9000      	str	r0, [sp, #0]
 8007da6:	e732      	b.n	8007c0e <_svfiprintf_r+0x412>
 8007da8:	f049 0910 	orr.w	r9, r9, #16
 8007dac:	f019 0320 	ands.w	r3, r9, #32
 8007db0:	d008      	beq.n	8007dc4 <_svfiprintf_r+0x5c8>
 8007db2:	3507      	adds	r5, #7
 8007db4:	f025 0507 	bic.w	r5, r5, #7
 8007db8:	462f      	mov	r7, r5
 8007dba:	686d      	ldr	r5, [r5, #4]
 8007dbc:	f857 4b08 	ldr.w	r4, [r7], #8
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e6d7      	b.n	8007b74 <_svfiprintf_r+0x378>
 8007dc4:	462f      	mov	r7, r5
 8007dc6:	f019 0510 	ands.w	r5, r9, #16
 8007dca:	f857 4b04 	ldr.w	r4, [r7], #4
 8007dce:	d001      	beq.n	8007dd4 <_svfiprintf_r+0x5d8>
 8007dd0:	461d      	mov	r5, r3
 8007dd2:	e7f5      	b.n	8007dc0 <_svfiprintf_r+0x5c4>
 8007dd4:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8007dd8:	d001      	beq.n	8007dde <_svfiprintf_r+0x5e2>
 8007dda:	b2a4      	uxth	r4, r4
 8007ddc:	e7f0      	b.n	8007dc0 <_svfiprintf_r+0x5c4>
 8007dde:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8007de2:	d0ed      	beq.n	8007dc0 <_svfiprintf_r+0x5c4>
 8007de4:	b2e4      	uxtb	r4, r4
 8007de6:	e7f3      	b.n	8007dd0 <_svfiprintf_r+0x5d4>
 8007de8:	4a43      	ldr	r2, [pc, #268]	@ (8007ef8 <_svfiprintf_r+0x6fc>)
 8007dea:	e5c6      	b.n	800797a <_svfiprintf_r+0x17e>
 8007dec:	462f      	mov	r7, r5
 8007dee:	f019 0510 	ands.w	r5, r9, #16
 8007df2:	f857 4b04 	ldr.w	r4, [r7], #4
 8007df6:	d001      	beq.n	8007dfc <_svfiprintf_r+0x600>
 8007df8:	4615      	mov	r5, r2
 8007dfa:	e5ca      	b.n	8007992 <_svfiprintf_r+0x196>
 8007dfc:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 8007e00:	d001      	beq.n	8007e06 <_svfiprintf_r+0x60a>
 8007e02:	b2a4      	uxth	r4, r4
 8007e04:	e5c5      	b.n	8007992 <_svfiprintf_r+0x196>
 8007e06:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8007e0a:	f43f adc2 	beq.w	8007992 <_svfiprintf_r+0x196>
 8007e0e:	b2e4      	uxtb	r4, r4
 8007e10:	e7f2      	b.n	8007df8 <_svfiprintf_r+0x5fc>
 8007e12:	2c0a      	cmp	r4, #10
 8007e14:	f175 0300 	sbcs.w	r3, r5, #0
 8007e18:	d206      	bcs.n	8007e28 <_svfiprintf_r+0x62c>
 8007e1a:	3430      	adds	r4, #48	@ 0x30
 8007e1c:	b2e4      	uxtb	r4, r4
 8007e1e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8007e22:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8007e26:	e129      	b.n	800807c <_svfiprintf_r+0x880>
 8007e28:	ab3a      	add	r3, sp, #232	@ 0xe8
 8007e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e2c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 8007e30:	f04f 0900 	mov.w	r9, #0
 8007e34:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e36:	220a      	movs	r2, #10
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 ff53 	bl	8000ce8 <__aeabi_uldivmod>
 8007e42:	460b      	mov	r3, r1
 8007e44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e46:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007e48:	3230      	adds	r2, #48	@ 0x30
 8007e4a:	f801 2c01 	strb.w	r2, [r1, #-1]
 8007e4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e50:	f101 38ff 	add.w	r8, r1, #4294967295
 8007e54:	f109 0901 	add.w	r9, r9, #1
 8007e58:	b1e2      	cbz	r2, 8007e94 <_svfiprintf_r+0x698>
 8007e5a:	9a06      	ldr	r2, [sp, #24]
 8007e5c:	7812      	ldrb	r2, [r2, #0]
 8007e5e:	454a      	cmp	r2, r9
 8007e60:	d118      	bne.n	8007e94 <_svfiprintf_r+0x698>
 8007e62:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8007e66:	d015      	beq.n	8007e94 <_svfiprintf_r+0x698>
 8007e68:	2c0a      	cmp	r4, #10
 8007e6a:	f175 0200 	sbcs.w	r2, r5, #0
 8007e6e:	d311      	bcc.n	8007e94 <_svfiprintf_r+0x698>
 8007e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e72:	9b07      	ldr	r3, [sp, #28]
 8007e74:	9908      	ldr	r1, [sp, #32]
 8007e76:	eba8 0803 	sub.w	r8, r8, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	f000 fa90 	bl	80083a2 <strncpy>
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	785a      	ldrb	r2, [r3, #1]
 8007e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e88:	b172      	cbz	r2, 8007ea8 <_svfiprintf_r+0x6ac>
 8007e8a:	9a06      	ldr	r2, [sp, #24]
 8007e8c:	3201      	adds	r2, #1
 8007e8e:	9206      	str	r2, [sp, #24]
 8007e90:	f04f 0900 	mov.w	r9, #0
 8007e94:	2c0a      	cmp	r4, #10
 8007e96:	f175 0500 	sbcs.w	r5, r5, #0
 8007e9a:	f0c0 80ef 	bcc.w	800807c <_svfiprintf_r+0x880>
 8007e9e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007ea0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8007ea4:	461d      	mov	r5, r3
 8007ea6:	e7c6      	b.n	8007e36 <_svfiprintf_r+0x63a>
 8007ea8:	4691      	mov	r9, r2
 8007eaa:	e7f3      	b.n	8007e94 <_svfiprintf_r+0x698>
 8007eac:	f004 030f 	and.w	r3, r4, #15
 8007eb0:	9a05      	ldr	r2, [sp, #20]
 8007eb2:	0924      	lsrs	r4, r4, #4
 8007eb4:	5cd3      	ldrb	r3, [r2, r3]
 8007eb6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007eba:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8007ebe:	092d      	lsrs	r5, r5, #4
 8007ec0:	ea54 0305 	orrs.w	r3, r4, r5
 8007ec4:	d1f2      	bne.n	8007eac <_svfiprintf_r+0x6b0>
 8007ec6:	e0d9      	b.n	800807c <_svfiprintf_r+0x880>
 8007ec8:	b923      	cbnz	r3, 8007ed4 <_svfiprintf_r+0x6d8>
 8007eca:	f019 0f01 	tst.w	r9, #1
 8007ece:	d001      	beq.n	8007ed4 <_svfiprintf_r+0x6d8>
 8007ed0:	2430      	movs	r4, #48	@ 0x30
 8007ed2:	e7a4      	b.n	8007e1e <_svfiprintf_r+0x622>
 8007ed4:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8007ed8:	e0d0      	b.n	800807c <_svfiprintf_r+0x880>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 80a1 	beq.w	8008022 <_svfiprintf_r+0x826>
 8007ee0:	2400      	movs	r4, #0
 8007ee2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8007ee6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8007eea:	462f      	mov	r7, r5
 8007eec:	e5e0      	b.n	8007ab0 <_svfiprintf_r+0x2b4>
 8007eee:	bf00      	nop
 8007ef0:	0800fa96 	.word	0x0800fa96
 8007ef4:	0800fa86 	.word	0x0800fa86
 8007ef8:	0800fa64 	.word	0x0800fa64
 8007efc:	2110      	movs	r1, #16
 8007efe:	6071      	str	r1, [r6, #4]
 8007f00:	2a07      	cmp	r2, #7
 8007f02:	4461      	add	r1, ip
 8007f04:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007f08:	dd08      	ble.n	8007f1c <_svfiprintf_r+0x720>
 8007f0a:	9801      	ldr	r0, [sp, #4]
 8007f0c:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f0e:	4659      	mov	r1, fp
 8007f10:	f7ff fbf6 	bl	8007700 <__ssprint_r>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d168      	bne.n	8007fea <_svfiprintf_r+0x7ee>
 8007f18:	4b5c      	ldr	r3, [pc, #368]	@ (800808c <_svfiprintf_r+0x890>)
 8007f1a:	a811      	add	r0, sp, #68	@ 0x44
 8007f1c:	f1aa 0a10 	sub.w	sl, sl, #16
 8007f20:	4606      	mov	r6, r0
 8007f22:	e68d      	b.n	8007c40 <_svfiprintf_r+0x444>
 8007f24:	4606      	mov	r6, r0
 8007f26:	e6a8      	b.n	8007c7a <_svfiprintf_r+0x47e>
 8007f28:	9801      	ldr	r0, [sp, #4]
 8007f2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	f7ff fbe7 	bl	8007700 <__ssprint_r>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d159      	bne.n	8007fea <_svfiprintf_r+0x7ee>
 8007f36:	ae11      	add	r6, sp, #68	@ 0x44
 8007f38:	e6b1      	b.n	8007c9e <_svfiprintf_r+0x4a2>
 8007f3a:	9801      	ldr	r0, [sp, #4]
 8007f3c:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f3e:	4659      	mov	r1, fp
 8007f40:	f7ff fbde 	bl	8007700 <__ssprint_r>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d150      	bne.n	8007fea <_svfiprintf_r+0x7ee>
 8007f48:	ae11      	add	r6, sp, #68	@ 0x44
 8007f4a:	e6b8      	b.n	8007cbe <_svfiprintf_r+0x4c2>
 8007f4c:	2110      	movs	r1, #16
 8007f4e:	6071      	str	r1, [r6, #4]
 8007f50:	2a07      	cmp	r2, #7
 8007f52:	4461      	add	r1, ip
 8007f54:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007f58:	dd08      	ble.n	8007f6c <_svfiprintf_r+0x770>
 8007f5a:	9801      	ldr	r0, [sp, #4]
 8007f5c:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f5e:	4659      	mov	r1, fp
 8007f60:	f7ff fbce 	bl	8007700 <__ssprint_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d140      	bne.n	8007fea <_svfiprintf_r+0x7ee>
 8007f68:	4b49      	ldr	r3, [pc, #292]	@ (8008090 <_svfiprintf_r+0x894>)
 8007f6a:	a811      	add	r0, sp, #68	@ 0x44
 8007f6c:	f1aa 0a10 	sub.w	sl, sl, #16
 8007f70:	4606      	mov	r6, r0
 8007f72:	e6ae      	b.n	8007cd2 <_svfiprintf_r+0x4d6>
 8007f74:	4606      	mov	r6, r0
 8007f76:	e6c9      	b.n	8007d0c <_svfiprintf_r+0x510>
 8007f78:	2010      	movs	r0, #16
 8007f7a:	4402      	add	r2, r0
 8007f7c:	2b07      	cmp	r3, #7
 8007f7e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007f82:	6070      	str	r0, [r6, #4]
 8007f84:	dd06      	ble.n	8007f94 <_svfiprintf_r+0x798>
 8007f86:	9801      	ldr	r0, [sp, #4]
 8007f88:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f8a:	4659      	mov	r1, fp
 8007f8c:	f7ff fbb8 	bl	8007700 <__ssprint_r>
 8007f90:	bb58      	cbnz	r0, 8007fea <_svfiprintf_r+0x7ee>
 8007f92:	a911      	add	r1, sp, #68	@ 0x44
 8007f94:	3c10      	subs	r4, #16
 8007f96:	460e      	mov	r6, r1
 8007f98:	e6bc      	b.n	8007d14 <_svfiprintf_r+0x518>
 8007f9a:	460e      	mov	r6, r1
 8007f9c:	e6d5      	b.n	8007d4a <_svfiprintf_r+0x54e>
 8007f9e:	9801      	ldr	r0, [sp, #4]
 8007fa0:	aa0e      	add	r2, sp, #56	@ 0x38
 8007fa2:	4659      	mov	r1, fp
 8007fa4:	f7ff fbac 	bl	8007700 <__ssprint_r>
 8007fa8:	b9f8      	cbnz	r0, 8007fea <_svfiprintf_r+0x7ee>
 8007faa:	ab11      	add	r3, sp, #68	@ 0x44
 8007fac:	e6dd      	b.n	8007d6a <_svfiprintf_r+0x56e>
 8007fae:	9a03      	ldr	r2, [sp, #12]
 8007fb0:	1b54      	subs	r4, r2, r5
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	f77f aedd 	ble.w	8007d72 <_svfiprintf_r+0x576>
 8007fb8:	4e34      	ldr	r6, [pc, #208]	@ (800808c <_svfiprintf_r+0x890>)
 8007fba:	f04f 0810 	mov.w	r8, #16
 8007fbe:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8007fc2:	2c10      	cmp	r4, #16
 8007fc4:	f102 0201 	add.w	r2, r2, #1
 8007fc8:	601e      	str	r6, [r3, #0]
 8007fca:	dc17      	bgt.n	8007ffc <_svfiprintf_r+0x800>
 8007fcc:	605c      	str	r4, [r3, #4]
 8007fce:	2a07      	cmp	r2, #7
 8007fd0:	440c      	add	r4, r1
 8007fd2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8007fd6:	f77f aecc 	ble.w	8007d72 <_svfiprintf_r+0x576>
 8007fda:	9801      	ldr	r0, [sp, #4]
 8007fdc:	aa0e      	add	r2, sp, #56	@ 0x38
 8007fde:	4659      	mov	r1, fp
 8007fe0:	f7ff fb8e 	bl	8007700 <__ssprint_r>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	f43f aec4 	beq.w	8007d72 <_svfiprintf_r+0x576>
 8007fea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8007fee:	065b      	lsls	r3, r3, #25
 8007ff0:	f53f ac1c 	bmi.w	800782c <_svfiprintf_r+0x30>
 8007ff4:	9804      	ldr	r0, [sp, #16]
 8007ff6:	b03b      	add	sp, #236	@ 0xec
 8007ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffc:	3110      	adds	r1, #16
 8007ffe:	2a07      	cmp	r2, #7
 8008000:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8008004:	f8c3 8004 	str.w	r8, [r3, #4]
 8008008:	dc02      	bgt.n	8008010 <_svfiprintf_r+0x814>
 800800a:	3308      	adds	r3, #8
 800800c:	3c10      	subs	r4, #16
 800800e:	e7d6      	b.n	8007fbe <_svfiprintf_r+0x7c2>
 8008010:	9801      	ldr	r0, [sp, #4]
 8008012:	aa0e      	add	r2, sp, #56	@ 0x38
 8008014:	4659      	mov	r1, fp
 8008016:	f7ff fb73 	bl	8007700 <__ssprint_r>
 800801a:	2800      	cmp	r0, #0
 800801c:	d1e5      	bne.n	8007fea <_svfiprintf_r+0x7ee>
 800801e:	ab11      	add	r3, sp, #68	@ 0x44
 8008020:	e7f4      	b.n	800800c <_svfiprintf_r+0x810>
 8008022:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0e0      	beq.n	8007fea <_svfiprintf_r+0x7ee>
 8008028:	9801      	ldr	r0, [sp, #4]
 800802a:	aa0e      	add	r2, sp, #56	@ 0x38
 800802c:	4659      	mov	r1, fp
 800802e:	f7ff fb67 	bl	8007700 <__ssprint_r>
 8008032:	e7da      	b.n	8007fea <_svfiprintf_r+0x7ee>
 8008034:	ea54 0205 	orrs.w	r2, r4, r5
 8008038:	46ca      	mov	sl, r9
 800803a:	f43f adac 	beq.w	8007b96 <_svfiprintf_r+0x39a>
 800803e:	2b01      	cmp	r3, #1
 8008040:	f43f aee7 	beq.w	8007e12 <_svfiprintf_r+0x616>
 8008044:	2b02      	cmp	r3, #2
 8008046:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 800804a:	f43f af2f 	beq.w	8007eac <_svfiprintf_r+0x6b0>
 800804e:	f004 0307 	and.w	r3, r4, #7
 8008052:	08e4      	lsrs	r4, r4, #3
 8008054:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8008058:	08ed      	lsrs	r5, r5, #3
 800805a:	3330      	adds	r3, #48	@ 0x30
 800805c:	ea54 0105 	orrs.w	r1, r4, r5
 8008060:	4642      	mov	r2, r8
 8008062:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008066:	d1f2      	bne.n	800804e <_svfiprintf_r+0x852>
 8008068:	f01a 0f01 	tst.w	sl, #1
 800806c:	d006      	beq.n	800807c <_svfiprintf_r+0x880>
 800806e:	2b30      	cmp	r3, #48	@ 0x30
 8008070:	d004      	beq.n	800807c <_svfiprintf_r+0x880>
 8008072:	2330      	movs	r3, #48	@ 0x30
 8008074:	f808 3c01 	strb.w	r3, [r8, #-1]
 8008078:	f1a2 0802 	sub.w	r8, r2, #2
 800807c:	ab3a      	add	r3, sp, #232	@ 0xe8
 800807e:	eba3 0308 	sub.w	r3, r3, r8
 8008082:	9c00      	ldr	r4, [sp, #0]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	46d1      	mov	r9, sl
 8008088:	e5c2      	b.n	8007c10 <_svfiprintf_r+0x414>
 800808a:	bf00      	nop
 800808c:	0800fa96 	.word	0x0800fa96
 8008090:	0800fa86 	.word	0x0800fa86

08008094 <std>:
 8008094:	2300      	movs	r3, #0
 8008096:	b510      	push	{r4, lr}
 8008098:	4604      	mov	r4, r0
 800809a:	e9c0 3300 	strd	r3, r3, [r0]
 800809e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080a2:	6083      	str	r3, [r0, #8]
 80080a4:	8181      	strh	r1, [r0, #12]
 80080a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80080a8:	81c2      	strh	r2, [r0, #14]
 80080aa:	6183      	str	r3, [r0, #24]
 80080ac:	4619      	mov	r1, r3
 80080ae:	2208      	movs	r2, #8
 80080b0:	305c      	adds	r0, #92	@ 0x5c
 80080b2:	f000 f96e 	bl	8008392 <memset>
 80080b6:	4b0d      	ldr	r3, [pc, #52]	@ (80080ec <std+0x58>)
 80080b8:	6223      	str	r3, [r4, #32]
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <std+0x5c>)
 80080bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <std+0x60>)
 80080c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080c2:	4b0d      	ldr	r3, [pc, #52]	@ (80080f8 <std+0x64>)
 80080c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080c6:	4b0d      	ldr	r3, [pc, #52]	@ (80080fc <std+0x68>)
 80080c8:	61e4      	str	r4, [r4, #28]
 80080ca:	429c      	cmp	r4, r3
 80080cc:	d006      	beq.n	80080dc <std+0x48>
 80080ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080d2:	4294      	cmp	r4, r2
 80080d4:	d002      	beq.n	80080dc <std+0x48>
 80080d6:	33d0      	adds	r3, #208	@ 0xd0
 80080d8:	429c      	cmp	r4, r3
 80080da:	d105      	bne.n	80080e8 <std+0x54>
 80080dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e4:	f000 b9e4 	b.w	80084b0 <__retarget_lock_init_recursive>
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	bf00      	nop
 80080ec:	080082d5 	.word	0x080082d5
 80080f0:	080082fb 	.word	0x080082fb
 80080f4:	08008333 	.word	0x08008333
 80080f8:	08008357 	.word	0x08008357
 80080fc:	20000ab0 	.word	0x20000ab0

08008100 <stdio_exit_handler>:
 8008100:	4a02      	ldr	r2, [pc, #8]	@ (800810c <stdio_exit_handler+0xc>)
 8008102:	4903      	ldr	r1, [pc, #12]	@ (8008110 <stdio_exit_handler+0x10>)
 8008104:	4803      	ldr	r0, [pc, #12]	@ (8008114 <stdio_exit_handler+0x14>)
 8008106:	f000 b869 	b.w	80081dc <_fwalk_sglue>
 800810a:	bf00      	nop
 800810c:	20000044 	.word	0x20000044
 8008110:	0800b5a1 	.word	0x0800b5a1
 8008114:	20000058 	.word	0x20000058

08008118 <cleanup_stdio>:
 8008118:	6841      	ldr	r1, [r0, #4]
 800811a:	4b0c      	ldr	r3, [pc, #48]	@ (800814c <cleanup_stdio+0x34>)
 800811c:	4299      	cmp	r1, r3
 800811e:	b510      	push	{r4, lr}
 8008120:	4604      	mov	r4, r0
 8008122:	d001      	beq.n	8008128 <cleanup_stdio+0x10>
 8008124:	f003 fa3c 	bl	800b5a0 <_fclose_r>
 8008128:	68a1      	ldr	r1, [r4, #8]
 800812a:	4b09      	ldr	r3, [pc, #36]	@ (8008150 <cleanup_stdio+0x38>)
 800812c:	4299      	cmp	r1, r3
 800812e:	d002      	beq.n	8008136 <cleanup_stdio+0x1e>
 8008130:	4620      	mov	r0, r4
 8008132:	f003 fa35 	bl	800b5a0 <_fclose_r>
 8008136:	68e1      	ldr	r1, [r4, #12]
 8008138:	4b06      	ldr	r3, [pc, #24]	@ (8008154 <cleanup_stdio+0x3c>)
 800813a:	4299      	cmp	r1, r3
 800813c:	d004      	beq.n	8008148 <cleanup_stdio+0x30>
 800813e:	4620      	mov	r0, r4
 8008140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008144:	f003 ba2c 	b.w	800b5a0 <_fclose_r>
 8008148:	bd10      	pop	{r4, pc}
 800814a:	bf00      	nop
 800814c:	20000ab0 	.word	0x20000ab0
 8008150:	20000b18 	.word	0x20000b18
 8008154:	20000b80 	.word	0x20000b80

08008158 <global_stdio_init.part.0>:
 8008158:	b510      	push	{r4, lr}
 800815a:	4b0b      	ldr	r3, [pc, #44]	@ (8008188 <global_stdio_init.part.0+0x30>)
 800815c:	4c0b      	ldr	r4, [pc, #44]	@ (800818c <global_stdio_init.part.0+0x34>)
 800815e:	4a0c      	ldr	r2, [pc, #48]	@ (8008190 <global_stdio_init.part.0+0x38>)
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	4620      	mov	r0, r4
 8008164:	2200      	movs	r2, #0
 8008166:	2104      	movs	r1, #4
 8008168:	f7ff ff94 	bl	8008094 <std>
 800816c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008170:	2201      	movs	r2, #1
 8008172:	2109      	movs	r1, #9
 8008174:	f7ff ff8e 	bl	8008094 <std>
 8008178:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800817c:	2202      	movs	r2, #2
 800817e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008182:	2112      	movs	r1, #18
 8008184:	f7ff bf86 	b.w	8008094 <std>
 8008188:	20000be8 	.word	0x20000be8
 800818c:	20000ab0 	.word	0x20000ab0
 8008190:	08008101 	.word	0x08008101

08008194 <__sfp_lock_acquire>:
 8008194:	4801      	ldr	r0, [pc, #4]	@ (800819c <__sfp_lock_acquire+0x8>)
 8008196:	f000 b98d 	b.w	80084b4 <__retarget_lock_acquire_recursive>
 800819a:	bf00      	nop
 800819c:	20000bf2 	.word	0x20000bf2

080081a0 <__sfp_lock_release>:
 80081a0:	4801      	ldr	r0, [pc, #4]	@ (80081a8 <__sfp_lock_release+0x8>)
 80081a2:	f000 b988 	b.w	80084b6 <__retarget_lock_release_recursive>
 80081a6:	bf00      	nop
 80081a8:	20000bf2 	.word	0x20000bf2

080081ac <__sinit>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	4604      	mov	r4, r0
 80081b0:	f7ff fff0 	bl	8008194 <__sfp_lock_acquire>
 80081b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081b6:	b11b      	cbz	r3, 80081c0 <__sinit+0x14>
 80081b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081bc:	f7ff bff0 	b.w	80081a0 <__sfp_lock_release>
 80081c0:	4b04      	ldr	r3, [pc, #16]	@ (80081d4 <__sinit+0x28>)
 80081c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80081c4:	4b04      	ldr	r3, [pc, #16]	@ (80081d8 <__sinit+0x2c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1f5      	bne.n	80081b8 <__sinit+0xc>
 80081cc:	f7ff ffc4 	bl	8008158 <global_stdio_init.part.0>
 80081d0:	e7f2      	b.n	80081b8 <__sinit+0xc>
 80081d2:	bf00      	nop
 80081d4:	08008119 	.word	0x08008119
 80081d8:	20000be8 	.word	0x20000be8

080081dc <_fwalk_sglue>:
 80081dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e0:	4607      	mov	r7, r0
 80081e2:	4688      	mov	r8, r1
 80081e4:	4614      	mov	r4, r2
 80081e6:	2600      	movs	r6, #0
 80081e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081ec:	f1b9 0901 	subs.w	r9, r9, #1
 80081f0:	d505      	bpl.n	80081fe <_fwalk_sglue+0x22>
 80081f2:	6824      	ldr	r4, [r4, #0]
 80081f4:	2c00      	cmp	r4, #0
 80081f6:	d1f7      	bne.n	80081e8 <_fwalk_sglue+0xc>
 80081f8:	4630      	mov	r0, r6
 80081fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fe:	89ab      	ldrh	r3, [r5, #12]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d907      	bls.n	8008214 <_fwalk_sglue+0x38>
 8008204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008208:	3301      	adds	r3, #1
 800820a:	d003      	beq.n	8008214 <_fwalk_sglue+0x38>
 800820c:	4629      	mov	r1, r5
 800820e:	4638      	mov	r0, r7
 8008210:	47c0      	blx	r8
 8008212:	4306      	orrs	r6, r0
 8008214:	3568      	adds	r5, #104	@ 0x68
 8008216:	e7e9      	b.n	80081ec <_fwalk_sglue+0x10>

08008218 <snprintf>:
 8008218:	b40c      	push	{r2, r3}
 800821a:	b530      	push	{r4, r5, lr}
 800821c:	4b17      	ldr	r3, [pc, #92]	@ (800827c <snprintf+0x64>)
 800821e:	1e0c      	subs	r4, r1, #0
 8008220:	681d      	ldr	r5, [r3, #0]
 8008222:	b09d      	sub	sp, #116	@ 0x74
 8008224:	da08      	bge.n	8008238 <snprintf+0x20>
 8008226:	238b      	movs	r3, #139	@ 0x8b
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	f04f 30ff 	mov.w	r0, #4294967295
 800822e:	b01d      	add	sp, #116	@ 0x74
 8008230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008234:	b002      	add	sp, #8
 8008236:	4770      	bx	lr
 8008238:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800823c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008240:	bf14      	ite	ne
 8008242:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008246:	4623      	moveq	r3, r4
 8008248:	9304      	str	r3, [sp, #16]
 800824a:	9307      	str	r3, [sp, #28]
 800824c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008250:	9002      	str	r0, [sp, #8]
 8008252:	9006      	str	r0, [sp, #24]
 8008254:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008258:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800825a:	ab21      	add	r3, sp, #132	@ 0x84
 800825c:	a902      	add	r1, sp, #8
 800825e:	4628      	mov	r0, r5
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	f000 fe4d 	bl	8008f00 <_svfprintf_r>
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	bfbc      	itt	lt
 800826a:	238b      	movlt	r3, #139	@ 0x8b
 800826c:	602b      	strlt	r3, [r5, #0]
 800826e:	2c00      	cmp	r4, #0
 8008270:	d0dd      	beq.n	800822e <snprintf+0x16>
 8008272:	9b02      	ldr	r3, [sp, #8]
 8008274:	2200      	movs	r2, #0
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e7d9      	b.n	800822e <snprintf+0x16>
 800827a:	bf00      	nop
 800827c:	20000050 	.word	0x20000050

08008280 <sscanf>:
 8008280:	b40e      	push	{r1, r2, r3}
 8008282:	b530      	push	{r4, r5, lr}
 8008284:	b09c      	sub	sp, #112	@ 0x70
 8008286:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008288:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800828c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008290:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008294:	9002      	str	r0, [sp, #8]
 8008296:	9006      	str	r0, [sp, #24]
 8008298:	f7f8 f81a 	bl	80002d0 <strlen>
 800829c:	4b0b      	ldr	r3, [pc, #44]	@ (80082cc <sscanf+0x4c>)
 800829e:	9003      	str	r0, [sp, #12]
 80082a0:	9007      	str	r0, [sp, #28]
 80082a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80082a4:	480a      	ldr	r0, [pc, #40]	@ (80082d0 <sscanf+0x50>)
 80082a6:	9401      	str	r4, [sp, #4]
 80082a8:	2300      	movs	r3, #0
 80082aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80082ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082b6:	462a      	mov	r2, r5
 80082b8:	4623      	mov	r3, r4
 80082ba:	a902      	add	r1, sp, #8
 80082bc:	6800      	ldr	r0, [r0, #0]
 80082be:	f001 fffd 	bl	800a2bc <__ssvfscanf_r>
 80082c2:	b01c      	add	sp, #112	@ 0x70
 80082c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082c8:	b003      	add	sp, #12
 80082ca:	4770      	bx	lr
 80082cc:	080082f7 	.word	0x080082f7
 80082d0:	20000050 	.word	0x20000050

080082d4 <__sread>:
 80082d4:	b510      	push	{r4, lr}
 80082d6:	460c      	mov	r4, r1
 80082d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082dc:	f000 f89a 	bl	8008414 <_read_r>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	bfab      	itete	ge
 80082e4:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 80082e6:	89a3      	ldrhlt	r3, [r4, #12]
 80082e8:	181b      	addge	r3, r3, r0
 80082ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082ee:	bfac      	ite	ge
 80082f0:	6523      	strge	r3, [r4, #80]	@ 0x50
 80082f2:	81a3      	strhlt	r3, [r4, #12]
 80082f4:	bd10      	pop	{r4, pc}

080082f6 <__seofread>:
 80082f6:	2000      	movs	r0, #0
 80082f8:	4770      	bx	lr

080082fa <__swrite>:
 80082fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fe:	461f      	mov	r7, r3
 8008300:	898b      	ldrh	r3, [r1, #12]
 8008302:	05db      	lsls	r3, r3, #23
 8008304:	4605      	mov	r5, r0
 8008306:	460c      	mov	r4, r1
 8008308:	4616      	mov	r6, r2
 800830a:	d505      	bpl.n	8008318 <__swrite+0x1e>
 800830c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008310:	2302      	movs	r3, #2
 8008312:	2200      	movs	r2, #0
 8008314:	f000 f86c 	bl	80083f0 <_lseek_r>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800831e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008322:	81a3      	strh	r3, [r4, #12]
 8008324:	4632      	mov	r2, r6
 8008326:	463b      	mov	r3, r7
 8008328:	4628      	mov	r0, r5
 800832a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800832e:	f000 b883 	b.w	8008438 <_write_r>

08008332 <__sseek>:
 8008332:	b510      	push	{r4, lr}
 8008334:	460c      	mov	r4, r1
 8008336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833a:	f000 f859 	bl	80083f0 <_lseek_r>
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	bf15      	itete	ne
 8008344:	6520      	strne	r0, [r4, #80]	@ 0x50
 8008346:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800834a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800834e:	81a3      	strheq	r3, [r4, #12]
 8008350:	bf18      	it	ne
 8008352:	81a3      	strhne	r3, [r4, #12]
 8008354:	bd10      	pop	{r4, pc}

08008356 <__sclose>:
 8008356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835a:	f000 b839 	b.w	80083d0 <_close_r>

0800835e <memmove>:
 800835e:	4288      	cmp	r0, r1
 8008360:	b510      	push	{r4, lr}
 8008362:	eb01 0402 	add.w	r4, r1, r2
 8008366:	d902      	bls.n	800836e <memmove+0x10>
 8008368:	4284      	cmp	r4, r0
 800836a:	4623      	mov	r3, r4
 800836c:	d807      	bhi.n	800837e <memmove+0x20>
 800836e:	1e43      	subs	r3, r0, #1
 8008370:	42a1      	cmp	r1, r4
 8008372:	d008      	beq.n	8008386 <memmove+0x28>
 8008374:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008378:	f803 2f01 	strb.w	r2, [r3, #1]!
 800837c:	e7f8      	b.n	8008370 <memmove+0x12>
 800837e:	4402      	add	r2, r0
 8008380:	4601      	mov	r1, r0
 8008382:	428a      	cmp	r2, r1
 8008384:	d100      	bne.n	8008388 <memmove+0x2a>
 8008386:	bd10      	pop	{r4, pc}
 8008388:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800838c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008390:	e7f7      	b.n	8008382 <memmove+0x24>

08008392 <memset>:
 8008392:	4402      	add	r2, r0
 8008394:	4603      	mov	r3, r0
 8008396:	4293      	cmp	r3, r2
 8008398:	d100      	bne.n	800839c <memset+0xa>
 800839a:	4770      	bx	lr
 800839c:	f803 1b01 	strb.w	r1, [r3], #1
 80083a0:	e7f9      	b.n	8008396 <memset+0x4>

080083a2 <strncpy>:
 80083a2:	b510      	push	{r4, lr}
 80083a4:	3901      	subs	r1, #1
 80083a6:	4603      	mov	r3, r0
 80083a8:	b132      	cbz	r2, 80083b8 <strncpy+0x16>
 80083aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80083ae:	f803 4b01 	strb.w	r4, [r3], #1
 80083b2:	3a01      	subs	r2, #1
 80083b4:	2c00      	cmp	r4, #0
 80083b6:	d1f7      	bne.n	80083a8 <strncpy+0x6>
 80083b8:	441a      	add	r2, r3
 80083ba:	2100      	movs	r1, #0
 80083bc:	4293      	cmp	r3, r2
 80083be:	d100      	bne.n	80083c2 <strncpy+0x20>
 80083c0:	bd10      	pop	{r4, pc}
 80083c2:	f803 1b01 	strb.w	r1, [r3], #1
 80083c6:	e7f9      	b.n	80083bc <strncpy+0x1a>

080083c8 <_localeconv_r>:
 80083c8:	4800      	ldr	r0, [pc, #0]	@ (80083cc <_localeconv_r+0x4>)
 80083ca:	4770      	bx	lr
 80083cc:	2000067c 	.word	0x2000067c

080083d0 <_close_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d06      	ldr	r5, [pc, #24]	@ (80083ec <_close_r+0x1c>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	602b      	str	r3, [r5, #0]
 80083dc:	f7fa fac0 	bl	8002960 <_close>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_close_r+0x1a>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_close_r+0x1a>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	20000bec 	.word	0x20000bec

080083f0 <_lseek_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	@ (8008410 <_lseek_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7fa fad5 	bl	80029ae <_lseek>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_lseek_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_lseek_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20000bec 	.word	0x20000bec

08008414 <_read_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d07      	ldr	r5, [pc, #28]	@ (8008434 <_read_r+0x20>)
 8008418:	4604      	mov	r4, r0
 800841a:	4608      	mov	r0, r1
 800841c:	4611      	mov	r1, r2
 800841e:	2200      	movs	r2, #0
 8008420:	602a      	str	r2, [r5, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f7fa fa63 	bl	80028ee <_read>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_read_r+0x1e>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_read_r+0x1e>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	20000bec 	.word	0x20000bec

08008438 <_write_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d07      	ldr	r5, [pc, #28]	@ (8008458 <_write_r+0x20>)
 800843c:	4604      	mov	r4, r0
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	2200      	movs	r2, #0
 8008444:	602a      	str	r2, [r5, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	f7fa fa6e 	bl	8002928 <_write>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_write_r+0x1e>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_write_r+0x1e>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	20000bec 	.word	0x20000bec

0800845c <__errno>:
 800845c:	4b01      	ldr	r3, [pc, #4]	@ (8008464 <__errno+0x8>)
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000050 	.word	0x20000050

08008468 <__libc_init_array>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	4d0d      	ldr	r5, [pc, #52]	@ (80084a0 <__libc_init_array+0x38>)
 800846c:	4c0d      	ldr	r4, [pc, #52]	@ (80084a4 <__libc_init_array+0x3c>)
 800846e:	1b64      	subs	r4, r4, r5
 8008470:	10a4      	asrs	r4, r4, #2
 8008472:	2600      	movs	r6, #0
 8008474:	42a6      	cmp	r6, r4
 8008476:	d109      	bne.n	800848c <__libc_init_array+0x24>
 8008478:	4d0b      	ldr	r5, [pc, #44]	@ (80084a8 <__libc_init_array+0x40>)
 800847a:	4c0c      	ldr	r4, [pc, #48]	@ (80084ac <__libc_init_array+0x44>)
 800847c:	f007 fa72 	bl	800f964 <_init>
 8008480:	1b64      	subs	r4, r4, r5
 8008482:	10a4      	asrs	r4, r4, #2
 8008484:	2600      	movs	r6, #0
 8008486:	42a6      	cmp	r6, r4
 8008488:	d105      	bne.n	8008496 <__libc_init_array+0x2e>
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008490:	4798      	blx	r3
 8008492:	3601      	adds	r6, #1
 8008494:	e7ee      	b.n	8008474 <__libc_init_array+0xc>
 8008496:	f855 3b04 	ldr.w	r3, [r5], #4
 800849a:	4798      	blx	r3
 800849c:	3601      	adds	r6, #1
 800849e:	e7f2      	b.n	8008486 <__libc_init_array+0x1e>
 80084a0:	0800fef0 	.word	0x0800fef0
 80084a4:	0800fef0 	.word	0x0800fef0
 80084a8:	0800fef0 	.word	0x0800fef0
 80084ac:	0800fefc 	.word	0x0800fefc

080084b0 <__retarget_lock_init_recursive>:
 80084b0:	4770      	bx	lr

080084b2 <__retarget_lock_close_recursive>:
 80084b2:	4770      	bx	lr

080084b4 <__retarget_lock_acquire_recursive>:
 80084b4:	4770      	bx	lr

080084b6 <__retarget_lock_release_recursive>:
 80084b6:	4770      	bx	lr

080084b8 <memcpy>:
 80084b8:	440a      	add	r2, r1
 80084ba:	4291      	cmp	r1, r2
 80084bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80084c0:	d100      	bne.n	80084c4 <memcpy+0xc>
 80084c2:	4770      	bx	lr
 80084c4:	b510      	push	{r4, lr}
 80084c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ce:	4291      	cmp	r1, r2
 80084d0:	d1f9      	bne.n	80084c6 <memcpy+0xe>
 80084d2:	bd10      	pop	{r4, pc}

080084d4 <register_fini>:
 80084d4:	4b02      	ldr	r3, [pc, #8]	@ (80084e0 <register_fini+0xc>)
 80084d6:	b113      	cbz	r3, 80084de <register_fini+0xa>
 80084d8:	4802      	ldr	r0, [pc, #8]	@ (80084e4 <register_fini+0x10>)
 80084da:	f000 b805 	b.w	80084e8 <atexit>
 80084de:	4770      	bx	lr
 80084e0:	00000000 	.word	0x00000000
 80084e4:	0800b885 	.word	0x0800b885

080084e8 <atexit>:
 80084e8:	2300      	movs	r3, #0
 80084ea:	4601      	mov	r1, r0
 80084ec:	461a      	mov	r2, r3
 80084ee:	4618      	mov	r0, r3
 80084f0:	f003 ba24 	b.w	800b93c <__register_exitproc>

080084f4 <_malloc_trim_r>:
 80084f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f8:	4606      	mov	r6, r0
 80084fa:	2008      	movs	r0, #8
 80084fc:	4689      	mov	r9, r1
 80084fe:	f003 f9d5 	bl	800b8ac <sysconf>
 8008502:	4f24      	ldr	r7, [pc, #144]	@ (8008594 <_malloc_trim_r+0xa0>)
 8008504:	4680      	mov	r8, r0
 8008506:	4630      	mov	r0, r6
 8008508:	f000 fb44 	bl	8008b94 <__malloc_lock>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	685d      	ldr	r5, [r3, #4]
 8008510:	f025 0503 	bic.w	r5, r5, #3
 8008514:	f1a5 0411 	sub.w	r4, r5, #17
 8008518:	eba4 0409 	sub.w	r4, r4, r9
 800851c:	4444      	add	r4, r8
 800851e:	fbb4 f4f8 	udiv	r4, r4, r8
 8008522:	3c01      	subs	r4, #1
 8008524:	fb08 f404 	mul.w	r4, r8, r4
 8008528:	45a0      	cmp	r8, r4
 800852a:	dd05      	ble.n	8008538 <_malloc_trim_r+0x44>
 800852c:	4630      	mov	r0, r6
 800852e:	f000 fb37 	bl	8008ba0 <__malloc_unlock>
 8008532:	2000      	movs	r0, #0
 8008534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008538:	2100      	movs	r1, #0
 800853a:	4630      	mov	r0, r6
 800853c:	f003 f992 	bl	800b864 <_sbrk_r>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	442b      	add	r3, r5
 8008544:	4298      	cmp	r0, r3
 8008546:	d1f1      	bne.n	800852c <_malloc_trim_r+0x38>
 8008548:	4261      	negs	r1, r4
 800854a:	4630      	mov	r0, r6
 800854c:	f003 f98a 	bl	800b864 <_sbrk_r>
 8008550:	3001      	adds	r0, #1
 8008552:	d110      	bne.n	8008576 <_malloc_trim_r+0x82>
 8008554:	2100      	movs	r1, #0
 8008556:	4630      	mov	r0, r6
 8008558:	f003 f984 	bl	800b864 <_sbrk_r>
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	1a83      	subs	r3, r0, r2
 8008560:	2b0f      	cmp	r3, #15
 8008562:	dde3      	ble.n	800852c <_malloc_trim_r+0x38>
 8008564:	490c      	ldr	r1, [pc, #48]	@ (8008598 <_malloc_trim_r+0xa4>)
 8008566:	6809      	ldr	r1, [r1, #0]
 8008568:	1a40      	subs	r0, r0, r1
 800856a:	490c      	ldr	r1, [pc, #48]	@ (800859c <_malloc_trim_r+0xa8>)
 800856c:	f043 0301 	orr.w	r3, r3, #1
 8008570:	6008      	str	r0, [r1, #0]
 8008572:	6053      	str	r3, [r2, #4]
 8008574:	e7da      	b.n	800852c <_malloc_trim_r+0x38>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	4a08      	ldr	r2, [pc, #32]	@ (800859c <_malloc_trim_r+0xa8>)
 800857a:	1b2d      	subs	r5, r5, r4
 800857c:	f045 0501 	orr.w	r5, r5, #1
 8008580:	605d      	str	r5, [r3, #4]
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	4630      	mov	r0, r6
 8008586:	1b1b      	subs	r3, r3, r4
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	f000 fb09 	bl	8008ba0 <__malloc_unlock>
 800858e:	2001      	movs	r0, #1
 8008590:	e7d0      	b.n	8008534 <_malloc_trim_r+0x40>
 8008592:	bf00      	nop
 8008594:	20000184 	.word	0x20000184
 8008598:	2000017c 	.word	0x2000017c
 800859c:	20000bf8 	.word	0x20000bf8

080085a0 <_free_r>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	4604      	mov	r4, r0
 80085a4:	460f      	mov	r7, r1
 80085a6:	2900      	cmp	r1, #0
 80085a8:	f000 80b1 	beq.w	800870e <_free_r+0x16e>
 80085ac:	f000 faf2 	bl	8008b94 <__malloc_lock>
 80085b0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80085b4:	4d56      	ldr	r5, [pc, #344]	@ (8008710 <_free_r+0x170>)
 80085b6:	f022 0001 	bic.w	r0, r2, #1
 80085ba:	f1a7 0308 	sub.w	r3, r7, #8
 80085be:	eb03 0c00 	add.w	ip, r3, r0
 80085c2:	68a9      	ldr	r1, [r5, #8]
 80085c4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80085c8:	4561      	cmp	r1, ip
 80085ca:	f026 0603 	bic.w	r6, r6, #3
 80085ce:	f002 0201 	and.w	r2, r2, #1
 80085d2:	d11b      	bne.n	800860c <_free_r+0x6c>
 80085d4:	4406      	add	r6, r0
 80085d6:	b93a      	cbnz	r2, 80085e8 <_free_r+0x48>
 80085d8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80085dc:	1a9b      	subs	r3, r3, r2
 80085de:	4416      	add	r6, r2
 80085e0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80085e4:	60ca      	str	r2, [r1, #12]
 80085e6:	6091      	str	r1, [r2, #8]
 80085e8:	f046 0201 	orr.w	r2, r6, #1
 80085ec:	605a      	str	r2, [r3, #4]
 80085ee:	60ab      	str	r3, [r5, #8]
 80085f0:	4b48      	ldr	r3, [pc, #288]	@ (8008714 <_free_r+0x174>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	42b3      	cmp	r3, r6
 80085f6:	d804      	bhi.n	8008602 <_free_r+0x62>
 80085f8:	4b47      	ldr	r3, [pc, #284]	@ (8008718 <_free_r+0x178>)
 80085fa:	4620      	mov	r0, r4
 80085fc:	6819      	ldr	r1, [r3, #0]
 80085fe:	f7ff ff79 	bl	80084f4 <_malloc_trim_r>
 8008602:	4620      	mov	r0, r4
 8008604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008608:	f000 baca 	b.w	8008ba0 <__malloc_unlock>
 800860c:	f8cc 6004 	str.w	r6, [ip, #4]
 8008610:	2a00      	cmp	r2, #0
 8008612:	d138      	bne.n	8008686 <_free_r+0xe6>
 8008614:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8008618:	1a5b      	subs	r3, r3, r1
 800861a:	4408      	add	r0, r1
 800861c:	6899      	ldr	r1, [r3, #8]
 800861e:	f105 0708 	add.w	r7, r5, #8
 8008622:	42b9      	cmp	r1, r7
 8008624:	d031      	beq.n	800868a <_free_r+0xea>
 8008626:	68df      	ldr	r7, [r3, #12]
 8008628:	60cf      	str	r7, [r1, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	eb0c 0106 	add.w	r1, ip, r6
 8008630:	6849      	ldr	r1, [r1, #4]
 8008632:	07c9      	lsls	r1, r1, #31
 8008634:	d40b      	bmi.n	800864e <_free_r+0xae>
 8008636:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800863a:	4430      	add	r0, r6
 800863c:	bb3a      	cbnz	r2, 800868e <_free_r+0xee>
 800863e:	4e37      	ldr	r6, [pc, #220]	@ (800871c <_free_r+0x17c>)
 8008640:	42b1      	cmp	r1, r6
 8008642:	d124      	bne.n	800868e <_free_r+0xee>
 8008644:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8008648:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800864c:	2201      	movs	r2, #1
 800864e:	f040 0101 	orr.w	r1, r0, #1
 8008652:	6059      	str	r1, [r3, #4]
 8008654:	5018      	str	r0, [r3, r0]
 8008656:	2a00      	cmp	r2, #0
 8008658:	d1d3      	bne.n	8008602 <_free_r+0x62>
 800865a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800865e:	d21b      	bcs.n	8008698 <_free_r+0xf8>
 8008660:	08c2      	lsrs	r2, r0, #3
 8008662:	2101      	movs	r1, #1
 8008664:	0940      	lsrs	r0, r0, #5
 8008666:	4081      	lsls	r1, r0
 8008668:	6868      	ldr	r0, [r5, #4]
 800866a:	3201      	adds	r2, #1
 800866c:	4301      	orrs	r1, r0
 800866e:	6069      	str	r1, [r5, #4]
 8008670:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8008674:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8008678:	3908      	subs	r1, #8
 800867a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800867e:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8008682:	60c3      	str	r3, [r0, #12]
 8008684:	e7bd      	b.n	8008602 <_free_r+0x62>
 8008686:	2200      	movs	r2, #0
 8008688:	e7d0      	b.n	800862c <_free_r+0x8c>
 800868a:	2201      	movs	r2, #1
 800868c:	e7ce      	b.n	800862c <_free_r+0x8c>
 800868e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8008692:	60ce      	str	r6, [r1, #12]
 8008694:	60b1      	str	r1, [r6, #8]
 8008696:	e7da      	b.n	800864e <_free_r+0xae>
 8008698:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800869c:	ea4f 2250 	mov.w	r2, r0, lsr #9
 80086a0:	d214      	bcs.n	80086cc <_free_r+0x12c>
 80086a2:	0982      	lsrs	r2, r0, #6
 80086a4:	3238      	adds	r2, #56	@ 0x38
 80086a6:	1c51      	adds	r1, r2, #1
 80086a8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80086ac:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80086b0:	428e      	cmp	r6, r1
 80086b2:	d125      	bne.n	8008700 <_free_r+0x160>
 80086b4:	2001      	movs	r0, #1
 80086b6:	1092      	asrs	r2, r2, #2
 80086b8:	fa00 f202 	lsl.w	r2, r0, r2
 80086bc:	6868      	ldr	r0, [r5, #4]
 80086be:	4302      	orrs	r2, r0
 80086c0:	606a      	str	r2, [r5, #4]
 80086c2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80086c6:	60b3      	str	r3, [r6, #8]
 80086c8:	60cb      	str	r3, [r1, #12]
 80086ca:	e79a      	b.n	8008602 <_free_r+0x62>
 80086cc:	2a14      	cmp	r2, #20
 80086ce:	d801      	bhi.n	80086d4 <_free_r+0x134>
 80086d0:	325b      	adds	r2, #91	@ 0x5b
 80086d2:	e7e8      	b.n	80086a6 <_free_r+0x106>
 80086d4:	2a54      	cmp	r2, #84	@ 0x54
 80086d6:	d802      	bhi.n	80086de <_free_r+0x13e>
 80086d8:	0b02      	lsrs	r2, r0, #12
 80086da:	326e      	adds	r2, #110	@ 0x6e
 80086dc:	e7e3      	b.n	80086a6 <_free_r+0x106>
 80086de:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80086e2:	d802      	bhi.n	80086ea <_free_r+0x14a>
 80086e4:	0bc2      	lsrs	r2, r0, #15
 80086e6:	3277      	adds	r2, #119	@ 0x77
 80086e8:	e7dd      	b.n	80086a6 <_free_r+0x106>
 80086ea:	f240 5154 	movw	r1, #1364	@ 0x554
 80086ee:	428a      	cmp	r2, r1
 80086f0:	bf9a      	itte	ls
 80086f2:	0c82      	lsrls	r2, r0, #18
 80086f4:	327c      	addls	r2, #124	@ 0x7c
 80086f6:	227e      	movhi	r2, #126	@ 0x7e
 80086f8:	e7d5      	b.n	80086a6 <_free_r+0x106>
 80086fa:	6889      	ldr	r1, [r1, #8]
 80086fc:	428e      	cmp	r6, r1
 80086fe:	d004      	beq.n	800870a <_free_r+0x16a>
 8008700:	684a      	ldr	r2, [r1, #4]
 8008702:	f022 0203 	bic.w	r2, r2, #3
 8008706:	4282      	cmp	r2, r0
 8008708:	d8f7      	bhi.n	80086fa <_free_r+0x15a>
 800870a:	68ce      	ldr	r6, [r1, #12]
 800870c:	e7d9      	b.n	80086c2 <_free_r+0x122>
 800870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008710:	20000184 	.word	0x20000184
 8008714:	20000180 	.word	0x20000180
 8008718:	20000c28 	.word	0x20000c28
 800871c:	2000018c 	.word	0x2000018c

08008720 <_malloc_r>:
 8008720:	f101 030b 	add.w	r3, r1, #11
 8008724:	2b16      	cmp	r3, #22
 8008726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872a:	4605      	mov	r5, r0
 800872c:	d906      	bls.n	800873c <_malloc_r+0x1c>
 800872e:	f033 0707 	bics.w	r7, r3, #7
 8008732:	d504      	bpl.n	800873e <_malloc_r+0x1e>
 8008734:	230c      	movs	r3, #12
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	2400      	movs	r4, #0
 800873a:	e1a3      	b.n	8008a84 <_malloc_r+0x364>
 800873c:	2710      	movs	r7, #16
 800873e:	42b9      	cmp	r1, r7
 8008740:	d8f8      	bhi.n	8008734 <_malloc_r+0x14>
 8008742:	4628      	mov	r0, r5
 8008744:	f000 fa26 	bl	8008b94 <__malloc_lock>
 8008748:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800874c:	4eaf      	ldr	r6, [pc, #700]	@ (8008a0c <_malloc_r+0x2ec>)
 800874e:	d237      	bcs.n	80087c0 <_malloc_r+0xa0>
 8008750:	f107 0208 	add.w	r2, r7, #8
 8008754:	4432      	add	r2, r6
 8008756:	f1a2 0108 	sub.w	r1, r2, #8
 800875a:	6854      	ldr	r4, [r2, #4]
 800875c:	428c      	cmp	r4, r1
 800875e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8008762:	d102      	bne.n	800876a <_malloc_r+0x4a>
 8008764:	68d4      	ldr	r4, [r2, #12]
 8008766:	42a2      	cmp	r2, r4
 8008768:	d010      	beq.n	800878c <_malloc_r+0x6c>
 800876a:	6863      	ldr	r3, [r4, #4]
 800876c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008770:	f023 0303 	bic.w	r3, r3, #3
 8008774:	60ca      	str	r2, [r1, #12]
 8008776:	4423      	add	r3, r4
 8008778:	6091      	str	r1, [r2, #8]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	f042 0201 	orr.w	r2, r2, #1
 8008780:	605a      	str	r2, [r3, #4]
 8008782:	4628      	mov	r0, r5
 8008784:	f000 fa0c 	bl	8008ba0 <__malloc_unlock>
 8008788:	3408      	adds	r4, #8
 800878a:	e17b      	b.n	8008a84 <_malloc_r+0x364>
 800878c:	3302      	adds	r3, #2
 800878e:	6934      	ldr	r4, [r6, #16]
 8008790:	499f      	ldr	r1, [pc, #636]	@ (8008a10 <_malloc_r+0x2f0>)
 8008792:	428c      	cmp	r4, r1
 8008794:	d077      	beq.n	8008886 <_malloc_r+0x166>
 8008796:	6862      	ldr	r2, [r4, #4]
 8008798:	f022 0c03 	bic.w	ip, r2, #3
 800879c:	ebac 0007 	sub.w	r0, ip, r7
 80087a0:	280f      	cmp	r0, #15
 80087a2:	dd48      	ble.n	8008836 <_malloc_r+0x116>
 80087a4:	19e2      	adds	r2, r4, r7
 80087a6:	f040 0301 	orr.w	r3, r0, #1
 80087aa:	f047 0701 	orr.w	r7, r7, #1
 80087ae:	6067      	str	r7, [r4, #4]
 80087b0:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80087b4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80087b8:	6053      	str	r3, [r2, #4]
 80087ba:	f844 000c 	str.w	r0, [r4, ip]
 80087be:	e7e0      	b.n	8008782 <_malloc_r+0x62>
 80087c0:	0a7b      	lsrs	r3, r7, #9
 80087c2:	d02a      	beq.n	800881a <_malloc_r+0xfa>
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d812      	bhi.n	80087ee <_malloc_r+0xce>
 80087c8:	09bb      	lsrs	r3, r7, #6
 80087ca:	3338      	adds	r3, #56	@ 0x38
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80087d2:	f1a2 0c08 	sub.w	ip, r2, #8
 80087d6:	6854      	ldr	r4, [r2, #4]
 80087d8:	4564      	cmp	r4, ip
 80087da:	d006      	beq.n	80087ea <_malloc_r+0xca>
 80087dc:	6862      	ldr	r2, [r4, #4]
 80087de:	f022 0203 	bic.w	r2, r2, #3
 80087e2:	1bd0      	subs	r0, r2, r7
 80087e4:	280f      	cmp	r0, #15
 80087e6:	dd1c      	ble.n	8008822 <_malloc_r+0x102>
 80087e8:	3b01      	subs	r3, #1
 80087ea:	3301      	adds	r3, #1
 80087ec:	e7cf      	b.n	800878e <_malloc_r+0x6e>
 80087ee:	2b14      	cmp	r3, #20
 80087f0:	d801      	bhi.n	80087f6 <_malloc_r+0xd6>
 80087f2:	335b      	adds	r3, #91	@ 0x5b
 80087f4:	e7ea      	b.n	80087cc <_malloc_r+0xac>
 80087f6:	2b54      	cmp	r3, #84	@ 0x54
 80087f8:	d802      	bhi.n	8008800 <_malloc_r+0xe0>
 80087fa:	0b3b      	lsrs	r3, r7, #12
 80087fc:	336e      	adds	r3, #110	@ 0x6e
 80087fe:	e7e5      	b.n	80087cc <_malloc_r+0xac>
 8008800:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8008804:	d802      	bhi.n	800880c <_malloc_r+0xec>
 8008806:	0bfb      	lsrs	r3, r7, #15
 8008808:	3377      	adds	r3, #119	@ 0x77
 800880a:	e7df      	b.n	80087cc <_malloc_r+0xac>
 800880c:	f240 5254 	movw	r2, #1364	@ 0x554
 8008810:	4293      	cmp	r3, r2
 8008812:	d804      	bhi.n	800881e <_malloc_r+0xfe>
 8008814:	0cbb      	lsrs	r3, r7, #18
 8008816:	337c      	adds	r3, #124	@ 0x7c
 8008818:	e7d8      	b.n	80087cc <_malloc_r+0xac>
 800881a:	233f      	movs	r3, #63	@ 0x3f
 800881c:	e7d6      	b.n	80087cc <_malloc_r+0xac>
 800881e:	237e      	movs	r3, #126	@ 0x7e
 8008820:	e7d4      	b.n	80087cc <_malloc_r+0xac>
 8008822:	2800      	cmp	r0, #0
 8008824:	68e1      	ldr	r1, [r4, #12]
 8008826:	db04      	blt.n	8008832 <_malloc_r+0x112>
 8008828:	68a3      	ldr	r3, [r4, #8]
 800882a:	60d9      	str	r1, [r3, #12]
 800882c:	608b      	str	r3, [r1, #8]
 800882e:	18a3      	adds	r3, r4, r2
 8008830:	e7a3      	b.n	800877a <_malloc_r+0x5a>
 8008832:	460c      	mov	r4, r1
 8008834:	e7d0      	b.n	80087d8 <_malloc_r+0xb8>
 8008836:	2800      	cmp	r0, #0
 8008838:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800883c:	db07      	blt.n	800884e <_malloc_r+0x12e>
 800883e:	44a4      	add	ip, r4
 8008840:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008844:	f043 0301 	orr.w	r3, r3, #1
 8008848:	f8cc 3004 	str.w	r3, [ip, #4]
 800884c:	e799      	b.n	8008782 <_malloc_r+0x62>
 800884e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8008852:	6870      	ldr	r0, [r6, #4]
 8008854:	f080 8095 	bcs.w	8008982 <_malloc_r+0x262>
 8008858:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800885c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8008860:	f04f 0c01 	mov.w	ip, #1
 8008864:	3201      	adds	r2, #1
 8008866:	fa0c fc0e 	lsl.w	ip, ip, lr
 800886a:	ea4c 0000 	orr.w	r0, ip, r0
 800886e:	6070      	str	r0, [r6, #4]
 8008870:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8008874:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8008878:	3808      	subs	r0, #8
 800887a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800887e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8008882:	f8cc 400c 	str.w	r4, [ip, #12]
 8008886:	1098      	asrs	r0, r3, #2
 8008888:	2201      	movs	r2, #1
 800888a:	4082      	lsls	r2, r0
 800888c:	6870      	ldr	r0, [r6, #4]
 800888e:	4290      	cmp	r0, r2
 8008890:	d326      	bcc.n	80088e0 <_malloc_r+0x1c0>
 8008892:	4210      	tst	r0, r2
 8008894:	d106      	bne.n	80088a4 <_malloc_r+0x184>
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	0052      	lsls	r2, r2, #1
 800889c:	4210      	tst	r0, r2
 800889e:	f103 0304 	add.w	r3, r3, #4
 80088a2:	d0fa      	beq.n	800889a <_malloc_r+0x17a>
 80088a4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80088a8:	46c1      	mov	r9, r8
 80088aa:	469e      	mov	lr, r3
 80088ac:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80088b0:	454c      	cmp	r4, r9
 80088b2:	f040 80b9 	bne.w	8008a28 <_malloc_r+0x308>
 80088b6:	f10e 0e01 	add.w	lr, lr, #1
 80088ba:	f01e 0f03 	tst.w	lr, #3
 80088be:	f109 0908 	add.w	r9, r9, #8
 80088c2:	d1f3      	bne.n	80088ac <_malloc_r+0x18c>
 80088c4:	0798      	lsls	r0, r3, #30
 80088c6:	f040 80e3 	bne.w	8008a90 <_malloc_r+0x370>
 80088ca:	6873      	ldr	r3, [r6, #4]
 80088cc:	ea23 0302 	bic.w	r3, r3, r2
 80088d0:	6073      	str	r3, [r6, #4]
 80088d2:	6870      	ldr	r0, [r6, #4]
 80088d4:	0052      	lsls	r2, r2, #1
 80088d6:	4290      	cmp	r0, r2
 80088d8:	d302      	bcc.n	80088e0 <_malloc_r+0x1c0>
 80088da:	2a00      	cmp	r2, #0
 80088dc:	f040 80e5 	bne.w	8008aaa <_malloc_r+0x38a>
 80088e0:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80088e4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80088e8:	f023 0903 	bic.w	r9, r3, #3
 80088ec:	45b9      	cmp	r9, r7
 80088ee:	d304      	bcc.n	80088fa <_malloc_r+0x1da>
 80088f0:	eba9 0207 	sub.w	r2, r9, r7
 80088f4:	2a0f      	cmp	r2, #15
 80088f6:	f300 8141 	bgt.w	8008b7c <_malloc_r+0x45c>
 80088fa:	4b46      	ldr	r3, [pc, #280]	@ (8008a14 <_malloc_r+0x2f4>)
 80088fc:	6819      	ldr	r1, [r3, #0]
 80088fe:	3110      	adds	r1, #16
 8008900:	4439      	add	r1, r7
 8008902:	2008      	movs	r0, #8
 8008904:	9101      	str	r1, [sp, #4]
 8008906:	f002 ffd1 	bl	800b8ac <sysconf>
 800890a:	4a43      	ldr	r2, [pc, #268]	@ (8008a18 <_malloc_r+0x2f8>)
 800890c:	9901      	ldr	r1, [sp, #4]
 800890e:	6813      	ldr	r3, [r2, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	bf1f      	itttt	ne
 8008914:	f101 31ff 	addne.w	r1, r1, #4294967295
 8008918:	1809      	addne	r1, r1, r0
 800891a:	4243      	negne	r3, r0
 800891c:	4019      	andne	r1, r3
 800891e:	4680      	mov	r8, r0
 8008920:	4628      	mov	r0, r5
 8008922:	9101      	str	r1, [sp, #4]
 8008924:	f002 ff9e 	bl	800b864 <_sbrk_r>
 8008928:	1c42      	adds	r2, r0, #1
 800892a:	eb0a 0b09 	add.w	fp, sl, r9
 800892e:	4604      	mov	r4, r0
 8008930:	f000 80f7 	beq.w	8008b22 <_malloc_r+0x402>
 8008934:	4583      	cmp	fp, r0
 8008936:	9901      	ldr	r1, [sp, #4]
 8008938:	4a37      	ldr	r2, [pc, #220]	@ (8008a18 <_malloc_r+0x2f8>)
 800893a:	d902      	bls.n	8008942 <_malloc_r+0x222>
 800893c:	45b2      	cmp	sl, r6
 800893e:	f040 80f0 	bne.w	8008b22 <_malloc_r+0x402>
 8008942:	4b36      	ldr	r3, [pc, #216]	@ (8008a1c <_malloc_r+0x2fc>)
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	45a3      	cmp	fp, r4
 8008948:	eb00 0e01 	add.w	lr, r0, r1
 800894c:	f8c3 e000 	str.w	lr, [r3]
 8008950:	f108 3cff 	add.w	ip, r8, #4294967295
 8008954:	f040 80ab 	bne.w	8008aae <_malloc_r+0x38e>
 8008958:	ea1b 0f0c 	tst.w	fp, ip
 800895c:	f040 80a7 	bne.w	8008aae <_malloc_r+0x38e>
 8008960:	68b2      	ldr	r2, [r6, #8]
 8008962:	4449      	add	r1, r9
 8008964:	f041 0101 	orr.w	r1, r1, #1
 8008968:	6051      	str	r1, [r2, #4]
 800896a:	4a2d      	ldr	r2, [pc, #180]	@ (8008a20 <_malloc_r+0x300>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6811      	ldr	r1, [r2, #0]
 8008970:	428b      	cmp	r3, r1
 8008972:	bf88      	it	hi
 8008974:	6013      	strhi	r3, [r2, #0]
 8008976:	4a2b      	ldr	r2, [pc, #172]	@ (8008a24 <_malloc_r+0x304>)
 8008978:	6811      	ldr	r1, [r2, #0]
 800897a:	428b      	cmp	r3, r1
 800897c:	bf88      	it	hi
 800897e:	6013      	strhi	r3, [r2, #0]
 8008980:	e0cf      	b.n	8008b22 <_malloc_r+0x402>
 8008982:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8008986:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800898a:	d218      	bcs.n	80089be <_malloc_r+0x29e>
 800898c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8008990:	3238      	adds	r2, #56	@ 0x38
 8008992:	f102 0e01 	add.w	lr, r2, #1
 8008996:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800899a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800899e:	45f0      	cmp	r8, lr
 80089a0:	d12b      	bne.n	80089fa <_malloc_r+0x2da>
 80089a2:	1092      	asrs	r2, r2, #2
 80089a4:	f04f 0c01 	mov.w	ip, #1
 80089a8:	fa0c f202 	lsl.w	r2, ip, r2
 80089ac:	4302      	orrs	r2, r0
 80089ae:	6072      	str	r2, [r6, #4]
 80089b0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80089b4:	f8c8 4008 	str.w	r4, [r8, #8]
 80089b8:	f8ce 400c 	str.w	r4, [lr, #12]
 80089bc:	e763      	b.n	8008886 <_malloc_r+0x166>
 80089be:	2a14      	cmp	r2, #20
 80089c0:	d801      	bhi.n	80089c6 <_malloc_r+0x2a6>
 80089c2:	325b      	adds	r2, #91	@ 0x5b
 80089c4:	e7e5      	b.n	8008992 <_malloc_r+0x272>
 80089c6:	2a54      	cmp	r2, #84	@ 0x54
 80089c8:	d803      	bhi.n	80089d2 <_malloc_r+0x2b2>
 80089ca:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80089ce:	326e      	adds	r2, #110	@ 0x6e
 80089d0:	e7df      	b.n	8008992 <_malloc_r+0x272>
 80089d2:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80089d6:	d803      	bhi.n	80089e0 <_malloc_r+0x2c0>
 80089d8:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80089dc:	3277      	adds	r2, #119	@ 0x77
 80089de:	e7d8      	b.n	8008992 <_malloc_r+0x272>
 80089e0:	f240 5e54 	movw	lr, #1364	@ 0x554
 80089e4:	4572      	cmp	r2, lr
 80089e6:	bf9a      	itte	ls
 80089e8:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80089ec:	327c      	addls	r2, #124	@ 0x7c
 80089ee:	227e      	movhi	r2, #126	@ 0x7e
 80089f0:	e7cf      	b.n	8008992 <_malloc_r+0x272>
 80089f2:	f8de e008 	ldr.w	lr, [lr, #8]
 80089f6:	45f0      	cmp	r8, lr
 80089f8:	d005      	beq.n	8008a06 <_malloc_r+0x2e6>
 80089fa:	f8de 2004 	ldr.w	r2, [lr, #4]
 80089fe:	f022 0203 	bic.w	r2, r2, #3
 8008a02:	4562      	cmp	r2, ip
 8008a04:	d8f5      	bhi.n	80089f2 <_malloc_r+0x2d2>
 8008a06:	f8de 800c 	ldr.w	r8, [lr, #12]
 8008a0a:	e7d1      	b.n	80089b0 <_malloc_r+0x290>
 8008a0c:	20000184 	.word	0x20000184
 8008a10:	2000018c 	.word	0x2000018c
 8008a14:	20000c28 	.word	0x20000c28
 8008a18:	2000017c 	.word	0x2000017c
 8008a1c:	20000bf8 	.word	0x20000bf8
 8008a20:	20000c24 	.word	0x20000c24
 8008a24:	20000c20 	.word	0x20000c20
 8008a28:	6860      	ldr	r0, [r4, #4]
 8008a2a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008a2e:	f020 0003 	bic.w	r0, r0, #3
 8008a32:	eba0 0a07 	sub.w	sl, r0, r7
 8008a36:	f1ba 0f0f 	cmp.w	sl, #15
 8008a3a:	dd12      	ble.n	8008a62 <_malloc_r+0x342>
 8008a3c:	68a3      	ldr	r3, [r4, #8]
 8008a3e:	19e2      	adds	r2, r4, r7
 8008a40:	f047 0701 	orr.w	r7, r7, #1
 8008a44:	6067      	str	r7, [r4, #4]
 8008a46:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008a4a:	f8cc 3008 	str.w	r3, [ip, #8]
 8008a4e:	f04a 0301 	orr.w	r3, sl, #1
 8008a52:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8008a56:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8008a5a:	6053      	str	r3, [r2, #4]
 8008a5c:	f844 a000 	str.w	sl, [r4, r0]
 8008a60:	e68f      	b.n	8008782 <_malloc_r+0x62>
 8008a62:	f1ba 0f00 	cmp.w	sl, #0
 8008a66:	db11      	blt.n	8008a8c <_malloc_r+0x36c>
 8008a68:	4420      	add	r0, r4
 8008a6a:	6843      	ldr	r3, [r0, #4]
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	6043      	str	r3, [r0, #4]
 8008a72:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8008a76:	4628      	mov	r0, r5
 8008a78:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008a7c:	f8cc 3008 	str.w	r3, [ip, #8]
 8008a80:	f000 f88e 	bl	8008ba0 <__malloc_unlock>
 8008a84:	4620      	mov	r0, r4
 8008a86:	b003      	add	sp, #12
 8008a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8c:	4664      	mov	r4, ip
 8008a8e:	e70f      	b.n	80088b0 <_malloc_r+0x190>
 8008a90:	f858 0908 	ldr.w	r0, [r8], #-8
 8008a94:	4540      	cmp	r0, r8
 8008a96:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a9a:	f43f af13 	beq.w	80088c4 <_malloc_r+0x1a4>
 8008a9e:	e718      	b.n	80088d2 <_malloc_r+0x1b2>
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	0052      	lsls	r2, r2, #1
 8008aa4:	4210      	tst	r0, r2
 8008aa6:	d0fb      	beq.n	8008aa0 <_malloc_r+0x380>
 8008aa8:	e6fc      	b.n	80088a4 <_malloc_r+0x184>
 8008aaa:	4673      	mov	r3, lr
 8008aac:	e7fa      	b.n	8008aa4 <_malloc_r+0x384>
 8008aae:	6810      	ldr	r0, [r2, #0]
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	bf1b      	ittet	ne
 8008ab4:	eba4 0b0b 	subne.w	fp, r4, fp
 8008ab8:	eb0b 020e 	addne.w	r2, fp, lr
 8008abc:	6014      	streq	r4, [r2, #0]
 8008abe:	601a      	strne	r2, [r3, #0]
 8008ac0:	f014 0b07 	ands.w	fp, r4, #7
 8008ac4:	bf1a      	itte	ne
 8008ac6:	f1cb 0008 	rsbne	r0, fp, #8
 8008aca:	1824      	addne	r4, r4, r0
 8008acc:	4658      	moveq	r0, fp
 8008ace:	1862      	adds	r2, r4, r1
 8008ad0:	ea02 010c 	and.w	r1, r2, ip
 8008ad4:	4480      	add	r8, r0
 8008ad6:	eba8 0801 	sub.w	r8, r8, r1
 8008ada:	ea08 080c 	and.w	r8, r8, ip
 8008ade:	4641      	mov	r1, r8
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	9201      	str	r2, [sp, #4]
 8008ae4:	f002 febe 	bl	800b864 <_sbrk_r>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	9a01      	ldr	r2, [sp, #4]
 8008aec:	4b28      	ldr	r3, [pc, #160]	@ (8008b90 <_malloc_r+0x470>)
 8008aee:	d107      	bne.n	8008b00 <_malloc_r+0x3e0>
 8008af0:	f1bb 0f00 	cmp.w	fp, #0
 8008af4:	d023      	beq.n	8008b3e <_malloc_r+0x41e>
 8008af6:	f1ab 0008 	sub.w	r0, fp, #8
 8008afa:	4410      	add	r0, r2
 8008afc:	f04f 0800 	mov.w	r8, #0
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	60b4      	str	r4, [r6, #8]
 8008b04:	1b00      	subs	r0, r0, r4
 8008b06:	4440      	add	r0, r8
 8008b08:	4442      	add	r2, r8
 8008b0a:	f040 0001 	orr.w	r0, r0, #1
 8008b0e:	45b2      	cmp	sl, r6
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	6060      	str	r0, [r4, #4]
 8008b14:	f43f af29 	beq.w	800896a <_malloc_r+0x24a>
 8008b18:	f1b9 0f0f 	cmp.w	r9, #15
 8008b1c:	d812      	bhi.n	8008b44 <_malloc_r+0x424>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	6063      	str	r3, [r4, #4]
 8008b22:	68b3      	ldr	r3, [r6, #8]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f023 0303 	bic.w	r3, r3, #3
 8008b2a:	42bb      	cmp	r3, r7
 8008b2c:	eba3 0207 	sub.w	r2, r3, r7
 8008b30:	d301      	bcc.n	8008b36 <_malloc_r+0x416>
 8008b32:	2a0f      	cmp	r2, #15
 8008b34:	dc22      	bgt.n	8008b7c <_malloc_r+0x45c>
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 f832 	bl	8008ba0 <__malloc_unlock>
 8008b3c:	e5fc      	b.n	8008738 <_malloc_r+0x18>
 8008b3e:	4610      	mov	r0, r2
 8008b40:	46d8      	mov	r8, fp
 8008b42:	e7dd      	b.n	8008b00 <_malloc_r+0x3e0>
 8008b44:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008b48:	f1a9 090c 	sub.w	r9, r9, #12
 8008b4c:	f029 0907 	bic.w	r9, r9, #7
 8008b50:	f002 0201 	and.w	r2, r2, #1
 8008b54:	ea42 0209 	orr.w	r2, r2, r9
 8008b58:	f8ca 2004 	str.w	r2, [sl, #4]
 8008b5c:	2105      	movs	r1, #5
 8008b5e:	eb0a 0209 	add.w	r2, sl, r9
 8008b62:	f1b9 0f0f 	cmp.w	r9, #15
 8008b66:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8008b6a:	f67f aefe 	bls.w	800896a <_malloc_r+0x24a>
 8008b6e:	f10a 0108 	add.w	r1, sl, #8
 8008b72:	4628      	mov	r0, r5
 8008b74:	f7ff fd14 	bl	80085a0 <_free_r>
 8008b78:	4b05      	ldr	r3, [pc, #20]	@ (8008b90 <_malloc_r+0x470>)
 8008b7a:	e6f6      	b.n	800896a <_malloc_r+0x24a>
 8008b7c:	68b4      	ldr	r4, [r6, #8]
 8008b7e:	f047 0301 	orr.w	r3, r7, #1
 8008b82:	4427      	add	r7, r4
 8008b84:	f042 0201 	orr.w	r2, r2, #1
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	60b7      	str	r7, [r6, #8]
 8008b8c:	607a      	str	r2, [r7, #4]
 8008b8e:	e5f8      	b.n	8008782 <_malloc_r+0x62>
 8008b90:	20000bf8 	.word	0x20000bf8

08008b94 <__malloc_lock>:
 8008b94:	4801      	ldr	r0, [pc, #4]	@ (8008b9c <__malloc_lock+0x8>)
 8008b96:	f7ff bc8d 	b.w	80084b4 <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	20000bf0 	.word	0x20000bf0

08008ba0 <__malloc_unlock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	@ (8008ba8 <__malloc_unlock+0x8>)
 8008ba2:	f7ff bc88 	b.w	80084b6 <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	20000bf0 	.word	0x20000bf0

08008bac <_realloc_r>:
 8008bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	4693      	mov	fp, r2
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	b929      	cbnz	r1, 8008bc4 <_realloc_r+0x18>
 8008bb8:	4611      	mov	r1, r2
 8008bba:	b003      	add	sp, #12
 8008bbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	f7ff bdae 	b.w	8008720 <_malloc_r>
 8008bc4:	f7ff ffe6 	bl	8008b94 <__malloc_lock>
 8008bc8:	f10b 080b 	add.w	r8, fp, #11
 8008bcc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008bd0:	f1b8 0f16 	cmp.w	r8, #22
 8008bd4:	f1a4 0908 	sub.w	r9, r4, #8
 8008bd8:	f025 0603 	bic.w	r6, r5, #3
 8008bdc:	d908      	bls.n	8008bf0 <_realloc_r+0x44>
 8008bde:	f038 0807 	bics.w	r8, r8, #7
 8008be2:	d507      	bpl.n	8008bf4 <_realloc_r+0x48>
 8008be4:	230c      	movs	r3, #12
 8008be6:	f8ca 3000 	str.w	r3, [sl]
 8008bea:	f04f 0b00 	mov.w	fp, #0
 8008bee:	e032      	b.n	8008c56 <_realloc_r+0xaa>
 8008bf0:	f04f 0810 	mov.w	r8, #16
 8008bf4:	45c3      	cmp	fp, r8
 8008bf6:	d8f5      	bhi.n	8008be4 <_realloc_r+0x38>
 8008bf8:	4546      	cmp	r6, r8
 8008bfa:	f280 8174 	bge.w	8008ee6 <_realloc_r+0x33a>
 8008bfe:	4b9e      	ldr	r3, [pc, #632]	@ (8008e78 <_realloc_r+0x2cc>)
 8008c00:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8008c04:	eb09 0106 	add.w	r1, r9, r6
 8008c08:	458c      	cmp	ip, r1
 8008c0a:	6848      	ldr	r0, [r1, #4]
 8008c0c:	d005      	beq.n	8008c1a <_realloc_r+0x6e>
 8008c0e:	f020 0201 	bic.w	r2, r0, #1
 8008c12:	440a      	add	r2, r1
 8008c14:	6852      	ldr	r2, [r2, #4]
 8008c16:	07d7      	lsls	r7, r2, #31
 8008c18:	d449      	bmi.n	8008cae <_realloc_r+0x102>
 8008c1a:	f020 0003 	bic.w	r0, r0, #3
 8008c1e:	458c      	cmp	ip, r1
 8008c20:	eb06 0700 	add.w	r7, r6, r0
 8008c24:	d11b      	bne.n	8008c5e <_realloc_r+0xb2>
 8008c26:	f108 0210 	add.w	r2, r8, #16
 8008c2a:	42ba      	cmp	r2, r7
 8008c2c:	dc41      	bgt.n	8008cb2 <_realloc_r+0x106>
 8008c2e:	eb09 0208 	add.w	r2, r9, r8
 8008c32:	eba7 0708 	sub.w	r7, r7, r8
 8008c36:	f047 0701 	orr.w	r7, r7, #1
 8008c3a:	609a      	str	r2, [r3, #8]
 8008c3c:	6057      	str	r7, [r2, #4]
 8008c3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	ea43 0308 	orr.w	r3, r3, r8
 8008c4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c4e:	4650      	mov	r0, sl
 8008c50:	f7ff ffa6 	bl	8008ba0 <__malloc_unlock>
 8008c54:	46a3      	mov	fp, r4
 8008c56:	4658      	mov	r0, fp
 8008c58:	b003      	add	sp, #12
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5e:	45b8      	cmp	r8, r7
 8008c60:	dc27      	bgt.n	8008cb2 <_realloc_r+0x106>
 8008c62:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8008c66:	60d3      	str	r3, [r2, #12]
 8008c68:	609a      	str	r2, [r3, #8]
 8008c6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c6e:	eba7 0008 	sub.w	r0, r7, r8
 8008c72:	280f      	cmp	r0, #15
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	eb09 0207 	add.w	r2, r9, r7
 8008c7c:	f240 8135 	bls.w	8008eea <_realloc_r+0x33e>
 8008c80:	eb09 0108 	add.w	r1, r9, r8
 8008c84:	ea48 0303 	orr.w	r3, r8, r3
 8008c88:	f040 0001 	orr.w	r0, r0, #1
 8008c8c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008c90:	6048      	str	r0, [r1, #4]
 8008c92:	6853      	ldr	r3, [r2, #4]
 8008c94:	f043 0301 	orr.w	r3, r3, #1
 8008c98:	6053      	str	r3, [r2, #4]
 8008c9a:	3108      	adds	r1, #8
 8008c9c:	4650      	mov	r0, sl
 8008c9e:	f7ff fc7f 	bl	80085a0 <_free_r>
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	f7ff ff7c 	bl	8008ba0 <__malloc_unlock>
 8008ca8:	f109 0b08 	add.w	fp, r9, #8
 8008cac:	e7d3      	b.n	8008c56 <_realloc_r+0xaa>
 8008cae:	2000      	movs	r0, #0
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	07ea      	lsls	r2, r5, #31
 8008cb4:	f100 80c7 	bmi.w	8008e46 <_realloc_r+0x29a>
 8008cb8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008cbc:	eba9 0505 	sub.w	r5, r9, r5
 8008cc0:	686a      	ldr	r2, [r5, #4]
 8008cc2:	f022 0203 	bic.w	r2, r2, #3
 8008cc6:	4432      	add	r2, r6
 8008cc8:	9201      	str	r2, [sp, #4]
 8008cca:	2900      	cmp	r1, #0
 8008ccc:	f000 8086 	beq.w	8008ddc <_realloc_r+0x230>
 8008cd0:	458c      	cmp	ip, r1
 8008cd2:	eb00 0702 	add.w	r7, r0, r2
 8008cd6:	d149      	bne.n	8008d6c <_realloc_r+0x1c0>
 8008cd8:	f108 0210 	add.w	r2, r8, #16
 8008cdc:	42ba      	cmp	r2, r7
 8008cde:	dc7d      	bgt.n	8008ddc <_realloc_r+0x230>
 8008ce0:	46ab      	mov	fp, r5
 8008ce2:	68ea      	ldr	r2, [r5, #12]
 8008ce4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8008ce8:	60ca      	str	r2, [r1, #12]
 8008cea:	6091      	str	r1, [r2, #8]
 8008cec:	1f32      	subs	r2, r6, #4
 8008cee:	2a24      	cmp	r2, #36	@ 0x24
 8008cf0:	d836      	bhi.n	8008d60 <_realloc_r+0x1b4>
 8008cf2:	2a13      	cmp	r2, #19
 8008cf4:	d932      	bls.n	8008d5c <_realloc_r+0x1b0>
 8008cf6:	6821      	ldr	r1, [r4, #0]
 8008cf8:	60a9      	str	r1, [r5, #8]
 8008cfa:	6861      	ldr	r1, [r4, #4]
 8008cfc:	60e9      	str	r1, [r5, #12]
 8008cfe:	2a1b      	cmp	r2, #27
 8008d00:	d81a      	bhi.n	8008d38 <_realloc_r+0x18c>
 8008d02:	3408      	adds	r4, #8
 8008d04:	f105 0210 	add.w	r2, r5, #16
 8008d08:	6821      	ldr	r1, [r4, #0]
 8008d0a:	6011      	str	r1, [r2, #0]
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	6051      	str	r1, [r2, #4]
 8008d10:	68a1      	ldr	r1, [r4, #8]
 8008d12:	6091      	str	r1, [r2, #8]
 8008d14:	eb05 0208 	add.w	r2, r5, r8
 8008d18:	eba7 0708 	sub.w	r7, r7, r8
 8008d1c:	f047 0701 	orr.w	r7, r7, #1
 8008d20:	609a      	str	r2, [r3, #8]
 8008d22:	6057      	str	r7, [r2, #4]
 8008d24:	686b      	ldr	r3, [r5, #4]
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	ea43 0308 	orr.w	r3, r3, r8
 8008d2e:	606b      	str	r3, [r5, #4]
 8008d30:	4650      	mov	r0, sl
 8008d32:	f7ff ff35 	bl	8008ba0 <__malloc_unlock>
 8008d36:	e78e      	b.n	8008c56 <_realloc_r+0xaa>
 8008d38:	68a1      	ldr	r1, [r4, #8]
 8008d3a:	6129      	str	r1, [r5, #16]
 8008d3c:	68e1      	ldr	r1, [r4, #12]
 8008d3e:	6169      	str	r1, [r5, #20]
 8008d40:	2a24      	cmp	r2, #36	@ 0x24
 8008d42:	bf01      	itttt	eq
 8008d44:	6922      	ldreq	r2, [r4, #16]
 8008d46:	61aa      	streq	r2, [r5, #24]
 8008d48:	6961      	ldreq	r1, [r4, #20]
 8008d4a:	61e9      	streq	r1, [r5, #28]
 8008d4c:	bf19      	ittee	ne
 8008d4e:	3410      	addne	r4, #16
 8008d50:	f105 0218 	addne.w	r2, r5, #24
 8008d54:	f105 0220 	addeq.w	r2, r5, #32
 8008d58:	3418      	addeq	r4, #24
 8008d5a:	e7d5      	b.n	8008d08 <_realloc_r+0x15c>
 8008d5c:	465a      	mov	r2, fp
 8008d5e:	e7d3      	b.n	8008d08 <_realloc_r+0x15c>
 8008d60:	4621      	mov	r1, r4
 8008d62:	4658      	mov	r0, fp
 8008d64:	f7ff fafb 	bl	800835e <memmove>
 8008d68:	4b43      	ldr	r3, [pc, #268]	@ (8008e78 <_realloc_r+0x2cc>)
 8008d6a:	e7d3      	b.n	8008d14 <_realloc_r+0x168>
 8008d6c:	45b8      	cmp	r8, r7
 8008d6e:	dc35      	bgt.n	8008ddc <_realloc_r+0x230>
 8008d70:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8008d74:	4628      	mov	r0, r5
 8008d76:	60d3      	str	r3, [r2, #12]
 8008d78:	609a      	str	r2, [r3, #8]
 8008d7a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008d7e:	68eb      	ldr	r3, [r5, #12]
 8008d80:	60d3      	str	r3, [r2, #12]
 8008d82:	609a      	str	r2, [r3, #8]
 8008d84:	1f32      	subs	r2, r6, #4
 8008d86:	2a24      	cmp	r2, #36	@ 0x24
 8008d88:	d824      	bhi.n	8008dd4 <_realloc_r+0x228>
 8008d8a:	2a13      	cmp	r2, #19
 8008d8c:	d908      	bls.n	8008da0 <_realloc_r+0x1f4>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	60ab      	str	r3, [r5, #8]
 8008d92:	6863      	ldr	r3, [r4, #4]
 8008d94:	60eb      	str	r3, [r5, #12]
 8008d96:	2a1b      	cmp	r2, #27
 8008d98:	d80a      	bhi.n	8008db0 <_realloc_r+0x204>
 8008d9a:	3408      	adds	r4, #8
 8008d9c:	f105 0010 	add.w	r0, r5, #16
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	6003      	str	r3, [r0, #0]
 8008da4:	6863      	ldr	r3, [r4, #4]
 8008da6:	6043      	str	r3, [r0, #4]
 8008da8:	68a3      	ldr	r3, [r4, #8]
 8008daa:	6083      	str	r3, [r0, #8]
 8008dac:	46a9      	mov	r9, r5
 8008dae:	e75c      	b.n	8008c6a <_realloc_r+0xbe>
 8008db0:	68a3      	ldr	r3, [r4, #8]
 8008db2:	612b      	str	r3, [r5, #16]
 8008db4:	68e3      	ldr	r3, [r4, #12]
 8008db6:	616b      	str	r3, [r5, #20]
 8008db8:	2a24      	cmp	r2, #36	@ 0x24
 8008dba:	bf01      	itttt	eq
 8008dbc:	6923      	ldreq	r3, [r4, #16]
 8008dbe:	61ab      	streq	r3, [r5, #24]
 8008dc0:	6963      	ldreq	r3, [r4, #20]
 8008dc2:	61eb      	streq	r3, [r5, #28]
 8008dc4:	bf19      	ittee	ne
 8008dc6:	3410      	addne	r4, #16
 8008dc8:	f105 0018 	addne.w	r0, r5, #24
 8008dcc:	f105 0020 	addeq.w	r0, r5, #32
 8008dd0:	3418      	addeq	r4, #24
 8008dd2:	e7e5      	b.n	8008da0 <_realloc_r+0x1f4>
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7ff fac2 	bl	800835e <memmove>
 8008dda:	e7e7      	b.n	8008dac <_realloc_r+0x200>
 8008ddc:	9b01      	ldr	r3, [sp, #4]
 8008dde:	4598      	cmp	r8, r3
 8008de0:	dc31      	bgt.n	8008e46 <_realloc_r+0x29a>
 8008de2:	4628      	mov	r0, r5
 8008de4:	68eb      	ldr	r3, [r5, #12]
 8008de6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008dea:	60d3      	str	r3, [r2, #12]
 8008dec:	609a      	str	r2, [r3, #8]
 8008dee:	1f32      	subs	r2, r6, #4
 8008df0:	2a24      	cmp	r2, #36	@ 0x24
 8008df2:	d824      	bhi.n	8008e3e <_realloc_r+0x292>
 8008df4:	2a13      	cmp	r2, #19
 8008df6:	d908      	bls.n	8008e0a <_realloc_r+0x25e>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	60ab      	str	r3, [r5, #8]
 8008dfc:	6863      	ldr	r3, [r4, #4]
 8008dfe:	60eb      	str	r3, [r5, #12]
 8008e00:	2a1b      	cmp	r2, #27
 8008e02:	d80a      	bhi.n	8008e1a <_realloc_r+0x26e>
 8008e04:	3408      	adds	r4, #8
 8008e06:	f105 0010 	add.w	r0, r5, #16
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	6003      	str	r3, [r0, #0]
 8008e0e:	6863      	ldr	r3, [r4, #4]
 8008e10:	6043      	str	r3, [r0, #4]
 8008e12:	68a3      	ldr	r3, [r4, #8]
 8008e14:	6083      	str	r3, [r0, #8]
 8008e16:	9f01      	ldr	r7, [sp, #4]
 8008e18:	e7c8      	b.n	8008dac <_realloc_r+0x200>
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	612b      	str	r3, [r5, #16]
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	616b      	str	r3, [r5, #20]
 8008e22:	2a24      	cmp	r2, #36	@ 0x24
 8008e24:	bf01      	itttt	eq
 8008e26:	6923      	ldreq	r3, [r4, #16]
 8008e28:	61ab      	streq	r3, [r5, #24]
 8008e2a:	6963      	ldreq	r3, [r4, #20]
 8008e2c:	61eb      	streq	r3, [r5, #28]
 8008e2e:	bf19      	ittee	ne
 8008e30:	3410      	addne	r4, #16
 8008e32:	f105 0018 	addne.w	r0, r5, #24
 8008e36:	f105 0020 	addeq.w	r0, r5, #32
 8008e3a:	3418      	addeq	r4, #24
 8008e3c:	e7e5      	b.n	8008e0a <_realloc_r+0x25e>
 8008e3e:	4621      	mov	r1, r4
 8008e40:	f7ff fa8d 	bl	800835e <memmove>
 8008e44:	e7e7      	b.n	8008e16 <_realloc_r+0x26a>
 8008e46:	4659      	mov	r1, fp
 8008e48:	4650      	mov	r0, sl
 8008e4a:	f7ff fc69 	bl	8008720 <_malloc_r>
 8008e4e:	4683      	mov	fp, r0
 8008e50:	b918      	cbnz	r0, 8008e5a <_realloc_r+0x2ae>
 8008e52:	4650      	mov	r0, sl
 8008e54:	f7ff fea4 	bl	8008ba0 <__malloc_unlock>
 8008e58:	e6c7      	b.n	8008bea <_realloc_r+0x3e>
 8008e5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008e5e:	f023 0301 	bic.w	r3, r3, #1
 8008e62:	444b      	add	r3, r9
 8008e64:	f1a0 0208 	sub.w	r2, r0, #8
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d107      	bne.n	8008e7c <_realloc_r+0x2d0>
 8008e6c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8008e70:	f027 0703 	bic.w	r7, r7, #3
 8008e74:	4437      	add	r7, r6
 8008e76:	e6f8      	b.n	8008c6a <_realloc_r+0xbe>
 8008e78:	20000184 	.word	0x20000184
 8008e7c:	1f32      	subs	r2, r6, #4
 8008e7e:	2a24      	cmp	r2, #36	@ 0x24
 8008e80:	d82d      	bhi.n	8008ede <_realloc_r+0x332>
 8008e82:	2a13      	cmp	r2, #19
 8008e84:	d928      	bls.n	8008ed8 <_realloc_r+0x32c>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	6003      	str	r3, [r0, #0]
 8008e8a:	6863      	ldr	r3, [r4, #4]
 8008e8c:	6043      	str	r3, [r0, #4]
 8008e8e:	2a1b      	cmp	r2, #27
 8008e90:	d80e      	bhi.n	8008eb0 <_realloc_r+0x304>
 8008e92:	f104 0208 	add.w	r2, r4, #8
 8008e96:	f100 0308 	add.w	r3, r0, #8
 8008e9a:	6811      	ldr	r1, [r2, #0]
 8008e9c:	6019      	str	r1, [r3, #0]
 8008e9e:	6851      	ldr	r1, [r2, #4]
 8008ea0:	6059      	str	r1, [r3, #4]
 8008ea2:	6892      	ldr	r2, [r2, #8]
 8008ea4:	609a      	str	r2, [r3, #8]
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4650      	mov	r0, sl
 8008eaa:	f7ff fb79 	bl	80085a0 <_free_r>
 8008eae:	e73f      	b.n	8008d30 <_realloc_r+0x184>
 8008eb0:	68a3      	ldr	r3, [r4, #8]
 8008eb2:	6083      	str	r3, [r0, #8]
 8008eb4:	68e3      	ldr	r3, [r4, #12]
 8008eb6:	60c3      	str	r3, [r0, #12]
 8008eb8:	2a24      	cmp	r2, #36	@ 0x24
 8008eba:	bf01      	itttt	eq
 8008ebc:	6923      	ldreq	r3, [r4, #16]
 8008ebe:	6103      	streq	r3, [r0, #16]
 8008ec0:	6961      	ldreq	r1, [r4, #20]
 8008ec2:	6141      	streq	r1, [r0, #20]
 8008ec4:	bf19      	ittee	ne
 8008ec6:	f104 0210 	addne.w	r2, r4, #16
 8008eca:	f100 0310 	addne.w	r3, r0, #16
 8008ece:	f104 0218 	addeq.w	r2, r4, #24
 8008ed2:	f100 0318 	addeq.w	r3, r0, #24
 8008ed6:	e7e0      	b.n	8008e9a <_realloc_r+0x2ee>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	4622      	mov	r2, r4
 8008edc:	e7dd      	b.n	8008e9a <_realloc_r+0x2ee>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	f7ff fa3d 	bl	800835e <memmove>
 8008ee4:	e7df      	b.n	8008ea6 <_realloc_r+0x2fa>
 8008ee6:	4637      	mov	r7, r6
 8008ee8:	e6bf      	b.n	8008c6a <_realloc_r+0xbe>
 8008eea:	431f      	orrs	r7, r3
 8008eec:	f8c9 7004 	str.w	r7, [r9, #4]
 8008ef0:	6853      	ldr	r3, [r2, #4]
 8008ef2:	f043 0301 	orr.w	r3, r3, #1
 8008ef6:	6053      	str	r3, [r2, #4]
 8008ef8:	e6d3      	b.n	8008ca2 <_realloc_r+0xf6>
 8008efa:	bf00      	nop
 8008efc:	0000      	movs	r0, r0
	...

08008f00 <_svfprintf_r>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	b0d3      	sub	sp, #332	@ 0x14c
 8008f06:	468b      	mov	fp, r1
 8008f08:	4691      	mov	r9, r2
 8008f0a:	461e      	mov	r6, r3
 8008f0c:	9003      	str	r0, [sp, #12]
 8008f0e:	f7ff fa5b 	bl	80083c8 <_localeconv_r>
 8008f12:	6803      	ldr	r3, [r0, #0]
 8008f14:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f7 f9da 	bl	80002d0 <strlen>
 8008f1c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008f20:	900d      	str	r0, [sp, #52]	@ 0x34
 8008f22:	061b      	lsls	r3, r3, #24
 8008f24:	d515      	bpl.n	8008f52 <_svfprintf_r+0x52>
 8008f26:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008f2a:	b993      	cbnz	r3, 8008f52 <_svfprintf_r+0x52>
 8008f2c:	9803      	ldr	r0, [sp, #12]
 8008f2e:	2140      	movs	r1, #64	@ 0x40
 8008f30:	f7ff fbf6 	bl	8008720 <_malloc_r>
 8008f34:	f8cb 0000 	str.w	r0, [fp]
 8008f38:	f8cb 0010 	str.w	r0, [fp, #16]
 8008f3c:	b930      	cbnz	r0, 8008f4c <_svfprintf_r+0x4c>
 8008f3e:	9a03      	ldr	r2, [sp, #12]
 8008f40:	230c      	movs	r3, #12
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f4a:	e1f7      	b.n	800933c <_svfprintf_r+0x43c>
 8008f4c:	2340      	movs	r3, #64	@ 0x40
 8008f4e:	f8cb 3014 	str.w	r3, [fp, #20]
 8008f52:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 80091a0 <_svfprintf_r+0x2a0>
 8008f56:	2300      	movs	r3, #0
 8008f58:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8008f5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008f60:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8008f64:	ac29      	add	r4, sp, #164	@ 0xa4
 8008f66:	9426      	str	r4, [sp, #152]	@ 0x98
 8008f68:	9304      	str	r3, [sp, #16]
 8008f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f6e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008f70:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f72:	464b      	mov	r3, r9
 8008f74:	461d      	mov	r5, r3
 8008f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f7a:	b10a      	cbz	r2, 8008f80 <_svfprintf_r+0x80>
 8008f7c:	2a25      	cmp	r2, #37	@ 0x25
 8008f7e:	d1f9      	bne.n	8008f74 <_svfprintf_r+0x74>
 8008f80:	ebb5 0709 	subs.w	r7, r5, r9
 8008f84:	d00d      	beq.n	8008fa2 <_svfprintf_r+0xa2>
 8008f86:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008f88:	443b      	add	r3, r7
 8008f8a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008f8c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8008f8e:	3301      	adds	r3, #1
 8008f90:	2b07      	cmp	r3, #7
 8008f92:	e9c4 9700 	strd	r9, r7, [r4]
 8008f96:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008f98:	dc75      	bgt.n	8009086 <_svfprintf_r+0x186>
 8008f9a:	3408      	adds	r4, #8
 8008f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f9e:	443b      	add	r3, r7
 8008fa0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fa2:	782b      	ldrb	r3, [r5, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f001 8148 	beq.w	800a23a <_svfprintf_r+0x133a>
 8008faa:	2200      	movs	r2, #0
 8008fac:	1c6b      	adds	r3, r5, #1
 8008fae:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8008fb2:	f04f 38ff 	mov.w	r8, #4294967295
 8008fb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fb8:	4615      	mov	r5, r2
 8008fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fbe:	9206      	str	r2, [sp, #24]
 8008fc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fc2:	9b06      	ldr	r3, [sp, #24]
 8008fc4:	3b20      	subs	r3, #32
 8008fc6:	2b5a      	cmp	r3, #90	@ 0x5a
 8008fc8:	f200 85a4 	bhi.w	8009b14 <_svfprintf_r+0xc14>
 8008fcc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fd0:	05a2009d 	.word	0x05a2009d
 8008fd4:	00a505a2 	.word	0x00a505a2
 8008fd8:	05a205a2 	.word	0x05a205a2
 8008fdc:	008505a2 	.word	0x008505a2
 8008fe0:	05a205a2 	.word	0x05a205a2
 8008fe4:	00b200a8 	.word	0x00b200a8
 8008fe8:	00af05a2 	.word	0x00af05a2
 8008fec:	05a200b4 	.word	0x05a200b4
 8008ff0:	00d100ce 	.word	0x00d100ce
 8008ff4:	00d100d1 	.word	0x00d100d1
 8008ff8:	00d100d1 	.word	0x00d100d1
 8008ffc:	00d100d1 	.word	0x00d100d1
 8009000:	00d100d1 	.word	0x00d100d1
 8009004:	05a205a2 	.word	0x05a205a2
 8009008:	05a205a2 	.word	0x05a205a2
 800900c:	05a205a2 	.word	0x05a205a2
 8009010:	014705a2 	.word	0x014705a2
 8009014:	010805a2 	.word	0x010805a2
 8009018:	0147011b 	.word	0x0147011b
 800901c:	01470147 	.word	0x01470147
 8009020:	05a205a2 	.word	0x05a205a2
 8009024:	05a205a2 	.word	0x05a205a2
 8009028:	05a200e2 	.word	0x05a200e2
 800902c:	049d05a2 	.word	0x049d05a2
 8009030:	05a205a2 	.word	0x05a205a2
 8009034:	04e705a2 	.word	0x04e705a2
 8009038:	050805a2 	.word	0x050805a2
 800903c:	05a205a2 	.word	0x05a205a2
 8009040:	05a2052a 	.word	0x05a2052a
 8009044:	05a205a2 	.word	0x05a205a2
 8009048:	05a205a2 	.word	0x05a205a2
 800904c:	05a205a2 	.word	0x05a205a2
 8009050:	014705a2 	.word	0x014705a2
 8009054:	010805a2 	.word	0x010805a2
 8009058:	0147011d 	.word	0x0147011d
 800905c:	01470147 	.word	0x01470147
 8009060:	011d00ee 	.word	0x011d00ee
 8009064:	05a20102 	.word	0x05a20102
 8009068:	05a200fb 	.word	0x05a200fb
 800906c:	049f047e 	.word	0x049f047e
 8009070:	010204d6 	.word	0x010204d6
 8009074:	04e705a2 	.word	0x04e705a2
 8009078:	050a009b 	.word	0x050a009b
 800907c:	05a205a2 	.word	0x05a205a2
 8009080:	05a20065 	.word	0x05a20065
 8009084:	009b      	.short	0x009b
 8009086:	9803      	ldr	r0, [sp, #12]
 8009088:	aa26      	add	r2, sp, #152	@ 0x98
 800908a:	4659      	mov	r1, fp
 800908c:	f7fe fb38 	bl	8007700 <__ssprint_r>
 8009090:	2800      	cmp	r0, #0
 8009092:	f040 814e 	bne.w	8009332 <_svfprintf_r+0x432>
 8009096:	ac29      	add	r4, sp, #164	@ 0xa4
 8009098:	e780      	b.n	8008f9c <_svfprintf_r+0x9c>
 800909a:	4b43      	ldr	r3, [pc, #268]	@ (80091a8 <_svfprintf_r+0x2a8>)
 800909c:	9319      	str	r3, [sp, #100]	@ 0x64
 800909e:	f015 0320 	ands.w	r3, r5, #32
 80090a2:	f000 84c2 	beq.w	8009a2a <_svfprintf_r+0xb2a>
 80090a6:	3607      	adds	r6, #7
 80090a8:	f026 0307 	bic.w	r3, r6, #7
 80090ac:	461a      	mov	r2, r3
 80090ae:	685f      	ldr	r7, [r3, #4]
 80090b0:	f852 6b08 	ldr.w	r6, [r2], #8
 80090b4:	9207      	str	r2, [sp, #28]
 80090b6:	07eb      	lsls	r3, r5, #31
 80090b8:	d50a      	bpl.n	80090d0 <_svfprintf_r+0x1d0>
 80090ba:	ea56 0307 	orrs.w	r3, r6, r7
 80090be:	d007      	beq.n	80090d0 <_svfprintf_r+0x1d0>
 80090c0:	2330      	movs	r3, #48	@ 0x30
 80090c2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80090c6:	9b06      	ldr	r3, [sp, #24]
 80090c8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80090cc:	f045 0502 	orr.w	r5, r5, #2
 80090d0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80090d4:	2302      	movs	r3, #2
 80090d6:	f000 bc28 	b.w	800992a <_svfprintf_r+0xa2a>
 80090da:	9803      	ldr	r0, [sp, #12]
 80090dc:	f7ff f974 	bl	80083c8 <_localeconv_r>
 80090e0:	6843      	ldr	r3, [r0, #4]
 80090e2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7f7 f8f3 	bl	80002d0 <strlen>
 80090ea:	9012      	str	r0, [sp, #72]	@ 0x48
 80090ec:	9803      	ldr	r0, [sp, #12]
 80090ee:	f7ff f96b 	bl	80083c8 <_localeconv_r>
 80090f2:	6883      	ldr	r3, [r0, #8]
 80090f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80090f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090f8:	b12b      	cbz	r3, 8009106 <_svfprintf_r+0x206>
 80090fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090fc:	b11b      	cbz	r3, 8009106 <_svfprintf_r+0x206>
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	b10b      	cbz	r3, 8009106 <_svfprintf_r+0x206>
 8009102:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8009106:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009108:	e757      	b.n	8008fba <_svfprintf_r+0xba>
 800910a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1f9      	bne.n	8009106 <_svfprintf_r+0x206>
 8009112:	2320      	movs	r3, #32
 8009114:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009118:	e7f5      	b.n	8009106 <_svfprintf_r+0x206>
 800911a:	f045 0501 	orr.w	r5, r5, #1
 800911e:	e7f2      	b.n	8009106 <_svfprintf_r+0x206>
 8009120:	f856 3b04 	ldr.w	r3, [r6], #4
 8009124:	930e      	str	r3, [sp, #56]	@ 0x38
 8009126:	2b00      	cmp	r3, #0
 8009128:	daed      	bge.n	8009106 <_svfprintf_r+0x206>
 800912a:	425b      	negs	r3, r3
 800912c:	930e      	str	r3, [sp, #56]	@ 0x38
 800912e:	f045 0504 	orr.w	r5, r5, #4
 8009132:	e7e8      	b.n	8009106 <_svfprintf_r+0x206>
 8009134:	232b      	movs	r3, #43	@ 0x2b
 8009136:	e7ed      	b.n	8009114 <_svfprintf_r+0x214>
 8009138:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800913a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800913e:	9206      	str	r2, [sp, #24]
 8009140:	2a2a      	cmp	r2, #42	@ 0x2a
 8009142:	d10f      	bne.n	8009164 <_svfprintf_r+0x264>
 8009144:	f856 2b04 	ldr.w	r2, [r6], #4
 8009148:	930c      	str	r3, [sp, #48]	@ 0x30
 800914a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800914e:	e7da      	b.n	8009106 <_svfprintf_r+0x206>
 8009150:	fb01 2808 	mla	r8, r1, r8, r2
 8009154:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009158:	9206      	str	r2, [sp, #24]
 800915a:	9a06      	ldr	r2, [sp, #24]
 800915c:	3a30      	subs	r2, #48	@ 0x30
 800915e:	2a09      	cmp	r2, #9
 8009160:	d9f6      	bls.n	8009150 <_svfprintf_r+0x250>
 8009162:	e72d      	b.n	8008fc0 <_svfprintf_r+0xc0>
 8009164:	f04f 0800 	mov.w	r8, #0
 8009168:	210a      	movs	r1, #10
 800916a:	e7f6      	b.n	800915a <_svfprintf_r+0x25a>
 800916c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8009170:	e7c9      	b.n	8009106 <_svfprintf_r+0x206>
 8009172:	2200      	movs	r2, #0
 8009174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009176:	920e      	str	r2, [sp, #56]	@ 0x38
 8009178:	210a      	movs	r1, #10
 800917a:	9a06      	ldr	r2, [sp, #24]
 800917c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800917e:	3a30      	subs	r2, #48	@ 0x30
 8009180:	fb01 2200 	mla	r2, r1, r0, r2
 8009184:	920e      	str	r2, [sp, #56]	@ 0x38
 8009186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800918a:	9206      	str	r2, [sp, #24]
 800918c:	3a30      	subs	r2, #48	@ 0x30
 800918e:	2a09      	cmp	r2, #9
 8009190:	d9f3      	bls.n	800917a <_svfprintf_r+0x27a>
 8009192:	e715      	b.n	8008fc0 <_svfprintf_r+0xc0>
 8009194:	f045 0508 	orr.w	r5, r5, #8
 8009198:	e7b5      	b.n	8009106 <_svfprintf_r+0x206>
 800919a:	bf00      	nop
 800919c:	f3af 8000 	nop.w
	...
 80091a8:	0800fa75 	.word	0x0800fa75
 80091ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b68      	cmp	r3, #104	@ 0x68
 80091b2:	bf01      	itttt	eq
 80091b4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 80091b6:	3301      	addeq	r3, #1
 80091b8:	930c      	streq	r3, [sp, #48]	@ 0x30
 80091ba:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80091be:	bf18      	it	ne
 80091c0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80091c4:	e79f      	b.n	8009106 <_svfprintf_r+0x206>
 80091c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b6c      	cmp	r3, #108	@ 0x6c
 80091cc:	d105      	bne.n	80091da <_svfprintf_r+0x2da>
 80091ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091d0:	3301      	adds	r3, #1
 80091d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80091d4:	f045 0520 	orr.w	r5, r5, #32
 80091d8:	e795      	b.n	8009106 <_svfprintf_r+0x206>
 80091da:	f045 0510 	orr.w	r5, r5, #16
 80091de:	e792      	b.n	8009106 <_svfprintf_r+0x206>
 80091e0:	4632      	mov	r2, r6
 80091e2:	f852 3b04 	ldr.w	r3, [r2], #4
 80091e6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80091ea:	2300      	movs	r3, #0
 80091ec:	9207      	str	r2, [sp, #28]
 80091ee:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80091f2:	469a      	mov	sl, r3
 80091f4:	f04f 0801 	mov.w	r8, #1
 80091f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80091fa:	461f      	mov	r7, r3
 80091fc:	9308      	str	r3, [sp, #32]
 80091fe:	461e      	mov	r6, r3
 8009200:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8009204:	e1d2      	b.n	80095ac <_svfprintf_r+0x6ac>
 8009206:	f045 0510 	orr.w	r5, r5, #16
 800920a:	06af      	lsls	r7, r5, #26
 800920c:	d512      	bpl.n	8009234 <_svfprintf_r+0x334>
 800920e:	3607      	adds	r6, #7
 8009210:	f026 0307 	bic.w	r3, r6, #7
 8009214:	461a      	mov	r2, r3
 8009216:	685f      	ldr	r7, [r3, #4]
 8009218:	f852 6b08 	ldr.w	r6, [r2], #8
 800921c:	9207      	str	r2, [sp, #28]
 800921e:	2f00      	cmp	r7, #0
 8009220:	da06      	bge.n	8009230 <_svfprintf_r+0x330>
 8009222:	4276      	negs	r6, r6
 8009224:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8009228:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800922c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009230:	2301      	movs	r3, #1
 8009232:	e37d      	b.n	8009930 <_svfprintf_r+0xa30>
 8009234:	4633      	mov	r3, r6
 8009236:	06ee      	lsls	r6, r5, #27
 8009238:	f853 7b04 	ldr.w	r7, [r3], #4
 800923c:	9307      	str	r3, [sp, #28]
 800923e:	d502      	bpl.n	8009246 <_svfprintf_r+0x346>
 8009240:	463e      	mov	r6, r7
 8009242:	17ff      	asrs	r7, r7, #31
 8009244:	e7eb      	b.n	800921e <_svfprintf_r+0x31e>
 8009246:	0668      	lsls	r0, r5, #25
 8009248:	d503      	bpl.n	8009252 <_svfprintf_r+0x352>
 800924a:	b23e      	sxth	r6, r7
 800924c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8009250:	e7e5      	b.n	800921e <_svfprintf_r+0x31e>
 8009252:	05a9      	lsls	r1, r5, #22
 8009254:	d5f4      	bpl.n	8009240 <_svfprintf_r+0x340>
 8009256:	b27e      	sxtb	r6, r7
 8009258:	f347 17c0 	sbfx	r7, r7, #7, #1
 800925c:	e7df      	b.n	800921e <_svfprintf_r+0x31e>
 800925e:	3607      	adds	r6, #7
 8009260:	f026 0307 	bic.w	r3, r6, #7
 8009264:	ecb3 7b02 	vldmia	r3!, {d7}
 8009268:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009270:	931a      	str	r3, [sp, #104]	@ 0x68
 8009272:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009278:	931b      	str	r3, [sp, #108]	@ 0x6c
 800927a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800927e:	4b81      	ldr	r3, [pc, #516]	@ (8009484 <_svfprintf_r+0x584>)
 8009280:	f04f 32ff 	mov.w	r2, #4294967295
 8009284:	f7f7 fc82 	bl	8000b8c <__aeabi_dcmpun>
 8009288:	bb10      	cbnz	r0, 80092d0 <_svfprintf_r+0x3d0>
 800928a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800928e:	4b7d      	ldr	r3, [pc, #500]	@ (8009484 <_svfprintf_r+0x584>)
 8009290:	f04f 32ff 	mov.w	r2, #4294967295
 8009294:	f7f7 fc5c 	bl	8000b50 <__aeabi_dcmple>
 8009298:	b9d0      	cbnz	r0, 80092d0 <_svfprintf_r+0x3d0>
 800929a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800929e:	2200      	movs	r2, #0
 80092a0:	2300      	movs	r3, #0
 80092a2:	f7f7 fc4b 	bl	8000b3c <__aeabi_dcmplt>
 80092a6:	b110      	cbz	r0, 80092ae <_svfprintf_r+0x3ae>
 80092a8:	232d      	movs	r3, #45	@ 0x2d
 80092aa:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80092ae:	4a76      	ldr	r2, [pc, #472]	@ (8009488 <_svfprintf_r+0x588>)
 80092b0:	4b76      	ldr	r3, [pc, #472]	@ (800948c <_svfprintf_r+0x58c>)
 80092b2:	9906      	ldr	r1, [sp, #24]
 80092b4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80092b8:	2947      	cmp	r1, #71	@ 0x47
 80092ba:	bfd4      	ite	le
 80092bc:	4691      	movle	r9, r2
 80092be:	4699      	movgt	r9, r3
 80092c0:	f04f 0a00 	mov.w	sl, #0
 80092c4:	f04f 0803 	mov.w	r8, #3
 80092c8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80092cc:	f000 bfec 	b.w	800a2a8 <_svfprintf_r+0x13a8>
 80092d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80092d4:	4610      	mov	r0, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	f7f7 fc58 	bl	8000b8c <__aeabi_dcmpun>
 80092dc:	4682      	mov	sl, r0
 80092de:	b140      	cbz	r0, 80092f2 <_svfprintf_r+0x3f2>
 80092e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092e2:	4a6b      	ldr	r2, [pc, #428]	@ (8009490 <_svfprintf_r+0x590>)
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfbc      	itt	lt
 80092e8:	232d      	movlt	r3, #45	@ 0x2d
 80092ea:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80092ee:	4b69      	ldr	r3, [pc, #420]	@ (8009494 <_svfprintf_r+0x594>)
 80092f0:	e7df      	b.n	80092b2 <_svfprintf_r+0x3b2>
 80092f2:	9b06      	ldr	r3, [sp, #24]
 80092f4:	2b61      	cmp	r3, #97	@ 0x61
 80092f6:	d025      	beq.n	8009344 <_svfprintf_r+0x444>
 80092f8:	2b41      	cmp	r3, #65	@ 0x41
 80092fa:	d125      	bne.n	8009348 <_svfprintf_r+0x448>
 80092fc:	2358      	movs	r3, #88	@ 0x58
 80092fe:	2230      	movs	r2, #48	@ 0x30
 8009300:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8009304:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8009308:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800930c:	f045 0502 	orr.w	r5, r5, #2
 8009310:	f340 80a5 	ble.w	800945e <_svfprintf_r+0x55e>
 8009314:	9803      	ldr	r0, [sp, #12]
 8009316:	f108 0101 	add.w	r1, r8, #1
 800931a:	f7ff fa01 	bl	8008720 <_malloc_r>
 800931e:	4681      	mov	r9, r0
 8009320:	2800      	cmp	r0, #0
 8009322:	f040 80a1 	bne.w	8009468 <_svfprintf_r+0x568>
 8009326:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800932a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800932e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8009332:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009336:	065b      	lsls	r3, r3, #25
 8009338:	f53f ae04 	bmi.w	8008f44 <_svfprintf_r+0x44>
 800933c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800933e:	b053      	add	sp, #332	@ 0x14c
 8009340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009344:	2378      	movs	r3, #120	@ 0x78
 8009346:	e7da      	b.n	80092fe <_svfprintf_r+0x3fe>
 8009348:	f1b8 3fff 	cmp.w	r8, #4294967295
 800934c:	f000 808e 	beq.w	800946c <_svfprintf_r+0x56c>
 8009350:	9b06      	ldr	r3, [sp, #24]
 8009352:	f023 0320 	bic.w	r3, r3, #32
 8009356:	2b47      	cmp	r3, #71	@ 0x47
 8009358:	d105      	bne.n	8009366 <_svfprintf_r+0x466>
 800935a:	f1b8 0f00 	cmp.w	r8, #0
 800935e:	d102      	bne.n	8009366 <_svfprintf_r+0x466>
 8009360:	46c2      	mov	sl, r8
 8009362:	f04f 0801 	mov.w	r8, #1
 8009366:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800936a:	9311      	str	r3, [sp, #68]	@ 0x44
 800936c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800936e:	2b00      	cmp	r3, #0
 8009370:	da7f      	bge.n	8009472 <_svfprintf_r+0x572>
 8009372:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009374:	9314      	str	r3, [sp, #80]	@ 0x50
 8009376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009378:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800937c:	9315      	str	r3, [sp, #84]	@ 0x54
 800937e:	232d      	movs	r3, #45	@ 0x2d
 8009380:	931c      	str	r3, [sp, #112]	@ 0x70
 8009382:	9b06      	ldr	r3, [sp, #24]
 8009384:	f023 0320 	bic.w	r3, r3, #32
 8009388:	2b41      	cmp	r3, #65	@ 0x41
 800938a:	9308      	str	r3, [sp, #32]
 800938c:	f040 81e6 	bne.w	800975c <_svfprintf_r+0x85c>
 8009390:	a820      	add	r0, sp, #128	@ 0x80
 8009392:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8009396:	f002 fa9b 	bl	800b8d0 <frexp>
 800939a:	2200      	movs	r2, #0
 800939c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80093a0:	ec51 0b10 	vmov	r0, r1, d0
 80093a4:	f7f7 f958 	bl	8000658 <__aeabi_dmul>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093b0:	2200      	movs	r2, #0
 80093b2:	2300      	movs	r3, #0
 80093b4:	f7f7 fbb8 	bl	8000b28 <__aeabi_dcmpeq>
 80093b8:	b108      	cbz	r0, 80093be <_svfprintf_r+0x4be>
 80093ba:	2301      	movs	r3, #1
 80093bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80093be:	4a36      	ldr	r2, [pc, #216]	@ (8009498 <_svfprintf_r+0x598>)
 80093c0:	4b36      	ldr	r3, [pc, #216]	@ (800949c <_svfprintf_r+0x59c>)
 80093c2:	9906      	ldr	r1, [sp, #24]
 80093c4:	2961      	cmp	r1, #97	@ 0x61
 80093c6:	bf18      	it	ne
 80093c8:	461a      	movne	r2, r3
 80093ca:	9210      	str	r2, [sp, #64]	@ 0x40
 80093cc:	f108 37ff 	add.w	r7, r8, #4294967295
 80093d0:	464e      	mov	r6, r9
 80093d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093d6:	4b32      	ldr	r3, [pc, #200]	@ (80094a0 <_svfprintf_r+0x5a0>)
 80093d8:	2200      	movs	r2, #0
 80093da:	f7f7 f93d 	bl	8000658 <__aeabi_dmul>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093e6:	f7f7 fbe7 	bl	8000bb8 <__aeabi_d2iz>
 80093ea:	9013      	str	r0, [sp, #76]	@ 0x4c
 80093ec:	f7f7 f8ca 	bl	8000584 <__aeabi_i2d>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093f8:	f7f6 ff76 	bl	80002e8 <__aeabi_dsub>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009404:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009406:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009408:	5c9b      	ldrb	r3, [r3, r2]
 800940a:	f806 3b01 	strb.w	r3, [r6], #1
 800940e:	1c7a      	adds	r2, r7, #1
 8009410:	d006      	beq.n	8009420 <_svfprintf_r+0x520>
 8009412:	1e7b      	subs	r3, r7, #1
 8009414:	931d      	str	r3, [sp, #116]	@ 0x74
 8009416:	2200      	movs	r2, #0
 8009418:	2300      	movs	r3, #0
 800941a:	f7f7 fb85 	bl	8000b28 <__aeabi_dcmpeq>
 800941e:	b370      	cbz	r0, 800947e <_svfprintf_r+0x57e>
 8009420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009424:	4b1f      	ldr	r3, [pc, #124]	@ (80094a4 <_svfprintf_r+0x5a4>)
 8009426:	2200      	movs	r2, #0
 8009428:	f7f7 fba6 	bl	8000b78 <__aeabi_dcmpgt>
 800942c:	2800      	cmp	r0, #0
 800942e:	d13b      	bne.n	80094a8 <_svfprintf_r+0x5a8>
 8009430:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009434:	4b1b      	ldr	r3, [pc, #108]	@ (80094a4 <_svfprintf_r+0x5a4>)
 8009436:	2200      	movs	r2, #0
 8009438:	f7f7 fb76 	bl	8000b28 <__aeabi_dcmpeq>
 800943c:	b110      	cbz	r0, 8009444 <_svfprintf_r+0x544>
 800943e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009440:	07db      	lsls	r3, r3, #31
 8009442:	d431      	bmi.n	80094a8 <_svfprintf_r+0x5a8>
 8009444:	4633      	mov	r3, r6
 8009446:	19f1      	adds	r1, r6, r7
 8009448:	2030      	movs	r0, #48	@ 0x30
 800944a:	1aca      	subs	r2, r1, r3
 800944c:	2a00      	cmp	r2, #0
 800944e:	f280 8182 	bge.w	8009756 <_svfprintf_r+0x856>
 8009452:	1c7b      	adds	r3, r7, #1
 8009454:	3701      	adds	r7, #1
 8009456:	bfb8      	it	lt
 8009458:	2300      	movlt	r3, #0
 800945a:	441e      	add	r6, r3
 800945c:	e038      	b.n	80094d0 <_svfprintf_r+0x5d0>
 800945e:	f04f 0a00 	mov.w	sl, #0
 8009462:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8009466:	e77e      	b.n	8009366 <_svfprintf_r+0x466>
 8009468:	4682      	mov	sl, r0
 800946a:	e77c      	b.n	8009366 <_svfprintf_r+0x466>
 800946c:	f04f 0806 	mov.w	r8, #6
 8009470:	e779      	b.n	8009366 <_svfprintf_r+0x466>
 8009472:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8009476:	2300      	movs	r3, #0
 8009478:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800947c:	e780      	b.n	8009380 <_svfprintf_r+0x480>
 800947e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8009480:	e7a7      	b.n	80093d2 <_svfprintf_r+0x4d2>
 8009482:	bf00      	nop
 8009484:	7fefffff 	.word	0x7fefffff
 8009488:	0800faa6 	.word	0x0800faa6
 800948c:	0800faaa 	.word	0x0800faaa
 8009490:	0800faae 	.word	0x0800faae
 8009494:	0800fab2 	.word	0x0800fab2
 8009498:	0800fa75 	.word	0x0800fa75
 800949c:	0800fa64 	.word	0x0800fa64
 80094a0:	40300000 	.word	0x40300000
 80094a4:	3fe00000 	.word	0x3fe00000
 80094a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094aa:	9624      	str	r6, [sp, #144]	@ 0x90
 80094ac:	7bd9      	ldrb	r1, [r3, #15]
 80094ae:	2030      	movs	r0, #48	@ 0x30
 80094b0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094b2:	1e53      	subs	r3, r2, #1
 80094b4:	9324      	str	r3, [sp, #144]	@ 0x90
 80094b6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80094ba:	428b      	cmp	r3, r1
 80094bc:	f000 8148 	beq.w	8009750 <_svfprintf_r+0x850>
 80094c0:	2b39      	cmp	r3, #57	@ 0x39
 80094c2:	bf0b      	itete	eq
 80094c4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80094c6:	3301      	addne	r3, #1
 80094c8:	7a9b      	ldrbeq	r3, [r3, #10]
 80094ca:	b2db      	uxtbne	r3, r3
 80094cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80094d0:	eba6 0309 	sub.w	r3, r6, r9
 80094d4:	9304      	str	r3, [sp, #16]
 80094d6:	9b08      	ldr	r3, [sp, #32]
 80094d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80094da:	2b47      	cmp	r3, #71	@ 0x47
 80094dc:	f040 8187 	bne.w	80097ee <_svfprintf_r+0x8ee>
 80094e0:	1cf1      	adds	r1, r6, #3
 80094e2:	db02      	blt.n	80094ea <_svfprintf_r+0x5ea>
 80094e4:	4546      	cmp	r6, r8
 80094e6:	f340 81a5 	ble.w	8009834 <_svfprintf_r+0x934>
 80094ea:	9b06      	ldr	r3, [sp, #24]
 80094ec:	3b02      	subs	r3, #2
 80094ee:	9306      	str	r3, [sp, #24]
 80094f0:	9906      	ldr	r1, [sp, #24]
 80094f2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80094f6:	f021 0120 	bic.w	r1, r1, #32
 80094fa:	2941      	cmp	r1, #65	@ 0x41
 80094fc:	bf08      	it	eq
 80094fe:	320f      	addeq	r2, #15
 8009500:	f106 33ff 	add.w	r3, r6, #4294967295
 8009504:	bf06      	itte	eq
 8009506:	b2d2      	uxtbeq	r2, r2
 8009508:	2101      	moveq	r1, #1
 800950a:	2100      	movne	r1, #0
 800950c:	2b00      	cmp	r3, #0
 800950e:	9320      	str	r3, [sp, #128]	@ 0x80
 8009510:	bfb8      	it	lt
 8009512:	f1c6 0301 	rsblt	r3, r6, #1
 8009516:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800951a:	bfb4      	ite	lt
 800951c:	222d      	movlt	r2, #45	@ 0x2d
 800951e:	222b      	movge	r2, #43	@ 0x2b
 8009520:	2b09      	cmp	r3, #9
 8009522:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8009526:	f340 8178 	ble.w	800981a <_svfprintf_r+0x91a>
 800952a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800952e:	270a      	movs	r7, #10
 8009530:	4602      	mov	r2, r0
 8009532:	fbb3 f6f7 	udiv	r6, r3, r7
 8009536:	fb07 3116 	mls	r1, r7, r6, r3
 800953a:	3130      	adds	r1, #48	@ 0x30
 800953c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009540:	4619      	mov	r1, r3
 8009542:	2963      	cmp	r1, #99	@ 0x63
 8009544:	f100 30ff 	add.w	r0, r0, #4294967295
 8009548:	4633      	mov	r3, r6
 800954a:	dcf1      	bgt.n	8009530 <_svfprintf_r+0x630>
 800954c:	3330      	adds	r3, #48	@ 0x30
 800954e:	1e91      	subs	r1, r2, #2
 8009550:	f800 3c01 	strb.w	r3, [r0, #-1]
 8009554:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8009558:	460b      	mov	r3, r1
 800955a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800955e:	4283      	cmp	r3, r0
 8009560:	f0c0 8156 	bcc.w	8009810 <_svfprintf_r+0x910>
 8009564:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8009568:	1a9b      	subs	r3, r3, r2
 800956a:	4281      	cmp	r1, r0
 800956c:	bf88      	it	hi
 800956e:	2300      	movhi	r3, #0
 8009570:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8009574:	441a      	add	r2, r3
 8009576:	ab22      	add	r3, sp, #136	@ 0x88
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	9a04      	ldr	r2, [sp, #16]
 800957c:	9318      	str	r3, [sp, #96]	@ 0x60
 800957e:	2a01      	cmp	r2, #1
 8009580:	eb03 0802 	add.w	r8, r3, r2
 8009584:	dc01      	bgt.n	800958a <_svfprintf_r+0x68a>
 8009586:	07ea      	lsls	r2, r5, #31
 8009588:	d501      	bpl.n	800958e <_svfprintf_r+0x68e>
 800958a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800958c:	4498      	add	r8, r3
 800958e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8009592:	2700      	movs	r7, #0
 8009594:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8009598:	9311      	str	r3, [sp, #68]	@ 0x44
 800959a:	9708      	str	r7, [sp, #32]
 800959c:	463e      	mov	r6, r7
 800959e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f040 818f 	bne.w	80098c4 <_svfprintf_r+0x9c4>
 80095a6:	2300      	movs	r3, #0
 80095a8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80095aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80095ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095ae:	4543      	cmp	r3, r8
 80095b0:	bfb8      	it	lt
 80095b2:	4643      	movlt	r3, r8
 80095b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80095b6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80095ba:	b113      	cbz	r3, 80095c2 <_svfprintf_r+0x6c2>
 80095bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095be:	3301      	adds	r3, #1
 80095c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80095c2:	f015 0302 	ands.w	r3, r5, #2
 80095c6:	931c      	str	r3, [sp, #112]	@ 0x70
 80095c8:	bf1e      	ittt	ne
 80095ca:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80095cc:	3302      	addne	r3, #2
 80095ce:	9311      	strne	r3, [sp, #68]	@ 0x44
 80095d0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80095d4:	931d      	str	r3, [sp, #116]	@ 0x74
 80095d6:	d122      	bne.n	800961e <_svfprintf_r+0x71e>
 80095d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80095dc:	1a9b      	subs	r3, r3, r2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095e2:	dd1c      	ble.n	800961e <_svfprintf_r+0x71e>
 80095e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80095e6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80095ea:	2810      	cmp	r0, #16
 80095ec:	489e      	ldr	r0, [pc, #632]	@ (8009868 <_svfprintf_r+0x968>)
 80095ee:	6020      	str	r0, [r4, #0]
 80095f0:	f102 0201 	add.w	r2, r2, #1
 80095f4:	f104 0108 	add.w	r1, r4, #8
 80095f8:	f300 8298 	bgt.w	8009b2c <_svfprintf_r+0xc2c>
 80095fc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80095fe:	6060      	str	r0, [r4, #4]
 8009600:	4403      	add	r3, r0
 8009602:	2a07      	cmp	r2, #7
 8009604:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009608:	f340 82a5 	ble.w	8009b56 <_svfprintf_r+0xc56>
 800960c:	9803      	ldr	r0, [sp, #12]
 800960e:	aa26      	add	r2, sp, #152	@ 0x98
 8009610:	4659      	mov	r1, fp
 8009612:	f7fe f875 	bl	8007700 <__ssprint_r>
 8009616:	2800      	cmp	r0, #0
 8009618:	f040 85ed 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 800961c:	ac29      	add	r4, sp, #164	@ 0xa4
 800961e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8009622:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009624:	b16a      	cbz	r2, 8009642 <_svfprintf_r+0x742>
 8009626:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800962a:	6022      	str	r2, [r4, #0]
 800962c:	2201      	movs	r2, #1
 800962e:	4413      	add	r3, r2
 8009630:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009632:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009634:	6062      	str	r2, [r4, #4]
 8009636:	4413      	add	r3, r2
 8009638:	2b07      	cmp	r3, #7
 800963a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800963c:	f300 828d 	bgt.w	8009b5a <_svfprintf_r+0xc5a>
 8009640:	3408      	adds	r4, #8
 8009642:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009644:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009646:	b162      	cbz	r2, 8009662 <_svfprintf_r+0x762>
 8009648:	aa1f      	add	r2, sp, #124	@ 0x7c
 800964a:	6022      	str	r2, [r4, #0]
 800964c:	2202      	movs	r2, #2
 800964e:	4413      	add	r3, r2
 8009650:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009652:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009654:	6062      	str	r2, [r4, #4]
 8009656:	3301      	adds	r3, #1
 8009658:	2b07      	cmp	r3, #7
 800965a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800965c:	f300 8287 	bgt.w	8009b6e <_svfprintf_r+0xc6e>
 8009660:	3408      	adds	r4, #8
 8009662:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009664:	2b80      	cmp	r3, #128	@ 0x80
 8009666:	d122      	bne.n	80096ae <_svfprintf_r+0x7ae>
 8009668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800966a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	2b00      	cmp	r3, #0
 8009670:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009672:	dd1c      	ble.n	80096ae <_svfprintf_r+0x7ae>
 8009674:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8009676:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800967a:	2810      	cmp	r0, #16
 800967c:	487b      	ldr	r0, [pc, #492]	@ (800986c <_svfprintf_r+0x96c>)
 800967e:	6020      	str	r0, [r4, #0]
 8009680:	f102 0201 	add.w	r2, r2, #1
 8009684:	f104 0108 	add.w	r1, r4, #8
 8009688:	f300 827b 	bgt.w	8009b82 <_svfprintf_r+0xc82>
 800968c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800968e:	6060      	str	r0, [r4, #4]
 8009690:	4403      	add	r3, r0
 8009692:	2a07      	cmp	r2, #7
 8009694:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009698:	f340 8288 	ble.w	8009bac <_svfprintf_r+0xcac>
 800969c:	9803      	ldr	r0, [sp, #12]
 800969e:	aa26      	add	r2, sp, #152	@ 0x98
 80096a0:	4659      	mov	r1, fp
 80096a2:	f7fe f82d 	bl	8007700 <__ssprint_r>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f040 85a5 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 80096ac:	ac29      	add	r4, sp, #164	@ 0xa4
 80096ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096b0:	eba3 0308 	sub.w	r3, r3, r8
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80096b8:	dd1c      	ble.n	80096f4 <_svfprintf_r+0x7f4>
 80096ba:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80096bc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80096c0:	2810      	cmp	r0, #16
 80096c2:	486a      	ldr	r0, [pc, #424]	@ (800986c <_svfprintf_r+0x96c>)
 80096c4:	6020      	str	r0, [r4, #0]
 80096c6:	f102 0201 	add.w	r2, r2, #1
 80096ca:	f104 0108 	add.w	r1, r4, #8
 80096ce:	f300 826f 	bgt.w	8009bb0 <_svfprintf_r+0xcb0>
 80096d2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80096d4:	6060      	str	r0, [r4, #4]
 80096d6:	4403      	add	r3, r0
 80096d8:	2a07      	cmp	r2, #7
 80096da:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80096de:	f340 827c 	ble.w	8009bda <_svfprintf_r+0xcda>
 80096e2:	9803      	ldr	r0, [sp, #12]
 80096e4:	aa26      	add	r2, sp, #152	@ 0x98
 80096e6:	4659      	mov	r1, fp
 80096e8:	f7fe f80a 	bl	8007700 <__ssprint_r>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f040 8582 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 80096f2:	ac29      	add	r4, sp, #164	@ 0xa4
 80096f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80096f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80096f8:	05ea      	lsls	r2, r5, #23
 80096fa:	f100 8275 	bmi.w	8009be8 <_svfprintf_r+0xce8>
 80096fe:	4443      	add	r3, r8
 8009700:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009702:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009704:	3301      	adds	r3, #1
 8009706:	2b07      	cmp	r3, #7
 8009708:	e9c4 9800 	strd	r9, r8, [r4]
 800970c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800970e:	f300 82b1 	bgt.w	8009c74 <_svfprintf_r+0xd74>
 8009712:	3408      	adds	r4, #8
 8009714:	076a      	lsls	r2, r5, #29
 8009716:	f100 8550 	bmi.w	800a1ba <_svfprintf_r+0x12ba>
 800971a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800971e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009720:	428a      	cmp	r2, r1
 8009722:	bfac      	ite	ge
 8009724:	189b      	addge	r3, r3, r2
 8009726:	185b      	addlt	r3, r3, r1
 8009728:	930f      	str	r3, [sp, #60]	@ 0x3c
 800972a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800972c:	b13b      	cbz	r3, 800973e <_svfprintf_r+0x83e>
 800972e:	9803      	ldr	r0, [sp, #12]
 8009730:	aa26      	add	r2, sp, #152	@ 0x98
 8009732:	4659      	mov	r1, fp
 8009734:	f7fd ffe4 	bl	8007700 <__ssprint_r>
 8009738:	2800      	cmp	r0, #0
 800973a:	f040 855c 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 800973e:	2300      	movs	r3, #0
 8009740:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009742:	f1ba 0f00 	cmp.w	sl, #0
 8009746:	f040 8572 	bne.w	800a22e <_svfprintf_r+0x132e>
 800974a:	9e07      	ldr	r6, [sp, #28]
 800974c:	ac29      	add	r4, sp, #164	@ 0xa4
 800974e:	e0c6      	b.n	80098de <_svfprintf_r+0x9de>
 8009750:	f802 0c01 	strb.w	r0, [r2, #-1]
 8009754:	e6ac      	b.n	80094b0 <_svfprintf_r+0x5b0>
 8009756:	f803 0b01 	strb.w	r0, [r3], #1
 800975a:	e676      	b.n	800944a <_svfprintf_r+0x54a>
 800975c:	9b08      	ldr	r3, [sp, #32]
 800975e:	2b46      	cmp	r3, #70	@ 0x46
 8009760:	d005      	beq.n	800976e <_svfprintf_r+0x86e>
 8009762:	2b45      	cmp	r3, #69	@ 0x45
 8009764:	d11a      	bne.n	800979c <_svfprintf_r+0x89c>
 8009766:	f108 0601 	add.w	r6, r8, #1
 800976a:	2102      	movs	r1, #2
 800976c:	e001      	b.n	8009772 <_svfprintf_r+0x872>
 800976e:	4646      	mov	r6, r8
 8009770:	2103      	movs	r1, #3
 8009772:	ab24      	add	r3, sp, #144	@ 0x90
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	ab21      	add	r3, sp, #132	@ 0x84
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800977e:	ab20      	add	r3, sp, #128	@ 0x80
 8009780:	9803      	ldr	r0, [sp, #12]
 8009782:	4632      	mov	r2, r6
 8009784:	f002 f9a4 	bl	800bad0 <_dtoa_r>
 8009788:	9b08      	ldr	r3, [sp, #32]
 800978a:	2b47      	cmp	r3, #71	@ 0x47
 800978c:	4681      	mov	r9, r0
 800978e:	d119      	bne.n	80097c4 <_svfprintf_r+0x8c4>
 8009790:	07e8      	lsls	r0, r5, #31
 8009792:	d405      	bmi.n	80097a0 <_svfprintf_r+0x8a0>
 8009794:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009796:	eba3 0309 	sub.w	r3, r3, r9
 800979a:	e69b      	b.n	80094d4 <_svfprintf_r+0x5d4>
 800979c:	4646      	mov	r6, r8
 800979e:	e7e4      	b.n	800976a <_svfprintf_r+0x86a>
 80097a0:	eb09 0706 	add.w	r7, r9, r6
 80097a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80097a8:	2200      	movs	r2, #0
 80097aa:	2300      	movs	r3, #0
 80097ac:	f7f7 f9bc 	bl	8000b28 <__aeabi_dcmpeq>
 80097b0:	b100      	cbz	r0, 80097b4 <_svfprintf_r+0x8b4>
 80097b2:	9724      	str	r7, [sp, #144]	@ 0x90
 80097b4:	2230      	movs	r2, #48	@ 0x30
 80097b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80097b8:	429f      	cmp	r7, r3
 80097ba:	d9eb      	bls.n	8009794 <_svfprintf_r+0x894>
 80097bc:	1c59      	adds	r1, r3, #1
 80097be:	9124      	str	r1, [sp, #144]	@ 0x90
 80097c0:	701a      	strb	r2, [r3, #0]
 80097c2:	e7f8      	b.n	80097b6 <_svfprintf_r+0x8b6>
 80097c4:	9b08      	ldr	r3, [sp, #32]
 80097c6:	2b46      	cmp	r3, #70	@ 0x46
 80097c8:	eb00 0706 	add.w	r7, r0, r6
 80097cc:	d1ea      	bne.n	80097a4 <_svfprintf_r+0x8a4>
 80097ce:	7803      	ldrb	r3, [r0, #0]
 80097d0:	2b30      	cmp	r3, #48	@ 0x30
 80097d2:	d109      	bne.n	80097e8 <_svfprintf_r+0x8e8>
 80097d4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80097d8:	2200      	movs	r2, #0
 80097da:	2300      	movs	r3, #0
 80097dc:	f7f7 f9a4 	bl	8000b28 <__aeabi_dcmpeq>
 80097e0:	b910      	cbnz	r0, 80097e8 <_svfprintf_r+0x8e8>
 80097e2:	f1c6 0601 	rsb	r6, r6, #1
 80097e6:	9620      	str	r6, [sp, #128]	@ 0x80
 80097e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80097ea:	441f      	add	r7, r3
 80097ec:	e7da      	b.n	80097a4 <_svfprintf_r+0x8a4>
 80097ee:	9b08      	ldr	r3, [sp, #32]
 80097f0:	2b46      	cmp	r3, #70	@ 0x46
 80097f2:	f47f ae7d 	bne.w	80094f0 <_svfprintf_r+0x5f0>
 80097f6:	f005 0301 	and.w	r3, r5, #1
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	ea43 0308 	orr.w	r3, r3, r8
 8009800:	dd25      	ble.n	800984e <_svfprintf_r+0x94e>
 8009802:	b37b      	cbz	r3, 8009864 <_svfprintf_r+0x964>
 8009804:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009806:	18f3      	adds	r3, r6, r3
 8009808:	4498      	add	r8, r3
 800980a:	2366      	movs	r3, #102	@ 0x66
 800980c:	9306      	str	r3, [sp, #24]
 800980e:	e033      	b.n	8009878 <_svfprintf_r+0x978>
 8009810:	f813 7b01 	ldrb.w	r7, [r3], #1
 8009814:	f806 7f01 	strb.w	r7, [r6, #1]!
 8009818:	e6a1      	b.n	800955e <_svfprintf_r+0x65e>
 800981a:	b941      	cbnz	r1, 800982e <_svfprintf_r+0x92e>
 800981c:	2230      	movs	r2, #48	@ 0x30
 800981e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8009822:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8009826:	3330      	adds	r3, #48	@ 0x30
 8009828:	f802 3b01 	strb.w	r3, [r2], #1
 800982c:	e6a3      	b.n	8009576 <_svfprintf_r+0x676>
 800982e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8009832:	e7f8      	b.n	8009826 <_svfprintf_r+0x926>
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	429e      	cmp	r6, r3
 8009838:	da0d      	bge.n	8009856 <_svfprintf_r+0x956>
 800983a:	9b04      	ldr	r3, [sp, #16]
 800983c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800983e:	2e00      	cmp	r6, #0
 8009840:	eb03 0802 	add.w	r8, r3, r2
 8009844:	dc0c      	bgt.n	8009860 <_svfprintf_r+0x960>
 8009846:	f1c6 0301 	rsb	r3, r6, #1
 800984a:	4498      	add	r8, r3
 800984c:	e008      	b.n	8009860 <_svfprintf_r+0x960>
 800984e:	b17b      	cbz	r3, 8009870 <_svfprintf_r+0x970>
 8009850:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009852:	3301      	adds	r3, #1
 8009854:	e7d8      	b.n	8009808 <_svfprintf_r+0x908>
 8009856:	07eb      	lsls	r3, r5, #31
 8009858:	d521      	bpl.n	800989e <_svfprintf_r+0x99e>
 800985a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800985c:	eb06 0803 	add.w	r8, r6, r3
 8009860:	2367      	movs	r3, #103	@ 0x67
 8009862:	e7d3      	b.n	800980c <_svfprintf_r+0x90c>
 8009864:	46b0      	mov	r8, r6
 8009866:	e7d0      	b.n	800980a <_svfprintf_r+0x90a>
 8009868:	0800fac8 	.word	0x0800fac8
 800986c:	0800fab8 	.word	0x0800fab8
 8009870:	2366      	movs	r3, #102	@ 0x66
 8009872:	9306      	str	r3, [sp, #24]
 8009874:	f04f 0801 	mov.w	r8, #1
 8009878:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800987c:	9308      	str	r3, [sp, #32]
 800987e:	d01f      	beq.n	80098c0 <_svfprintf_r+0x9c0>
 8009880:	2700      	movs	r7, #0
 8009882:	2e00      	cmp	r6, #0
 8009884:	9708      	str	r7, [sp, #32]
 8009886:	f77f ae8a 	ble.w	800959e <_svfprintf_r+0x69e>
 800988a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2bff      	cmp	r3, #255	@ 0xff
 8009890:	d107      	bne.n	80098a2 <_svfprintf_r+0x9a2>
 8009892:	9b08      	ldr	r3, [sp, #32]
 8009894:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009896:	443b      	add	r3, r7
 8009898:	fb02 8803 	mla	r8, r2, r3, r8
 800989c:	e67f      	b.n	800959e <_svfprintf_r+0x69e>
 800989e:	46b0      	mov	r8, r6
 80098a0:	e7de      	b.n	8009860 <_svfprintf_r+0x960>
 80098a2:	42b3      	cmp	r3, r6
 80098a4:	daf5      	bge.n	8009892 <_svfprintf_r+0x992>
 80098a6:	1af6      	subs	r6, r6, r3
 80098a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	b133      	cbz	r3, 80098bc <_svfprintf_r+0x9bc>
 80098ae:	9b08      	ldr	r3, [sp, #32]
 80098b0:	3301      	adds	r3, #1
 80098b2:	9308      	str	r3, [sp, #32]
 80098b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b6:	3301      	adds	r3, #1
 80098b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ba:	e7e6      	b.n	800988a <_svfprintf_r+0x98a>
 80098bc:	3701      	adds	r7, #1
 80098be:	e7e4      	b.n	800988a <_svfprintf_r+0x98a>
 80098c0:	9f08      	ldr	r7, [sp, #32]
 80098c2:	e66c      	b.n	800959e <_svfprintf_r+0x69e>
 80098c4:	232d      	movs	r3, #45	@ 0x2d
 80098c6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80098ca:	e66c      	b.n	80095a6 <_svfprintf_r+0x6a6>
 80098cc:	06af      	lsls	r7, r5, #26
 80098ce:	d50a      	bpl.n	80098e6 <_svfprintf_r+0x9e6>
 80098d0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098d2:	6833      	ldr	r3, [r6, #0]
 80098d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098d6:	17d2      	asrs	r2, r2, #31
 80098d8:	e9c3 1200 	strd	r1, r2, [r3]
 80098dc:	3604      	adds	r6, #4
 80098de:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80098e2:	f7ff bb46 	b.w	8008f72 <_svfprintf_r+0x72>
 80098e6:	06e8      	lsls	r0, r5, #27
 80098e8:	d503      	bpl.n	80098f2 <_svfprintf_r+0x9f2>
 80098ea:	6833      	ldr	r3, [r6, #0]
 80098ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	e7f4      	b.n	80098dc <_svfprintf_r+0x9dc>
 80098f2:	0669      	lsls	r1, r5, #25
 80098f4:	d503      	bpl.n	80098fe <_svfprintf_r+0x9fe>
 80098f6:	6833      	ldr	r3, [r6, #0]
 80098f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098fa:	801a      	strh	r2, [r3, #0]
 80098fc:	e7ee      	b.n	80098dc <_svfprintf_r+0x9dc>
 80098fe:	05aa      	lsls	r2, r5, #22
 8009900:	d5f3      	bpl.n	80098ea <_svfprintf_r+0x9ea>
 8009902:	6833      	ldr	r3, [r6, #0]
 8009904:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009906:	701a      	strb	r2, [r3, #0]
 8009908:	e7e8      	b.n	80098dc <_svfprintf_r+0x9dc>
 800990a:	f045 0510 	orr.w	r5, r5, #16
 800990e:	f015 0320 	ands.w	r3, r5, #32
 8009912:	d020      	beq.n	8009956 <_svfprintf_r+0xa56>
 8009914:	3607      	adds	r6, #7
 8009916:	f026 0307 	bic.w	r3, r6, #7
 800991a:	461a      	mov	r2, r3
 800991c:	685f      	ldr	r7, [r3, #4]
 800991e:	f852 6b08 	ldr.w	r6, [r2], #8
 8009922:	9207      	str	r2, [sp, #28]
 8009924:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8009928:	2300      	movs	r3, #0
 800992a:	2200      	movs	r2, #0
 800992c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8009930:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009934:	f000 848c 	beq.w	800a250 <_svfprintf_r+0x1350>
 8009938:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800993c:	9208      	str	r2, [sp, #32]
 800993e:	ea56 0207 	orrs.w	r2, r6, r7
 8009942:	f040 848a 	bne.w	800a25a <_svfprintf_r+0x135a>
 8009946:	f1b8 0f00 	cmp.w	r8, #0
 800994a:	f000 80db 	beq.w	8009b04 <_svfprintf_r+0xc04>
 800994e:	2b01      	cmp	r3, #1
 8009950:	f040 8486 	bne.w	800a260 <_svfprintf_r+0x1360>
 8009954:	e083      	b.n	8009a5e <_svfprintf_r+0xb5e>
 8009956:	4632      	mov	r2, r6
 8009958:	f015 0710 	ands.w	r7, r5, #16
 800995c:	f852 6b04 	ldr.w	r6, [r2], #4
 8009960:	9207      	str	r2, [sp, #28]
 8009962:	d001      	beq.n	8009968 <_svfprintf_r+0xa68>
 8009964:	461f      	mov	r7, r3
 8009966:	e7dd      	b.n	8009924 <_svfprintf_r+0xa24>
 8009968:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800996c:	d001      	beq.n	8009972 <_svfprintf_r+0xa72>
 800996e:	b2b6      	uxth	r6, r6
 8009970:	e7d8      	b.n	8009924 <_svfprintf_r+0xa24>
 8009972:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8009976:	d0d5      	beq.n	8009924 <_svfprintf_r+0xa24>
 8009978:	b2f6      	uxtb	r6, r6
 800997a:	e7f3      	b.n	8009964 <_svfprintf_r+0xa64>
 800997c:	4633      	mov	r3, r6
 800997e:	2278      	movs	r2, #120	@ 0x78
 8009980:	f853 6b04 	ldr.w	r6, [r3], #4
 8009984:	9307      	str	r3, [sp, #28]
 8009986:	f647 0330 	movw	r3, #30768	@ 0x7830
 800998a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800998e:	4b94      	ldr	r3, [pc, #592]	@ (8009be0 <_svfprintf_r+0xce0>)
 8009990:	9319      	str	r3, [sp, #100]	@ 0x64
 8009992:	2700      	movs	r7, #0
 8009994:	f045 0502 	orr.w	r5, r5, #2
 8009998:	2302      	movs	r3, #2
 800999a:	9206      	str	r2, [sp, #24]
 800999c:	e7c5      	b.n	800992a <_svfprintf_r+0xa2a>
 800999e:	4633      	mov	r3, r6
 80099a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80099a4:	f853 9b04 	ldr.w	r9, [r3], #4
 80099a8:	9307      	str	r3, [sp, #28]
 80099aa:	f04f 0600 	mov.w	r6, #0
 80099ae:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 80099b2:	d00f      	beq.n	80099d4 <_svfprintf_r+0xad4>
 80099b4:	4642      	mov	r2, r8
 80099b6:	4631      	mov	r1, r6
 80099b8:	4648      	mov	r0, r9
 80099ba:	f7f6 fc39 	bl	8000230 <memchr>
 80099be:	4682      	mov	sl, r0
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f43f ac81 	beq.w	80092c8 <_svfprintf_r+0x3c8>
 80099c6:	eba0 0809 	sub.w	r8, r0, r9
 80099ca:	46b2      	mov	sl, r6
 80099cc:	9610      	str	r6, [sp, #64]	@ 0x40
 80099ce:	4637      	mov	r7, r6
 80099d0:	9608      	str	r6, [sp, #32]
 80099d2:	e5eb      	b.n	80095ac <_svfprintf_r+0x6ac>
 80099d4:	4648      	mov	r0, r9
 80099d6:	f7f6 fc7b 	bl	80002d0 <strlen>
 80099da:	46b2      	mov	sl, r6
 80099dc:	4680      	mov	r8, r0
 80099de:	e473      	b.n	80092c8 <_svfprintf_r+0x3c8>
 80099e0:	f045 0510 	orr.w	r5, r5, #16
 80099e4:	f015 0320 	ands.w	r3, r5, #32
 80099e8:	d009      	beq.n	80099fe <_svfprintf_r+0xafe>
 80099ea:	3607      	adds	r6, #7
 80099ec:	f026 0307 	bic.w	r3, r6, #7
 80099f0:	461a      	mov	r2, r3
 80099f2:	685f      	ldr	r7, [r3, #4]
 80099f4:	f852 6b08 	ldr.w	r6, [r2], #8
 80099f8:	9207      	str	r2, [sp, #28]
 80099fa:	2301      	movs	r3, #1
 80099fc:	e795      	b.n	800992a <_svfprintf_r+0xa2a>
 80099fe:	4632      	mov	r2, r6
 8009a00:	f015 0710 	ands.w	r7, r5, #16
 8009a04:	f852 6b04 	ldr.w	r6, [r2], #4
 8009a08:	9207      	str	r2, [sp, #28]
 8009a0a:	d001      	beq.n	8009a10 <_svfprintf_r+0xb10>
 8009a0c:	461f      	mov	r7, r3
 8009a0e:	e7f4      	b.n	80099fa <_svfprintf_r+0xafa>
 8009a10:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8009a14:	d001      	beq.n	8009a1a <_svfprintf_r+0xb1a>
 8009a16:	b2b6      	uxth	r6, r6
 8009a18:	e7ef      	b.n	80099fa <_svfprintf_r+0xafa>
 8009a1a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8009a1e:	d0ec      	beq.n	80099fa <_svfprintf_r+0xafa>
 8009a20:	b2f6      	uxtb	r6, r6
 8009a22:	e7f3      	b.n	8009a0c <_svfprintf_r+0xb0c>
 8009a24:	4b6f      	ldr	r3, [pc, #444]	@ (8009be4 <_svfprintf_r+0xce4>)
 8009a26:	f7ff bb39 	b.w	800909c <_svfprintf_r+0x19c>
 8009a2a:	4632      	mov	r2, r6
 8009a2c:	f015 0710 	ands.w	r7, r5, #16
 8009a30:	f852 6b04 	ldr.w	r6, [r2], #4
 8009a34:	9207      	str	r2, [sp, #28]
 8009a36:	d002      	beq.n	8009a3e <_svfprintf_r+0xb3e>
 8009a38:	461f      	mov	r7, r3
 8009a3a:	f7ff bb3c 	b.w	80090b6 <_svfprintf_r+0x1b6>
 8009a3e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8009a42:	d002      	beq.n	8009a4a <_svfprintf_r+0xb4a>
 8009a44:	b2b6      	uxth	r6, r6
 8009a46:	f7ff bb36 	b.w	80090b6 <_svfprintf_r+0x1b6>
 8009a4a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8009a4e:	f43f ab32 	beq.w	80090b6 <_svfprintf_r+0x1b6>
 8009a52:	b2f6      	uxtb	r6, r6
 8009a54:	e7f0      	b.n	8009a38 <_svfprintf_r+0xb38>
 8009a56:	2e0a      	cmp	r6, #10
 8009a58:	f177 0300 	sbcs.w	r3, r7, #0
 8009a5c:	d207      	bcs.n	8009a6e <_svfprintf_r+0xb6e>
 8009a5e:	3630      	adds	r6, #48	@ 0x30
 8009a60:	b2f6      	uxtb	r6, r6
 8009a62:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8009a66:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8009a6a:	f000 bc15 	b.w	800a298 <_svfprintf_r+0x1398>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	9b08      	ldr	r3, [sp, #32]
 8009a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a78:	ad52      	add	r5, sp, #328	@ 0x148
 8009a7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a7c:	220a      	movs	r2, #10
 8009a7e:	2300      	movs	r3, #0
 8009a80:	4630      	mov	r0, r6
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f7 f930 	bl	8000ce8 <__aeabi_uldivmod>
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	9011      	str	r0, [sp, #68]	@ 0x44
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	9304      	str	r3, [sp, #16]
 8009a90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a92:	3230      	adds	r2, #48	@ 0x30
 8009a94:	468a      	mov	sl, r1
 8009a96:	f105 39ff 	add.w	r9, r5, #4294967295
 8009a9a:	f805 2c01 	strb.w	r2, [r5, #-1]
 8009a9e:	b1d3      	cbz	r3, 8009ad6 <_svfprintf_r+0xbd6>
 8009aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aa2:	9a04      	ldr	r2, [sp, #16]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d115      	bne.n	8009ad6 <_svfprintf_r+0xbd6>
 8009aaa:	2aff      	cmp	r2, #255	@ 0xff
 8009aac:	d013      	beq.n	8009ad6 <_svfprintf_r+0xbd6>
 8009aae:	2e0a      	cmp	r6, #10
 8009ab0:	f177 0300 	sbcs.w	r3, r7, #0
 8009ab4:	d30f      	bcc.n	8009ad6 <_svfprintf_r+0xbd6>
 8009ab6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ab8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009aba:	eba9 0903 	sub.w	r9, r9, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	f7fe fc6e 	bl	80083a2 <strncpy>
 8009ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac8:	785b      	ldrb	r3, [r3, #1]
 8009aca:	b11b      	cbz	r3, 8009ad4 <_svfprintf_r+0xbd4>
 8009acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ace:	3301      	adds	r3, #1
 8009ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	2e0a      	cmp	r6, #10
 8009ad8:	f177 0700 	sbcs.w	r7, r7, #0
 8009adc:	f0c0 83dc 	bcc.w	800a298 <_svfprintf_r+0x1398>
 8009ae0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009ae2:	4657      	mov	r7, sl
 8009ae4:	464d      	mov	r5, r9
 8009ae6:	e7c9      	b.n	8009a7c <_svfprintf_r+0xb7c>
 8009ae8:	f006 030f 	and.w	r3, r6, #15
 8009aec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009aee:	0936      	lsrs	r6, r6, #4
 8009af0:	5cd3      	ldrb	r3, [r2, r3]
 8009af2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8009af6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8009afa:	093f      	lsrs	r7, r7, #4
 8009afc:	ea56 0307 	orrs.w	r3, r6, r7
 8009b00:	d1f2      	bne.n	8009ae8 <_svfprintf_r+0xbe8>
 8009b02:	e3c9      	b.n	800a298 <_svfprintf_r+0x1398>
 8009b04:	b91b      	cbnz	r3, 8009b0e <_svfprintf_r+0xc0e>
 8009b06:	07e9      	lsls	r1, r5, #31
 8009b08:	d501      	bpl.n	8009b0e <_svfprintf_r+0xc0e>
 8009b0a:	2630      	movs	r6, #48	@ 0x30
 8009b0c:	e7a9      	b.n	8009a62 <_svfprintf_r+0xb62>
 8009b0e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8009b12:	e3c1      	b.n	800a298 <_svfprintf_r+0x1398>
 8009b14:	9b06      	ldr	r3, [sp, #24]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 838f 	beq.w	800a23a <_svfprintf_r+0x133a>
 8009b1c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8009b20:	2300      	movs	r3, #0
 8009b22:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009b26:	9607      	str	r6, [sp, #28]
 8009b28:	f7ff bb63 	b.w	80091f2 <_svfprintf_r+0x2f2>
 8009b2c:	2010      	movs	r0, #16
 8009b2e:	4403      	add	r3, r0
 8009b30:	2a07      	cmp	r2, #7
 8009b32:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009b36:	6060      	str	r0, [r4, #4]
 8009b38:	dd08      	ble.n	8009b4c <_svfprintf_r+0xc4c>
 8009b3a:	9803      	ldr	r0, [sp, #12]
 8009b3c:	aa26      	add	r2, sp, #152	@ 0x98
 8009b3e:	4659      	mov	r1, fp
 8009b40:	f7fd fdde 	bl	8007700 <__ssprint_r>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	f040 8356 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009b4a:	a929      	add	r1, sp, #164	@ 0xa4
 8009b4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b4e:	3b10      	subs	r3, #16
 8009b50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b52:	460c      	mov	r4, r1
 8009b54:	e546      	b.n	80095e4 <_svfprintf_r+0x6e4>
 8009b56:	460c      	mov	r4, r1
 8009b58:	e561      	b.n	800961e <_svfprintf_r+0x71e>
 8009b5a:	9803      	ldr	r0, [sp, #12]
 8009b5c:	aa26      	add	r2, sp, #152	@ 0x98
 8009b5e:	4659      	mov	r1, fp
 8009b60:	f7fd fdce 	bl	8007700 <__ssprint_r>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	f040 8346 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009b6a:	ac29      	add	r4, sp, #164	@ 0xa4
 8009b6c:	e569      	b.n	8009642 <_svfprintf_r+0x742>
 8009b6e:	9803      	ldr	r0, [sp, #12]
 8009b70:	aa26      	add	r2, sp, #152	@ 0x98
 8009b72:	4659      	mov	r1, fp
 8009b74:	f7fd fdc4 	bl	8007700 <__ssprint_r>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	f040 833c 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009b7e:	ac29      	add	r4, sp, #164	@ 0xa4
 8009b80:	e56f      	b.n	8009662 <_svfprintf_r+0x762>
 8009b82:	2010      	movs	r0, #16
 8009b84:	4403      	add	r3, r0
 8009b86:	2a07      	cmp	r2, #7
 8009b88:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009b8c:	6060      	str	r0, [r4, #4]
 8009b8e:	dd08      	ble.n	8009ba2 <_svfprintf_r+0xca2>
 8009b90:	9803      	ldr	r0, [sp, #12]
 8009b92:	aa26      	add	r2, sp, #152	@ 0x98
 8009b94:	4659      	mov	r1, fp
 8009b96:	f7fd fdb3 	bl	8007700 <__ssprint_r>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	f040 832b 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009ba0:	a929      	add	r1, sp, #164	@ 0xa4
 8009ba2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ba4:	3b10      	subs	r3, #16
 8009ba6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ba8:	460c      	mov	r4, r1
 8009baa:	e563      	b.n	8009674 <_svfprintf_r+0x774>
 8009bac:	460c      	mov	r4, r1
 8009bae:	e57e      	b.n	80096ae <_svfprintf_r+0x7ae>
 8009bb0:	2010      	movs	r0, #16
 8009bb2:	4403      	add	r3, r0
 8009bb4:	2a07      	cmp	r2, #7
 8009bb6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009bba:	6060      	str	r0, [r4, #4]
 8009bbc:	dd08      	ble.n	8009bd0 <_svfprintf_r+0xcd0>
 8009bbe:	9803      	ldr	r0, [sp, #12]
 8009bc0:	aa26      	add	r2, sp, #152	@ 0x98
 8009bc2:	4659      	mov	r1, fp
 8009bc4:	f7fd fd9c 	bl	8007700 <__ssprint_r>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	f040 8314 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009bce:	a929      	add	r1, sp, #164	@ 0xa4
 8009bd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009bd2:	3b10      	subs	r3, #16
 8009bd4:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	e56f      	b.n	80096ba <_svfprintf_r+0x7ba>
 8009bda:	460c      	mov	r4, r1
 8009bdc:	e58a      	b.n	80096f4 <_svfprintf_r+0x7f4>
 8009bde:	bf00      	nop
 8009be0:	0800fa75 	.word	0x0800fa75
 8009be4:	0800fa64 	.word	0x0800fa64
 8009be8:	9b06      	ldr	r3, [sp, #24]
 8009bea:	2b65      	cmp	r3, #101	@ 0x65
 8009bec:	f340 8246 	ble.w	800a07c <_svfprintf_r+0x117c>
 8009bf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f7f6 ff96 	bl	8000b28 <__aeabi_dcmpeq>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d06a      	beq.n	8009cd6 <_svfprintf_r+0xdd6>
 8009c00:	4b73      	ldr	r3, [pc, #460]	@ (8009dd0 <_svfprintf_r+0xed0>)
 8009c02:	6023      	str	r3, [r4, #0]
 8009c04:	2301      	movs	r3, #1
 8009c06:	6063      	str	r3, [r4, #4]
 8009c08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009c0e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009c10:	3301      	adds	r3, #1
 8009c12:	2b07      	cmp	r3, #7
 8009c14:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009c16:	dc37      	bgt.n	8009c88 <_svfprintf_r+0xd88>
 8009c18:	3408      	adds	r4, #8
 8009c1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c1c:	9a04      	ldr	r2, [sp, #16]
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	db02      	blt.n	8009c28 <_svfprintf_r+0xd28>
 8009c22:	07ef      	lsls	r7, r5, #31
 8009c24:	f57f ad76 	bpl.w	8009714 <_svfprintf_r+0x814>
 8009c28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c30:	6063      	str	r3, [r4, #4]
 8009c32:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009c34:	4413      	add	r3, r2
 8009c36:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009c38:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	2b07      	cmp	r3, #7
 8009c3e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009c40:	dc2c      	bgt.n	8009c9c <_svfprintf_r+0xd9c>
 8009c42:	3408      	adds	r4, #8
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	1e5e      	subs	r6, r3, #1
 8009c48:	2e00      	cmp	r6, #0
 8009c4a:	f77f ad63 	ble.w	8009714 <_svfprintf_r+0x814>
 8009c4e:	4f61      	ldr	r7, [pc, #388]	@ (8009dd4 <_svfprintf_r+0xed4>)
 8009c50:	f04f 0810 	mov.w	r8, #16
 8009c54:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8009c58:	2e10      	cmp	r6, #16
 8009c5a:	f103 0301 	add.w	r3, r3, #1
 8009c5e:	f104 0108 	add.w	r1, r4, #8
 8009c62:	6027      	str	r7, [r4, #0]
 8009c64:	dc24      	bgt.n	8009cb0 <_svfprintf_r+0xdb0>
 8009c66:	6066      	str	r6, [r4, #4]
 8009c68:	2b07      	cmp	r3, #7
 8009c6a:	4416      	add	r6, r2
 8009c6c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8009c70:	f340 82a0 	ble.w	800a1b4 <_svfprintf_r+0x12b4>
 8009c74:	9803      	ldr	r0, [sp, #12]
 8009c76:	aa26      	add	r2, sp, #152	@ 0x98
 8009c78:	4659      	mov	r1, fp
 8009c7a:	f7fd fd41 	bl	8007700 <__ssprint_r>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f040 82b9 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009c84:	ac29      	add	r4, sp, #164	@ 0xa4
 8009c86:	e545      	b.n	8009714 <_svfprintf_r+0x814>
 8009c88:	9803      	ldr	r0, [sp, #12]
 8009c8a:	aa26      	add	r2, sp, #152	@ 0x98
 8009c8c:	4659      	mov	r1, fp
 8009c8e:	f7fd fd37 	bl	8007700 <__ssprint_r>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f040 82af 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009c98:	ac29      	add	r4, sp, #164	@ 0xa4
 8009c9a:	e7be      	b.n	8009c1a <_svfprintf_r+0xd1a>
 8009c9c:	9803      	ldr	r0, [sp, #12]
 8009c9e:	aa26      	add	r2, sp, #152	@ 0x98
 8009ca0:	4659      	mov	r1, fp
 8009ca2:	f7fd fd2d 	bl	8007700 <__ssprint_r>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	f040 82a5 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009cac:	ac29      	add	r4, sp, #164	@ 0xa4
 8009cae:	e7c9      	b.n	8009c44 <_svfprintf_r+0xd44>
 8009cb0:	3210      	adds	r2, #16
 8009cb2:	2b07      	cmp	r3, #7
 8009cb4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8009cb8:	f8c4 8004 	str.w	r8, [r4, #4]
 8009cbc:	dd08      	ble.n	8009cd0 <_svfprintf_r+0xdd0>
 8009cbe:	9803      	ldr	r0, [sp, #12]
 8009cc0:	aa26      	add	r2, sp, #152	@ 0x98
 8009cc2:	4659      	mov	r1, fp
 8009cc4:	f7fd fd1c 	bl	8007700 <__ssprint_r>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	f040 8294 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009cce:	a929      	add	r1, sp, #164	@ 0xa4
 8009cd0:	3e10      	subs	r6, #16
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	e7be      	b.n	8009c54 <_svfprintf_r+0xd54>
 8009cd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dc7d      	bgt.n	8009dd8 <_svfprintf_r+0xed8>
 8009cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8009dd0 <_svfprintf_r+0xed0>)
 8009cde:	6023      	str	r3, [r4, #0]
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	6063      	str	r3, [r4, #4]
 8009ce4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009cea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009cec:	3301      	adds	r3, #1
 8009cee:	2b07      	cmp	r3, #7
 8009cf0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009cf2:	dc46      	bgt.n	8009d82 <_svfprintf_r+0xe82>
 8009cf4:	3408      	adds	r4, #8
 8009cf6:	9904      	ldr	r1, [sp, #16]
 8009cf8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009cfa:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8009cfc:	430b      	orrs	r3, r1
 8009cfe:	f005 0101 	and.w	r1, r5, #1
 8009d02:	430b      	orrs	r3, r1
 8009d04:	f43f ad06 	beq.w	8009714 <_svfprintf_r+0x814>
 8009d08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d0e:	6063      	str	r3, [r4, #4]
 8009d10:	441a      	add	r2, r3
 8009d12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009d14:	9228      	str	r2, [sp, #160]	@ 0xa0
 8009d16:	3301      	adds	r3, #1
 8009d18:	2b07      	cmp	r3, #7
 8009d1a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009d1c:	dc3b      	bgt.n	8009d96 <_svfprintf_r+0xe96>
 8009d1e:	f104 0308 	add.w	r3, r4, #8
 8009d22:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009d24:	2e00      	cmp	r6, #0
 8009d26:	da1b      	bge.n	8009d60 <_svfprintf_r+0xe60>
 8009d28:	4f2a      	ldr	r7, [pc, #168]	@ (8009dd4 <_svfprintf_r+0xed4>)
 8009d2a:	4276      	negs	r6, r6
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	2410      	movs	r4, #16
 8009d30:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8009d34:	2e10      	cmp	r6, #16
 8009d36:	f101 0101 	add.w	r1, r1, #1
 8009d3a:	f103 0308 	add.w	r3, r3, #8
 8009d3e:	6017      	str	r7, [r2, #0]
 8009d40:	dc33      	bgt.n	8009daa <_svfprintf_r+0xeaa>
 8009d42:	6056      	str	r6, [r2, #4]
 8009d44:	2907      	cmp	r1, #7
 8009d46:	4406      	add	r6, r0
 8009d48:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8009d4c:	dd08      	ble.n	8009d60 <_svfprintf_r+0xe60>
 8009d4e:	9803      	ldr	r0, [sp, #12]
 8009d50:	aa26      	add	r2, sp, #152	@ 0x98
 8009d52:	4659      	mov	r1, fp
 8009d54:	f7fd fcd4 	bl	8007700 <__ssprint_r>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	f040 824c 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009d5e:	ab29      	add	r3, sp, #164	@ 0xa4
 8009d60:	9a04      	ldr	r2, [sp, #16]
 8009d62:	9904      	ldr	r1, [sp, #16]
 8009d64:	605a      	str	r2, [r3, #4]
 8009d66:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8009d68:	f8c3 9000 	str.w	r9, [r3]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8009d70:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8009d72:	3201      	adds	r2, #1
 8009d74:	2a07      	cmp	r2, #7
 8009d76:	9227      	str	r2, [sp, #156]	@ 0x9c
 8009d78:	f73f af7c 	bgt.w	8009c74 <_svfprintf_r+0xd74>
 8009d7c:	f103 0408 	add.w	r4, r3, #8
 8009d80:	e4c8      	b.n	8009714 <_svfprintf_r+0x814>
 8009d82:	9803      	ldr	r0, [sp, #12]
 8009d84:	aa26      	add	r2, sp, #152	@ 0x98
 8009d86:	4659      	mov	r1, fp
 8009d88:	f7fd fcba 	bl	8007700 <__ssprint_r>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	f040 8232 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009d92:	ac29      	add	r4, sp, #164	@ 0xa4
 8009d94:	e7af      	b.n	8009cf6 <_svfprintf_r+0xdf6>
 8009d96:	9803      	ldr	r0, [sp, #12]
 8009d98:	aa26      	add	r2, sp, #152	@ 0x98
 8009d9a:	4659      	mov	r1, fp
 8009d9c:	f7fd fcb0 	bl	8007700 <__ssprint_r>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	f040 8228 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009da6:	ab29      	add	r3, sp, #164	@ 0xa4
 8009da8:	e7bb      	b.n	8009d22 <_svfprintf_r+0xe22>
 8009daa:	3010      	adds	r0, #16
 8009dac:	2907      	cmp	r1, #7
 8009dae:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8009db2:	6054      	str	r4, [r2, #4]
 8009db4:	dd08      	ble.n	8009dc8 <_svfprintf_r+0xec8>
 8009db6:	9803      	ldr	r0, [sp, #12]
 8009db8:	aa26      	add	r2, sp, #152	@ 0x98
 8009dba:	4659      	mov	r1, fp
 8009dbc:	f7fd fca0 	bl	8007700 <__ssprint_r>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f040 8218 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009dc6:	ab29      	add	r3, sp, #164	@ 0xa4
 8009dc8:	3e10      	subs	r6, #16
 8009dca:	461a      	mov	r2, r3
 8009dcc:	e7b0      	b.n	8009d30 <_svfprintf_r+0xe30>
 8009dce:	bf00      	nop
 8009dd0:	0800fab6 	.word	0x0800fab6
 8009dd4:	0800fab8 	.word	0x0800fab8
 8009dd8:	9b04      	ldr	r3, [sp, #16]
 8009dda:	444b      	add	r3, r9
 8009ddc:	9306      	str	r3, [sp, #24]
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	42b3      	cmp	r3, r6
 8009de2:	bfa8      	it	ge
 8009de4:	4633      	movge	r3, r6
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	4698      	mov	r8, r3
 8009dea:	dd0b      	ble.n	8009e04 <_svfprintf_r+0xf04>
 8009dec:	e9c4 9300 	strd	r9, r3, [r4]
 8009df0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009df2:	4443      	add	r3, r8
 8009df4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009df6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009df8:	3301      	adds	r3, #1
 8009dfa:	2b07      	cmp	r3, #7
 8009dfc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009dfe:	f300 8089 	bgt.w	8009f14 <_svfprintf_r+0x1014>
 8009e02:	3408      	adds	r4, #8
 8009e04:	4643      	mov	r3, r8
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfac      	ite	ge
 8009e0a:	eba6 0808 	subge.w	r8, r6, r8
 8009e0e:	46b0      	movlt	r8, r6
 8009e10:	f1b8 0f00 	cmp.w	r8, #0
 8009e14:	dd1b      	ble.n	8009e4e <_svfprintf_r+0xf4e>
 8009e16:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8009e1a:	4897      	ldr	r0, [pc, #604]	@ (800a078 <_svfprintf_r+0x1178>)
 8009e1c:	6020      	str	r0, [r4, #0]
 8009e1e:	f1b8 0f10 	cmp.w	r8, #16
 8009e22:	f102 0201 	add.w	r2, r2, #1
 8009e26:	f104 0108 	add.w	r1, r4, #8
 8009e2a:	dc7d      	bgt.n	8009f28 <_svfprintf_r+0x1028>
 8009e2c:	4443      	add	r3, r8
 8009e2e:	2a07      	cmp	r2, #7
 8009e30:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009e34:	f8c4 8004 	str.w	r8, [r4, #4]
 8009e38:	f340 808a 	ble.w	8009f50 <_svfprintf_r+0x1050>
 8009e3c:	9803      	ldr	r0, [sp, #12]
 8009e3e:	aa26      	add	r2, sp, #152	@ 0x98
 8009e40:	4659      	mov	r1, fp
 8009e42:	f7fd fc5d 	bl	8007700 <__ssprint_r>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f040 81d5 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009e4c:	ac29      	add	r4, sp, #164	@ 0xa4
 8009e4e:	eb09 0806 	add.w	r8, r9, r6
 8009e52:	056e      	lsls	r6, r5, #21
 8009e54:	d508      	bpl.n	8009e68 <_svfprintf_r+0xf68>
 8009e56:	9b08      	ldr	r3, [sp, #32]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d17b      	bne.n	8009f54 <_svfprintf_r+0x1054>
 8009e5c:	2f00      	cmp	r7, #0
 8009e5e:	d17b      	bne.n	8009f58 <_svfprintf_r+0x1058>
 8009e60:	9b06      	ldr	r3, [sp, #24]
 8009e62:	4598      	cmp	r8, r3
 8009e64:	bf28      	it	cs
 8009e66:	4698      	movcs	r8, r3
 8009e68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e6a:	9a04      	ldr	r2, [sp, #16]
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	db01      	blt.n	8009e74 <_svfprintf_r+0xf74>
 8009e70:	07e8      	lsls	r0, r5, #31
 8009e72:	d50e      	bpl.n	8009e92 <_svfprintf_r+0xf92>
 8009e74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e7c:	6063      	str	r3, [r4, #4]
 8009e7e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009e80:	4413      	add	r3, r2
 8009e82:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009e84:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009e86:	3301      	adds	r3, #1
 8009e88:	2b07      	cmp	r3, #7
 8009e8a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009e8c:	f300 80df 	bgt.w	800a04e <_svfprintf_r+0x114e>
 8009e90:	3408      	adds	r4, #8
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8009e96:	1bdf      	subs	r7, r3, r7
 8009e98:	9b06      	ldr	r3, [sp, #24]
 8009e9a:	eba3 0308 	sub.w	r3, r3, r8
 8009e9e:	429f      	cmp	r7, r3
 8009ea0:	bfa8      	it	ge
 8009ea2:	461f      	movge	r7, r3
 8009ea4:	2f00      	cmp	r7, #0
 8009ea6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009ea8:	dd0a      	ble.n	8009ec0 <_svfprintf_r+0xfc0>
 8009eaa:	443b      	add	r3, r7
 8009eac:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009eae:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	2b07      	cmp	r3, #7
 8009eb4:	e9c4 8700 	strd	r8, r7, [r4]
 8009eb8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009eba:	f300 80d2 	bgt.w	800a062 <_svfprintf_r+0x1162>
 8009ebe:	3408      	adds	r4, #8
 8009ec0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009ec2:	9b04      	ldr	r3, [sp, #16]
 8009ec4:	2f00      	cmp	r7, #0
 8009ec6:	eba3 0606 	sub.w	r6, r3, r6
 8009eca:	bfa8      	it	ge
 8009ecc:	1bf6      	subge	r6, r6, r7
 8009ece:	2e00      	cmp	r6, #0
 8009ed0:	f77f ac20 	ble.w	8009714 <_svfprintf_r+0x814>
 8009ed4:	4f68      	ldr	r7, [pc, #416]	@ (800a078 <_svfprintf_r+0x1178>)
 8009ed6:	f04f 0810 	mov.w	r8, #16
 8009eda:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8009ede:	2e10      	cmp	r6, #16
 8009ee0:	f103 0301 	add.w	r3, r3, #1
 8009ee4:	f104 0108 	add.w	r1, r4, #8
 8009ee8:	6027      	str	r7, [r4, #0]
 8009eea:	f77f aebc 	ble.w	8009c66 <_svfprintf_r+0xd66>
 8009eee:	3210      	adds	r2, #16
 8009ef0:	2b07      	cmp	r3, #7
 8009ef2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8009ef6:	f8c4 8004 	str.w	r8, [r4, #4]
 8009efa:	dd08      	ble.n	8009f0e <_svfprintf_r+0x100e>
 8009efc:	9803      	ldr	r0, [sp, #12]
 8009efe:	aa26      	add	r2, sp, #152	@ 0x98
 8009f00:	4659      	mov	r1, fp
 8009f02:	f7fd fbfd 	bl	8007700 <__ssprint_r>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f040 8175 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009f0c:	a929      	add	r1, sp, #164	@ 0xa4
 8009f0e:	3e10      	subs	r6, #16
 8009f10:	460c      	mov	r4, r1
 8009f12:	e7e2      	b.n	8009eda <_svfprintf_r+0xfda>
 8009f14:	9803      	ldr	r0, [sp, #12]
 8009f16:	aa26      	add	r2, sp, #152	@ 0x98
 8009f18:	4659      	mov	r1, fp
 8009f1a:	f7fd fbf1 	bl	8007700 <__ssprint_r>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f040 8169 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009f24:	ac29      	add	r4, sp, #164	@ 0xa4
 8009f26:	e76d      	b.n	8009e04 <_svfprintf_r+0xf04>
 8009f28:	2010      	movs	r0, #16
 8009f2a:	4403      	add	r3, r0
 8009f2c:	2a07      	cmp	r2, #7
 8009f2e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009f32:	6060      	str	r0, [r4, #4]
 8009f34:	dd08      	ble.n	8009f48 <_svfprintf_r+0x1048>
 8009f36:	9803      	ldr	r0, [sp, #12]
 8009f38:	aa26      	add	r2, sp, #152	@ 0x98
 8009f3a:	4659      	mov	r1, fp
 8009f3c:	f7fd fbe0 	bl	8007700 <__ssprint_r>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f040 8158 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009f46:	a929      	add	r1, sp, #164	@ 0xa4
 8009f48:	f1a8 0810 	sub.w	r8, r8, #16
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	e762      	b.n	8009e16 <_svfprintf_r+0xf16>
 8009f50:	460c      	mov	r4, r1
 8009f52:	e77c      	b.n	8009e4e <_svfprintf_r+0xf4e>
 8009f54:	2f00      	cmp	r7, #0
 8009f56:	d04a      	beq.n	8009fee <_svfprintf_r+0x10ee>
 8009f58:	3f01      	subs	r7, #1
 8009f5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009f62:	6063      	str	r3, [r4, #4]
 8009f64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009f66:	4413      	add	r3, r2
 8009f68:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009f6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	2b07      	cmp	r3, #7
 8009f70:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009f72:	dc43      	bgt.n	8009ffc <_svfprintf_r+0x10fc>
 8009f74:	3408      	adds	r4, #8
 8009f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f78:	781a      	ldrb	r2, [r3, #0]
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	eba3 0308 	sub.w	r3, r3, r8
 8009f80:	429a      	cmp	r2, r3
 8009f82:	bfa8      	it	ge
 8009f84:	461a      	movge	r2, r3
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009f8a:	4691      	mov	r9, r2
 8009f8c:	dd09      	ble.n	8009fa2 <_svfprintf_r+0x10a2>
 8009f8e:	4413      	add	r3, r2
 8009f90:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009f92:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009f94:	3301      	adds	r3, #1
 8009f96:	2b07      	cmp	r3, #7
 8009f98:	e9c4 8200 	strd	r8, r2, [r4]
 8009f9c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009f9e:	dc37      	bgt.n	800a010 <_svfprintf_r+0x1110>
 8009fa0:	3408      	adds	r4, #8
 8009fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa4:	781e      	ldrb	r6, [r3, #0]
 8009fa6:	f1b9 0f00 	cmp.w	r9, #0
 8009faa:	bfa8      	it	ge
 8009fac:	eba6 0609 	subge.w	r6, r6, r9
 8009fb0:	2e00      	cmp	r6, #0
 8009fb2:	dd18      	ble.n	8009fe6 <_svfprintf_r+0x10e6>
 8009fb4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8009fb8:	482f      	ldr	r0, [pc, #188]	@ (800a078 <_svfprintf_r+0x1178>)
 8009fba:	6020      	str	r0, [r4, #0]
 8009fbc:	2e10      	cmp	r6, #16
 8009fbe:	f103 0301 	add.w	r3, r3, #1
 8009fc2:	f104 0108 	add.w	r1, r4, #8
 8009fc6:	dc2d      	bgt.n	800a024 <_svfprintf_r+0x1124>
 8009fc8:	6066      	str	r6, [r4, #4]
 8009fca:	2b07      	cmp	r3, #7
 8009fcc:	4416      	add	r6, r2
 8009fce:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8009fd2:	dd3a      	ble.n	800a04a <_svfprintf_r+0x114a>
 8009fd4:	9803      	ldr	r0, [sp, #12]
 8009fd6:	aa26      	add	r2, sp, #152	@ 0x98
 8009fd8:	4659      	mov	r1, fp
 8009fda:	f7fd fb91 	bl	8007700 <__ssprint_r>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f040 8109 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 8009fe4:	ac29      	add	r4, sp, #164	@ 0xa4
 8009fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	4498      	add	r8, r3
 8009fec:	e733      	b.n	8009e56 <_svfprintf_r+0xf56>
 8009fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ff4:	9b08      	ldr	r3, [sp, #32]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	9308      	str	r3, [sp, #32]
 8009ffa:	e7ae      	b.n	8009f5a <_svfprintf_r+0x105a>
 8009ffc:	9803      	ldr	r0, [sp, #12]
 8009ffe:	aa26      	add	r2, sp, #152	@ 0x98
 800a000:	4659      	mov	r1, fp
 800a002:	f7fd fb7d 	bl	8007700 <__ssprint_r>
 800a006:	2800      	cmp	r0, #0
 800a008:	f040 80f5 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 800a00c:	ac29      	add	r4, sp, #164	@ 0xa4
 800a00e:	e7b2      	b.n	8009f76 <_svfprintf_r+0x1076>
 800a010:	9803      	ldr	r0, [sp, #12]
 800a012:	aa26      	add	r2, sp, #152	@ 0x98
 800a014:	4659      	mov	r1, fp
 800a016:	f7fd fb73 	bl	8007700 <__ssprint_r>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f040 80eb 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 800a020:	ac29      	add	r4, sp, #164	@ 0xa4
 800a022:	e7be      	b.n	8009fa2 <_svfprintf_r+0x10a2>
 800a024:	2010      	movs	r0, #16
 800a026:	4402      	add	r2, r0
 800a028:	2b07      	cmp	r3, #7
 800a02a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a02e:	6060      	str	r0, [r4, #4]
 800a030:	dd08      	ble.n	800a044 <_svfprintf_r+0x1144>
 800a032:	9803      	ldr	r0, [sp, #12]
 800a034:	aa26      	add	r2, sp, #152	@ 0x98
 800a036:	4659      	mov	r1, fp
 800a038:	f7fd fb62 	bl	8007700 <__ssprint_r>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	f040 80da 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 800a042:	a929      	add	r1, sp, #164	@ 0xa4
 800a044:	3e10      	subs	r6, #16
 800a046:	460c      	mov	r4, r1
 800a048:	e7b4      	b.n	8009fb4 <_svfprintf_r+0x10b4>
 800a04a:	460c      	mov	r4, r1
 800a04c:	e7cb      	b.n	8009fe6 <_svfprintf_r+0x10e6>
 800a04e:	9803      	ldr	r0, [sp, #12]
 800a050:	aa26      	add	r2, sp, #152	@ 0x98
 800a052:	4659      	mov	r1, fp
 800a054:	f7fd fb54 	bl	8007700 <__ssprint_r>
 800a058:	2800      	cmp	r0, #0
 800a05a:	f040 80cc 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 800a05e:	ac29      	add	r4, sp, #164	@ 0xa4
 800a060:	e717      	b.n	8009e92 <_svfprintf_r+0xf92>
 800a062:	9803      	ldr	r0, [sp, #12]
 800a064:	aa26      	add	r2, sp, #152	@ 0x98
 800a066:	4659      	mov	r1, fp
 800a068:	f7fd fb4a 	bl	8007700 <__ssprint_r>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f040 80c2 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 800a072:	ac29      	add	r4, sp, #164	@ 0xa4
 800a074:	e724      	b.n	8009ec0 <_svfprintf_r+0xfc0>
 800a076:	bf00      	nop
 800a078:	0800fab8 	.word	0x0800fab8
 800a07c:	9904      	ldr	r1, [sp, #16]
 800a07e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a080:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800a082:	2901      	cmp	r1, #1
 800a084:	f103 0301 	add.w	r3, r3, #1
 800a088:	f102 0201 	add.w	r2, r2, #1
 800a08c:	f104 0608 	add.w	r6, r4, #8
 800a090:	dc02      	bgt.n	800a098 <_svfprintf_r+0x1198>
 800a092:	07e9      	lsls	r1, r5, #31
 800a094:	f140 8083 	bpl.w	800a19e <_svfprintf_r+0x129e>
 800a098:	2101      	movs	r1, #1
 800a09a:	2a07      	cmp	r2, #7
 800a09c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a0a0:	f8c4 9000 	str.w	r9, [r4]
 800a0a4:	6061      	str	r1, [r4, #4]
 800a0a6:	dd08      	ble.n	800a0ba <_svfprintf_r+0x11ba>
 800a0a8:	9803      	ldr	r0, [sp, #12]
 800a0aa:	aa26      	add	r2, sp, #152	@ 0x98
 800a0ac:	4659      	mov	r1, fp
 800a0ae:	f7fd fb27 	bl	8007700 <__ssprint_r>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	f040 809f 	bne.w	800a1f6 <_svfprintf_r+0x12f6>
 800a0b8:	ae29      	add	r6, sp, #164	@ 0xa4
 800a0ba:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0c2:	6073      	str	r3, [r6, #4]
 800a0c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a0c6:	4413      	add	r3, r2
 800a0c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a0ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	2b07      	cmp	r3, #7
 800a0d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a0d2:	dc33      	bgt.n	800a13c <_svfprintf_r+0x123c>
 800a0d4:	3608      	adds	r6, #8
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0dc:	1e5c      	subs	r4, r3, #1
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800a0e6:	f7f6 fd1f 	bl	8000b28 <__aeabi_dcmpeq>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d12f      	bne.n	800a14e <_svfprintf_r+0x124e>
 800a0ee:	f109 0201 	add.w	r2, r9, #1
 800a0f2:	e9c6 2400 	strd	r2, r4, [r6]
 800a0f6:	9a04      	ldr	r2, [sp, #16]
 800a0f8:	f108 0301 	add.w	r3, r8, #1
 800a0fc:	3f01      	subs	r7, #1
 800a0fe:	4417      	add	r7, r2
 800a100:	2b07      	cmp	r3, #7
 800a102:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800a106:	dd53      	ble.n	800a1b0 <_svfprintf_r+0x12b0>
 800a108:	9803      	ldr	r0, [sp, #12]
 800a10a:	aa26      	add	r2, sp, #152	@ 0x98
 800a10c:	4659      	mov	r1, fp
 800a10e:	f7fd faf7 	bl	8007700 <__ssprint_r>
 800a112:	2800      	cmp	r0, #0
 800a114:	d16f      	bne.n	800a1f6 <_svfprintf_r+0x12f6>
 800a116:	ae29      	add	r6, sp, #164	@ 0xa4
 800a118:	ab22      	add	r3, sp, #136	@ 0x88
 800a11a:	6033      	str	r3, [r6, #0]
 800a11c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800a11e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a120:	6073      	str	r3, [r6, #4]
 800a122:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a124:	4413      	add	r3, r2
 800a126:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a128:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a12a:	3301      	adds	r3, #1
 800a12c:	2b07      	cmp	r3, #7
 800a12e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a130:	f73f ada0 	bgt.w	8009c74 <_svfprintf_r+0xd74>
 800a134:	f106 0408 	add.w	r4, r6, #8
 800a138:	f7ff baec 	b.w	8009714 <_svfprintf_r+0x814>
 800a13c:	9803      	ldr	r0, [sp, #12]
 800a13e:	aa26      	add	r2, sp, #152	@ 0x98
 800a140:	4659      	mov	r1, fp
 800a142:	f7fd fadd 	bl	8007700 <__ssprint_r>
 800a146:	2800      	cmp	r0, #0
 800a148:	d155      	bne.n	800a1f6 <_svfprintf_r+0x12f6>
 800a14a:	ae29      	add	r6, sp, #164	@ 0xa4
 800a14c:	e7c3      	b.n	800a0d6 <_svfprintf_r+0x11d6>
 800a14e:	9b04      	ldr	r3, [sp, #16]
 800a150:	2b01      	cmp	r3, #1
 800a152:	dde1      	ble.n	800a118 <_svfprintf_r+0x1218>
 800a154:	4f57      	ldr	r7, [pc, #348]	@ (800a2b4 <_svfprintf_r+0x13b4>)
 800a156:	f04f 0810 	mov.w	r8, #16
 800a15a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800a15e:	2c10      	cmp	r4, #16
 800a160:	f103 0301 	add.w	r3, r3, #1
 800a164:	f106 0108 	add.w	r1, r6, #8
 800a168:	6037      	str	r7, [r6, #0]
 800a16a:	dc07      	bgt.n	800a17c <_svfprintf_r+0x127c>
 800a16c:	6074      	str	r4, [r6, #4]
 800a16e:	2b07      	cmp	r3, #7
 800a170:	4414      	add	r4, r2
 800a172:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800a176:	dcc7      	bgt.n	800a108 <_svfprintf_r+0x1208>
 800a178:	460e      	mov	r6, r1
 800a17a:	e7cd      	b.n	800a118 <_svfprintf_r+0x1218>
 800a17c:	3210      	adds	r2, #16
 800a17e:	2b07      	cmp	r3, #7
 800a180:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a184:	f8c6 8004 	str.w	r8, [r6, #4]
 800a188:	dd06      	ble.n	800a198 <_svfprintf_r+0x1298>
 800a18a:	9803      	ldr	r0, [sp, #12]
 800a18c:	aa26      	add	r2, sp, #152	@ 0x98
 800a18e:	4659      	mov	r1, fp
 800a190:	f7fd fab6 	bl	8007700 <__ssprint_r>
 800a194:	bb78      	cbnz	r0, 800a1f6 <_svfprintf_r+0x12f6>
 800a196:	a929      	add	r1, sp, #164	@ 0xa4
 800a198:	3c10      	subs	r4, #16
 800a19a:	460e      	mov	r6, r1
 800a19c:	e7dd      	b.n	800a15a <_svfprintf_r+0x125a>
 800a19e:	2101      	movs	r1, #1
 800a1a0:	2a07      	cmp	r2, #7
 800a1a2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a1a6:	f8c4 9000 	str.w	r9, [r4]
 800a1aa:	6061      	str	r1, [r4, #4]
 800a1ac:	ddb4      	ble.n	800a118 <_svfprintf_r+0x1218>
 800a1ae:	e7ab      	b.n	800a108 <_svfprintf_r+0x1208>
 800a1b0:	3608      	adds	r6, #8
 800a1b2:	e7b1      	b.n	800a118 <_svfprintf_r+0x1218>
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	f7ff baad 	b.w	8009714 <_svfprintf_r+0x814>
 800a1ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a1be:	1a9d      	subs	r5, r3, r2
 800a1c0:	2d00      	cmp	r5, #0
 800a1c2:	f77f aaaa 	ble.w	800971a <_svfprintf_r+0x81a>
 800a1c6:	4e3c      	ldr	r6, [pc, #240]	@ (800a2b8 <_svfprintf_r+0x13b8>)
 800a1c8:	2710      	movs	r7, #16
 800a1ca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800a1ce:	2d10      	cmp	r5, #16
 800a1d0:	f103 0301 	add.w	r3, r3, #1
 800a1d4:	6026      	str	r6, [r4, #0]
 800a1d6:	dc18      	bgt.n	800a20a <_svfprintf_r+0x130a>
 800a1d8:	442a      	add	r2, r5
 800a1da:	2b07      	cmp	r3, #7
 800a1dc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a1e0:	6065      	str	r5, [r4, #4]
 800a1e2:	f77f aa9a 	ble.w	800971a <_svfprintf_r+0x81a>
 800a1e6:	9803      	ldr	r0, [sp, #12]
 800a1e8:	aa26      	add	r2, sp, #152	@ 0x98
 800a1ea:	4659      	mov	r1, fp
 800a1ec:	f7fd fa88 	bl	8007700 <__ssprint_r>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	f43f aa92 	beq.w	800971a <_svfprintf_r+0x81a>
 800a1f6:	f1ba 0f00 	cmp.w	sl, #0
 800a1fa:	f43f a89a 	beq.w	8009332 <_svfprintf_r+0x432>
 800a1fe:	9803      	ldr	r0, [sp, #12]
 800a200:	4651      	mov	r1, sl
 800a202:	f7fe f9cd 	bl	80085a0 <_free_r>
 800a206:	f7ff b894 	b.w	8009332 <_svfprintf_r+0x432>
 800a20a:	3210      	adds	r2, #16
 800a20c:	2b07      	cmp	r3, #7
 800a20e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a212:	6067      	str	r7, [r4, #4]
 800a214:	dc02      	bgt.n	800a21c <_svfprintf_r+0x131c>
 800a216:	3408      	adds	r4, #8
 800a218:	3d10      	subs	r5, #16
 800a21a:	e7d6      	b.n	800a1ca <_svfprintf_r+0x12ca>
 800a21c:	9803      	ldr	r0, [sp, #12]
 800a21e:	aa26      	add	r2, sp, #152	@ 0x98
 800a220:	4659      	mov	r1, fp
 800a222:	f7fd fa6d 	bl	8007700 <__ssprint_r>
 800a226:	2800      	cmp	r0, #0
 800a228:	d1e5      	bne.n	800a1f6 <_svfprintf_r+0x12f6>
 800a22a:	ac29      	add	r4, sp, #164	@ 0xa4
 800a22c:	e7f4      	b.n	800a218 <_svfprintf_r+0x1318>
 800a22e:	9803      	ldr	r0, [sp, #12]
 800a230:	4651      	mov	r1, sl
 800a232:	f7fe f9b5 	bl	80085a0 <_free_r>
 800a236:	f7ff ba88 	b.w	800974a <_svfprintf_r+0x84a>
 800a23a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f43f a878 	beq.w	8009332 <_svfprintf_r+0x432>
 800a242:	9803      	ldr	r0, [sp, #12]
 800a244:	aa26      	add	r2, sp, #152	@ 0x98
 800a246:	4659      	mov	r1, fp
 800a248:	f7fd fa5a 	bl	8007700 <__ssprint_r>
 800a24c:	f7ff b871 	b.w	8009332 <_svfprintf_r+0x432>
 800a250:	ea56 0207 	orrs.w	r2, r6, r7
 800a254:	9508      	str	r5, [sp, #32]
 800a256:	f43f ab7a 	beq.w	800994e <_svfprintf_r+0xa4e>
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	f43f abfb 	beq.w	8009a56 <_svfprintf_r+0xb56>
 800a260:	2b02      	cmp	r3, #2
 800a262:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800a266:	f43f ac3f 	beq.w	8009ae8 <_svfprintf_r+0xbe8>
 800a26a:	f006 0307 	and.w	r3, r6, #7
 800a26e:	08f6      	lsrs	r6, r6, #3
 800a270:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800a274:	08ff      	lsrs	r7, r7, #3
 800a276:	3330      	adds	r3, #48	@ 0x30
 800a278:	ea56 0107 	orrs.w	r1, r6, r7
 800a27c:	464a      	mov	r2, r9
 800a27e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800a282:	d1f2      	bne.n	800a26a <_svfprintf_r+0x136a>
 800a284:	9908      	ldr	r1, [sp, #32]
 800a286:	07c8      	lsls	r0, r1, #31
 800a288:	d506      	bpl.n	800a298 <_svfprintf_r+0x1398>
 800a28a:	2b30      	cmp	r3, #48	@ 0x30
 800a28c:	d004      	beq.n	800a298 <_svfprintf_r+0x1398>
 800a28e:	2330      	movs	r3, #48	@ 0x30
 800a290:	f809 3c01 	strb.w	r3, [r9, #-1]
 800a294:	f1a2 0902 	sub.w	r9, r2, #2
 800a298:	ab52      	add	r3, sp, #328	@ 0x148
 800a29a:	9d08      	ldr	r5, [sp, #32]
 800a29c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800a2a0:	f04f 0a00 	mov.w	sl, #0
 800a2a4:	eba3 0809 	sub.w	r8, r3, r9
 800a2a8:	4657      	mov	r7, sl
 800a2aa:	f8cd a020 	str.w	sl, [sp, #32]
 800a2ae:	4656      	mov	r6, sl
 800a2b0:	f7ff b97c 	b.w	80095ac <_svfprintf_r+0x6ac>
 800a2b4:	0800fab8 	.word	0x0800fab8
 800a2b8:	0800fac8 	.word	0x0800fac8

0800a2bc <__ssvfscanf_r>:
 800a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 800a2c4:	461d      	mov	r5, r3
 800a2c6:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800a2ca:	af02      	add	r7, sp, #8
 800a2cc:	049e      	lsls	r6, r3, #18
 800a2ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	617a      	str	r2, [r7, #20]
 800a2d4:	d406      	bmi.n	800a2e4 <__ssvfscanf_r+0x28>
 800a2d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a2da:	818b      	strh	r3, [r1, #12]
 800a2dc:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800a2de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2e2:	664b      	str	r3, [r1, #100]	@ 0x64
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	e9c7 3307 	strd	r3, r3, [r7, #28]
 800a2ea:	61bb      	str	r3, [r7, #24]
 800a2ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2f2:	f8d7 8014 	ldr.w	r8, [r7, #20]
 800a2f6:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 80d3 	beq.w	800a4a8 <__ssvfscanf_r+0x1ec>
 800a302:	4a84      	ldr	r2, [pc, #528]	@ (800a514 <__ssvfscanf_r+0x258>)
 800a304:	5cd6      	ldrb	r6, [r2, r3]
 800a306:	f016 0608 	ands.w	r6, r6, #8
 800a30a:	d01b      	beq.n	800a344 <__ssvfscanf_r+0x88>
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	dd08      	ble.n	800a324 <__ssvfscanf_r+0x68>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	497f      	ldr	r1, [pc, #508]	@ (800a514 <__ssvfscanf_r+0x258>)
 800a316:	781a      	ldrb	r2, [r3, #0]
 800a318:	5c8a      	ldrb	r2, [r1, r2]
 800a31a:	0710      	lsls	r0, r2, #28
 800a31c:	d409      	bmi.n	800a332 <__ssvfscanf_r+0x76>
 800a31e:	f8c7 8014 	str.w	r8, [r7, #20]
 800a322:	e7e6      	b.n	800a2f2 <__ssvfscanf_r+0x36>
 800a324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a326:	4621      	mov	r1, r4
 800a328:	f003 fe99 	bl	800e05e <__ssrefill_r>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d0f0      	beq.n	800a312 <__ssvfscanf_r+0x56>
 800a330:	e7f5      	b.n	800a31e <__ssvfscanf_r+0x62>
 800a332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a334:	3201      	adds	r2, #1
 800a336:	633a      	str	r2, [r7, #48]	@ 0x30
 800a338:	6862      	ldr	r2, [r4, #4]
 800a33a:	3301      	adds	r3, #1
 800a33c:	3a01      	subs	r2, #1
 800a33e:	6062      	str	r2, [r4, #4]
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	e7e3      	b.n	800a30c <__ssvfscanf_r+0x50>
 800a344:	2b25      	cmp	r3, #37	@ 0x25
 800a346:	d163      	bne.n	800a410 <__ssvfscanf_r+0x154>
 800a348:	62fe      	str	r6, [r7, #44]	@ 0x2c
 800a34a:	4642      	mov	r2, r8
 800a34c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a350:	617a      	str	r2, [r7, #20]
 800a352:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 800a356:	2a55      	cmp	r2, #85	@ 0x55
 800a358:	f200 816e 	bhi.w	800a638 <__ssvfscanf_r+0x37c>
 800a35c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a360:	016c0056 	.word	0x016c0056
 800a364:	016c016c 	.word	0x016c016c
 800a368:	007d016c 	.word	0x007d016c
 800a36c:	016c016c 	.word	0x016c016c
 800a370:	016c016c 	.word	0x016c016c
 800a374:	00b9016c 	.word	0x00b9016c
 800a378:	00b900b9 	.word	0x00b900b9
 800a37c:	00b900b9 	.word	0x00b900b9
 800a380:	00b900b9 	.word	0x00b900b9
 800a384:	00b900b9 	.word	0x00b900b9
 800a388:	016c00b9 	.word	0x016c00b9
 800a38c:	016c016c 	.word	0x016c016c
 800a390:	016c016c 	.word	0x016c016c
 800a394:	016c016c 	.word	0x016c016c
 800a398:	016c00e0 	.word	0x016c00e0
 800a39c:	00c3010a 	.word	0x00c3010a
 800a3a0:	00e000e0 	.word	0x00e000e0
 800a3a4:	016c00e0 	.word	0x016c00e0
 800a3a8:	016c016c 	.word	0x016c016c
 800a3ac:	00a2016c 	.word	0x00a2016c
 800a3b0:	016c016c 	.word	0x016c016c
 800a3b4:	016c00c7 	.word	0x016c00c7
 800a3b8:	016c016c 	.word	0x016c016c
 800a3bc:	016c00fa 	.word	0x016c00fa
 800a3c0:	016c016c 	.word	0x016c016c
 800a3c4:	00d4016c 	.word	0x00d4016c
 800a3c8:	016c016c 	.word	0x016c016c
 800a3cc:	016c00ff 	.word	0x016c00ff
 800a3d0:	016c016c 	.word	0x016c016c
 800a3d4:	016c016c 	.word	0x016c016c
 800a3d8:	016c00e0 	.word	0x016c00e0
 800a3dc:	00c5010c 	.word	0x00c5010c
 800a3e0:	00e000e0 	.word	0x00e000e0
 800a3e4:	009400e0 	.word	0x009400e0
 800a3e8:	00a20130 	.word	0x00a20130
 800a3ec:	0085016c 	.word	0x0085016c
 800a3f0:	011400ac 	.word	0x011400ac
 800a3f4:	011100c9 	.word	0x011100c9
 800a3f8:	016c016c 	.word	0x016c016c
 800a3fc:	00a900fc 	.word	0x00a900fc
 800a400:	016c00d0 	.word	0x016c00d0
 800a404:	00d4016c 	.word	0x00d4016c
 800a408:	00a9016c 	.word	0x00a9016c
 800a40c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 800a410:	6863      	ldr	r3, [r4, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	dd0e      	ble.n	800a434 <__ssvfscanf_r+0x178>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a41c:	7819      	ldrb	r1, [r3, #0]
 800a41e:	4291      	cmp	r1, r2
 800a420:	d142      	bne.n	800a4a8 <__ssvfscanf_r+0x1ec>
 800a422:	3301      	adds	r3, #1
 800a424:	6862      	ldr	r2, [r4, #4]
 800a426:	6023      	str	r3, [r4, #0]
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	3a01      	subs	r2, #1
 800a42c:	3301      	adds	r3, #1
 800a42e:	6062      	str	r2, [r4, #4]
 800a430:	633b      	str	r3, [r7, #48]	@ 0x30
 800a432:	e774      	b.n	800a31e <__ssvfscanf_r+0x62>
 800a434:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a436:	4621      	mov	r1, r4
 800a438:	f003 fe11 	bl	800e05e <__ssrefill_r>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d0ea      	beq.n	800a416 <__ssvfscanf_r+0x15a>
 800a440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a442:	b113      	cbz	r3, 800a44a <__ssvfscanf_r+0x18e>
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	065b      	lsls	r3, r3, #25
 800a448:	d52e      	bpl.n	800a4a8 <__ssvfscanf_r+0x1ec>
 800a44a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f041 809d 	bne.w	800b58c <__ssvfscanf_r+0x12d0>
 800a452:	f04f 33ff 	mov.w	r3, #4294967295
 800a456:	627b      	str	r3, [r7, #36]	@ 0x24
 800a458:	e0f9      	b.n	800a64e <__ssvfscanf_r+0x392>
 800a45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a45c:	4333      	orrs	r3, r6
 800a45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a460:	d122      	bne.n	800a4a8 <__ssvfscanf_r+0x1ec>
 800a462:	2610      	movs	r6, #16
 800a464:	f8d7 8014 	ldr.w	r8, [r7, #20]
 800a468:	e76f      	b.n	800a34a <__ssvfscanf_r+0x8e>
 800a46a:	0731      	lsls	r1, r6, #28
 800a46c:	d11c      	bne.n	800a4a8 <__ssvfscanf_r+0x1ec>
 800a46e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a472:	2b6c      	cmp	r3, #108	@ 0x6c
 800a474:	d105      	bne.n	800a482 <__ssvfscanf_r+0x1c6>
 800a476:	f108 0302 	add.w	r3, r8, #2
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	f046 0602 	orr.w	r6, r6, #2
 800a480:	e7f0      	b.n	800a464 <__ssvfscanf_r+0x1a8>
 800a482:	f046 0601 	orr.w	r6, r6, #1
 800a486:	e7ed      	b.n	800a464 <__ssvfscanf_r+0x1a8>
 800a488:	0732      	lsls	r2, r6, #28
 800a48a:	d10d      	bne.n	800a4a8 <__ssvfscanf_r+0x1ec>
 800a48c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a490:	2b68      	cmp	r3, #104	@ 0x68
 800a492:	bf03      	ittte	eq
 800a494:	f108 0302 	addeq.w	r3, r8, #2
 800a498:	617b      	streq	r3, [r7, #20]
 800a49a:	f046 0608 	orreq.w	r6, r6, #8
 800a49e:	f046 0604 	orrne.w	r6, r6, #4
 800a4a2:	e7df      	b.n	800a464 <__ssvfscanf_r+0x1a8>
 800a4a4:	0733      	lsls	r3, r6, #28
 800a4a6:	d0e9      	beq.n	800a47c <__ssvfscanf_r+0x1c0>
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80cf 	beq.w	800a64e <__ssvfscanf_r+0x392>
 800a4b0:	e0c8      	b.n	800a644 <__ssvfscanf_r+0x388>
 800a4b2:	0730      	lsls	r0, r6, #28
 800a4b4:	d0d6      	beq.n	800a464 <__ssvfscanf_r+0x1a8>
 800a4b6:	e7f7      	b.n	800a4a8 <__ssvfscanf_r+0x1ec>
 800a4b8:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 800a4bc:	d1f4      	bne.n	800a4a8 <__ssvfscanf_r+0x1ec>
 800a4be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4c0:	b922      	cbnz	r2, 800a4cc <__ssvfscanf_r+0x210>
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	aa02      	add	r2, sp, #8
 800a4c6:	e9c2 3300 	strd	r3, r3, [r2]
 800a4ca:	637a      	str	r2, [r7, #52]	@ 0x34
 800a4cc:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 800a4d0:	e7c8      	b.n	800a464 <__ssvfscanf_r+0x1a8>
 800a4d2:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 800a4d6:	d1e7      	bne.n	800a4a8 <__ssvfscanf_r+0x1ec>
 800a4d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4da:	220a      	movs	r2, #10
 800a4dc:	fb02 3301 	mla	r3, r2, r1, r3
 800a4e0:	3b30      	subs	r3, #48	@ 0x30
 800a4e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4e4:	e7be      	b.n	800a464 <__ssvfscanf_r+0x1a8>
 800a4e6:	f046 0601 	orr.w	r6, r6, #1
 800a4ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a518 <__ssvfscanf_r+0x25c>)
 800a4ec:	e009      	b.n	800a502 <__ssvfscanf_r+0x246>
 800a4ee:	f046 0601 	orr.w	r6, r6, #1
 800a4f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <__ssvfscanf_r+0x260>)
 800a4f4:	61bb      	str	r3, [r7, #24]
 800a4f6:	2308      	movs	r3, #8
 800a4f8:	61fb      	str	r3, [r7, #28]
 800a4fa:	f04f 0803 	mov.w	r8, #3
 800a4fe:	e011      	b.n	800a524 <__ssvfscanf_r+0x268>
 800a500:	4b06      	ldr	r3, [pc, #24]	@ (800a51c <__ssvfscanf_r+0x260>)
 800a502:	61bb      	str	r3, [r7, #24]
 800a504:	230a      	movs	r3, #10
 800a506:	e7f7      	b.n	800a4f8 <__ssvfscanf_r+0x23c>
 800a508:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 800a50c:	4b03      	ldr	r3, [pc, #12]	@ (800a51c <__ssvfscanf_r+0x260>)
 800a50e:	61bb      	str	r3, [r7, #24]
 800a510:	2310      	movs	r3, #16
 800a512:	e7f1      	b.n	800a4f8 <__ssvfscanf_r+0x23c>
 800a514:	0800fd29 	.word	0x0800fd29
 800a518:	0800dc49 	.word	0x0800dc49
 800a51c:	0800dd29 	.word	0x0800dd29
 800a520:	f04f 0804 	mov.w	r8, #4
 800a524:	6863      	ldr	r3, [r4, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	dd4e      	ble.n	800a5c8 <__ssvfscanf_r+0x30c>
 800a52a:	0673      	lsls	r3, r6, #25
 800a52c:	d407      	bmi.n	800a53e <__ssvfscanf_r+0x282>
 800a52e:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 800a82c <__ssvfscanf_r+0x570>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	781a      	ldrb	r2, [r3, #0]
 800a536:	f819 2002 	ldrb.w	r2, [r9, r2]
 800a53a:	0710      	lsls	r0, r2, #28
 800a53c:	d44b      	bmi.n	800a5d6 <__ssvfscanf_r+0x31a>
 800a53e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a542:	f1b8 0f03 	cmp.w	r8, #3
 800a546:	d858      	bhi.n	800a5fa <__ssvfscanf_r+0x33e>
 800a548:	e8df f018 	tbh	[pc, r8, lsl #1]
 800a54c:	037801c1 	.word	0x037801c1
 800a550:	05f30514 	.word	0x05f30514
 800a554:	f046 0601 	orr.w	r6, r6, #1
 800a558:	f04f 0802 	mov.w	r8, #2
 800a55c:	e7e2      	b.n	800a524 <__ssvfscanf_r+0x268>
 800a55e:	6979      	ldr	r1, [r7, #20]
 800a560:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800a564:	f001 f91f 	bl	800b7a6 <__sccl>
 800a568:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 800a56c:	6178      	str	r0, [r7, #20]
 800a56e:	f04f 0801 	mov.w	r8, #1
 800a572:	e7d7      	b.n	800a524 <__ssvfscanf_r+0x268>
 800a574:	f046 0601 	orr.w	r6, r6, #1
 800a578:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 800a57c:	f04f 0800 	mov.w	r8, #0
 800a580:	e7d0      	b.n	800a524 <__ssvfscanf_r+0x268>
 800a582:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 800a586:	e7c1      	b.n	800a50c <__ssvfscanf_r+0x250>
 800a588:	06f1      	lsls	r1, r6, #27
 800a58a:	f53f aeb2 	bmi.w	800a2f2 <__ssvfscanf_r+0x36>
 800a58e:	0732      	lsls	r2, r6, #28
 800a590:	f855 3b04 	ldr.w	r3, [r5], #4
 800a594:	d502      	bpl.n	800a59c <__ssvfscanf_r+0x2e0>
 800a596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	e6aa      	b.n	800a2f2 <__ssvfscanf_r+0x36>
 800a59c:	0770      	lsls	r0, r6, #29
 800a59e:	d502      	bpl.n	800a5a6 <__ssvfscanf_r+0x2ea>
 800a5a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5a2:	801a      	strh	r2, [r3, #0]
 800a5a4:	e6a5      	b.n	800a2f2 <__ssvfscanf_r+0x36>
 800a5a6:	07f1      	lsls	r1, r6, #31
 800a5a8:	d502      	bpl.n	800a5b0 <__ssvfscanf_r+0x2f4>
 800a5aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e6a0      	b.n	800a2f2 <__ssvfscanf_r+0x36>
 800a5b0:	07b2      	lsls	r2, r6, #30
 800a5b2:	d5fa      	bpl.n	800a5aa <__ssvfscanf_r+0x2ee>
 800a5b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5b8:	17d2      	asrs	r2, r2, #31
 800a5ba:	e9c3 1200 	strd	r1, r2, [r3]
 800a5be:	e698      	b.n	800a2f2 <__ssvfscanf_r+0x36>
 800a5c0:	4b99      	ldr	r3, [pc, #612]	@ (800a828 <__ssvfscanf_r+0x56c>)
 800a5c2:	61bb      	str	r3, [r7, #24]
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	e797      	b.n	800a4f8 <__ssvfscanf_r+0x23c>
 800a5c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	f003 fd47 	bl	800e05e <__ssrefill_r>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d0aa      	beq.n	800a52a <__ssvfscanf_r+0x26e>
 800a5d4:	e734      	b.n	800a440 <__ssvfscanf_r+0x184>
 800a5d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5d8:	3201      	adds	r2, #1
 800a5da:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5dc:	6862      	ldr	r2, [r4, #4]
 800a5de:	3a01      	subs	r2, #1
 800a5e0:	2a00      	cmp	r2, #0
 800a5e2:	6062      	str	r2, [r4, #4]
 800a5e4:	dd02      	ble.n	800a5ec <__ssvfscanf_r+0x330>
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	e7a2      	b.n	800a532 <__ssvfscanf_r+0x276>
 800a5ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	f003 fd35 	bl	800e05e <__ssrefill_r>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d09c      	beq.n	800a532 <__ssvfscanf_r+0x276>
 800a5f8:	e722      	b.n	800a440 <__ssvfscanf_r+0x184>
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	bf38      	it	cc
 800a600:	2301      	movcc	r3, #1
 800a602:	4698      	mov	r8, r3
 800a604:	f016 0301 	ands.w	r3, r6, #1
 800a608:	f006 0b10 	and.w	fp, r6, #16
 800a60c:	f000 80eb 	beq.w	800a7e6 <__ssvfscanf_r+0x52a>
 800a610:	f1bb 0f00 	cmp.w	fp, #0
 800a614:	f040 8085 	bne.w	800a722 <__ssvfscanf_r+0x466>
 800a618:	462b      	mov	r3, r5
 800a61a:	0631      	lsls	r1, r6, #24
 800a61c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a622:	f140 8085 	bpl.w	800a730 <__ssvfscanf_r+0x474>
 800a626:	b13d      	cbz	r5, 800a638 <__ssvfscanf_r+0x37c>
 800a628:	2080      	movs	r0, #128	@ 0x80
 800a62a:	f001 fffd 	bl	800c628 <malloc>
 800a62e:	4606      	mov	r6, r0
 800a630:	b998      	cbnz	r0, 800a65a <__ssvfscanf_r+0x39e>
 800a632:	f04f 33ff 	mov.w	r3, #4294967295
 800a636:	627b      	str	r3, [r7, #36]	@ 0x24
 800a638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63a:	b143      	cbz	r3, 800a64e <__ssvfscanf_r+0x392>
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	3301      	adds	r3, #1
 800a640:	f000 87a4 	beq.w	800b58c <__ssvfscanf_r+0x12d0>
 800a644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	b108      	cbz	r0, 800a64e <__ssvfscanf_r+0x392>
 800a64a:	f001 fff5 	bl	800c638 <free>
 800a64e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a650:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 800a654:	46bd      	mov	sp, r7
 800a656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65c:	6028      	str	r0, [r5, #0]
 800a65e:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a662:	889b      	ldrh	r3, [r3, #4]
 800a664:	4599      	cmp	r9, r3
 800a666:	d314      	bcc.n	800a692 <__ssvfscanf_r+0x3d6>
 800a668:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800a66c:	4293      	cmp	r3, r2
 800a66e:	f200 878d 	bhi.w	800b58c <__ssvfscanf_r+0x12d0>
 800a672:	3308      	adds	r3, #8
 800a674:	fa1f fa83 	uxth.w	sl, r3
 800a678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67a:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	f002 fc58 	bl	800cf34 <realloc>
 800a684:	2800      	cmp	r0, #0
 800a686:	f000 8781 	beq.w	800b58c <__ssvfscanf_r+0x12d0>
 800a68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68c:	6018      	str	r0, [r3, #0]
 800a68e:	f8a3 a004 	strh.w	sl, [r3, #4]
 800a692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a694:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f109 0201 	add.w	r2, r9, #1
 800a69c:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800a6a0:	46aa      	mov	sl, r5
 800a6a2:	80ca      	strh	r2, [r1, #6]
 800a6a4:	4635      	mov	r5, r6
 800a6a6:	f04f 0920 	mov.w	r9, #32
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	613a      	str	r2, [r7, #16]
 800a6ae:	f001 f8d3 	bl	800b858 <__locale_mb_cur_max>
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	4290      	cmp	r0, r2
 800a6b6:	f43f aec3 	beq.w	800a440 <__ssvfscanf_r+0x184>
 800a6ba:	6821      	ldr	r1, [r4, #0]
 800a6bc:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 800a6c0:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a6c4:	f80c 0002 	strb.w	r0, [ip, r2]
 800a6c8:	1c53      	adds	r3, r2, #1
 800a6ca:	6862      	ldr	r2, [r4, #4]
 800a6cc:	3a01      	subs	r2, #1
 800a6ce:	e9c4 1200 	strd	r1, r2, [r4]
 800a6d2:	6a3a      	ldr	r2, [r7, #32]
 800a6d4:	2a03      	cmp	r2, #3
 800a6d6:	d102      	bne.n	800a6de <__ssvfscanf_r+0x422>
 800a6d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6da:	2a04      	cmp	r2, #4
 800a6dc:	d007      	beq.n	800a6ee <__ssvfscanf_r+0x432>
 800a6de:	2208      	movs	r2, #8
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800a6e6:	623b      	str	r3, [r7, #32]
 800a6e8:	f7fd fe53 	bl	8008392 <memset>
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a6f2:	9200      	str	r2, [sp, #0]
 800a6f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6f6:	613b      	str	r3, [r7, #16]
 800a6f8:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	f003 fc4b 	bl	800df98 <_mbrtowc_r>
 800a702:	1c42      	adds	r2, r0, #1
 800a704:	6238      	str	r0, [r7, #32]
 800a706:	f43f ae9b 	beq.w	800a440 <__ssvfscanf_r+0x184>
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	b9b8      	cbnz	r0, 800a73e <__ssvfscanf_r+0x482>
 800a70e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a710:	441a      	add	r2, r3
 800a712:	4613      	mov	r3, r2
 800a714:	f1bb 0f00 	cmp.w	fp, #0
 800a718:	d00e      	beq.n	800a738 <__ssvfscanf_r+0x47c>
 800a71a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a71c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a720:	e019      	b.n	800a756 <__ssvfscanf_r+0x49a>
 800a722:	f04f 0900 	mov.w	r9, #0
 800a726:	62fd      	str	r5, [r7, #44]	@ 0x2c
 800a728:	464e      	mov	r6, r9
 800a72a:	46ca      	mov	sl, r9
 800a72c:	464d      	mov	r5, r9
 800a72e:	e7bc      	b.n	800a6aa <__ssvfscanf_r+0x3ee>
 800a730:	46d9      	mov	r9, fp
 800a732:	465e      	mov	r6, fp
 800a734:	46da      	mov	sl, fp
 800a736:	e7b8      	b.n	800a6aa <__ssvfscanf_r+0x3ee>
 800a738:	f8c5 b000 	str.w	fp, [r5]
 800a73c:	e7ed      	b.n	800a71a <__ssvfscanf_r+0x45e>
 800a73e:	6a3a      	ldr	r2, [r7, #32]
 800a740:	3202      	adds	r2, #2
 800a742:	d025      	beq.n	800a790 <__ssvfscanf_r+0x4d4>
 800a744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a746:	441a      	add	r2, r3
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d1e5      	bne.n	800a71c <__ssvfscanf_r+0x460>
 800a750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a752:	2b04      	cmp	r3, #4
 800a754:	d1e2      	bne.n	800a71c <__ssvfscanf_r+0x460>
 800a756:	f1bb 0f00 	cmp.w	fp, #0
 800a75a:	d117      	bne.n	800a78c <__ssvfscanf_r+0x4d0>
 800a75c:	f1ba 0f00 	cmp.w	sl, #0
 800a760:	d013      	beq.n	800a78a <__ssvfscanf_r+0x4ce>
 800a762:	1bab      	subs	r3, r5, r6
 800a764:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800a768:	d80f      	bhi.n	800a78a <__ssvfscanf_r+0x4ce>
 800a76a:	4630      	mov	r0, r6
 800a76c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a770:	613b      	str	r3, [r7, #16]
 800a772:	f002 fbdf 	bl	800cf34 <realloc>
 800a776:	4606      	mov	r6, r0
 800a778:	2800      	cmp	r0, #0
 800a77a:	f43f af5a 	beq.w	800a632 <__ssvfscanf_r+0x376>
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f8ca 0000 	str.w	r0, [sl]
 800a784:	18c5      	adds	r5, r0, r3
 800a786:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a78a:	3504      	adds	r5, #4
 800a78c:	2200      	movs	r2, #0
 800a78e:	e000      	b.n	800a792 <__ssvfscanf_r+0x4d6>
 800a790:	461a      	mov	r2, r3
 800a792:	6863      	ldr	r3, [r4, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	dc14      	bgt.n	800a7c2 <__ssvfscanf_r+0x506>
 800a798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a79a:	613a      	str	r2, [r7, #16]
 800a79c:	4621      	mov	r1, r4
 800a79e:	f003 fc5e 	bl	800e05e <__ssrefill_r>
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	b168      	cbz	r0, 800a7c2 <__ssvfscanf_r+0x506>
 800a7a6:	2a00      	cmp	r2, #0
 800a7a8:	f47f ae4a 	bne.w	800a440 <__ssvfscanf_r+0x184>
 800a7ac:	f1ba 0f00 	cmp.w	sl, #0
 800a7b0:	d10c      	bne.n	800a7cc <__ssvfscanf_r+0x510>
 800a7b2:	f1bb 0f00 	cmp.w	fp, #0
 800a7b6:	d102      	bne.n	800a7be <__ssvfscanf_r+0x502>
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7be:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800a7c0:	e597      	b.n	800a2f2 <__ssvfscanf_r+0x36>
 800a7c2:	f1b8 0f00 	cmp.w	r8, #0
 800a7c6:	f47f af71 	bne.w	800a6ac <__ssvfscanf_r+0x3f0>
 800a7ca:	e7ef      	b.n	800a7ac <__ssvfscanf_r+0x4f0>
 800a7cc:	1ba9      	subs	r1, r5, r6
 800a7ce:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 800a7d2:	d9ee      	bls.n	800a7b2 <__ssvfscanf_r+0x4f6>
 800a7d4:	f8da 0000 	ldr.w	r0, [sl]
 800a7d8:	f002 fbac 	bl	800cf34 <realloc>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d0e8      	beq.n	800a7b2 <__ssvfscanf_r+0x4f6>
 800a7e0:	f8ca 0000 	str.w	r0, [sl]
 800a7e4:	e7e5      	b.n	800a7b2 <__ssvfscanf_r+0x4f6>
 800a7e6:	f1bb 0f00 	cmp.w	fp, #0
 800a7ea:	d021      	beq.n	800a830 <__ssvfscanf_r+0x574>
 800a7ec:	461e      	mov	r6, r3
 800a7ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a7f2:	4598      	cmp	r8, r3
 800a7f4:	dd11      	ble.n	800a81a <__ssvfscanf_r+0x55e>
 800a7f6:	441a      	add	r2, r3
 800a7f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7fa:	6022      	str	r2, [r4, #0]
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	441e      	add	r6, r3
 800a800:	eba8 0803 	sub.w	r8, r8, r3
 800a804:	f003 fc2b 	bl	800e05e <__ssrefill_r>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d0f0      	beq.n	800a7ee <__ssvfscanf_r+0x532>
 800a80c:	2e00      	cmp	r6, #0
 800a80e:	f43f ae17 	beq.w	800a440 <__ssvfscanf_r+0x184>
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a814:	4433      	add	r3, r6
 800a816:	633b      	str	r3, [r7, #48]	@ 0x30
 800a818:	e56b      	b.n	800a2f2 <__ssvfscanf_r+0x36>
 800a81a:	eba3 0308 	sub.w	r3, r3, r8
 800a81e:	4442      	add	r2, r8
 800a820:	4446      	add	r6, r8
 800a822:	6063      	str	r3, [r4, #4]
 800a824:	6022      	str	r2, [r4, #0]
 800a826:	e7f4      	b.n	800a812 <__ssvfscanf_r+0x556>
 800a828:	0800dc49 	.word	0x0800dc49
 800a82c:	0800fd29 	.word	0x0800fd29
 800a830:	46a9      	mov	r9, r5
 800a832:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800a836:	f859 5b04 	ldr.w	r5, [r9], #4
 800a83a:	d02c      	beq.n	800a896 <__ssvfscanf_r+0x5da>
 800a83c:	2d00      	cmp	r5, #0
 800a83e:	f43f ae33 	beq.w	800a4a8 <__ssvfscanf_r+0x1ec>
 800a842:	4640      	mov	r0, r8
 800a844:	f001 fef0 	bl	800c628 <malloc>
 800a848:	4682      	mov	sl, r0
 800a84a:	2800      	cmp	r0, #0
 800a84c:	f43f adfd 	beq.w	800a44a <__ssvfscanf_r+0x18e>
 800a850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a852:	6028      	str	r0, [r5, #0]
 800a854:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800a858:	889e      	ldrh	r6, [r3, #4]
 800a85a:	45b3      	cmp	fp, r6
 800a85c:	d311      	bcc.n	800a882 <__ssvfscanf_r+0x5c6>
 800a85e:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800a862:	429e      	cmp	r6, r3
 800a864:	f200 8692 	bhi.w	800b58c <__ssvfscanf_r+0x12d0>
 800a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86a:	3608      	adds	r6, #8
 800a86c:	b2b6      	uxth	r6, r6
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	00b1      	lsls	r1, r6, #2
 800a872:	f002 fb5f 	bl	800cf34 <realloc>
 800a876:	2800      	cmp	r0, #0
 800a878:	f000 8688 	beq.w	800b58c <__ssvfscanf_r+0x12d0>
 800a87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a87e:	6018      	str	r0, [r3, #0]
 800a880:	809e      	strh	r6, [r3, #4]
 800a882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a884:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f10b 0201 	add.w	r2, fp, #1
 800a88c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800a890:	462e      	mov	r6, r5
 800a892:	80ca      	strh	r2, [r1, #6]
 800a894:	4655      	mov	r5, sl
 800a896:	9400      	str	r4, [sp, #0]
 800a898:	4629      	mov	r1, r5
 800a89a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a89c:	4643      	mov	r3, r8
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f003 fbfa 	bl	800e098 <_sfread_r>
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f adca 	beq.w	800a440 <__ssvfscanf_r+0x184>
 800a8ac:	b13e      	cbz	r6, 800a8be <__ssvfscanf_r+0x602>
 800a8ae:	4580      	cmp	r8, r0
 800a8b0:	d905      	bls.n	800a8be <__ssvfscanf_r+0x602>
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	6830      	ldr	r0, [r6, #0]
 800a8b6:	f002 fb3d 	bl	800cf34 <realloc>
 800a8ba:	b100      	cbz	r0, 800a8be <__ssvfscanf_r+0x602>
 800a8bc:	6030      	str	r0, [r6, #0]
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	442b      	add	r3, r5
 800a8c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8ca:	464d      	mov	r5, r9
 800a8cc:	e511      	b.n	800a2f2 <__ssvfscanf_r+0x36>
 800a8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	bf08      	it	eq
 800a8d4:	f04f 33ff 	moveq.w	r3, #4294967295
 800a8d8:	f016 0801 	ands.w	r8, r6, #1
 800a8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8de:	f006 0a10 	and.w	sl, r6, #16
 800a8e2:	f000 8101 	beq.w	800aae8 <__ssvfscanf_r+0x82c>
 800a8e6:	f1ba 0f00 	cmp.w	sl, #0
 800a8ea:	f040 80a4 	bne.w	800aa36 <__ssvfscanf_r+0x77a>
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	0633      	lsls	r3, r6, #24
 800a8f8:	f140 80a5 	bpl.w	800aa46 <__ssvfscanf_r+0x78a>
 800a8fc:	2d00      	cmp	r5, #0
 800a8fe:	f43f ae9b 	beq.w	800a638 <__ssvfscanf_r+0x37c>
 800a902:	2080      	movs	r0, #128	@ 0x80
 800a904:	f001 fe90 	bl	800c628 <malloc>
 800a908:	4680      	mov	r8, r0
 800a90a:	2800      	cmp	r0, #0
 800a90c:	f43f ae91 	beq.w	800a632 <__ssvfscanf_r+0x376>
 800a910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a912:	6028      	str	r0, [r5, #0]
 800a914:	88de      	ldrh	r6, [r3, #6]
 800a916:	889b      	ldrh	r3, [r3, #4]
 800a918:	429e      	cmp	r6, r3
 800a91a:	d314      	bcc.n	800a946 <__ssvfscanf_r+0x68a>
 800a91c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800a920:	4293      	cmp	r3, r2
 800a922:	f200 8633 	bhi.w	800b58c <__ssvfscanf_r+0x12d0>
 800a926:	3308      	adds	r3, #8
 800a928:	fa1f f983 	uxth.w	r9, r3
 800a92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a932:	6818      	ldr	r0, [r3, #0]
 800a934:	f002 fafe 	bl	800cf34 <realloc>
 800a938:	2800      	cmp	r0, #0
 800a93a:	f000 8627 	beq.w	800b58c <__ssvfscanf_r+0x12d0>
 800a93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a940:	6018      	str	r0, [r3, #0]
 800a942:	f8a3 9004 	strh.w	r9, [r3, #4]
 800a946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a948:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	1c72      	adds	r2, r6, #1
 800a94e:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 800a952:	46ab      	mov	fp, r5
 800a954:	80ca      	strh	r2, [r1, #6]
 800a956:	4645      	mov	r5, r8
 800a958:	f04f 0920 	mov.w	r9, #32
 800a95c:	2600      	movs	r6, #0
 800a95e:	f000 ff7b 	bl	800b858 <__locale_mb_cur_max>
 800a962:	42b0      	cmp	r0, r6
 800a964:	f43f ad6c 	beq.w	800a440 <__ssvfscanf_r+0x184>
 800a968:	1c73      	adds	r3, r6, #1
 800a96a:	613b      	str	r3, [r7, #16]
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800a972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a976:	558a      	strb	r2, [r1, r6]
 800a978:	6862      	ldr	r2, [r4, #4]
 800a97a:	3a01      	subs	r2, #1
 800a97c:	e9c4 3200 	strd	r3, r2, [r4]
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	2b03      	cmp	r3, #3
 800a984:	d102      	bne.n	800a98c <__ssvfscanf_r+0x6d0>
 800a986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d005      	beq.n	800a998 <__ssvfscanf_r+0x6dc>
 800a98c:	2208      	movs	r2, #8
 800a98e:	2100      	movs	r1, #0
 800a990:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800a994:	f7fd fcfd 	bl	8008392 <memset>
 800a998:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9a2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	f003 faf6 	bl	800df98 <_mbrtowc_r>
 800a9ac:	1c46      	adds	r6, r0, #1
 800a9ae:	6238      	str	r0, [r7, #32]
 800a9b0:	f43f ad46 	beq.w	800a440 <__ssvfscanf_r+0x184>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d14a      	bne.n	800aa4e <__ssvfscanf_r+0x792>
 800a9b8:	6028      	str	r0, [r5, #0]
 800a9ba:	682e      	ldr	r6, [r5, #0]
 800a9bc:	1c70      	adds	r0, r6, #1
 800a9be:	d056      	beq.n	800aa6e <__ssvfscanf_r+0x7b2>
 800a9c0:	2208      	movs	r2, #8
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800a9c8:	f7fd fce3 	bl	8008392 <memset>
 800a9cc:	4b9a      	ldr	r3, [pc, #616]	@ (800ac38 <__ssvfscanf_r+0x97c>)
 800a9ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9d4:	60bb      	str	r3, [r7, #8]
 800a9d6:	4632      	mov	r2, r6
 800a9d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a9dc:	68be      	ldr	r6, [r7, #8]
 800a9de:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800a9e2:	47b0      	blx	r6
 800a9e4:	2801      	cmp	r0, #1
 800a9e6:	d144      	bne.n	800aa72 <__ssvfscanf_r+0x7b6>
 800a9e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a9ec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a9f0:	5c9b      	ldrb	r3, [r3, r2]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d148      	bne.n	800aa88 <__ssvfscanf_r+0x7cc>
 800a9f6:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d13a      	bne.n	800aa76 <__ssvfscanf_r+0x7ba>
 800aa00:	f1ba 0f00 	cmp.w	sl, #0
 800aa04:	d115      	bne.n	800aa32 <__ssvfscanf_r+0x776>
 800aa06:	f8c5 a000 	str.w	sl, [r5]
 800aa0a:	f1bb 0f00 	cmp.w	fp, #0
 800aa0e:	d00d      	beq.n	800aa2c <__ssvfscanf_r+0x770>
 800aa10:	eba5 0108 	sub.w	r1, r5, r8
 800aa14:	108b      	asrs	r3, r1, #2
 800aa16:	3301      	adds	r3, #1
 800aa18:	4599      	cmp	r9, r3
 800aa1a:	d907      	bls.n	800aa2c <__ssvfscanf_r+0x770>
 800aa1c:	f8db 0000 	ldr.w	r0, [fp]
 800aa20:	3104      	adds	r1, #4
 800aa22:	f002 fa87 	bl	800cf34 <realloc>
 800aa26:	b108      	cbz	r0, 800aa2c <__ssvfscanf_r+0x770>
 800aa28:	f8cb 0000 	str.w	r0, [fp]
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2e:	3301      	adds	r3, #1
 800aa30:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa32:	68fd      	ldr	r5, [r7, #12]
 800aa34:	e45d      	b.n	800a2f2 <__ssvfscanf_r+0x36>
 800aa36:	f04f 0900 	mov.w	r9, #0
 800aa3a:	60fd      	str	r5, [r7, #12]
 800aa3c:	46c8      	mov	r8, r9
 800aa3e:	46cb      	mov	fp, r9
 800aa40:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 800aa44:	e78a      	b.n	800a95c <__ssvfscanf_r+0x6a0>
 800aa46:	46d1      	mov	r9, sl
 800aa48:	46d0      	mov	r8, sl
 800aa4a:	46d3      	mov	fp, sl
 800aa4c:	e786      	b.n	800a95c <__ssvfscanf_r+0x6a0>
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	3302      	adds	r3, #2
 800aa52:	d1b2      	bne.n	800a9ba <__ssvfscanf_r+0x6fe>
 800aa54:	693e      	ldr	r6, [r7, #16]
 800aa56:	6863      	ldr	r3, [r4, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dc40      	bgt.n	800aade <__ssvfscanf_r+0x822>
 800aa5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa5e:	4621      	mov	r1, r4
 800aa60:	f003 fafd 	bl	800e05e <__ssrefill_r>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d03a      	beq.n	800aade <__ssvfscanf_r+0x822>
 800aa68:	2e00      	cmp	r6, #0
 800aa6a:	d0c9      	beq.n	800aa00 <__ssvfscanf_r+0x744>
 800aa6c:	e4e8      	b.n	800a440 <__ssvfscanf_r+0x184>
 800aa6e:	4632      	mov	r2, r6
 800aa70:	e7bc      	b.n	800a9ec <__ssvfscanf_r+0x730>
 800aa72:	2200      	movs	r2, #0
 800aa74:	e7ba      	b.n	800a9ec <__ssvfscanf_r+0x730>
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	4622      	mov	r2, r4
 800aa7e:	5cf1      	ldrb	r1, [r6, r3]
 800aa80:	613b      	str	r3, [r7, #16]
 800aa82:	f003 fab1 	bl	800dfe8 <_sungetc_r>
 800aa86:	e7b8      	b.n	800a9fa <__ssvfscanf_r+0x73e>
 800aa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	d102      	bne.n	800aa9c <__ssvfscanf_r+0x7e0>
 800aa96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa98:	2b04      	cmp	r3, #4
 800aa9a:	d002      	beq.n	800aaa2 <__ssvfscanf_r+0x7e6>
 800aa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaa2:	f1ba 0f00 	cmp.w	sl, #0
 800aaa6:	d118      	bne.n	800aada <__ssvfscanf_r+0x81e>
 800aaa8:	3504      	adds	r5, #4
 800aaaa:	f1bb 0f00 	cmp.w	fp, #0
 800aaae:	d014      	beq.n	800aada <__ssvfscanf_r+0x81e>
 800aab0:	eba5 0608 	sub.w	r6, r5, r8
 800aab4:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 800aab8:	d80d      	bhi.n	800aad6 <__ssvfscanf_r+0x81a>
 800aaba:	4640      	mov	r0, r8
 800aabc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aac0:	f002 fa38 	bl	800cf34 <realloc>
 800aac4:	4680      	mov	r8, r0
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f adb3 	beq.w	800a632 <__ssvfscanf_r+0x376>
 800aacc:	1985      	adds	r5, r0, r6
 800aace:	f8cb 0000 	str.w	r0, [fp]
 800aad2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800aad6:	4656      	mov	r6, sl
 800aad8:	e7bd      	b.n	800aa56 <__ssvfscanf_r+0x79a>
 800aada:	2600      	movs	r6, #0
 800aadc:	e7bb      	b.n	800aa56 <__ssvfscanf_r+0x79a>
 800aade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f47f af3c 	bne.w	800a95e <__ssvfscanf_r+0x6a2>
 800aae6:	e78b      	b.n	800aa00 <__ssvfscanf_r+0x744>
 800aae8:	f1ba 0f00 	cmp.w	sl, #0
 800aaec:	d01e      	beq.n	800ab2c <__ssvfscanf_r+0x870>
 800aaee:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	781a      	ldrb	r2, [r3, #0]
 800aaf6:	5cb2      	ldrb	r2, [r6, r2]
 800aaf8:	b91a      	cbnz	r2, 800ab02 <__ssvfscanf_r+0x846>
 800aafa:	f1b8 0f00 	cmp.w	r8, #0
 800aafe:	d112      	bne.n	800ab26 <__ssvfscanf_r+0x86a>
 800ab00:	e4d2      	b.n	800a4a8 <__ssvfscanf_r+0x1ec>
 800ab02:	3301      	adds	r3, #1
 800ab04:	6862      	ldr	r2, [r4, #4]
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0a:	f108 0801 	add.w	r8, r8, #1
 800ab0e:	3a01      	subs	r2, #1
 800ab10:	4543      	cmp	r3, r8
 800ab12:	6062      	str	r2, [r4, #4]
 800ab14:	d007      	beq.n	800ab26 <__ssvfscanf_r+0x86a>
 800ab16:	2a00      	cmp	r2, #0
 800ab18:	dceb      	bgt.n	800aaf2 <__ssvfscanf_r+0x836>
 800ab1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	f003 fa9e 	bl	800e05e <__ssrefill_r>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d0e5      	beq.n	800aaf2 <__ssvfscanf_r+0x836>
 800ab26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab28:	4443      	add	r3, r8
 800ab2a:	e674      	b.n	800a816 <__ssvfscanf_r+0x55a>
 800ab2c:	46a9      	mov	r9, r5
 800ab2e:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800ab32:	f859 8b04 	ldr.w	r8, [r9], #4
 800ab36:	d07d      	beq.n	800ac34 <__ssvfscanf_r+0x978>
 800ab38:	f1b8 0f00 	cmp.w	r8, #0
 800ab3c:	f43f acb4 	beq.w	800a4a8 <__ssvfscanf_r+0x1ec>
 800ab40:	2020      	movs	r0, #32
 800ab42:	f001 fd71 	bl	800c628 <malloc>
 800ab46:	4606      	mov	r6, r0
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	f43f ac7e 	beq.w	800a44a <__ssvfscanf_r+0x18e>
 800ab4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab50:	f8c8 0000 	str.w	r0, [r8]
 800ab54:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800ab58:	889d      	ldrh	r5, [r3, #4]
 800ab5a:	45aa      	cmp	sl, r5
 800ab5c:	d311      	bcc.n	800ab82 <__ssvfscanf_r+0x8c6>
 800ab5e:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800ab62:	429d      	cmp	r5, r3
 800ab64:	f200 8512 	bhi.w	800b58c <__ssvfscanf_r+0x12d0>
 800ab68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6a:	3508      	adds	r5, #8
 800ab6c:	b2ad      	uxth	r5, r5
 800ab6e:	6818      	ldr	r0, [r3, #0]
 800ab70:	00a9      	lsls	r1, r5, #2
 800ab72:	f002 f9df 	bl	800cf34 <realloc>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	f000 8508 	beq.w	800b58c <__ssvfscanf_r+0x12d0>
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7e:	6018      	str	r0, [r3, #0]
 800ab80:	809d      	strh	r5, [r3, #4]
 800ab82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab84:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f10a 0201 	add.w	r2, sl, #1
 800ab8c:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 800ab90:	80ca      	strh	r2, [r1, #6]
 800ab92:	46c2      	mov	sl, r8
 800ab94:	46b0      	mov	r8, r6
 800ab96:	2620      	movs	r6, #32
 800ab98:	4645      	mov	r5, r8
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800aba0:	781a      	ldrb	r2, [r3, #0]
 800aba2:	5c8a      	ldrb	r2, [r1, r2]
 800aba4:	b35a      	cbz	r2, 800abfe <__ssvfscanf_r+0x942>
 800aba6:	6862      	ldr	r2, [r4, #4]
 800aba8:	3a01      	subs	r2, #1
 800abaa:	6062      	str	r2, [r4, #4]
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	6022      	str	r2, [r4, #0]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	f808 3b01 	strb.w	r3, [r8], #1
 800abb6:	f1ba 0f00 	cmp.w	sl, #0
 800abba:	d010      	beq.n	800abde <__ssvfscanf_r+0x922>
 800abbc:	eba8 0b05 	sub.w	fp, r8, r5
 800abc0:	45b3      	cmp	fp, r6
 800abc2:	d30c      	bcc.n	800abde <__ssvfscanf_r+0x922>
 800abc4:	0076      	lsls	r6, r6, #1
 800abc6:	4628      	mov	r0, r5
 800abc8:	4631      	mov	r1, r6
 800abca:	f002 f9b3 	bl	800cf34 <realloc>
 800abce:	4605      	mov	r5, r0
 800abd0:	2800      	cmp	r0, #0
 800abd2:	f43f ac3a 	beq.w	800a44a <__ssvfscanf_r+0x18e>
 800abd6:	eb00 080b 	add.w	r8, r0, fp
 800abda:	f8ca 0000 	str.w	r0, [sl]
 800abde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe0:	3b01      	subs	r3, #1
 800abe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abe4:	d00b      	beq.n	800abfe <__ssvfscanf_r+0x942>
 800abe6:	6863      	ldr	r3, [r4, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	dcd6      	bgt.n	800ab9a <__ssvfscanf_r+0x8de>
 800abec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abee:	4621      	mov	r1, r4
 800abf0:	f003 fa35 	bl	800e05e <__ssrefill_r>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d0d0      	beq.n	800ab9a <__ssvfscanf_r+0x8de>
 800abf8:	45a8      	cmp	r8, r5
 800abfa:	f43f ac21 	beq.w	800a440 <__ssvfscanf_r+0x184>
 800abfe:	ebb8 0505 	subs.w	r5, r8, r5
 800ac02:	f43f ac51 	beq.w	800a4a8 <__ssvfscanf_r+0x1ec>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f888 3000 	strb.w	r3, [r8]
 800ac0c:	f1ba 0f00 	cmp.w	sl, #0
 800ac10:	d009      	beq.n	800ac26 <__ssvfscanf_r+0x96a>
 800ac12:	1c69      	adds	r1, r5, #1
 800ac14:	428e      	cmp	r6, r1
 800ac16:	d906      	bls.n	800ac26 <__ssvfscanf_r+0x96a>
 800ac18:	f8da 0000 	ldr.w	r0, [sl]
 800ac1c:	f002 f98a 	bl	800cf34 <realloc>
 800ac20:	b108      	cbz	r0, 800ac26 <__ssvfscanf_r+0x96a>
 800ac22:	f8ca 0000 	str.w	r0, [sl]
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	3301      	adds	r3, #1
 800ac2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2e:	442b      	add	r3, r5
 800ac30:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac32:	e64a      	b.n	800a8ca <__ssvfscanf_r+0x60e>
 800ac34:	46b2      	mov	sl, r6
 800ac36:	e7af      	b.n	800ab98 <__ssvfscanf_r+0x8dc>
 800ac38:	2000058c 	.word	0x2000058c
 800ac3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bf08      	it	eq
 800ac42:	f04f 33ff 	moveq.w	r3, #4294967295
 800ac46:	f016 0901 	ands.w	r9, r6, #1
 800ac4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac4c:	f006 0810 	and.w	r8, r6, #16
 800ac50:	f000 80ef 	beq.w	800ae32 <__ssvfscanf_r+0xb76>
 800ac54:	f1b8 0f00 	cmp.w	r8, #0
 800ac58:	f040 8098 	bne.w	800ad8c <__ssvfscanf_r+0xad0>
 800ac5c:	462b      	mov	r3, r5
 800ac5e:	0631      	lsls	r1, r6, #24
 800ac60:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac64:	613b      	str	r3, [r7, #16]
 800ac66:	f140 8099 	bpl.w	800ad9c <__ssvfscanf_r+0xae0>
 800ac6a:	2d00      	cmp	r5, #0
 800ac6c:	f43f ace4 	beq.w	800a638 <__ssvfscanf_r+0x37c>
 800ac70:	2080      	movs	r0, #128	@ 0x80
 800ac72:	f001 fcd9 	bl	800c628 <malloc>
 800ac76:	4606      	mov	r6, r0
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	f43f acda 	beq.w	800a632 <__ssvfscanf_r+0x376>
 800ac7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac80:	6028      	str	r0, [r5, #0]
 800ac82:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800ac86:	889b      	ldrh	r3, [r3, #4]
 800ac88:	4599      	cmp	r9, r3
 800ac8a:	d314      	bcc.n	800acb6 <__ssvfscanf_r+0x9fa>
 800ac8c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800ac90:	4293      	cmp	r3, r2
 800ac92:	f200 847b 	bhi.w	800b58c <__ssvfscanf_r+0x12d0>
 800ac96:	3308      	adds	r3, #8
 800ac98:	fa1f fa83 	uxth.w	sl, r3
 800ac9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac9e:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800aca2:	6818      	ldr	r0, [r3, #0]
 800aca4:	f002 f946 	bl	800cf34 <realloc>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	f000 846f 	beq.w	800b58c <__ssvfscanf_r+0x12d0>
 800acae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb0:	6018      	str	r0, [r3, #0]
 800acb2:	f8a3 a004 	strh.w	sl, [r3, #4]
 800acb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f109 0201 	add.w	r2, r9, #1
 800acc0:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800acc4:	46aa      	mov	sl, r5
 800acc6:	80ca      	strh	r2, [r1, #6]
 800acc8:	4635      	mov	r5, r6
 800acca:	f04f 0920 	mov.w	r9, #32
 800acce:	2300      	movs	r3, #0
 800acd0:	6822      	ldr	r2, [r4, #0]
 800acd2:	49a7      	ldr	r1, [pc, #668]	@ (800af70 <__ssvfscanf_r+0xcb4>)
 800acd4:	7812      	ldrb	r2, [r2, #0]
 800acd6:	5c8a      	ldrb	r2, [r1, r2]
 800acd8:	0710      	lsls	r0, r2, #28
 800acda:	d43c      	bmi.n	800ad56 <__ssvfscanf_r+0xa9a>
 800acdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acde:	2a00      	cmp	r2, #0
 800ace0:	d039      	beq.n	800ad56 <__ssvfscanf_r+0xa9a>
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	f000 fdb8 	bl	800b858 <__locale_mb_cur_max>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4298      	cmp	r0, r3
 800acec:	f43f aba8 	beq.w	800a440 <__ssvfscanf_r+0x184>
 800acf0:	6822      	ldr	r2, [r4, #0]
 800acf2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800acf6:	f812 0b01 	ldrb.w	r0, [r2], #1
 800acfa:	54c8      	strb	r0, [r1, r3]
 800acfc:	f103 0b01 	add.w	fp, r3, #1
 800ad00:	6863      	ldr	r3, [r4, #4]
 800ad02:	3b01      	subs	r3, #1
 800ad04:	e9c4 2300 	strd	r2, r3, [r4]
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d102      	bne.n	800ad14 <__ssvfscanf_r+0xa58>
 800ad0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad10:	2b04      	cmp	r3, #4
 800ad12:	d005      	beq.n	800ad20 <__ssvfscanf_r+0xa64>
 800ad14:	2208      	movs	r2, #8
 800ad16:	2100      	movs	r1, #0
 800ad18:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800ad1c:	f7fd fb39 	bl	8008392 <memset>
 800ad20:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800ad2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad2c:	465b      	mov	r3, fp
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f003 f932 	bl	800df98 <_mbrtowc_r>
 800ad34:	1c42      	adds	r2, r0, #1
 800ad36:	6238      	str	r0, [r7, #32]
 800ad38:	f43f ab82 	beq.w	800a440 <__ssvfscanf_r+0x184>
 800ad3c:	bb90      	cbnz	r0, 800ada4 <__ssvfscanf_r+0xae8>
 800ad3e:	6028      	str	r0, [r5, #0]
 800ad40:	6828      	ldr	r0, [r5, #0]
 800ad42:	f003 f943 	bl	800dfcc <iswspace>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d047      	beq.n	800addc <__ssvfscanf_r+0xb20>
 800ad4c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ad50:	f1bb 0f00 	cmp.w	fp, #0
 800ad54:	d139      	bne.n	800adca <__ssvfscanf_r+0xb0e>
 800ad56:	f1b8 0f00 	cmp.w	r8, #0
 800ad5a:	d114      	bne.n	800ad86 <__ssvfscanf_r+0xaca>
 800ad5c:	f8c5 8000 	str.w	r8, [r5]
 800ad60:	f1ba 0f00 	cmp.w	sl, #0
 800ad64:	d00c      	beq.n	800ad80 <__ssvfscanf_r+0xac4>
 800ad66:	1ba9      	subs	r1, r5, r6
 800ad68:	108b      	asrs	r3, r1, #2
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	4599      	cmp	r9, r3
 800ad6e:	d907      	bls.n	800ad80 <__ssvfscanf_r+0xac4>
 800ad70:	f8da 0000 	ldr.w	r0, [sl]
 800ad74:	3104      	adds	r1, #4
 800ad76:	f002 f8dd 	bl	800cf34 <realloc>
 800ad7a:	b108      	cbz	r0, 800ad80 <__ssvfscanf_r+0xac4>
 800ad7c:	f8ca 0000 	str.w	r0, [sl]
 800ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad82:	3301      	adds	r3, #1
 800ad84:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad86:	693d      	ldr	r5, [r7, #16]
 800ad88:	f7ff bab3 	b.w	800a2f2 <__ssvfscanf_r+0x36>
 800ad8c:	f04f 0900 	mov.w	r9, #0
 800ad90:	613d      	str	r5, [r7, #16]
 800ad92:	464e      	mov	r6, r9
 800ad94:	46ca      	mov	sl, r9
 800ad96:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 800ad9a:	e798      	b.n	800acce <__ssvfscanf_r+0xa12>
 800ad9c:	46c1      	mov	r9, r8
 800ad9e:	4646      	mov	r6, r8
 800ada0:	46c2      	mov	sl, r8
 800ada2:	e794      	b.n	800acce <__ssvfscanf_r+0xa12>
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	3302      	adds	r3, #2
 800ada8:	d1ca      	bne.n	800ad40 <__ssvfscanf_r+0xa84>
 800adaa:	465b      	mov	r3, fp
 800adac:	6862      	ldr	r2, [r4, #4]
 800adae:	2a00      	cmp	r2, #0
 800adb0:	dc8e      	bgt.n	800acd0 <__ssvfscanf_r+0xa14>
 800adb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adb4:	60fb      	str	r3, [r7, #12]
 800adb6:	4621      	mov	r1, r4
 800adb8:	f003 f951 	bl	800e05e <__ssrefill_r>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2800      	cmp	r0, #0
 800adc0:	d086      	beq.n	800acd0 <__ssvfscanf_r+0xa14>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f47f ab3c 	bne.w	800a440 <__ssvfscanf_r+0x184>
 800adc8:	e7c5      	b.n	800ad56 <__ssvfscanf_r+0xa9a>
 800adca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800adce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800add0:	f813 100b 	ldrb.w	r1, [r3, fp]
 800add4:	4622      	mov	r2, r4
 800add6:	f003 f907 	bl	800dfe8 <_sungetc_r>
 800adda:	e7b7      	b.n	800ad4c <__ssvfscanf_r+0xa90>
 800addc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adde:	445a      	add	r2, fp
 800ade0:	633a      	str	r2, [r7, #48]	@ 0x30
 800ade2:	6a3a      	ldr	r2, [r7, #32]
 800ade4:	2a03      	cmp	r2, #3
 800ade6:	d102      	bne.n	800adee <__ssvfscanf_r+0xb32>
 800ade8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adea:	2a04      	cmp	r2, #4
 800adec:	d002      	beq.n	800adf4 <__ssvfscanf_r+0xb38>
 800adee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adf0:	3a01      	subs	r2, #1
 800adf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adf4:	f1b8 0f00 	cmp.w	r8, #0
 800adf8:	d1d8      	bne.n	800adac <__ssvfscanf_r+0xaf0>
 800adfa:	3504      	adds	r5, #4
 800adfc:	f1ba 0f00 	cmp.w	sl, #0
 800ae00:	d015      	beq.n	800ae2e <__ssvfscanf_r+0xb72>
 800ae02:	eba5 0b06 	sub.w	fp, r5, r6
 800ae06:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 800ae0a:	d80e      	bhi.n	800ae2a <__ssvfscanf_r+0xb6e>
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae12:	f002 f88f 	bl	800cf34 <realloc>
 800ae16:	4606      	mov	r6, r0
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	f43f ac0a 	beq.w	800a632 <__ssvfscanf_r+0x376>
 800ae1e:	eb00 050b 	add.w	r5, r0, fp
 800ae22:	f8ca 0000 	str.w	r0, [sl]
 800ae26:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800ae2a:	4643      	mov	r3, r8
 800ae2c:	e7be      	b.n	800adac <__ssvfscanf_r+0xaf0>
 800ae2e:	4653      	mov	r3, sl
 800ae30:	e7bc      	b.n	800adac <__ssvfscanf_r+0xaf0>
 800ae32:	f1b8 0f00 	cmp.w	r8, #0
 800ae36:	d01a      	beq.n	800ae6e <__ssvfscanf_r+0xbb2>
 800ae38:	4e4d      	ldr	r6, [pc, #308]	@ (800af70 <__ssvfscanf_r+0xcb4>)
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	781a      	ldrb	r2, [r3, #0]
 800ae3e:	5cb2      	ldrb	r2, [r6, r2]
 800ae40:	0711      	lsls	r1, r2, #28
 800ae42:	d411      	bmi.n	800ae68 <__ssvfscanf_r+0xbac>
 800ae44:	3301      	adds	r3, #1
 800ae46:	6862      	ldr	r2, [r4, #4]
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4c:	f109 0901 	add.w	r9, r9, #1
 800ae50:	3a01      	subs	r2, #1
 800ae52:	454b      	cmp	r3, r9
 800ae54:	6062      	str	r2, [r4, #4]
 800ae56:	d007      	beq.n	800ae68 <__ssvfscanf_r+0xbac>
 800ae58:	2a00      	cmp	r2, #0
 800ae5a:	dcee      	bgt.n	800ae3a <__ssvfscanf_r+0xb7e>
 800ae5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae5e:	4621      	mov	r1, r4
 800ae60:	f003 f8fd 	bl	800e05e <__ssrefill_r>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d0e8      	beq.n	800ae3a <__ssvfscanf_r+0xb7e>
 800ae68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6a:	444b      	add	r3, r9
 800ae6c:	e4d3      	b.n	800a816 <__ssvfscanf_r+0x55a>
 800ae6e:	46a8      	mov	r8, r5
 800ae70:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800ae74:	f858 5b04 	ldr.w	r5, [r8], #4
 800ae78:	d077      	beq.n	800af6a <__ssvfscanf_r+0xcae>
 800ae7a:	2d00      	cmp	r5, #0
 800ae7c:	f43f ab14 	beq.w	800a4a8 <__ssvfscanf_r+0x1ec>
 800ae80:	2020      	movs	r0, #32
 800ae82:	f001 fbd1 	bl	800c628 <malloc>
 800ae86:	4681      	mov	r9, r0
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	f43f aade 	beq.w	800a44a <__ssvfscanf_r+0x18e>
 800ae8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae90:	6028      	str	r0, [r5, #0]
 800ae92:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800ae96:	889e      	ldrh	r6, [r3, #4]
 800ae98:	45b2      	cmp	sl, r6
 800ae9a:	d311      	bcc.n	800aec0 <__ssvfscanf_r+0xc04>
 800ae9c:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800aea0:	429e      	cmp	r6, r3
 800aea2:	f200 8373 	bhi.w	800b58c <__ssvfscanf_r+0x12d0>
 800aea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea8:	3608      	adds	r6, #8
 800aeaa:	b2b6      	uxth	r6, r6
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	00b1      	lsls	r1, r6, #2
 800aeb0:	f002 f840 	bl	800cf34 <realloc>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	f000 8369 	beq.w	800b58c <__ssvfscanf_r+0x12d0>
 800aeba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aebc:	6018      	str	r0, [r3, #0]
 800aebe:	809e      	strh	r6, [r3, #4]
 800aec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f10a 0201 	add.w	r2, sl, #1
 800aeca:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 800aece:	80ca      	strh	r2, [r1, #6]
 800aed0:	46aa      	mov	sl, r5
 800aed2:	2620      	movs	r6, #32
 800aed4:	464d      	mov	r5, r9
 800aed6:	46a9      	mov	r9, r5
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	4925      	ldr	r1, [pc, #148]	@ (800af70 <__ssvfscanf_r+0xcb4>)
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	5c8a      	ldrb	r2, [r1, r2]
 800aee0:	0712      	lsls	r2, r2, #28
 800aee2:	d428      	bmi.n	800af36 <__ssvfscanf_r+0xc7a>
 800aee4:	6862      	ldr	r2, [r4, #4]
 800aee6:	3a01      	subs	r2, #1
 800aee8:	6062      	str	r2, [r4, #4]
 800aeea:	1c5a      	adds	r2, r3, #1
 800aeec:	6022      	str	r2, [r4, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	f805 3b01 	strb.w	r3, [r5], #1
 800aef4:	f1ba 0f00 	cmp.w	sl, #0
 800aef8:	d010      	beq.n	800af1c <__ssvfscanf_r+0xc60>
 800aefa:	eba5 0b09 	sub.w	fp, r5, r9
 800aefe:	45b3      	cmp	fp, r6
 800af00:	d30c      	bcc.n	800af1c <__ssvfscanf_r+0xc60>
 800af02:	0076      	lsls	r6, r6, #1
 800af04:	4648      	mov	r0, r9
 800af06:	4631      	mov	r1, r6
 800af08:	f002 f814 	bl	800cf34 <realloc>
 800af0c:	4681      	mov	r9, r0
 800af0e:	2800      	cmp	r0, #0
 800af10:	f43f aa9b 	beq.w	800a44a <__ssvfscanf_r+0x18e>
 800af14:	eb00 050b 	add.w	r5, r0, fp
 800af18:	f8ca 0000 	str.w	r0, [sl]
 800af1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1e:	3b01      	subs	r3, #1
 800af20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af22:	d008      	beq.n	800af36 <__ssvfscanf_r+0xc7a>
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	dcd6      	bgt.n	800aed8 <__ssvfscanf_r+0xc1c>
 800af2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af2c:	4621      	mov	r1, r4
 800af2e:	f003 f896 	bl	800e05e <__ssrefill_r>
 800af32:	2800      	cmp	r0, #0
 800af34:	d0d0      	beq.n	800aed8 <__ssvfscanf_r+0xc1c>
 800af36:	2300      	movs	r3, #0
 800af38:	702b      	strb	r3, [r5, #0]
 800af3a:	eba5 0509 	sub.w	r5, r5, r9
 800af3e:	f1ba 0f00 	cmp.w	sl, #0
 800af42:	d009      	beq.n	800af58 <__ssvfscanf_r+0xc9c>
 800af44:	1c69      	adds	r1, r5, #1
 800af46:	428e      	cmp	r6, r1
 800af48:	d906      	bls.n	800af58 <__ssvfscanf_r+0xc9c>
 800af4a:	f8da 0000 	ldr.w	r0, [sl]
 800af4e:	f001 fff1 	bl	800cf34 <realloc>
 800af52:	b108      	cbz	r0, 800af58 <__ssvfscanf_r+0xc9c>
 800af54:	f8ca 0000 	str.w	r0, [sl]
 800af58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5a:	442b      	add	r3, r5
 800af5c:	633b      	str	r3, [r7, #48]	@ 0x30
 800af5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af60:	3301      	adds	r3, #1
 800af62:	627b      	str	r3, [r7, #36]	@ 0x24
 800af64:	4645      	mov	r5, r8
 800af66:	f7ff b9c4 	b.w	800a2f2 <__ssvfscanf_r+0x36>
 800af6a:	46b2      	mov	sl, r6
 800af6c:	e7b3      	b.n	800aed6 <__ssvfscanf_r+0xc1a>
 800af6e:	bf00      	nop
 800af70:	0800fd29 	.word	0x0800fd29
 800af74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af76:	3b01      	subs	r3, #1
 800af78:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 800af7c:	bf81      	itttt	hi
 800af7e:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 800af80:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 800af84:	eb03 090c 	addhi.w	r9, r3, ip
 800af88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af8c:	bf8c      	ite	hi
 800af8e:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 800af90:	f04f 0900 	movls.w	r9, #0
 800af94:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 800af98:	f04f 0a00 	mov.w	sl, #0
 800af9c:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 800afa0:	6822      	ldr	r2, [r4, #0]
 800afa2:	7813      	ldrb	r3, [r2, #0]
 800afa4:	2b39      	cmp	r3, #57	@ 0x39
 800afa6:	d80f      	bhi.n	800afc8 <__ssvfscanf_r+0xd0c>
 800afa8:	2b2a      	cmp	r3, #42	@ 0x2a
 800afaa:	d91a      	bls.n	800afe2 <__ssvfscanf_r+0xd26>
 800afac:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800afb0:	290e      	cmp	r1, #14
 800afb2:	d816      	bhi.n	800afe2 <__ssvfscanf_r+0xd26>
 800afb4:	e8df f001 	tbb	[pc, r1]
 800afb8:	15781578 	.word	0x15781578
 800afbc:	68683f15 	.word	0x68683f15
 800afc0:	68686868 	.word	0x68686868
 800afc4:	7068      	.short	0x7068
 800afc6:	70          	.byte	0x70
 800afc7:	00          	.byte	0x00
 800afc8:	2b66      	cmp	r3, #102	@ 0x66
 800afca:	d832      	bhi.n	800b032 <__ssvfscanf_r+0xd76>
 800afcc:	2b60      	cmp	r3, #96	@ 0x60
 800afce:	d803      	bhi.n	800afd8 <__ssvfscanf_r+0xd1c>
 800afd0:	2b46      	cmp	r3, #70	@ 0x46
 800afd2:	d804      	bhi.n	800afde <__ssvfscanf_r+0xd22>
 800afd4:	2b40      	cmp	r3, #64	@ 0x40
 800afd6:	d904      	bls.n	800afe2 <__ssvfscanf_r+0xd26>
 800afd8:	69f9      	ldr	r1, [r7, #28]
 800afda:	290a      	cmp	r1, #10
 800afdc:	e062      	b.n	800b0a4 <__ssvfscanf_r+0xde8>
 800afde:	2b58      	cmp	r3, #88	@ 0x58
 800afe0:	d068      	beq.n	800b0b4 <__ssvfscanf_r+0xdf8>
 800afe2:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 800afe6:	d011      	beq.n	800b00c <__ssvfscanf_r+0xd50>
 800afe8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800afec:	4598      	cmp	r8, r3
 800afee:	d908      	bls.n	800b002 <__ssvfscanf_r+0xd46>
 800aff0:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800aff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aff6:	4622      	mov	r2, r4
 800aff8:	f002 fff6 	bl	800dfe8 <_sungetc_r>
 800affc:	f108 39ff 	add.w	r9, r8, #4294967295
 800b000:	46c8      	mov	r8, r9
 800b002:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b006:	4598      	cmp	r8, r3
 800b008:	f43f aa4e 	beq.w	800a4a8 <__ssvfscanf_r+0x1ec>
 800b00c:	f01b 0210 	ands.w	r2, fp, #16
 800b010:	d16c      	bne.n	800b0ec <__ssvfscanf_r+0xe30>
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b016:	69be      	ldr	r6, [r7, #24]
 800b018:	f888 2000 	strb.w	r2, [r8]
 800b01c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800b020:	47b0      	blx	r6
 800b022:	f01b 0f20 	tst.w	fp, #32
 800b026:	f105 0904 	add.w	r9, r5, #4
 800b02a:	d056      	beq.n	800b0da <__ssvfscanf_r+0xe1e>
 800b02c:	682b      	ldr	r3, [r5, #0]
 800b02e:	6018      	str	r0, [r3, #0]
 800b030:	e058      	b.n	800b0e4 <__ssvfscanf_r+0xe28>
 800b032:	2b78      	cmp	r3, #120	@ 0x78
 800b034:	e7d4      	b.n	800afe0 <__ssvfscanf_r+0xd24>
 800b036:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 800b03a:	d00a      	beq.n	800b052 <__ssvfscanf_r+0xd96>
 800b03c:	69f9      	ldr	r1, [r7, #28]
 800b03e:	b919      	cbnz	r1, 800b048 <__ssvfscanf_r+0xd8c>
 800b040:	2108      	movs	r1, #8
 800b042:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 800b046:	61f9      	str	r1, [r7, #28]
 800b048:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 800b04c:	d004      	beq.n	800b058 <__ssvfscanf_r+0xd9c>
 800b04e:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 800b052:	f808 3b01 	strb.w	r3, [r8], #1
 800b056:	e00b      	b.n	800b070 <__ssvfscanf_r+0xdb4>
 800b058:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 800b05c:	f1b9 0f00 	cmp.w	r9, #0
 800b060:	d004      	beq.n	800b06c <__ssvfscanf_r+0xdb0>
 800b062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b064:	3301      	adds	r3, #1
 800b066:	f109 39ff 	add.w	r9, r9, #4294967295
 800b06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b06c:	f10a 0a01 	add.w	sl, sl, #1
 800b070:	6863      	ldr	r3, [r4, #4]
 800b072:	3b01      	subs	r3, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	6063      	str	r3, [r4, #4]
 800b078:	dd28      	ble.n	800b0cc <__ssvfscanf_r+0xe10>
 800b07a:	3201      	adds	r2, #1
 800b07c:	6022      	str	r2, [r4, #0]
 800b07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b080:	3b01      	subs	r3, #1
 800b082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b084:	d18c      	bne.n	800afa0 <__ssvfscanf_r+0xce4>
 800b086:	e7ac      	b.n	800afe2 <__ssvfscanf_r+0xd26>
 800b088:	69f8      	ldr	r0, [r7, #28]
 800b08a:	499b      	ldr	r1, [pc, #620]	@ (800b2f8 <__ssvfscanf_r+0x103c>)
 800b08c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800b090:	61f9      	str	r1, [r7, #28]
 800b092:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 800b096:	e7dc      	b.n	800b052 <__ssvfscanf_r+0xd96>
 800b098:	69f8      	ldr	r0, [r7, #28]
 800b09a:	4997      	ldr	r1, [pc, #604]	@ (800b2f8 <__ssvfscanf_r+0x103c>)
 800b09c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800b0a0:	61f9      	str	r1, [r7, #28]
 800b0a2:	2908      	cmp	r1, #8
 800b0a4:	dcf5      	bgt.n	800b092 <__ssvfscanf_r+0xdd6>
 800b0a6:	e79c      	b.n	800afe2 <__ssvfscanf_r+0xd26>
 800b0a8:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 800b0ac:	d099      	beq.n	800afe2 <__ssvfscanf_r+0xd26>
 800b0ae:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 800b0b2:	e7ce      	b.n	800b052 <__ssvfscanf_r+0xd96>
 800b0b4:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 800b0b8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b0bc:	d191      	bne.n	800afe2 <__ssvfscanf_r+0xd26>
 800b0be:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 800b0c2:	2110      	movs	r1, #16
 800b0c4:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 800b0c8:	61f9      	str	r1, [r7, #28]
 800b0ca:	e7c2      	b.n	800b052 <__ssvfscanf_r+0xd96>
 800b0cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	f002 ffc5 	bl	800e05e <__ssrefill_r>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d0d2      	beq.n	800b07e <__ssvfscanf_r+0xdc2>
 800b0d8:	e783      	b.n	800afe2 <__ssvfscanf_r+0xd26>
 800b0da:	f01b 0f08 	tst.w	fp, #8
 800b0de:	d00b      	beq.n	800b0f8 <__ssvfscanf_r+0xe3c>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	7018      	strb	r0, [r3, #0]
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0ea:	464d      	mov	r5, r9
 800b0ec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b0f0:	eba8 0803 	sub.w	r8, r8, r3
 800b0f4:	44d0      	add	r8, sl
 800b0f6:	e516      	b.n	800ab26 <__ssvfscanf_r+0x86a>
 800b0f8:	f01b 0f04 	tst.w	fp, #4
 800b0fc:	d002      	beq.n	800b104 <__ssvfscanf_r+0xe48>
 800b0fe:	682b      	ldr	r3, [r5, #0]
 800b100:	8018      	strh	r0, [r3, #0]
 800b102:	e7ef      	b.n	800b0e4 <__ssvfscanf_r+0xe28>
 800b104:	f01b 0201 	ands.w	r2, fp, #1
 800b108:	d190      	bne.n	800b02c <__ssvfscanf_r+0xd70>
 800b10a:	f01b 0f02 	tst.w	fp, #2
 800b10e:	d08d      	beq.n	800b02c <__ssvfscanf_r+0xd70>
 800b110:	4b7a      	ldr	r3, [pc, #488]	@ (800b2fc <__ssvfscanf_r+0x1040>)
 800b112:	69b9      	ldr	r1, [r7, #24]
 800b114:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b116:	4299      	cmp	r1, r3
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800b11e:	d105      	bne.n	800b12c <__ssvfscanf_r+0xe70>
 800b120:	f002 ff38 	bl	800df94 <_strtoull_r>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	e9c3 0100 	strd	r0, r1, [r3]
 800b12a:	e7db      	b.n	800b0e4 <__ssvfscanf_r+0xe28>
 800b12c:	f002 fe9a 	bl	800de64 <_strtoll_r>
 800b130:	e7f8      	b.n	800b124 <__ssvfscanf_r+0xe68>
 800b132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b134:	f7fd f948 	bl	80083c8 <_localeconv_r>
 800b138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b13a:	6802      	ldr	r2, [r0, #0]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 800b142:	f04f 0800 	mov.w	r8, #0
 800b146:	bf88      	it	hi
 800b148:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 800b14a:	f8c7 8010 	str.w	r8, [r7, #16]
 800b14e:	e9c7 8802 	strd	r8, r8, [r7, #8]
 800b152:	bf81      	itttt	hi
 800b154:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 800b158:	f240 115d 	movwhi	r1, #349	@ 0x15d
 800b15c:	181b      	addhi	r3, r3, r0
 800b15e:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 800b160:	bf98      	it	ls
 800b162:	2300      	movls	r3, #0
 800b164:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 800b168:	46c3      	mov	fp, r8
 800b16a:	46c2      	mov	sl, r8
 800b16c:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 800b170:	6821      	ldr	r1, [r4, #0]
 800b172:	6079      	str	r1, [r7, #4]
 800b174:	7808      	ldrb	r0, [r1, #0]
 800b176:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 800b17a:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 800b17e:	f200 8123 	bhi.w	800b3c8 <__ssvfscanf_r+0x110c>
 800b182:	e8df f01c 	tbh	[pc, ip, lsl #1]
 800b186:	0089      	.short	0x0089
 800b188:	00890121 	.word	0x00890121
 800b18c:	01210121 	.word	0x01210121
 800b190:	006f004f 	.word	0x006f004f
 800b194:	006f006f 	.word	0x006f006f
 800b198:	006f006f 	.word	0x006f006f
 800b19c:	006f006f 	.word	0x006f006f
 800b1a0:	006f006f 	.word	0x006f006f
 800b1a4:	01210121 	.word	0x01210121
 800b1a8:	01210121 	.word	0x01210121
 800b1ac:	01210121 	.word	0x01210121
 800b1b0:	00af0121 	.word	0x00af0121
 800b1b4:	006d006d 	.word	0x006d006d
 800b1b8:	011e006d 	.word	0x011e006d
 800b1bc:	012100ed 	.word	0x012100ed
 800b1c0:	00d60121 	.word	0x00d60121
 800b1c4:	01210121 	.word	0x01210121
 800b1c8:	01210121 	.word	0x01210121
 800b1cc:	01210090 	.word	0x01210090
 800b1d0:	01210104 	.word	0x01210104
 800b1d4:	01210121 	.word	0x01210121
 800b1d8:	012100f8 	.word	0x012100f8
 800b1dc:	01210121 	.word	0x01210121
 800b1e0:	00fe0073 	.word	0x00fe0073
 800b1e4:	01210121 	.word	0x01210121
 800b1e8:	01210121 	.word	0x01210121
 800b1ec:	01210121 	.word	0x01210121
 800b1f0:	00af0121 	.word	0x00af0121
 800b1f4:	006d006d 	.word	0x006d006d
 800b1f8:	011e006d 	.word	0x011e006d
 800b1fc:	012100ed 	.word	0x012100ed
 800b200:	00d60121 	.word	0x00d60121
 800b204:	01210121 	.word	0x01210121
 800b208:	01210121 	.word	0x01210121
 800b20c:	01210090 	.word	0x01210090
 800b210:	01210104 	.word	0x01210104
 800b214:	01210121 	.word	0x01210121
 800b218:	012100f8 	.word	0x012100f8
 800b21c:	01210121 	.word	0x01210121
 800b220:	00fe0073 	.word	0x00fe0073
 800b224:	05f1      	lsls	r1, r6, #23
 800b226:	d51d      	bpl.n	800b264 <__ssvfscanf_r+0xfa8>
 800b228:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 800b22c:	f10a 0a01 	add.w	sl, sl, #1
 800b230:	b11b      	cbz	r3, 800b23a <__ssvfscanf_r+0xf7e>
 800b232:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b234:	3001      	adds	r0, #1
 800b236:	3b01      	subs	r3, #1
 800b238:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b23a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b23c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b23e:	3001      	adds	r0, #1
 800b240:	6338      	str	r0, [r7, #48]	@ 0x30
 800b242:	6860      	ldr	r0, [r4, #4]
 800b244:	3801      	subs	r0, #1
 800b246:	3901      	subs	r1, #1
 800b248:	2800      	cmp	r0, #0
 800b24a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b24c:	6060      	str	r0, [r4, #4]
 800b24e:	f340 80cc 	ble.w	800b3ea <__ssvfscanf_r+0x112e>
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	3101      	adds	r1, #1
 800b256:	6021      	str	r1, [r4, #0]
 800b258:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b25a:	2900      	cmp	r1, #0
 800b25c:	d188      	bne.n	800b170 <__ssvfscanf_r+0xeb4>
 800b25e:	e052      	b.n	800b306 <__ssvfscanf_r+0x104a>
 800b260:	0531      	lsls	r1, r6, #20
 800b262:	d550      	bpl.n	800b306 <__ssvfscanf_r+0x104a>
 800b264:	eb1b 0c08 	adds.w	ip, fp, r8
 800b268:	d041      	beq.n	800b2ee <__ssvfscanf_r+0x1032>
 800b26a:	e04c      	b.n	800b306 <__ssvfscanf_r+0x104a>
 800b26c:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 800b270:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800b274:	d147      	bne.n	800b306 <__ssvfscanf_r+0x104a>
 800b276:	f1ba 0f01 	cmp.w	sl, #1
 800b27a:	d144      	bne.n	800b306 <__ssvfscanf_r+0x104a>
 800b27c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b27e:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800b282:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 800b286:	3901      	subs	r1, #1
 800b288:	f809 cb01 	strb.w	ip, [r9], #1
 800b28c:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 800b290:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b292:	f04f 0a00 	mov.w	sl, #0
 800b296:	e003      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b298:	0631      	lsls	r1, r6, #24
 800b29a:	d534      	bpl.n	800b306 <__ssvfscanf_r+0x104a>
 800b29c:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 800b2a0:	f809 0b01 	strb.w	r0, [r9], #1
 800b2a4:	e7c9      	b.n	800b23a <__ssvfscanf_r+0xf7e>
 800b2a6:	f1bb 0f00 	cmp.w	fp, #0
 800b2aa:	d10c      	bne.n	800b2c6 <__ssvfscanf_r+0x100a>
 800b2ac:	f1ba 0f00 	cmp.w	sl, #0
 800b2b0:	d10d      	bne.n	800b2ce <__ssvfscanf_r+0x1012>
 800b2b2:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 800b2b6:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 800b2ba:	d108      	bne.n	800b2ce <__ssvfscanf_r+0x1012>
 800b2bc:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 800b2c0:	f04f 0b01 	mov.w	fp, #1
 800b2c4:	e7ec      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b2c6:	f1bb 0f02 	cmp.w	fp, #2
 800b2ca:	f000 8088 	beq.w	800b3de <__ssvfscanf_r+0x1122>
 800b2ce:	f1b8 0f01 	cmp.w	r8, #1
 800b2d2:	d002      	beq.n	800b2da <__ssvfscanf_r+0x101e>
 800b2d4:	f1b8 0f04 	cmp.w	r8, #4
 800b2d8:	d115      	bne.n	800b306 <__ssvfscanf_r+0x104a>
 800b2da:	f108 0801 	add.w	r8, r8, #1
 800b2de:	fa5f f888 	uxtb.w	r8, r8
 800b2e2:	e7dd      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b2e4:	0531      	lsls	r1, r6, #20
 800b2e6:	d50b      	bpl.n	800b300 <__ssvfscanf_r+0x1044>
 800b2e8:	eb1b 0c08 	adds.w	ip, fp, r8
 800b2ec:	d108      	bne.n	800b300 <__ssvfscanf_r+0x1044>
 800b2ee:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 800b2f2:	46e0      	mov	r8, ip
 800b2f4:	46e3      	mov	fp, ip
 800b2f6:	e7d3      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b2f8:	0800fade 	.word	0x0800fade
 800b2fc:	0800dd29 	.word	0x0800dd29
 800b300:	f1bb 0f01 	cmp.w	fp, #1
 800b304:	d06e      	beq.n	800b3e4 <__ssvfscanf_r+0x1128>
 800b306:	f1ba 0f00 	cmp.w	sl, #0
 800b30a:	d001      	beq.n	800b310 <__ssvfscanf_r+0x1054>
 800b30c:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 800b310:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b314:	f1bb 0f01 	cmp.w	fp, #1
 800b318:	d873      	bhi.n	800b402 <__ssvfscanf_r+0x1146>
 800b31a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 800b31e:	45a9      	cmp	r9, r5
 800b320:	f67f a8c2 	bls.w	800a4a8 <__ssvfscanf_r+0x1ec>
 800b324:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800b328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b32a:	4622      	mov	r2, r4
 800b32c:	f002 fe5c 	bl	800dfe8 <_sungetc_r>
 800b330:	e7f5      	b.n	800b31e <__ssvfscanf_r+0x1062>
 800b332:	f1b8 0f00 	cmp.w	r8, #0
 800b336:	d10d      	bne.n	800b354 <__ssvfscanf_r+0x1098>
 800b338:	f1ba 0f00 	cmp.w	sl, #0
 800b33c:	d1e6      	bne.n	800b30c <__ssvfscanf_r+0x1050>
 800b33e:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 800b342:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 800b346:	f040 8124 	bne.w	800b592 <__ssvfscanf_r+0x12d6>
 800b34a:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 800b34e:	f04f 0801 	mov.w	r8, #1
 800b352:	e7a5      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b354:	f1b8 0f03 	cmp.w	r8, #3
 800b358:	d0bf      	beq.n	800b2da <__ssvfscanf_r+0x101e>
 800b35a:	f1b8 0f05 	cmp.w	r8, #5
 800b35e:	e7bb      	b.n	800b2d8 <__ssvfscanf_r+0x101c>
 800b360:	0531      	lsls	r1, r6, #20
 800b362:	d502      	bpl.n	800b36a <__ssvfscanf_r+0x10ae>
 800b364:	eb1b 0c08 	adds.w	ip, fp, r8
 800b368:	d0c1      	beq.n	800b2ee <__ssvfscanf_r+0x1032>
 800b36a:	f1b8 0f02 	cmp.w	r8, #2
 800b36e:	d1ca      	bne.n	800b306 <__ssvfscanf_r+0x104a>
 800b370:	f04f 0803 	mov.w	r8, #3
 800b374:	e794      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b376:	f1b8 0f06 	cmp.w	r8, #6
 800b37a:	d1c4      	bne.n	800b306 <__ssvfscanf_r+0x104a>
 800b37c:	f04f 0807 	mov.w	r8, #7
 800b380:	e78e      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b382:	f1b8 0f07 	cmp.w	r8, #7
 800b386:	d1be      	bne.n	800b306 <__ssvfscanf_r+0x104a>
 800b388:	f04f 0808 	mov.w	r8, #8
 800b38c:	e788      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b38e:	0531      	lsls	r1, r6, #20
 800b390:	d5b9      	bpl.n	800b306 <__ssvfscanf_r+0x104a>
 800b392:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 800b396:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 800b39a:	d005      	beq.n	800b3a8 <__ssvfscanf_r+0x10ec>
 800b39c:	0571      	lsls	r1, r6, #21
 800b39e:	d5b2      	bpl.n	800b306 <__ssvfscanf_r+0x104a>
 800b3a0:	f1ba 0f00 	cmp.w	sl, #0
 800b3a4:	f000 80f5 	beq.w	800b592 <__ssvfscanf_r+0x12d6>
 800b3a8:	05b1      	lsls	r1, r6, #22
 800b3aa:	bf58      	it	pl
 800b3ac:	6939      	ldrpl	r1, [r7, #16]
 800b3ae:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 800b3b2:	bf5c      	itt	pl
 800b3b4:	ebaa 0101 	subpl.w	r1, sl, r1
 800b3b8:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 800b3bc:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 800b3c0:	e767      	b.n	800b292 <__ssvfscanf_r+0xfd6>
 800b3c2:	0531      	lsls	r1, r6, #20
 800b3c4:	d5e5      	bpl.n	800b392 <__ssvfscanf_r+0x10d6>
 800b3c6:	e74d      	b.n	800b264 <__ssvfscanf_r+0xfa8>
 800b3c8:	f892 c000 	ldrb.w	ip, [r2]
 800b3cc:	4584      	cmp	ip, r0
 800b3ce:	d19a      	bne.n	800b306 <__ssvfscanf_r+0x104a>
 800b3d0:	05b1      	lsls	r1, r6, #22
 800b3d2:	d598      	bpl.n	800b306 <__ssvfscanf_r+0x104a>
 800b3d4:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 800b3d8:	f8c7 a010 	str.w	sl, [r7, #16]
 800b3dc:	e760      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b3de:	f04f 0b03 	mov.w	fp, #3
 800b3e2:	e75d      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b3e4:	f04f 0b02 	mov.w	fp, #2
 800b3e8:	e75a      	b.n	800b2a0 <__ssvfscanf_r+0xfe4>
 800b3ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	e9c7 2300 	strd	r2, r3, [r7]
 800b3f2:	f002 fe34 	bl	800e05e <__ssrefill_r>
 800b3f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	f43f af2c 	beq.w	800b258 <__ssvfscanf_r+0xf9c>
 800b400:	e781      	b.n	800b306 <__ssvfscanf_r+0x104a>
 800b402:	f108 33ff 	add.w	r3, r8, #4294967295
 800b406:	2b06      	cmp	r3, #6
 800b408:	d827      	bhi.n	800b45a <__ssvfscanf_r+0x119e>
 800b40a:	f1b8 0f02 	cmp.w	r8, #2
 800b40e:	d834      	bhi.n	800b47a <__ssvfscanf_r+0x11be>
 800b410:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 800b414:	45a9      	cmp	r9, r5
 800b416:	f67f a847 	bls.w	800a4a8 <__ssvfscanf_r+0x1ec>
 800b41a:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800b41e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b420:	4622      	mov	r2, r4
 800b422:	f002 fde1 	bl	800dfe8 <_sungetc_r>
 800b426:	e7f5      	b.n	800b414 <__ssvfscanf_r+0x1158>
 800b428:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b42c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b430:	4622      	mov	r2, r4
 800b432:	f002 fdd9 	bl	800dfe8 <_sungetc_r>
 800b436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b438:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b43c:	fa5f fb8b 	uxtb.w	fp, fp
 800b440:	f1bb 0f02 	cmp.w	fp, #2
 800b444:	d1f0      	bne.n	800b428 <__ssvfscanf_r+0x116c>
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	f1a8 0803 	sub.w	r8, r8, #3
 800b44c:	fa5f f888 	uxtb.w	r8, r8
 800b450:	eba3 0308 	sub.w	r3, r3, r8
 800b454:	eba9 0908 	sub.w	r9, r9, r8
 800b458:	633b      	str	r3, [r7, #48]	@ 0x30
 800b45a:	05f3      	lsls	r3, r6, #23
 800b45c:	d52d      	bpl.n	800b4ba <__ssvfscanf_r+0x11fe>
 800b45e:	0570      	lsls	r0, r6, #21
 800b460:	d50e      	bpl.n	800b480 <__ssvfscanf_r+0x11c4>
 800b462:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 800b466:	45a9      	cmp	r9, r5
 800b468:	f67f a81e 	bls.w	800a4a8 <__ssvfscanf_r+0x1ec>
 800b46c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800b470:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b472:	4622      	mov	r2, r4
 800b474:	f002 fdb8 	bl	800dfe8 <_sungetc_r>
 800b478:	e7f5      	b.n	800b466 <__ssvfscanf_r+0x11aa>
 800b47a:	46c3      	mov	fp, r8
 800b47c:	464b      	mov	r3, r9
 800b47e:	e7db      	b.n	800b438 <__ssvfscanf_r+0x117c>
 800b480:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 800b484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b486:	2965      	cmp	r1, #101	@ 0x65
 800b488:	f109 38ff 	add.w	r8, r9, #4294967295
 800b48c:	f103 3bff 	add.w	fp, r3, #4294967295
 800b490:	d00c      	beq.n	800b4ac <__ssvfscanf_r+0x11f0>
 800b492:	2945      	cmp	r1, #69	@ 0x45
 800b494:	d00a      	beq.n	800b4ac <__ssvfscanf_r+0x11f0>
 800b496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b498:	4622      	mov	r2, r4
 800b49a:	f002 fda5 	bl	800dfe8 <_sungetc_r>
 800b49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a0:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 800b4a4:	f1a9 0802 	sub.w	r8, r9, #2
 800b4a8:	f1a3 0b02 	sub.w	fp, r3, #2
 800b4ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4ae:	4622      	mov	r2, r4
 800b4b0:	f002 fd9a 	bl	800dfe8 <_sungetc_r>
 800b4b4:	46c1      	mov	r9, r8
 800b4b6:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 800b4ba:	f016 0210 	ands.w	r2, r6, #16
 800b4be:	f47e af18 	bne.w	800a2f2 <__ssvfscanf_r+0x36>
 800b4c2:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 800b4c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4ca:	f889 2000 	strb.w	r2, [r9]
 800b4ce:	d119      	bne.n	800b504 <__ssvfscanf_r+0x1248>
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	4553      	cmp	r3, sl
 800b4d4:	eba3 020a 	sub.w	r2, r3, sl
 800b4d8:	d121      	bne.n	800b51e <__ssvfscanf_r+0x1262>
 800b4da:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800b4de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f002 fb31 	bl	800db48 <_strtod_r>
 800b4e6:	07f1      	lsls	r1, r6, #31
 800b4e8:	ec59 8b10 	vmov	r8, r9, d0
 800b4ec:	f105 0a04 	add.w	sl, r5, #4
 800b4f0:	d520      	bpl.n	800b534 <__ssvfscanf_r+0x1278>
 800b4f2:	682b      	ldr	r3, [r5, #0]
 800b4f4:	ed83 0b00 	vstr	d0, [r3]
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4fe:	4655      	mov	r5, sl
 800b500:	f7fe bef7 	b.w	800a2f2 <__ssvfscanf_r+0x36>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d0e7      	beq.n	800b4da <__ssvfscanf_r+0x121e>
 800b50a:	68b9      	ldr	r1, [r7, #8]
 800b50c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b50e:	230a      	movs	r3, #10
 800b510:	3101      	adds	r1, #1
 800b512:	f002 fb99 	bl	800dc48 <_strtol_r>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800b51c:	1ac2      	subs	r2, r0, r3
 800b51e:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 800b522:	4599      	cmp	r9, r3
 800b524:	bf28      	it	cs
 800b526:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 800b52a:	491b      	ldr	r1, [pc, #108]	@ (800b598 <__ssvfscanf_r+0x12dc>)
 800b52c:	4648      	mov	r0, r9
 800b52e:	f000 f973 	bl	800b818 <sprintf>
 800b532:	e7d2      	b.n	800b4da <__ssvfscanf_r+0x121e>
 800b534:	07b2      	lsls	r2, r6, #30
 800b536:	682d      	ldr	r5, [r5, #0]
 800b538:	d502      	bpl.n	800b540 <__ssvfscanf_r+0x1284>
 800b53a:	ed85 0b00 	vstr	d0, [r5]
 800b53e:	e7db      	b.n	800b4f8 <__ssvfscanf_r+0x123c>
 800b540:	4642      	mov	r2, r8
 800b542:	464b      	mov	r3, r9
 800b544:	4640      	mov	r0, r8
 800b546:	4649      	mov	r1, r9
 800b548:	f7f5 fb20 	bl	8000b8c <__aeabi_dcmpun>
 800b54c:	b128      	cbz	r0, 800b55a <__ssvfscanf_r+0x129e>
 800b54e:	4813      	ldr	r0, [pc, #76]	@ (800b59c <__ssvfscanf_r+0x12e0>)
 800b550:	f000 f9b8 	bl	800b8c4 <nanf>
 800b554:	ed85 0a00 	vstr	s0, [r5]
 800b558:	e7ce      	b.n	800b4f8 <__ssvfscanf_r+0x123c>
 800b55a:	4640      	mov	r0, r8
 800b55c:	4649      	mov	r1, r9
 800b55e:	f7f5 fb73 	bl	8000c48 <__aeabi_d2f>
 800b562:	6028      	str	r0, [r5, #0]
 800b564:	e7c8      	b.n	800b4f8 <__ssvfscanf_r+0x123c>
 800b566:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	f001 f864 	bl	800c638 <free>
 800b570:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b574:	3401      	adds	r4, #1
 800b576:	601e      	str	r6, [r3, #0]
 800b578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b57a:	681d      	ldr	r5, [r3, #0]
 800b57c:	88db      	ldrh	r3, [r3, #6]
 800b57e:	42a3      	cmp	r3, r4
 800b580:	dcf1      	bgt.n	800b566 <__ssvfscanf_r+0x12aa>
 800b582:	f04f 33ff 	mov.w	r3, #4294967295
 800b586:	627b      	str	r3, [r7, #36]	@ 0x24
 800b588:	f7ff b85c 	b.w	800a644 <__ssvfscanf_r+0x388>
 800b58c:	2400      	movs	r4, #0
 800b58e:	4626      	mov	r6, r4
 800b590:	e7f2      	b.n	800b578 <__ssvfscanf_r+0x12bc>
 800b592:	f04f 0a00 	mov.w	sl, #0
 800b596:	e6bb      	b.n	800b310 <__ssvfscanf_r+0x1054>
 800b598:	0800fad8 	.word	0x0800fad8
 800b59c:	0800fe64 	.word	0x0800fe64

0800b5a0 <_fclose_r>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	b1b1      	cbz	r1, 800b5d6 <_fclose_r+0x36>
 800b5a8:	b118      	cbz	r0, 800b5b2 <_fclose_r+0x12>
 800b5aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b5ac:	b90b      	cbnz	r3, 800b5b2 <_fclose_r+0x12>
 800b5ae:	f7fc fdfd 	bl	80081ac <__sinit>
 800b5b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5b4:	07de      	lsls	r6, r3, #31
 800b5b6:	d405      	bmi.n	800b5c4 <_fclose_r+0x24>
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	0598      	lsls	r0, r3, #22
 800b5bc:	d402      	bmi.n	800b5c4 <_fclose_r+0x24>
 800b5be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5c0:	f7fc ff78 	bl	80084b4 <__retarget_lock_acquire_recursive>
 800b5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5c8:	b943      	cbnz	r3, 800b5dc <_fclose_r+0x3c>
 800b5ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5cc:	07d9      	lsls	r1, r3, #31
 800b5ce:	d402      	bmi.n	800b5d6 <_fclose_r+0x36>
 800b5d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5d2:	f7fc ff70 	bl	80084b6 <__retarget_lock_release_recursive>
 800b5d6:	2600      	movs	r6, #0
 800b5d8:	4630      	mov	r0, r6
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	4621      	mov	r1, r4
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f000 f834 	bl	800b64c <__sflush_r>
 800b5e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	b133      	cbz	r3, 800b5f8 <_fclose_r+0x58>
 800b5ea:	69e1      	ldr	r1, [r4, #28]
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	4798      	blx	r3
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	bfb8      	it	lt
 800b5f4:	f04f 36ff 	movlt.w	r6, #4294967295
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	061a      	lsls	r2, r3, #24
 800b5fc:	d503      	bpl.n	800b606 <_fclose_r+0x66>
 800b5fe:	6921      	ldr	r1, [r4, #16]
 800b600:	4628      	mov	r0, r5
 800b602:	f7fc ffcd 	bl	80085a0 <_free_r>
 800b606:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b608:	b141      	cbz	r1, 800b61c <_fclose_r+0x7c>
 800b60a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800b60e:	4299      	cmp	r1, r3
 800b610:	d002      	beq.n	800b618 <_fclose_r+0x78>
 800b612:	4628      	mov	r0, r5
 800b614:	f7fc ffc4 	bl	80085a0 <_free_r>
 800b618:	2300      	movs	r3, #0
 800b61a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b61c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b61e:	b121      	cbz	r1, 800b62a <_fclose_r+0x8a>
 800b620:	4628      	mov	r0, r5
 800b622:	f7fc ffbd 	bl	80085a0 <_free_r>
 800b626:	2300      	movs	r3, #0
 800b628:	6463      	str	r3, [r4, #68]	@ 0x44
 800b62a:	f7fc fdb3 	bl	8008194 <__sfp_lock_acquire>
 800b62e:	2300      	movs	r3, #0
 800b630:	81a3      	strh	r3, [r4, #12]
 800b632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b634:	07db      	lsls	r3, r3, #31
 800b636:	d402      	bmi.n	800b63e <_fclose_r+0x9e>
 800b638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b63a:	f7fc ff3c 	bl	80084b6 <__retarget_lock_release_recursive>
 800b63e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b640:	f7fc ff37 	bl	80084b2 <__retarget_lock_close_recursive>
 800b644:	f7fc fdac 	bl	80081a0 <__sfp_lock_release>
 800b648:	e7c6      	b.n	800b5d8 <_fclose_r+0x38>
	...

0800b64c <__sflush_r>:
 800b64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b650:	4605      	mov	r5, r0
 800b652:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800b656:	0706      	lsls	r6, r0, #28
 800b658:	460c      	mov	r4, r1
 800b65a:	d457      	bmi.n	800b70c <__sflush_r+0xc0>
 800b65c:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800b660:	818b      	strh	r3, [r1, #12]
 800b662:	684b      	ldr	r3, [r1, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dc02      	bgt.n	800b66e <__sflush_r+0x22>
 800b668:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	dd4c      	ble.n	800b708 <__sflush_r+0xbc>
 800b66e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b670:	2e00      	cmp	r6, #0
 800b672:	d049      	beq.n	800b708 <__sflush_r+0xbc>
 800b674:	2300      	movs	r3, #0
 800b676:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800b67a:	682f      	ldr	r7, [r5, #0]
 800b67c:	69e1      	ldr	r1, [r4, #28]
 800b67e:	602b      	str	r3, [r5, #0]
 800b680:	d034      	beq.n	800b6ec <__sflush_r+0xa0>
 800b682:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	0759      	lsls	r1, r3, #29
 800b688:	d505      	bpl.n	800b696 <__sflush_r+0x4a>
 800b68a:	6863      	ldr	r3, [r4, #4]
 800b68c:	1ad2      	subs	r2, r2, r3
 800b68e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b690:	b10b      	cbz	r3, 800b696 <__sflush_r+0x4a>
 800b692:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b694:	1ad2      	subs	r2, r2, r3
 800b696:	2300      	movs	r3, #0
 800b698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b69a:	69e1      	ldr	r1, [r4, #28]
 800b69c:	4628      	mov	r0, r5
 800b69e:	47b0      	blx	r6
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d106      	bne.n	800b6b2 <__sflush_r+0x66>
 800b6a4:	682a      	ldr	r2, [r5, #0]
 800b6a6:	2a1d      	cmp	r2, #29
 800b6a8:	d848      	bhi.n	800b73c <__sflush_r+0xf0>
 800b6aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b758 <__sflush_r+0x10c>)
 800b6ac:	4113      	asrs	r3, r2
 800b6ae:	07de      	lsls	r6, r3, #31
 800b6b0:	d444      	bmi.n	800b73c <__sflush_r+0xf0>
 800b6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b6ba:	81a2      	strh	r2, [r4, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	6062      	str	r2, [r4, #4]
 800b6c0:	04d9      	lsls	r1, r3, #19
 800b6c2:	6922      	ldr	r2, [r4, #16]
 800b6c4:	6022      	str	r2, [r4, #0]
 800b6c6:	d504      	bpl.n	800b6d2 <__sflush_r+0x86>
 800b6c8:	1c42      	adds	r2, r0, #1
 800b6ca:	d101      	bne.n	800b6d0 <__sflush_r+0x84>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b903      	cbnz	r3, 800b6d2 <__sflush_r+0x86>
 800b6d0:	6520      	str	r0, [r4, #80]	@ 0x50
 800b6d2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b6d4:	602f      	str	r7, [r5, #0]
 800b6d6:	b1b9      	cbz	r1, 800b708 <__sflush_r+0xbc>
 800b6d8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800b6dc:	4299      	cmp	r1, r3
 800b6de:	d002      	beq.n	800b6e6 <__sflush_r+0x9a>
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f7fc ff5d 	bl	80085a0 <_free_r>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6ea:	e00d      	b.n	800b708 <__sflush_r+0xbc>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	47b0      	blx	r6
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	1c50      	adds	r0, r2, #1
 800b6f6:	d1c5      	bne.n	800b684 <__sflush_r+0x38>
 800b6f8:	682b      	ldr	r3, [r5, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0c2      	beq.n	800b684 <__sflush_r+0x38>
 800b6fe:	2b1d      	cmp	r3, #29
 800b700:	d001      	beq.n	800b706 <__sflush_r+0xba>
 800b702:	2b16      	cmp	r3, #22
 800b704:	d11a      	bne.n	800b73c <__sflush_r+0xf0>
 800b706:	602f      	str	r7, [r5, #0]
 800b708:	2000      	movs	r0, #0
 800b70a:	e01e      	b.n	800b74a <__sflush_r+0xfe>
 800b70c:	690f      	ldr	r7, [r1, #16]
 800b70e:	2f00      	cmp	r7, #0
 800b710:	d0fa      	beq.n	800b708 <__sflush_r+0xbc>
 800b712:	0783      	lsls	r3, r0, #30
 800b714:	680e      	ldr	r6, [r1, #0]
 800b716:	bf08      	it	eq
 800b718:	694b      	ldreq	r3, [r1, #20]
 800b71a:	600f      	str	r7, [r1, #0]
 800b71c:	bf18      	it	ne
 800b71e:	2300      	movne	r3, #0
 800b720:	eba6 0807 	sub.w	r8, r6, r7
 800b724:	608b      	str	r3, [r1, #8]
 800b726:	f1b8 0f00 	cmp.w	r8, #0
 800b72a:	dded      	ble.n	800b708 <__sflush_r+0xbc>
 800b72c:	69e1      	ldr	r1, [r4, #28]
 800b72e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800b730:	4643      	mov	r3, r8
 800b732:	463a      	mov	r2, r7
 800b734:	4628      	mov	r0, r5
 800b736:	47b0      	blx	r6
 800b738:	2800      	cmp	r0, #0
 800b73a:	dc08      	bgt.n	800b74e <__sflush_r+0x102>
 800b73c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b744:	81a3      	strh	r3, [r4, #12]
 800b746:	f04f 30ff 	mov.w	r0, #4294967295
 800b74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b74e:	4407      	add	r7, r0
 800b750:	eba8 0800 	sub.w	r8, r8, r0
 800b754:	e7e7      	b.n	800b726 <__sflush_r+0xda>
 800b756:	bf00      	nop
 800b758:	dfbffffe 	.word	0xdfbffffe

0800b75c <_fflush_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	460c      	mov	r4, r1
 800b760:	4605      	mov	r5, r0
 800b762:	b118      	cbz	r0, 800b76c <_fflush_r+0x10>
 800b764:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b766:	b90b      	cbnz	r3, 800b76c <_fflush_r+0x10>
 800b768:	f7fc fd20 	bl	80081ac <__sinit>
 800b76c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800b770:	b1b8      	cbz	r0, 800b7a2 <_fflush_r+0x46>
 800b772:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b774:	07db      	lsls	r3, r3, #31
 800b776:	d404      	bmi.n	800b782 <_fflush_r+0x26>
 800b778:	0581      	lsls	r1, r0, #22
 800b77a:	d402      	bmi.n	800b782 <_fflush_r+0x26>
 800b77c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b77e:	f7fc fe99 	bl	80084b4 <__retarget_lock_acquire_recursive>
 800b782:	4628      	mov	r0, r5
 800b784:	4621      	mov	r1, r4
 800b786:	f7ff ff61 	bl	800b64c <__sflush_r>
 800b78a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b78c:	07da      	lsls	r2, r3, #31
 800b78e:	4605      	mov	r5, r0
 800b790:	d405      	bmi.n	800b79e <_fflush_r+0x42>
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	059b      	lsls	r3, r3, #22
 800b796:	d402      	bmi.n	800b79e <_fflush_r+0x42>
 800b798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b79a:	f7fc fe8c 	bl	80084b6 <__retarget_lock_release_recursive>
 800b79e:	4628      	mov	r0, r5
 800b7a0:	bd38      	pop	{r3, r4, r5, pc}
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	e7fb      	b.n	800b79e <_fflush_r+0x42>

0800b7a6 <__sccl>:
 800b7a6:	b570      	push	{r4, r5, r6, lr}
 800b7a8:	780b      	ldrb	r3, [r1, #0]
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	2b5e      	cmp	r3, #94	@ 0x5e
 800b7ae:	bf0b      	itete	eq
 800b7b0:	784b      	ldrbeq	r3, [r1, #1]
 800b7b2:	1c4a      	addne	r2, r1, #1
 800b7b4:	1c8a      	addeq	r2, r1, #2
 800b7b6:	2100      	movne	r1, #0
 800b7b8:	bf08      	it	eq
 800b7ba:	2101      	moveq	r1, #1
 800b7bc:	3801      	subs	r0, #1
 800b7be:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b7c2:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b7c6:	42a8      	cmp	r0, r5
 800b7c8:	d1fb      	bne.n	800b7c2 <__sccl+0x1c>
 800b7ca:	b90b      	cbnz	r3, 800b7d0 <__sccl+0x2a>
 800b7cc:	1e50      	subs	r0, r2, #1
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}
 800b7d0:	f081 0101 	eor.w	r1, r1, #1
 800b7d4:	54e1      	strb	r1, [r4, r3]
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	4602      	mov	r2, r0
 800b7da:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b7de:	2d2d      	cmp	r5, #45	@ 0x2d
 800b7e0:	d005      	beq.n	800b7ee <__sccl+0x48>
 800b7e2:	2d5d      	cmp	r5, #93	@ 0x5d
 800b7e4:	d016      	beq.n	800b814 <__sccl+0x6e>
 800b7e6:	2d00      	cmp	r5, #0
 800b7e8:	d0f1      	beq.n	800b7ce <__sccl+0x28>
 800b7ea:	462b      	mov	r3, r5
 800b7ec:	e7f2      	b.n	800b7d4 <__sccl+0x2e>
 800b7ee:	7846      	ldrb	r6, [r0, #1]
 800b7f0:	2e5d      	cmp	r6, #93	@ 0x5d
 800b7f2:	d0fa      	beq.n	800b7ea <__sccl+0x44>
 800b7f4:	42b3      	cmp	r3, r6
 800b7f6:	dcf8      	bgt.n	800b7ea <__sccl+0x44>
 800b7f8:	3002      	adds	r0, #2
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	3201      	adds	r2, #1
 800b7fe:	4296      	cmp	r6, r2
 800b800:	54a1      	strb	r1, [r4, r2]
 800b802:	dcfb      	bgt.n	800b7fc <__sccl+0x56>
 800b804:	1af2      	subs	r2, r6, r3
 800b806:	3a01      	subs	r2, #1
 800b808:	1c5d      	adds	r5, r3, #1
 800b80a:	42b3      	cmp	r3, r6
 800b80c:	bfa8      	it	ge
 800b80e:	2200      	movge	r2, #0
 800b810:	18ab      	adds	r3, r5, r2
 800b812:	e7e1      	b.n	800b7d8 <__sccl+0x32>
 800b814:	4610      	mov	r0, r2
 800b816:	e7da      	b.n	800b7ce <__sccl+0x28>

0800b818 <sprintf>:
 800b818:	b40e      	push	{r1, r2, r3}
 800b81a:	b500      	push	{lr}
 800b81c:	b09c      	sub	sp, #112	@ 0x70
 800b81e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b820:	9002      	str	r0, [sp, #8]
 800b822:	9006      	str	r0, [sp, #24]
 800b824:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b828:	4809      	ldr	r0, [pc, #36]	@ (800b850 <sprintf+0x38>)
 800b82a:	9107      	str	r1, [sp, #28]
 800b82c:	9104      	str	r1, [sp, #16]
 800b82e:	4909      	ldr	r1, [pc, #36]	@ (800b854 <sprintf+0x3c>)
 800b830:	f853 2b04 	ldr.w	r2, [r3], #4
 800b834:	9105      	str	r1, [sp, #20]
 800b836:	6800      	ldr	r0, [r0, #0]
 800b838:	9301      	str	r3, [sp, #4]
 800b83a:	a902      	add	r1, sp, #8
 800b83c:	f7fd fb60 	bl	8008f00 <_svfprintf_r>
 800b840:	9b02      	ldr	r3, [sp, #8]
 800b842:	2200      	movs	r2, #0
 800b844:	701a      	strb	r2, [r3, #0]
 800b846:	b01c      	add	sp, #112	@ 0x70
 800b848:	f85d eb04 	ldr.w	lr, [sp], #4
 800b84c:	b003      	add	sp, #12
 800b84e:	4770      	bx	lr
 800b850:	20000050 	.word	0x20000050
 800b854:	ffff0208 	.word	0xffff0208

0800b858 <__locale_mb_cur_max>:
 800b858:	4b01      	ldr	r3, [pc, #4]	@ (800b860 <__locale_mb_cur_max+0x8>)
 800b85a:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800b85e:	4770      	bx	lr
 800b860:	2000058c 	.word	0x2000058c

0800b864 <_sbrk_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	4d06      	ldr	r5, [pc, #24]	@ (800b880 <_sbrk_r+0x1c>)
 800b868:	2300      	movs	r3, #0
 800b86a:	4604      	mov	r4, r0
 800b86c:	4608      	mov	r0, r1
 800b86e:	602b      	str	r3, [r5, #0]
 800b870:	f7f7 f8aa 	bl	80029c8 <_sbrk>
 800b874:	1c43      	adds	r3, r0, #1
 800b876:	d102      	bne.n	800b87e <_sbrk_r+0x1a>
 800b878:	682b      	ldr	r3, [r5, #0]
 800b87a:	b103      	cbz	r3, 800b87e <_sbrk_r+0x1a>
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	bd38      	pop	{r3, r4, r5, pc}
 800b880:	20000bec 	.word	0x20000bec

0800b884 <__libc_fini_array>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d07      	ldr	r5, [pc, #28]	@ (800b8a4 <__libc_fini_array+0x20>)
 800b888:	4c07      	ldr	r4, [pc, #28]	@ (800b8a8 <__libc_fini_array+0x24>)
 800b88a:	1b64      	subs	r4, r4, r5
 800b88c:	10a4      	asrs	r4, r4, #2
 800b88e:	b91c      	cbnz	r4, 800b898 <__libc_fini_array+0x14>
 800b890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b894:	f004 b86c 	b.w	800f970 <_fini>
 800b898:	3c01      	subs	r4, #1
 800b89a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b89e:	4798      	blx	r3
 800b8a0:	e7f5      	b.n	800b88e <__libc_fini_array+0xa>
 800b8a2:	bf00      	nop
 800b8a4:	0800fefc 	.word	0x0800fefc
 800b8a8:	0800ff00 	.word	0x0800ff00

0800b8ac <sysconf>:
 800b8ac:	2808      	cmp	r0, #8
 800b8ae:	b508      	push	{r3, lr}
 800b8b0:	d006      	beq.n	800b8c0 <sysconf+0x14>
 800b8b2:	f7fc fdd3 	bl	800845c <__errno>
 800b8b6:	2316      	movs	r3, #22
 800b8b8:	6003      	str	r3, [r0, #0]
 800b8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b8be:	bd08      	pop	{r3, pc}
 800b8c0:	2080      	movs	r0, #128	@ 0x80
 800b8c2:	e7fc      	b.n	800b8be <sysconf+0x12>

0800b8c4 <nanf>:
 800b8c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b8cc <nanf+0x8>
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	7fc00000 	.word	0x7fc00000

0800b8d0 <frexp>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	ec55 4b10 	vmov	r4, r5, d0
 800b8d8:	6001      	str	r1, [r0, #0]
 800b8da:	4915      	ldr	r1, [pc, #84]	@ (800b930 <frexp+0x60>)
 800b8dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b8e0:	428a      	cmp	r2, r1
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	462b      	mov	r3, r5
 800b8e6:	d820      	bhi.n	800b92a <frexp+0x5a>
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4311      	orrs	r1, r2
 800b8ec:	d01d      	beq.n	800b92a <frexp+0x5a>
 800b8ee:	4911      	ldr	r1, [pc, #68]	@ (800b934 <frexp+0x64>)
 800b8f0:	4029      	ands	r1, r5
 800b8f2:	b961      	cbnz	r1, 800b90e <frexp+0x3e>
 800b8f4:	4b10      	ldr	r3, [pc, #64]	@ (800b938 <frexp+0x68>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	f7f4 feac 	bl	8000658 <__aeabi_dmul>
 800b900:	460b      	mov	r3, r1
 800b902:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b906:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800b90a:	4604      	mov	r4, r0
 800b90c:	6031      	str	r1, [r6, #0]
 800b90e:	6831      	ldr	r1, [r6, #0]
 800b910:	1512      	asrs	r2, r2, #20
 800b912:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b916:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800b91a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b91e:	4411      	add	r1, r2
 800b920:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b924:	6031      	str	r1, [r6, #0]
 800b926:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800b92a:	ec45 4b10 	vmov	d0, r4, r5
 800b92e:	bd70      	pop	{r4, r5, r6, pc}
 800b930:	7fefffff 	.word	0x7fefffff
 800b934:	7ff00000 	.word	0x7ff00000
 800b938:	43500000 	.word	0x43500000

0800b93c <__register_exitproc>:
 800b93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b940:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800b9b8 <__register_exitproc+0x7c>
 800b944:	4606      	mov	r6, r0
 800b946:	f8da 0000 	ldr.w	r0, [sl]
 800b94a:	4698      	mov	r8, r3
 800b94c:	460f      	mov	r7, r1
 800b94e:	4691      	mov	r9, r2
 800b950:	f7fc fdb0 	bl	80084b4 <__retarget_lock_acquire_recursive>
 800b954:	4b16      	ldr	r3, [pc, #88]	@ (800b9b0 <__register_exitproc+0x74>)
 800b956:	681c      	ldr	r4, [r3, #0]
 800b958:	b90c      	cbnz	r4, 800b95e <__register_exitproc+0x22>
 800b95a:	4c16      	ldr	r4, [pc, #88]	@ (800b9b4 <__register_exitproc+0x78>)
 800b95c:	601c      	str	r4, [r3, #0]
 800b95e:	6865      	ldr	r5, [r4, #4]
 800b960:	f8da 0000 	ldr.w	r0, [sl]
 800b964:	2d1f      	cmp	r5, #31
 800b966:	dd05      	ble.n	800b974 <__register_exitproc+0x38>
 800b968:	f7fc fda5 	bl	80084b6 <__retarget_lock_release_recursive>
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295
 800b970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b974:	b19e      	cbz	r6, 800b99e <__register_exitproc+0x62>
 800b976:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800b97a:	2201      	movs	r2, #1
 800b97c:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800b980:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800b984:	40aa      	lsls	r2, r5
 800b986:	4313      	orrs	r3, r2
 800b988:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800b98c:	2e02      	cmp	r6, #2
 800b98e:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800b992:	bf02      	ittt	eq
 800b994:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800b998:	4313      	orreq	r3, r2
 800b99a:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800b99e:	1c6b      	adds	r3, r5, #1
 800b9a0:	3502      	adds	r5, #2
 800b9a2:	6063      	str	r3, [r4, #4]
 800b9a4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800b9a8:	f7fc fd85 	bl	80084b6 <__retarget_lock_release_recursive>
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	e7df      	b.n	800b970 <__register_exitproc+0x34>
 800b9b0:	20000bf4 	.word	0x20000bf4
 800b9b4:	20000c2c 	.word	0x20000c2c
 800b9b8:	20000178 	.word	0x20000178

0800b9bc <quorem>:
 800b9bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	6903      	ldr	r3, [r0, #16]
 800b9c2:	690c      	ldr	r4, [r1, #16]
 800b9c4:	42a3      	cmp	r3, r4
 800b9c6:	4607      	mov	r7, r0
 800b9c8:	db7e      	blt.n	800bac8 <quorem+0x10c>
 800b9ca:	3c01      	subs	r4, #1
 800b9cc:	f101 0814 	add.w	r8, r1, #20
 800b9d0:	00a3      	lsls	r3, r4, #2
 800b9d2:	f100 0514 	add.w	r5, r0, #20
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9f2:	d32e      	bcc.n	800ba52 <quorem+0x96>
 800b9f4:	f04f 0a00 	mov.w	sl, #0
 800b9f8:	46c4      	mov	ip, r8
 800b9fa:	46ae      	mov	lr, r5
 800b9fc:	46d3      	mov	fp, sl
 800b9fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba02:	b298      	uxth	r0, r3
 800ba04:	fb06 a000 	mla	r0, r6, r0, sl
 800ba08:	0c02      	lsrs	r2, r0, #16
 800ba0a:	0c1b      	lsrs	r3, r3, #16
 800ba0c:	fb06 2303 	mla	r3, r6, r3, r2
 800ba10:	f8de 2000 	ldr.w	r2, [lr]
 800ba14:	b280      	uxth	r0, r0
 800ba16:	b292      	uxth	r2, r2
 800ba18:	1a12      	subs	r2, r2, r0
 800ba1a:	445a      	add	r2, fp
 800ba1c:	f8de 0000 	ldr.w	r0, [lr]
 800ba20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba2e:	b292      	uxth	r2, r2
 800ba30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba34:	45e1      	cmp	r9, ip
 800ba36:	f84e 2b04 	str.w	r2, [lr], #4
 800ba3a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba3e:	d2de      	bcs.n	800b9fe <quorem+0x42>
 800ba40:	9b00      	ldr	r3, [sp, #0]
 800ba42:	58eb      	ldr	r3, [r5, r3]
 800ba44:	b92b      	cbnz	r3, 800ba52 <quorem+0x96>
 800ba46:	9b01      	ldr	r3, [sp, #4]
 800ba48:	3b04      	subs	r3, #4
 800ba4a:	429d      	cmp	r5, r3
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	d32f      	bcc.n	800bab0 <quorem+0xf4>
 800ba50:	613c      	str	r4, [r7, #16]
 800ba52:	4638      	mov	r0, r7
 800ba54:	f001 f880 	bl	800cb58 <__mcmp>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	db25      	blt.n	800baa8 <quorem+0xec>
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	2000      	movs	r0, #0
 800ba60:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba64:	f8d1 c000 	ldr.w	ip, [r1]
 800ba68:	fa1f fe82 	uxth.w	lr, r2
 800ba6c:	fa1f f38c 	uxth.w	r3, ip
 800ba70:	eba3 030e 	sub.w	r3, r3, lr
 800ba74:	4403      	add	r3, r0
 800ba76:	0c12      	lsrs	r2, r2, #16
 800ba78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba86:	45c1      	cmp	r9, r8
 800ba88:	f841 3b04 	str.w	r3, [r1], #4
 800ba8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba90:	d2e6      	bcs.n	800ba60 <quorem+0xa4>
 800ba92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba9a:	b922      	cbnz	r2, 800baa6 <quorem+0xea>
 800ba9c:	3b04      	subs	r3, #4
 800ba9e:	429d      	cmp	r5, r3
 800baa0:	461a      	mov	r2, r3
 800baa2:	d30b      	bcc.n	800babc <quorem+0x100>
 800baa4:	613c      	str	r4, [r7, #16]
 800baa6:	3601      	adds	r6, #1
 800baa8:	4630      	mov	r0, r6
 800baaa:	b003      	add	sp, #12
 800baac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab0:	6812      	ldr	r2, [r2, #0]
 800bab2:	3b04      	subs	r3, #4
 800bab4:	2a00      	cmp	r2, #0
 800bab6:	d1cb      	bne.n	800ba50 <quorem+0x94>
 800bab8:	3c01      	subs	r4, #1
 800baba:	e7c6      	b.n	800ba4a <quorem+0x8e>
 800babc:	6812      	ldr	r2, [r2, #0]
 800babe:	3b04      	subs	r3, #4
 800bac0:	2a00      	cmp	r2, #0
 800bac2:	d1ef      	bne.n	800baa4 <quorem+0xe8>
 800bac4:	3c01      	subs	r4, #1
 800bac6:	e7ea      	b.n	800ba9e <quorem+0xe2>
 800bac8:	2000      	movs	r0, #0
 800baca:	e7ee      	b.n	800baaa <quorem+0xee>
 800bacc:	0000      	movs	r0, r0
	...

0800bad0 <_dtoa_r>:
 800bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	b099      	sub	sp, #100	@ 0x64
 800bad6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bada:	9109      	str	r1, [sp, #36]	@ 0x24
 800badc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800bade:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bae0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bae2:	ec55 4b10 	vmov	r4, r5, d0
 800bae6:	4683      	mov	fp, r0
 800bae8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800baea:	b149      	cbz	r1, 800bb00 <_dtoa_r+0x30>
 800baec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800baee:	604a      	str	r2, [r1, #4]
 800baf0:	2301      	movs	r3, #1
 800baf2:	4093      	lsls	r3, r2
 800baf4:	608b      	str	r3, [r1, #8]
 800baf6:	f000 fdde 	bl	800c6b6 <_Bfree>
 800bafa:	2300      	movs	r3, #0
 800bafc:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800bb00:	1e2b      	subs	r3, r5, #0
 800bb02:	bfb9      	ittee	lt
 800bb04:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb08:	9303      	strlt	r3, [sp, #12]
 800bb0a:	2300      	movge	r3, #0
 800bb0c:	6033      	strge	r3, [r6, #0]
 800bb0e:	9f03      	ldr	r7, [sp, #12]
 800bb10:	4b97      	ldr	r3, [pc, #604]	@ (800bd70 <_dtoa_r+0x2a0>)
 800bb12:	bfbc      	itt	lt
 800bb14:	2201      	movlt	r2, #1
 800bb16:	6032      	strlt	r2, [r6, #0]
 800bb18:	43bb      	bics	r3, r7
 800bb1a:	d114      	bne.n	800bb46 <_dtoa_r+0x76>
 800bb1c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb1e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb28:	4323      	orrs	r3, r4
 800bb2a:	f000 854c 	beq.w	800c5c6 <_dtoa_r+0xaf6>
 800bb2e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb30:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd88 <_dtoa_r+0x2b8>
 800bb34:	b11b      	cbz	r3, 800bb3e <_dtoa_r+0x6e>
 800bb36:	f10a 0303 	add.w	r3, sl, #3
 800bb3a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	4650      	mov	r0, sl
 800bb40:	b019      	add	sp, #100	@ 0x64
 800bb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb46:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	ec51 0b17 	vmov	r0, r1, d7
 800bb50:	2300      	movs	r3, #0
 800bb52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb56:	f7f4 ffe7 	bl	8000b28 <__aeabi_dcmpeq>
 800bb5a:	4680      	mov	r8, r0
 800bb5c:	b150      	cbz	r0, 800bb74 <_dtoa_r+0xa4>
 800bb5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb60:	2301      	movs	r3, #1
 800bb62:	6013      	str	r3, [r2, #0]
 800bb64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb66:	b113      	cbz	r3, 800bb6e <_dtoa_r+0x9e>
 800bb68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb6a:	4b82      	ldr	r3, [pc, #520]	@ (800bd74 <_dtoa_r+0x2a4>)
 800bb6c:	6013      	str	r3, [r2, #0]
 800bb6e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800bd8c <_dtoa_r+0x2bc>
 800bb72:	e7e4      	b.n	800bb3e <_dtoa_r+0x6e>
 800bb74:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb78:	aa16      	add	r2, sp, #88	@ 0x58
 800bb7a:	a917      	add	r1, sp, #92	@ 0x5c
 800bb7c:	4658      	mov	r0, fp
 800bb7e:	f001 f90b 	bl	800cd98 <__d2b>
 800bb82:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb86:	4681      	mov	r9, r0
 800bb88:	2e00      	cmp	r6, #0
 800bb8a:	d077      	beq.n	800bc7c <_dtoa_r+0x1ac>
 800bb8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb8e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bb92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb9a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bb9e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bba2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bba6:	4619      	mov	r1, r3
 800bba8:	2200      	movs	r2, #0
 800bbaa:	4b73      	ldr	r3, [pc, #460]	@ (800bd78 <_dtoa_r+0x2a8>)
 800bbac:	f7f4 fb9c 	bl	80002e8 <__aeabi_dsub>
 800bbb0:	a369      	add	r3, pc, #420	@ (adr r3, 800bd58 <_dtoa_r+0x288>)
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	f7f4 fd4f 	bl	8000658 <__aeabi_dmul>
 800bbba:	a369      	add	r3, pc, #420	@ (adr r3, 800bd60 <_dtoa_r+0x290>)
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f7f4 fb94 	bl	80002ec <__adddf3>
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	460d      	mov	r5, r1
 800bbca:	f7f4 fcdb 	bl	8000584 <__aeabi_i2d>
 800bbce:	a366      	add	r3, pc, #408	@ (adr r3, 800bd68 <_dtoa_r+0x298>)
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f7f4 fd40 	bl	8000658 <__aeabi_dmul>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4629      	mov	r1, r5
 800bbe0:	f7f4 fb84 	bl	80002ec <__adddf3>
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	f7f4 ffe6 	bl	8000bb8 <__aeabi_d2iz>
 800bbec:	2200      	movs	r2, #0
 800bbee:	4607      	mov	r7, r0
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7f4 ffa1 	bl	8000b3c <__aeabi_dcmplt>
 800bbfa:	b140      	cbz	r0, 800bc0e <_dtoa_r+0x13e>
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7f4 fcc1 	bl	8000584 <__aeabi_i2d>
 800bc02:	4622      	mov	r2, r4
 800bc04:	462b      	mov	r3, r5
 800bc06:	f7f4 ff8f 	bl	8000b28 <__aeabi_dcmpeq>
 800bc0a:	b900      	cbnz	r0, 800bc0e <_dtoa_r+0x13e>
 800bc0c:	3f01      	subs	r7, #1
 800bc0e:	2f16      	cmp	r7, #22
 800bc10:	d851      	bhi.n	800bcb6 <_dtoa_r+0x1e6>
 800bc12:	4b5a      	ldr	r3, [pc, #360]	@ (800bd7c <_dtoa_r+0x2ac>)
 800bc14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc20:	f7f4 ff8c 	bl	8000b3c <__aeabi_dcmplt>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d048      	beq.n	800bcba <_dtoa_r+0x1ea>
 800bc28:	3f01      	subs	r7, #1
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc2e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc30:	1b9b      	subs	r3, r3, r6
 800bc32:	1e5a      	subs	r2, r3, #1
 800bc34:	bf44      	itt	mi
 800bc36:	f1c3 0801 	rsbmi	r8, r3, #1
 800bc3a:	2300      	movmi	r3, #0
 800bc3c:	9208      	str	r2, [sp, #32]
 800bc3e:	bf54      	ite	pl
 800bc40:	f04f 0800 	movpl.w	r8, #0
 800bc44:	9308      	strmi	r3, [sp, #32]
 800bc46:	2f00      	cmp	r7, #0
 800bc48:	db39      	blt.n	800bcbe <_dtoa_r+0x1ee>
 800bc4a:	9b08      	ldr	r3, [sp, #32]
 800bc4c:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc4e:	443b      	add	r3, r7
 800bc50:	9308      	str	r3, [sp, #32]
 800bc52:	2300      	movs	r3, #0
 800bc54:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc58:	2b09      	cmp	r3, #9
 800bc5a:	d865      	bhi.n	800bd28 <_dtoa_r+0x258>
 800bc5c:	2b05      	cmp	r3, #5
 800bc5e:	bfc4      	itt	gt
 800bc60:	3b04      	subgt	r3, #4
 800bc62:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc66:	f1a3 0302 	sub.w	r3, r3, #2
 800bc6a:	bfcc      	ite	gt
 800bc6c:	2400      	movgt	r4, #0
 800bc6e:	2401      	movle	r4, #1
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d864      	bhi.n	800bd3e <_dtoa_r+0x26e>
 800bc74:	e8df f003 	tbb	[pc, r3]
 800bc78:	5635372a 	.word	0x5635372a
 800bc7c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bc80:	441e      	add	r6, r3
 800bc82:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc86:	2b20      	cmp	r3, #32
 800bc88:	bfc1      	itttt	gt
 800bc8a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc8e:	409f      	lslgt	r7, r3
 800bc90:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bc94:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bc98:	bfd6      	itet	le
 800bc9a:	f1c3 0320 	rsble	r3, r3, #32
 800bc9e:	ea47 0003 	orrgt.w	r0, r7, r3
 800bca2:	fa04 f003 	lslle.w	r0, r4, r3
 800bca6:	f7f4 fc5d 	bl	8000564 <__aeabi_ui2d>
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bcb0:	3e01      	subs	r6, #1
 800bcb2:	9214      	str	r2, [sp, #80]	@ 0x50
 800bcb4:	e777      	b.n	800bba6 <_dtoa_r+0xd6>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e7b8      	b.n	800bc2c <_dtoa_r+0x15c>
 800bcba:	9012      	str	r0, [sp, #72]	@ 0x48
 800bcbc:	e7b7      	b.n	800bc2e <_dtoa_r+0x15e>
 800bcbe:	427b      	negs	r3, r7
 800bcc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	eba8 0807 	sub.w	r8, r8, r7
 800bcc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcca:	e7c4      	b.n	800bc56 <_dtoa_r+0x186>
 800bccc:	2300      	movs	r3, #0
 800bcce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	dc36      	bgt.n	800bd44 <_dtoa_r+0x274>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	9307      	str	r3, [sp, #28]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	920e      	str	r2, [sp, #56]	@ 0x38
 800bce0:	e00b      	b.n	800bcfa <_dtoa_r+0x22a>
 800bce2:	2301      	movs	r3, #1
 800bce4:	e7f3      	b.n	800bcce <_dtoa_r+0x1fe>
 800bce6:	2300      	movs	r3, #0
 800bce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcec:	18fb      	adds	r3, r7, r3
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	9307      	str	r3, [sp, #28]
 800bcf6:	bfb8      	it	lt
 800bcf8:	2301      	movlt	r3, #1
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	2204      	movs	r2, #4
 800bcfe:	f102 0014 	add.w	r0, r2, #20
 800bd02:	4298      	cmp	r0, r3
 800bd04:	d922      	bls.n	800bd4c <_dtoa_r+0x27c>
 800bd06:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800bd0a:	4658      	mov	r0, fp
 800bd0c:	f000 fcae 	bl	800c66c <_Balloc>
 800bd10:	4682      	mov	sl, r0
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d13c      	bne.n	800bd90 <_dtoa_r+0x2c0>
 800bd16:	4b1a      	ldr	r3, [pc, #104]	@ (800bd80 <_dtoa_r+0x2b0>)
 800bd18:	4602      	mov	r2, r0
 800bd1a:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd1e:	4819      	ldr	r0, [pc, #100]	@ (800bd84 <_dtoa_r+0x2b4>)
 800bd20:	f002 fa4a 	bl	800e1b8 <__assert_func>
 800bd24:	2301      	movs	r3, #1
 800bd26:	e7df      	b.n	800bce8 <_dtoa_r+0x218>
 800bd28:	2401      	movs	r4, #1
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd30:	f04f 33ff 	mov.w	r3, #4294967295
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	9307      	str	r3, [sp, #28]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	2312      	movs	r3, #18
 800bd3c:	e7cf      	b.n	800bcde <_dtoa_r+0x20e>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd42:	e7f5      	b.n	800bd30 <_dtoa_r+0x260>
 800bd44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	9307      	str	r3, [sp, #28]
 800bd4a:	e7d6      	b.n	800bcfa <_dtoa_r+0x22a>
 800bd4c:	3101      	adds	r1, #1
 800bd4e:	0052      	lsls	r2, r2, #1
 800bd50:	e7d5      	b.n	800bcfe <_dtoa_r+0x22e>
 800bd52:	bf00      	nop
 800bd54:	f3af 8000 	nop.w
 800bd58:	636f4361 	.word	0x636f4361
 800bd5c:	3fd287a7 	.word	0x3fd287a7
 800bd60:	8b60c8b3 	.word	0x8b60c8b3
 800bd64:	3fc68a28 	.word	0x3fc68a28
 800bd68:	509f79fb 	.word	0x509f79fb
 800bd6c:	3fd34413 	.word	0x3fd34413
 800bd70:	7ff00000 	.word	0x7ff00000
 800bd74:	0800fab7 	.word	0x0800fab7
 800bd78:	3ff80000 	.word	0x3ff80000
 800bd7c:	0800fc10 	.word	0x0800fc10
 800bd80:	0800fb17 	.word	0x0800fb17
 800bd84:	0800fb28 	.word	0x0800fb28
 800bd88:	0800fb13 	.word	0x0800fb13
 800bd8c:	0800fab6 	.word	0x0800fab6
 800bd90:	9b07      	ldr	r3, [sp, #28]
 800bd92:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800bd96:	2b0e      	cmp	r3, #14
 800bd98:	f200 80a4 	bhi.w	800bee4 <_dtoa_r+0x414>
 800bd9c:	2c00      	cmp	r4, #0
 800bd9e:	f000 80a1 	beq.w	800bee4 <_dtoa_r+0x414>
 800bda2:	2f00      	cmp	r7, #0
 800bda4:	dd33      	ble.n	800be0e <_dtoa_r+0x33e>
 800bda6:	4bae      	ldr	r3, [pc, #696]	@ (800c060 <_dtoa_r+0x590>)
 800bda8:	f007 020f 	and.w	r2, r7, #15
 800bdac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdb0:	ed93 7b00 	vldr	d7, [r3]
 800bdb4:	05f8      	lsls	r0, r7, #23
 800bdb6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bdba:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bdbe:	d516      	bpl.n	800bdee <_dtoa_r+0x31e>
 800bdc0:	4ba8      	ldr	r3, [pc, #672]	@ (800c064 <_dtoa_r+0x594>)
 800bdc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdca:	f7f4 fd6f 	bl	80008ac <__aeabi_ddiv>
 800bdce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdd2:	f004 040f 	and.w	r4, r4, #15
 800bdd6:	2603      	movs	r6, #3
 800bdd8:	4da2      	ldr	r5, [pc, #648]	@ (800c064 <_dtoa_r+0x594>)
 800bdda:	b954      	cbnz	r4, 800bdf2 <_dtoa_r+0x322>
 800bddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bde0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bde4:	f7f4 fd62 	bl	80008ac <__aeabi_ddiv>
 800bde8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdec:	e028      	b.n	800be40 <_dtoa_r+0x370>
 800bdee:	2602      	movs	r6, #2
 800bdf0:	e7f2      	b.n	800bdd8 <_dtoa_r+0x308>
 800bdf2:	07e1      	lsls	r1, r4, #31
 800bdf4:	d508      	bpl.n	800be08 <_dtoa_r+0x338>
 800bdf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdfe:	f7f4 fc2b 	bl	8000658 <__aeabi_dmul>
 800be02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be06:	3601      	adds	r6, #1
 800be08:	1064      	asrs	r4, r4, #1
 800be0a:	3508      	adds	r5, #8
 800be0c:	e7e5      	b.n	800bdda <_dtoa_r+0x30a>
 800be0e:	f000 80d2 	beq.w	800bfb6 <_dtoa_r+0x4e6>
 800be12:	427c      	negs	r4, r7
 800be14:	4b92      	ldr	r3, [pc, #584]	@ (800c060 <_dtoa_r+0x590>)
 800be16:	4d93      	ldr	r5, [pc, #588]	@ (800c064 <_dtoa_r+0x594>)
 800be18:	f004 020f 	and.w	r2, r4, #15
 800be1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be28:	f7f4 fc16 	bl	8000658 <__aeabi_dmul>
 800be2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be30:	1124      	asrs	r4, r4, #4
 800be32:	2300      	movs	r3, #0
 800be34:	2602      	movs	r6, #2
 800be36:	2c00      	cmp	r4, #0
 800be38:	f040 80b2 	bne.w	800bfa0 <_dtoa_r+0x4d0>
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1d3      	bne.n	800bde8 <_dtoa_r+0x318>
 800be40:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be42:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 80b7 	beq.w	800bfba <_dtoa_r+0x4ea>
 800be4c:	4b86      	ldr	r3, [pc, #536]	@ (800c068 <_dtoa_r+0x598>)
 800be4e:	2200      	movs	r2, #0
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 fe72 	bl	8000b3c <__aeabi_dcmplt>
 800be58:	2800      	cmp	r0, #0
 800be5a:	f000 80ae 	beq.w	800bfba <_dtoa_r+0x4ea>
 800be5e:	9b07      	ldr	r3, [sp, #28]
 800be60:	2b00      	cmp	r3, #0
 800be62:	f000 80aa 	beq.w	800bfba <_dtoa_r+0x4ea>
 800be66:	9b00      	ldr	r3, [sp, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dd37      	ble.n	800bedc <_dtoa_r+0x40c>
 800be6c:	1e7b      	subs	r3, r7, #1
 800be6e:	9304      	str	r3, [sp, #16]
 800be70:	4620      	mov	r0, r4
 800be72:	4b7e      	ldr	r3, [pc, #504]	@ (800c06c <_dtoa_r+0x59c>)
 800be74:	2200      	movs	r2, #0
 800be76:	4629      	mov	r1, r5
 800be78:	f7f4 fbee 	bl	8000658 <__aeabi_dmul>
 800be7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be80:	9c00      	ldr	r4, [sp, #0]
 800be82:	3601      	adds	r6, #1
 800be84:	4630      	mov	r0, r6
 800be86:	f7f4 fb7d 	bl	8000584 <__aeabi_i2d>
 800be8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be8e:	f7f4 fbe3 	bl	8000658 <__aeabi_dmul>
 800be92:	4b77      	ldr	r3, [pc, #476]	@ (800c070 <_dtoa_r+0x5a0>)
 800be94:	2200      	movs	r2, #0
 800be96:	f7f4 fa29 	bl	80002ec <__adddf3>
 800be9a:	4605      	mov	r5, r0
 800be9c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bea0:	2c00      	cmp	r4, #0
 800bea2:	f040 808d 	bne.w	800bfc0 <_dtoa_r+0x4f0>
 800bea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beaa:	4b72      	ldr	r3, [pc, #456]	@ (800c074 <_dtoa_r+0x5a4>)
 800beac:	2200      	movs	r2, #0
 800beae:	f7f4 fa1b 	bl	80002e8 <__aeabi_dsub>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800beba:	462a      	mov	r2, r5
 800bebc:	4633      	mov	r3, r6
 800bebe:	f7f4 fe5b 	bl	8000b78 <__aeabi_dcmpgt>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	f040 828c 	bne.w	800c3e0 <_dtoa_r+0x910>
 800bec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800becc:	462a      	mov	r2, r5
 800bece:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bed2:	f7f4 fe33 	bl	8000b3c <__aeabi_dcmplt>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f040 8129 	bne.w	800c12e <_dtoa_r+0x65e>
 800bedc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bee0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bee4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f2c0 815b 	blt.w	800c1a2 <_dtoa_r+0x6d2>
 800beec:	2f0e      	cmp	r7, #14
 800beee:	f300 8158 	bgt.w	800c1a2 <_dtoa_r+0x6d2>
 800bef2:	4b5b      	ldr	r3, [pc, #364]	@ (800c060 <_dtoa_r+0x590>)
 800bef4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bef8:	ed93 7b00 	vldr	d7, [r3]
 800befc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800befe:	2b00      	cmp	r3, #0
 800bf00:	ed8d 7b00 	vstr	d7, [sp]
 800bf04:	da03      	bge.n	800bf0e <_dtoa_r+0x43e>
 800bf06:	9b07      	ldr	r3, [sp, #28]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f340 8102 	ble.w	800c112 <_dtoa_r+0x642>
 800bf0e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf12:	4656      	mov	r6, sl
 800bf14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 fcc6 	bl	80008ac <__aeabi_ddiv>
 800bf20:	f7f4 fe4a 	bl	8000bb8 <__aeabi_d2iz>
 800bf24:	4680      	mov	r8, r0
 800bf26:	f7f4 fb2d 	bl	8000584 <__aeabi_i2d>
 800bf2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf2e:	f7f4 fb93 	bl	8000658 <__aeabi_dmul>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	4620      	mov	r0, r4
 800bf38:	4629      	mov	r1, r5
 800bf3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf3e:	f7f4 f9d3 	bl	80002e8 <__aeabi_dsub>
 800bf42:	f806 4b01 	strb.w	r4, [r6], #1
 800bf46:	9d07      	ldr	r5, [sp, #28]
 800bf48:	eba6 040a 	sub.w	r4, r6, sl
 800bf4c:	42a5      	cmp	r5, r4
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	f040 8118 	bne.w	800c186 <_dtoa_r+0x6b6>
 800bf56:	f7f4 f9c9 	bl	80002ec <__adddf3>
 800bf5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf5e:	4604      	mov	r4, r0
 800bf60:	460d      	mov	r5, r1
 800bf62:	f7f4 fe09 	bl	8000b78 <__aeabi_dcmpgt>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	f040 80fa 	bne.w	800c160 <_dtoa_r+0x690>
 800bf6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf70:	4620      	mov	r0, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	f7f4 fdd8 	bl	8000b28 <__aeabi_dcmpeq>
 800bf78:	b118      	cbz	r0, 800bf82 <_dtoa_r+0x4b2>
 800bf7a:	f018 0f01 	tst.w	r8, #1
 800bf7e:	f040 80ef 	bne.w	800c160 <_dtoa_r+0x690>
 800bf82:	4649      	mov	r1, r9
 800bf84:	4658      	mov	r0, fp
 800bf86:	f000 fb96 	bl	800c6b6 <_Bfree>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	7033      	strb	r3, [r6, #0]
 800bf8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf90:	3701      	adds	r7, #1
 800bf92:	601f      	str	r7, [r3, #0]
 800bf94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f43f add1 	beq.w	800bb3e <_dtoa_r+0x6e>
 800bf9c:	601e      	str	r6, [r3, #0]
 800bf9e:	e5ce      	b.n	800bb3e <_dtoa_r+0x6e>
 800bfa0:	07e2      	lsls	r2, r4, #31
 800bfa2:	d505      	bpl.n	800bfb0 <_dtoa_r+0x4e0>
 800bfa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfa8:	f7f4 fb56 	bl	8000658 <__aeabi_dmul>
 800bfac:	3601      	adds	r6, #1
 800bfae:	2301      	movs	r3, #1
 800bfb0:	1064      	asrs	r4, r4, #1
 800bfb2:	3508      	adds	r5, #8
 800bfb4:	e73f      	b.n	800be36 <_dtoa_r+0x366>
 800bfb6:	2602      	movs	r6, #2
 800bfb8:	e742      	b.n	800be40 <_dtoa_r+0x370>
 800bfba:	9c07      	ldr	r4, [sp, #28]
 800bfbc:	9704      	str	r7, [sp, #16]
 800bfbe:	e761      	b.n	800be84 <_dtoa_r+0x3b4>
 800bfc0:	4b27      	ldr	r3, [pc, #156]	@ (800c060 <_dtoa_r+0x590>)
 800bfc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfcc:	4454      	add	r4, sl
 800bfce:	2900      	cmp	r1, #0
 800bfd0:	d054      	beq.n	800c07c <_dtoa_r+0x5ac>
 800bfd2:	4929      	ldr	r1, [pc, #164]	@ (800c078 <_dtoa_r+0x5a8>)
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	f7f4 fc69 	bl	80008ac <__aeabi_ddiv>
 800bfda:	4633      	mov	r3, r6
 800bfdc:	462a      	mov	r2, r5
 800bfde:	f7f4 f983 	bl	80002e8 <__aeabi_dsub>
 800bfe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfe6:	4656      	mov	r6, sl
 800bfe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfec:	f7f4 fde4 	bl	8000bb8 <__aeabi_d2iz>
 800bff0:	4605      	mov	r5, r0
 800bff2:	f7f4 fac7 	bl	8000584 <__aeabi_i2d>
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bffe:	f7f4 f973 	bl	80002e8 <__aeabi_dsub>
 800c002:	3530      	adds	r5, #48	@ 0x30
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c00c:	f806 5b01 	strb.w	r5, [r6], #1
 800c010:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c014:	f7f4 fd92 	bl	8000b3c <__aeabi_dcmplt>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d172      	bne.n	800c102 <_dtoa_r+0x632>
 800c01c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c020:	4911      	ldr	r1, [pc, #68]	@ (800c068 <_dtoa_r+0x598>)
 800c022:	2000      	movs	r0, #0
 800c024:	f7f4 f960 	bl	80002e8 <__aeabi_dsub>
 800c028:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c02c:	f7f4 fd86 	bl	8000b3c <__aeabi_dcmplt>
 800c030:	2800      	cmp	r0, #0
 800c032:	f040 8096 	bne.w	800c162 <_dtoa_r+0x692>
 800c036:	42a6      	cmp	r6, r4
 800c038:	f43f af50 	beq.w	800bedc <_dtoa_r+0x40c>
 800c03c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c040:	4b0a      	ldr	r3, [pc, #40]	@ (800c06c <_dtoa_r+0x59c>)
 800c042:	2200      	movs	r2, #0
 800c044:	f7f4 fb08 	bl	8000658 <__aeabi_dmul>
 800c048:	4b08      	ldr	r3, [pc, #32]	@ (800c06c <_dtoa_r+0x59c>)
 800c04a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c04e:	2200      	movs	r2, #0
 800c050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c054:	f7f4 fb00 	bl	8000658 <__aeabi_dmul>
 800c058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c05c:	e7c4      	b.n	800bfe8 <_dtoa_r+0x518>
 800c05e:	bf00      	nop
 800c060:	0800fc10 	.word	0x0800fc10
 800c064:	0800fbe8 	.word	0x0800fbe8
 800c068:	3ff00000 	.word	0x3ff00000
 800c06c:	40240000 	.word	0x40240000
 800c070:	401c0000 	.word	0x401c0000
 800c074:	40140000 	.word	0x40140000
 800c078:	3fe00000 	.word	0x3fe00000
 800c07c:	4631      	mov	r1, r6
 800c07e:	4628      	mov	r0, r5
 800c080:	f7f4 faea 	bl	8000658 <__aeabi_dmul>
 800c084:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c088:	9415      	str	r4, [sp, #84]	@ 0x54
 800c08a:	4656      	mov	r6, sl
 800c08c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c090:	f7f4 fd92 	bl	8000bb8 <__aeabi_d2iz>
 800c094:	4605      	mov	r5, r0
 800c096:	f7f4 fa75 	bl	8000584 <__aeabi_i2d>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a2:	f7f4 f921 	bl	80002e8 <__aeabi_dsub>
 800c0a6:	3530      	adds	r5, #48	@ 0x30
 800c0a8:	f806 5b01 	strb.w	r5, [r6], #1
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	42a6      	cmp	r6, r4
 800c0b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0b6:	f04f 0200 	mov.w	r2, #0
 800c0ba:	d124      	bne.n	800c106 <_dtoa_r+0x636>
 800c0bc:	4bac      	ldr	r3, [pc, #688]	@ (800c370 <_dtoa_r+0x8a0>)
 800c0be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0c2:	f7f4 f913 	bl	80002ec <__adddf3>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ce:	f7f4 fd53 	bl	8000b78 <__aeabi_dcmpgt>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d145      	bne.n	800c162 <_dtoa_r+0x692>
 800c0d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0da:	49a5      	ldr	r1, [pc, #660]	@ (800c370 <_dtoa_r+0x8a0>)
 800c0dc:	2000      	movs	r0, #0
 800c0de:	f7f4 f903 	bl	80002e8 <__aeabi_dsub>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ea:	f7f4 fd27 	bl	8000b3c <__aeabi_dcmplt>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f aef4 	beq.w	800bedc <_dtoa_r+0x40c>
 800c0f4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c0f6:	1e73      	subs	r3, r6, #1
 800c0f8:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0fe:	2b30      	cmp	r3, #48	@ 0x30
 800c100:	d0f8      	beq.n	800c0f4 <_dtoa_r+0x624>
 800c102:	9f04      	ldr	r7, [sp, #16]
 800c104:	e73d      	b.n	800bf82 <_dtoa_r+0x4b2>
 800c106:	4b9b      	ldr	r3, [pc, #620]	@ (800c374 <_dtoa_r+0x8a4>)
 800c108:	f7f4 faa6 	bl	8000658 <__aeabi_dmul>
 800c10c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c110:	e7bc      	b.n	800c08c <_dtoa_r+0x5bc>
 800c112:	d10c      	bne.n	800c12e <_dtoa_r+0x65e>
 800c114:	4b98      	ldr	r3, [pc, #608]	@ (800c378 <_dtoa_r+0x8a8>)
 800c116:	2200      	movs	r2, #0
 800c118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c11c:	f7f4 fa9c 	bl	8000658 <__aeabi_dmul>
 800c120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c124:	f7f4 fd1e 	bl	8000b64 <__aeabi_dcmpge>
 800c128:	2800      	cmp	r0, #0
 800c12a:	f000 8157 	beq.w	800c3dc <_dtoa_r+0x90c>
 800c12e:	2400      	movs	r4, #0
 800c130:	4625      	mov	r5, r4
 800c132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c134:	43db      	mvns	r3, r3
 800c136:	9304      	str	r3, [sp, #16]
 800c138:	4656      	mov	r6, sl
 800c13a:	2700      	movs	r7, #0
 800c13c:	4621      	mov	r1, r4
 800c13e:	4658      	mov	r0, fp
 800c140:	f000 fab9 	bl	800c6b6 <_Bfree>
 800c144:	2d00      	cmp	r5, #0
 800c146:	d0dc      	beq.n	800c102 <_dtoa_r+0x632>
 800c148:	b12f      	cbz	r7, 800c156 <_dtoa_r+0x686>
 800c14a:	42af      	cmp	r7, r5
 800c14c:	d003      	beq.n	800c156 <_dtoa_r+0x686>
 800c14e:	4639      	mov	r1, r7
 800c150:	4658      	mov	r0, fp
 800c152:	f000 fab0 	bl	800c6b6 <_Bfree>
 800c156:	4629      	mov	r1, r5
 800c158:	4658      	mov	r0, fp
 800c15a:	f000 faac 	bl	800c6b6 <_Bfree>
 800c15e:	e7d0      	b.n	800c102 <_dtoa_r+0x632>
 800c160:	9704      	str	r7, [sp, #16]
 800c162:	4633      	mov	r3, r6
 800c164:	461e      	mov	r6, r3
 800c166:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c16a:	2a39      	cmp	r2, #57	@ 0x39
 800c16c:	d107      	bne.n	800c17e <_dtoa_r+0x6ae>
 800c16e:	459a      	cmp	sl, r3
 800c170:	d1f8      	bne.n	800c164 <_dtoa_r+0x694>
 800c172:	9a04      	ldr	r2, [sp, #16]
 800c174:	3201      	adds	r2, #1
 800c176:	9204      	str	r2, [sp, #16]
 800c178:	2230      	movs	r2, #48	@ 0x30
 800c17a:	f88a 2000 	strb.w	r2, [sl]
 800c17e:	781a      	ldrb	r2, [r3, #0]
 800c180:	3201      	adds	r2, #1
 800c182:	701a      	strb	r2, [r3, #0]
 800c184:	e7bd      	b.n	800c102 <_dtoa_r+0x632>
 800c186:	4b7b      	ldr	r3, [pc, #492]	@ (800c374 <_dtoa_r+0x8a4>)
 800c188:	2200      	movs	r2, #0
 800c18a:	f7f4 fa65 	bl	8000658 <__aeabi_dmul>
 800c18e:	2200      	movs	r2, #0
 800c190:	2300      	movs	r3, #0
 800c192:	4604      	mov	r4, r0
 800c194:	460d      	mov	r5, r1
 800c196:	f7f4 fcc7 	bl	8000b28 <__aeabi_dcmpeq>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	f43f aeba 	beq.w	800bf14 <_dtoa_r+0x444>
 800c1a0:	e6ef      	b.n	800bf82 <_dtoa_r+0x4b2>
 800c1a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c1a4:	2a00      	cmp	r2, #0
 800c1a6:	f000 80db 	beq.w	800c360 <_dtoa_r+0x890>
 800c1aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1ac:	2a01      	cmp	r2, #1
 800c1ae:	f300 80bf 	bgt.w	800c330 <_dtoa_r+0x860>
 800c1b2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c1b4:	2a00      	cmp	r2, #0
 800c1b6:	f000 80b7 	beq.w	800c328 <_dtoa_r+0x858>
 800c1ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c1be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1c0:	4646      	mov	r6, r8
 800c1c2:	9a08      	ldr	r2, [sp, #32]
 800c1c4:	2101      	movs	r1, #1
 800c1c6:	441a      	add	r2, r3
 800c1c8:	4658      	mov	r0, fp
 800c1ca:	4498      	add	r8, r3
 800c1cc:	9208      	str	r2, [sp, #32]
 800c1ce:	f000 fb57 	bl	800c880 <__i2b>
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	b15e      	cbz	r6, 800c1ee <_dtoa_r+0x71e>
 800c1d6:	9b08      	ldr	r3, [sp, #32]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dd08      	ble.n	800c1ee <_dtoa_r+0x71e>
 800c1dc:	42b3      	cmp	r3, r6
 800c1de:	9a08      	ldr	r2, [sp, #32]
 800c1e0:	bfa8      	it	ge
 800c1e2:	4633      	movge	r3, r6
 800c1e4:	eba8 0803 	sub.w	r8, r8, r3
 800c1e8:	1af6      	subs	r6, r6, r3
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	9308      	str	r3, [sp, #32]
 800c1ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1f0:	b1f3      	cbz	r3, 800c230 <_dtoa_r+0x760>
 800c1f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 80b7 	beq.w	800c368 <_dtoa_r+0x898>
 800c1fa:	b18c      	cbz	r4, 800c220 <_dtoa_r+0x750>
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	4622      	mov	r2, r4
 800c200:	4658      	mov	r0, fp
 800c202:	f000 fbfd 	bl	800ca00 <__pow5mult>
 800c206:	464a      	mov	r2, r9
 800c208:	4601      	mov	r1, r0
 800c20a:	4605      	mov	r5, r0
 800c20c:	4658      	mov	r0, fp
 800c20e:	f000 fb4d 	bl	800c8ac <__multiply>
 800c212:	4649      	mov	r1, r9
 800c214:	9004      	str	r0, [sp, #16]
 800c216:	4658      	mov	r0, fp
 800c218:	f000 fa4d 	bl	800c6b6 <_Bfree>
 800c21c:	9b04      	ldr	r3, [sp, #16]
 800c21e:	4699      	mov	r9, r3
 800c220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c222:	1b1a      	subs	r2, r3, r4
 800c224:	d004      	beq.n	800c230 <_dtoa_r+0x760>
 800c226:	4649      	mov	r1, r9
 800c228:	4658      	mov	r0, fp
 800c22a:	f000 fbe9 	bl	800ca00 <__pow5mult>
 800c22e:	4681      	mov	r9, r0
 800c230:	2101      	movs	r1, #1
 800c232:	4658      	mov	r0, fp
 800c234:	f000 fb24 	bl	800c880 <__i2b>
 800c238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c23a:	4604      	mov	r4, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 81cc 	beq.w	800c5da <_dtoa_r+0xb0a>
 800c242:	461a      	mov	r2, r3
 800c244:	4601      	mov	r1, r0
 800c246:	4658      	mov	r0, fp
 800c248:	f000 fbda 	bl	800ca00 <__pow5mult>
 800c24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c24e:	2b01      	cmp	r3, #1
 800c250:	4604      	mov	r4, r0
 800c252:	f300 8095 	bgt.w	800c380 <_dtoa_r+0x8b0>
 800c256:	9b02      	ldr	r3, [sp, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f040 8087 	bne.w	800c36c <_dtoa_r+0x89c>
 800c25e:	9b03      	ldr	r3, [sp, #12]
 800c260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c264:	2b00      	cmp	r3, #0
 800c266:	f040 8089 	bne.w	800c37c <_dtoa_r+0x8ac>
 800c26a:	9b03      	ldr	r3, [sp, #12]
 800c26c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c270:	0d1b      	lsrs	r3, r3, #20
 800c272:	051b      	lsls	r3, r3, #20
 800c274:	b12b      	cbz	r3, 800c282 <_dtoa_r+0x7b2>
 800c276:	9b08      	ldr	r3, [sp, #32]
 800c278:	3301      	adds	r3, #1
 800c27a:	9308      	str	r3, [sp, #32]
 800c27c:	f108 0801 	add.w	r8, r8, #1
 800c280:	2301      	movs	r3, #1
 800c282:	930a      	str	r3, [sp, #40]	@ 0x28
 800c284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 81ad 	beq.w	800c5e6 <_dtoa_r+0xb16>
 800c28c:	6923      	ldr	r3, [r4, #16]
 800c28e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c292:	6918      	ldr	r0, [r3, #16]
 800c294:	f000 faa8 	bl	800c7e8 <__hi0bits>
 800c298:	f1c0 0020 	rsb	r0, r0, #32
 800c29c:	9b08      	ldr	r3, [sp, #32]
 800c29e:	4418      	add	r0, r3
 800c2a0:	f010 001f 	ands.w	r0, r0, #31
 800c2a4:	d077      	beq.n	800c396 <_dtoa_r+0x8c6>
 800c2a6:	f1c0 0320 	rsb	r3, r0, #32
 800c2aa:	2b04      	cmp	r3, #4
 800c2ac:	dd6b      	ble.n	800c386 <_dtoa_r+0x8b6>
 800c2ae:	9b08      	ldr	r3, [sp, #32]
 800c2b0:	f1c0 001c 	rsb	r0, r0, #28
 800c2b4:	4403      	add	r3, r0
 800c2b6:	4480      	add	r8, r0
 800c2b8:	4406      	add	r6, r0
 800c2ba:	9308      	str	r3, [sp, #32]
 800c2bc:	f1b8 0f00 	cmp.w	r8, #0
 800c2c0:	dd05      	ble.n	800c2ce <_dtoa_r+0x7fe>
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	4642      	mov	r2, r8
 800c2c6:	4658      	mov	r0, fp
 800c2c8:	f000 fbda 	bl	800ca80 <__lshift>
 800c2cc:	4681      	mov	r9, r0
 800c2ce:	9b08      	ldr	r3, [sp, #32]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	dd05      	ble.n	800c2e0 <_dtoa_r+0x810>
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	4658      	mov	r0, fp
 800c2da:	f000 fbd1 	bl	800ca80 <__lshift>
 800c2de:	4604      	mov	r4, r0
 800c2e0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d059      	beq.n	800c39a <_dtoa_r+0x8ca>
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	4648      	mov	r0, r9
 800c2ea:	f000 fc35 	bl	800cb58 <__mcmp>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	da53      	bge.n	800c39a <_dtoa_r+0x8ca>
 800c2f2:	1e7b      	subs	r3, r7, #1
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	220a      	movs	r2, #10
 800c2fc:	4658      	mov	r0, fp
 800c2fe:	f000 f9e3 	bl	800c6c8 <__multadd>
 800c302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c304:	4681      	mov	r9, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	f000 816f 	beq.w	800c5ea <_dtoa_r+0xb1a>
 800c30c:	2300      	movs	r3, #0
 800c30e:	4629      	mov	r1, r5
 800c310:	220a      	movs	r2, #10
 800c312:	4658      	mov	r0, fp
 800c314:	f000 f9d8 	bl	800c6c8 <__multadd>
 800c318:	9b00      	ldr	r3, [sp, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	4605      	mov	r5, r0
 800c31e:	dc67      	bgt.n	800c3f0 <_dtoa_r+0x920>
 800c320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c322:	2b02      	cmp	r3, #2
 800c324:	dc41      	bgt.n	800c3aa <_dtoa_r+0x8da>
 800c326:	e063      	b.n	800c3f0 <_dtoa_r+0x920>
 800c328:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c32a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c32e:	e746      	b.n	800c1be <_dtoa_r+0x6ee>
 800c330:	9b07      	ldr	r3, [sp, #28]
 800c332:	1e5c      	subs	r4, r3, #1
 800c334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c336:	42a3      	cmp	r3, r4
 800c338:	bfbf      	itttt	lt
 800c33a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c33c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c33e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c340:	1ae3      	sublt	r3, r4, r3
 800c342:	bfb4      	ite	lt
 800c344:	18d2      	addlt	r2, r2, r3
 800c346:	1b1c      	subge	r4, r3, r4
 800c348:	9b07      	ldr	r3, [sp, #28]
 800c34a:	bfbc      	itt	lt
 800c34c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c34e:	2400      	movlt	r4, #0
 800c350:	2b00      	cmp	r3, #0
 800c352:	bfb5      	itete	lt
 800c354:	eba8 0603 	sublt.w	r6, r8, r3
 800c358:	9b07      	ldrge	r3, [sp, #28]
 800c35a:	2300      	movlt	r3, #0
 800c35c:	4646      	movge	r6, r8
 800c35e:	e730      	b.n	800c1c2 <_dtoa_r+0x6f2>
 800c360:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c362:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c364:	4646      	mov	r6, r8
 800c366:	e735      	b.n	800c1d4 <_dtoa_r+0x704>
 800c368:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c36a:	e75c      	b.n	800c226 <_dtoa_r+0x756>
 800c36c:	2300      	movs	r3, #0
 800c36e:	e788      	b.n	800c282 <_dtoa_r+0x7b2>
 800c370:	3fe00000 	.word	0x3fe00000
 800c374:	40240000 	.word	0x40240000
 800c378:	40140000 	.word	0x40140000
 800c37c:	9b02      	ldr	r3, [sp, #8]
 800c37e:	e780      	b.n	800c282 <_dtoa_r+0x7b2>
 800c380:	2300      	movs	r3, #0
 800c382:	930a      	str	r3, [sp, #40]	@ 0x28
 800c384:	e782      	b.n	800c28c <_dtoa_r+0x7bc>
 800c386:	d099      	beq.n	800c2bc <_dtoa_r+0x7ec>
 800c388:	9a08      	ldr	r2, [sp, #32]
 800c38a:	331c      	adds	r3, #28
 800c38c:	441a      	add	r2, r3
 800c38e:	4498      	add	r8, r3
 800c390:	441e      	add	r6, r3
 800c392:	9208      	str	r2, [sp, #32]
 800c394:	e792      	b.n	800c2bc <_dtoa_r+0x7ec>
 800c396:	4603      	mov	r3, r0
 800c398:	e7f6      	b.n	800c388 <_dtoa_r+0x8b8>
 800c39a:	9b07      	ldr	r3, [sp, #28]
 800c39c:	9704      	str	r7, [sp, #16]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	dc20      	bgt.n	800c3e4 <_dtoa_r+0x914>
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	dd1e      	ble.n	800c3e8 <_dtoa_r+0x918>
 800c3aa:	9b00      	ldr	r3, [sp, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f47f aec0 	bne.w	800c132 <_dtoa_r+0x662>
 800c3b2:	4621      	mov	r1, r4
 800c3b4:	2205      	movs	r2, #5
 800c3b6:	4658      	mov	r0, fp
 800c3b8:	f000 f986 	bl	800c6c8 <__multadd>
 800c3bc:	4601      	mov	r1, r0
 800c3be:	4604      	mov	r4, r0
 800c3c0:	4648      	mov	r0, r9
 800c3c2:	f000 fbc9 	bl	800cb58 <__mcmp>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f77f aeb3 	ble.w	800c132 <_dtoa_r+0x662>
 800c3cc:	4656      	mov	r6, sl
 800c3ce:	2331      	movs	r3, #49	@ 0x31
 800c3d0:	f806 3b01 	strb.w	r3, [r6], #1
 800c3d4:	9b04      	ldr	r3, [sp, #16]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	9304      	str	r3, [sp, #16]
 800c3da:	e6ae      	b.n	800c13a <_dtoa_r+0x66a>
 800c3dc:	9c07      	ldr	r4, [sp, #28]
 800c3de:	9704      	str	r7, [sp, #16]
 800c3e0:	4625      	mov	r5, r4
 800c3e2:	e7f3      	b.n	800c3cc <_dtoa_r+0x8fc>
 800c3e4:	9b07      	ldr	r3, [sp, #28]
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 8101 	beq.w	800c5f2 <_dtoa_r+0xb22>
 800c3f0:	2e00      	cmp	r6, #0
 800c3f2:	dd05      	ble.n	800c400 <_dtoa_r+0x930>
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	4632      	mov	r2, r6
 800c3f8:	4658      	mov	r0, fp
 800c3fa:	f000 fb41 	bl	800ca80 <__lshift>
 800c3fe:	4605      	mov	r5, r0
 800c400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c402:	2b00      	cmp	r3, #0
 800c404:	d059      	beq.n	800c4ba <_dtoa_r+0x9ea>
 800c406:	6869      	ldr	r1, [r5, #4]
 800c408:	4658      	mov	r0, fp
 800c40a:	f000 f92f 	bl	800c66c <_Balloc>
 800c40e:	4606      	mov	r6, r0
 800c410:	b920      	cbnz	r0, 800c41c <_dtoa_r+0x94c>
 800c412:	4b83      	ldr	r3, [pc, #524]	@ (800c620 <_dtoa_r+0xb50>)
 800c414:	4602      	mov	r2, r0
 800c416:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c41a:	e480      	b.n	800bd1e <_dtoa_r+0x24e>
 800c41c:	692a      	ldr	r2, [r5, #16]
 800c41e:	3202      	adds	r2, #2
 800c420:	0092      	lsls	r2, r2, #2
 800c422:	f105 010c 	add.w	r1, r5, #12
 800c426:	300c      	adds	r0, #12
 800c428:	f7fc f846 	bl	80084b8 <memcpy>
 800c42c:	2201      	movs	r2, #1
 800c42e:	4631      	mov	r1, r6
 800c430:	4658      	mov	r0, fp
 800c432:	f000 fb25 	bl	800ca80 <__lshift>
 800c436:	f10a 0301 	add.w	r3, sl, #1
 800c43a:	9307      	str	r3, [sp, #28]
 800c43c:	9b00      	ldr	r3, [sp, #0]
 800c43e:	4453      	add	r3, sl
 800c440:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c442:	9b02      	ldr	r3, [sp, #8]
 800c444:	f003 0301 	and.w	r3, r3, #1
 800c448:	462f      	mov	r7, r5
 800c44a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c44c:	4605      	mov	r5, r0
 800c44e:	9b07      	ldr	r3, [sp, #28]
 800c450:	4621      	mov	r1, r4
 800c452:	3b01      	subs	r3, #1
 800c454:	4648      	mov	r0, r9
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	f7ff fab0 	bl	800b9bc <quorem>
 800c45c:	4639      	mov	r1, r7
 800c45e:	9002      	str	r0, [sp, #8]
 800c460:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c464:	4648      	mov	r0, r9
 800c466:	f000 fb77 	bl	800cb58 <__mcmp>
 800c46a:	462a      	mov	r2, r5
 800c46c:	9008      	str	r0, [sp, #32]
 800c46e:	4621      	mov	r1, r4
 800c470:	4658      	mov	r0, fp
 800c472:	f000 fb8d 	bl	800cb90 <__mdiff>
 800c476:	68c2      	ldr	r2, [r0, #12]
 800c478:	4606      	mov	r6, r0
 800c47a:	bb02      	cbnz	r2, 800c4be <_dtoa_r+0x9ee>
 800c47c:	4601      	mov	r1, r0
 800c47e:	4648      	mov	r0, r9
 800c480:	f000 fb6a 	bl	800cb58 <__mcmp>
 800c484:	4602      	mov	r2, r0
 800c486:	4631      	mov	r1, r6
 800c488:	4658      	mov	r0, fp
 800c48a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c48c:	f000 f913 	bl	800c6b6 <_Bfree>
 800c490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c492:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c494:	9e07      	ldr	r6, [sp, #28]
 800c496:	ea43 0102 	orr.w	r1, r3, r2
 800c49a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c49c:	4319      	orrs	r1, r3
 800c49e:	d110      	bne.n	800c4c2 <_dtoa_r+0x9f2>
 800c4a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4a4:	d029      	beq.n	800c4fa <_dtoa_r+0xa2a>
 800c4a6:	9b08      	ldr	r3, [sp, #32]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	dd02      	ble.n	800c4b2 <_dtoa_r+0x9e2>
 800c4ac:	9b02      	ldr	r3, [sp, #8]
 800c4ae:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c4b2:	9b00      	ldr	r3, [sp, #0]
 800c4b4:	f883 8000 	strb.w	r8, [r3]
 800c4b8:	e640      	b.n	800c13c <_dtoa_r+0x66c>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	e7bb      	b.n	800c436 <_dtoa_r+0x966>
 800c4be:	2201      	movs	r2, #1
 800c4c0:	e7e1      	b.n	800c486 <_dtoa_r+0x9b6>
 800c4c2:	9b08      	ldr	r3, [sp, #32]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	db04      	blt.n	800c4d2 <_dtoa_r+0xa02>
 800c4c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4ca:	430b      	orrs	r3, r1
 800c4cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4ce:	430b      	orrs	r3, r1
 800c4d0:	d120      	bne.n	800c514 <_dtoa_r+0xa44>
 800c4d2:	2a00      	cmp	r2, #0
 800c4d4:	dded      	ble.n	800c4b2 <_dtoa_r+0x9e2>
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	2201      	movs	r2, #1
 800c4da:	4658      	mov	r0, fp
 800c4dc:	f000 fad0 	bl	800ca80 <__lshift>
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	4681      	mov	r9, r0
 800c4e4:	f000 fb38 	bl	800cb58 <__mcmp>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	dc03      	bgt.n	800c4f4 <_dtoa_r+0xa24>
 800c4ec:	d1e1      	bne.n	800c4b2 <_dtoa_r+0x9e2>
 800c4ee:	f018 0f01 	tst.w	r8, #1
 800c4f2:	d0de      	beq.n	800c4b2 <_dtoa_r+0x9e2>
 800c4f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4f8:	d1d8      	bne.n	800c4ac <_dtoa_r+0x9dc>
 800c4fa:	9a00      	ldr	r2, [sp, #0]
 800c4fc:	2339      	movs	r3, #57	@ 0x39
 800c4fe:	7013      	strb	r3, [r2, #0]
 800c500:	4633      	mov	r3, r6
 800c502:	461e      	mov	r6, r3
 800c504:	3b01      	subs	r3, #1
 800c506:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c50a:	2a39      	cmp	r2, #57	@ 0x39
 800c50c:	d052      	beq.n	800c5b4 <_dtoa_r+0xae4>
 800c50e:	3201      	adds	r2, #1
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	e613      	b.n	800c13c <_dtoa_r+0x66c>
 800c514:	2a00      	cmp	r2, #0
 800c516:	dd07      	ble.n	800c528 <_dtoa_r+0xa58>
 800c518:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c51c:	d0ed      	beq.n	800c4fa <_dtoa_r+0xa2a>
 800c51e:	9a00      	ldr	r2, [sp, #0]
 800c520:	f108 0301 	add.w	r3, r8, #1
 800c524:	7013      	strb	r3, [r2, #0]
 800c526:	e609      	b.n	800c13c <_dtoa_r+0x66c>
 800c528:	9b07      	ldr	r3, [sp, #28]
 800c52a:	9a07      	ldr	r2, [sp, #28]
 800c52c:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c530:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c532:	4293      	cmp	r3, r2
 800c534:	d028      	beq.n	800c588 <_dtoa_r+0xab8>
 800c536:	4649      	mov	r1, r9
 800c538:	2300      	movs	r3, #0
 800c53a:	220a      	movs	r2, #10
 800c53c:	4658      	mov	r0, fp
 800c53e:	f000 f8c3 	bl	800c6c8 <__multadd>
 800c542:	42af      	cmp	r7, r5
 800c544:	4681      	mov	r9, r0
 800c546:	f04f 0300 	mov.w	r3, #0
 800c54a:	f04f 020a 	mov.w	r2, #10
 800c54e:	4639      	mov	r1, r7
 800c550:	4658      	mov	r0, fp
 800c552:	d107      	bne.n	800c564 <_dtoa_r+0xa94>
 800c554:	f000 f8b8 	bl	800c6c8 <__multadd>
 800c558:	4607      	mov	r7, r0
 800c55a:	4605      	mov	r5, r0
 800c55c:	9b07      	ldr	r3, [sp, #28]
 800c55e:	3301      	adds	r3, #1
 800c560:	9307      	str	r3, [sp, #28]
 800c562:	e774      	b.n	800c44e <_dtoa_r+0x97e>
 800c564:	f000 f8b0 	bl	800c6c8 <__multadd>
 800c568:	4629      	mov	r1, r5
 800c56a:	4607      	mov	r7, r0
 800c56c:	2300      	movs	r3, #0
 800c56e:	220a      	movs	r2, #10
 800c570:	4658      	mov	r0, fp
 800c572:	f000 f8a9 	bl	800c6c8 <__multadd>
 800c576:	4605      	mov	r5, r0
 800c578:	e7f0      	b.n	800c55c <_dtoa_r+0xa8c>
 800c57a:	9b00      	ldr	r3, [sp, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	bfcc      	ite	gt
 800c580:	461e      	movgt	r6, r3
 800c582:	2601      	movle	r6, #1
 800c584:	4456      	add	r6, sl
 800c586:	2700      	movs	r7, #0
 800c588:	4649      	mov	r1, r9
 800c58a:	2201      	movs	r2, #1
 800c58c:	4658      	mov	r0, fp
 800c58e:	f000 fa77 	bl	800ca80 <__lshift>
 800c592:	4621      	mov	r1, r4
 800c594:	4681      	mov	r9, r0
 800c596:	f000 fadf 	bl	800cb58 <__mcmp>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	dcb0      	bgt.n	800c500 <_dtoa_r+0xa30>
 800c59e:	d102      	bne.n	800c5a6 <_dtoa_r+0xad6>
 800c5a0:	f018 0f01 	tst.w	r8, #1
 800c5a4:	d1ac      	bne.n	800c500 <_dtoa_r+0xa30>
 800c5a6:	4633      	mov	r3, r6
 800c5a8:	461e      	mov	r6, r3
 800c5aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5ae:	2a30      	cmp	r2, #48	@ 0x30
 800c5b0:	d0fa      	beq.n	800c5a8 <_dtoa_r+0xad8>
 800c5b2:	e5c3      	b.n	800c13c <_dtoa_r+0x66c>
 800c5b4:	459a      	cmp	sl, r3
 800c5b6:	d1a4      	bne.n	800c502 <_dtoa_r+0xa32>
 800c5b8:	9b04      	ldr	r3, [sp, #16]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	9304      	str	r3, [sp, #16]
 800c5be:	2331      	movs	r3, #49	@ 0x31
 800c5c0:	f88a 3000 	strb.w	r3, [sl]
 800c5c4:	e5ba      	b.n	800c13c <_dtoa_r+0x66c>
 800c5c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c624 <_dtoa_r+0xb54>
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f43f aab6 	beq.w	800bb3e <_dtoa_r+0x6e>
 800c5d2:	f10a 0308 	add.w	r3, sl, #8
 800c5d6:	f7ff bab0 	b.w	800bb3a <_dtoa_r+0x6a>
 800c5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	f77f ae3a 	ble.w	800c256 <_dtoa_r+0x786>
 800c5e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5e6:	2001      	movs	r0, #1
 800c5e8:	e658      	b.n	800c29c <_dtoa_r+0x7cc>
 800c5ea:	9b00      	ldr	r3, [sp, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f77f aed9 	ble.w	800c3a4 <_dtoa_r+0x8d4>
 800c5f2:	4656      	mov	r6, sl
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	4648      	mov	r0, r9
 800c5f8:	f7ff f9e0 	bl	800b9bc <quorem>
 800c5fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c600:	f806 8b01 	strb.w	r8, [r6], #1
 800c604:	9b00      	ldr	r3, [sp, #0]
 800c606:	eba6 020a 	sub.w	r2, r6, sl
 800c60a:	4293      	cmp	r3, r2
 800c60c:	ddb5      	ble.n	800c57a <_dtoa_r+0xaaa>
 800c60e:	4649      	mov	r1, r9
 800c610:	2300      	movs	r3, #0
 800c612:	220a      	movs	r2, #10
 800c614:	4658      	mov	r0, fp
 800c616:	f000 f857 	bl	800c6c8 <__multadd>
 800c61a:	4681      	mov	r9, r0
 800c61c:	e7ea      	b.n	800c5f4 <_dtoa_r+0xb24>
 800c61e:	bf00      	nop
 800c620:	0800fb17 	.word	0x0800fb17
 800c624:	0800fb0a 	.word	0x0800fb0a

0800c628 <malloc>:
 800c628:	4b02      	ldr	r3, [pc, #8]	@ (800c634 <malloc+0xc>)
 800c62a:	4601      	mov	r1, r0
 800c62c:	6818      	ldr	r0, [r3, #0]
 800c62e:	f7fc b877 	b.w	8008720 <_malloc_r>
 800c632:	bf00      	nop
 800c634:	20000050 	.word	0x20000050

0800c638 <free>:
 800c638:	4b02      	ldr	r3, [pc, #8]	@ (800c644 <free+0xc>)
 800c63a:	4601      	mov	r1, r0
 800c63c:	6818      	ldr	r0, [r3, #0]
 800c63e:	f7fb bfaf 	b.w	80085a0 <_free_r>
 800c642:	bf00      	nop
 800c644:	20000050 	.word	0x20000050

0800c648 <__ascii_mbtowc>:
 800c648:	b082      	sub	sp, #8
 800c64a:	b901      	cbnz	r1, 800c64e <__ascii_mbtowc+0x6>
 800c64c:	a901      	add	r1, sp, #4
 800c64e:	b142      	cbz	r2, 800c662 <__ascii_mbtowc+0x1a>
 800c650:	b14b      	cbz	r3, 800c666 <__ascii_mbtowc+0x1e>
 800c652:	7813      	ldrb	r3, [r2, #0]
 800c654:	600b      	str	r3, [r1, #0]
 800c656:	7812      	ldrb	r2, [r2, #0]
 800c658:	1e10      	subs	r0, r2, #0
 800c65a:	bf18      	it	ne
 800c65c:	2001      	movne	r0, #1
 800c65e:	b002      	add	sp, #8
 800c660:	4770      	bx	lr
 800c662:	4610      	mov	r0, r2
 800c664:	e7fb      	b.n	800c65e <__ascii_mbtowc+0x16>
 800c666:	f06f 0001 	mvn.w	r0, #1
 800c66a:	e7f8      	b.n	800c65e <__ascii_mbtowc+0x16>

0800c66c <_Balloc>:
 800c66c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c66e:	b570      	push	{r4, r5, r6, lr}
 800c670:	4605      	mov	r5, r0
 800c672:	460c      	mov	r4, r1
 800c674:	b17b      	cbz	r3, 800c696 <_Balloc+0x2a>
 800c676:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800c678:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c67c:	b9a0      	cbnz	r0, 800c6a8 <_Balloc+0x3c>
 800c67e:	2101      	movs	r1, #1
 800c680:	fa01 f604 	lsl.w	r6, r1, r4
 800c684:	1d72      	adds	r2, r6, #5
 800c686:	0092      	lsls	r2, r2, #2
 800c688:	4628      	mov	r0, r5
 800c68a:	f001 fdb3 	bl	800e1f4 <_calloc_r>
 800c68e:	b148      	cbz	r0, 800c6a4 <_Balloc+0x38>
 800c690:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c694:	e00b      	b.n	800c6ae <_Balloc+0x42>
 800c696:	2221      	movs	r2, #33	@ 0x21
 800c698:	2104      	movs	r1, #4
 800c69a:	f001 fdab 	bl	800e1f4 <_calloc_r>
 800c69e:	6468      	str	r0, [r5, #68]	@ 0x44
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d1e8      	bne.n	800c676 <_Balloc+0xa>
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}
 800c6a8:	6802      	ldr	r2, [r0, #0]
 800c6aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6b4:	e7f7      	b.n	800c6a6 <_Balloc+0x3a>

0800c6b6 <_Bfree>:
 800c6b6:	b131      	cbz	r1, 800c6c6 <_Bfree+0x10>
 800c6b8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c6ba:	684a      	ldr	r2, [r1, #4]
 800c6bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c6c0:	6008      	str	r0, [r1, #0]
 800c6c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c6c6:	4770      	bx	lr

0800c6c8 <__multadd>:
 800c6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6cc:	690d      	ldr	r5, [r1, #16]
 800c6ce:	4607      	mov	r7, r0
 800c6d0:	460c      	mov	r4, r1
 800c6d2:	461e      	mov	r6, r3
 800c6d4:	f101 0c14 	add.w	ip, r1, #20
 800c6d8:	2000      	movs	r0, #0
 800c6da:	f8dc 3000 	ldr.w	r3, [ip]
 800c6de:	b299      	uxth	r1, r3
 800c6e0:	fb02 6101 	mla	r1, r2, r1, r6
 800c6e4:	0c1e      	lsrs	r6, r3, #16
 800c6e6:	0c0b      	lsrs	r3, r1, #16
 800c6e8:	fb02 3306 	mla	r3, r2, r6, r3
 800c6ec:	b289      	uxth	r1, r1
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6f4:	4285      	cmp	r5, r0
 800c6f6:	f84c 1b04 	str.w	r1, [ip], #4
 800c6fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6fe:	dcec      	bgt.n	800c6da <__multadd+0x12>
 800c700:	b30e      	cbz	r6, 800c746 <__multadd+0x7e>
 800c702:	68a3      	ldr	r3, [r4, #8]
 800c704:	42ab      	cmp	r3, r5
 800c706:	dc19      	bgt.n	800c73c <__multadd+0x74>
 800c708:	6861      	ldr	r1, [r4, #4]
 800c70a:	4638      	mov	r0, r7
 800c70c:	3101      	adds	r1, #1
 800c70e:	f7ff ffad 	bl	800c66c <_Balloc>
 800c712:	4680      	mov	r8, r0
 800c714:	b928      	cbnz	r0, 800c722 <__multadd+0x5a>
 800c716:	4602      	mov	r2, r0
 800c718:	4b0c      	ldr	r3, [pc, #48]	@ (800c74c <__multadd+0x84>)
 800c71a:	480d      	ldr	r0, [pc, #52]	@ (800c750 <__multadd+0x88>)
 800c71c:	21ba      	movs	r1, #186	@ 0xba
 800c71e:	f001 fd4b 	bl	800e1b8 <__assert_func>
 800c722:	6922      	ldr	r2, [r4, #16]
 800c724:	3202      	adds	r2, #2
 800c726:	f104 010c 	add.w	r1, r4, #12
 800c72a:	0092      	lsls	r2, r2, #2
 800c72c:	300c      	adds	r0, #12
 800c72e:	f7fb fec3 	bl	80084b8 <memcpy>
 800c732:	4621      	mov	r1, r4
 800c734:	4638      	mov	r0, r7
 800c736:	f7ff ffbe 	bl	800c6b6 <_Bfree>
 800c73a:	4644      	mov	r4, r8
 800c73c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c740:	3501      	adds	r5, #1
 800c742:	615e      	str	r6, [r3, #20]
 800c744:	6125      	str	r5, [r4, #16]
 800c746:	4620      	mov	r0, r4
 800c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c74c:	0800fb17 	.word	0x0800fb17
 800c750:	0800fb80 	.word	0x0800fb80

0800c754 <__s2b>:
 800c754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c758:	460c      	mov	r4, r1
 800c75a:	4615      	mov	r5, r2
 800c75c:	461f      	mov	r7, r3
 800c75e:	2209      	movs	r2, #9
 800c760:	3308      	adds	r3, #8
 800c762:	4606      	mov	r6, r0
 800c764:	fb93 f3f2 	sdiv	r3, r3, r2
 800c768:	2100      	movs	r1, #0
 800c76a:	2201      	movs	r2, #1
 800c76c:	429a      	cmp	r2, r3
 800c76e:	db09      	blt.n	800c784 <__s2b+0x30>
 800c770:	4630      	mov	r0, r6
 800c772:	f7ff ff7b 	bl	800c66c <_Balloc>
 800c776:	b940      	cbnz	r0, 800c78a <__s2b+0x36>
 800c778:	4602      	mov	r2, r0
 800c77a:	4b19      	ldr	r3, [pc, #100]	@ (800c7e0 <__s2b+0x8c>)
 800c77c:	4819      	ldr	r0, [pc, #100]	@ (800c7e4 <__s2b+0x90>)
 800c77e:	21d3      	movs	r1, #211	@ 0xd3
 800c780:	f001 fd1a 	bl	800e1b8 <__assert_func>
 800c784:	0052      	lsls	r2, r2, #1
 800c786:	3101      	adds	r1, #1
 800c788:	e7f0      	b.n	800c76c <__s2b+0x18>
 800c78a:	9b08      	ldr	r3, [sp, #32]
 800c78c:	6143      	str	r3, [r0, #20]
 800c78e:	2d09      	cmp	r5, #9
 800c790:	f04f 0301 	mov.w	r3, #1
 800c794:	6103      	str	r3, [r0, #16]
 800c796:	dd16      	ble.n	800c7c6 <__s2b+0x72>
 800c798:	f104 0909 	add.w	r9, r4, #9
 800c79c:	46c8      	mov	r8, r9
 800c79e:	442c      	add	r4, r5
 800c7a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c7a4:	4601      	mov	r1, r0
 800c7a6:	3b30      	subs	r3, #48	@ 0x30
 800c7a8:	220a      	movs	r2, #10
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f7ff ff8c 	bl	800c6c8 <__multadd>
 800c7b0:	45a0      	cmp	r8, r4
 800c7b2:	d1f5      	bne.n	800c7a0 <__s2b+0x4c>
 800c7b4:	f1a5 0408 	sub.w	r4, r5, #8
 800c7b8:	444c      	add	r4, r9
 800c7ba:	1b2d      	subs	r5, r5, r4
 800c7bc:	1963      	adds	r3, r4, r5
 800c7be:	42bb      	cmp	r3, r7
 800c7c0:	db04      	blt.n	800c7cc <__s2b+0x78>
 800c7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c6:	340a      	adds	r4, #10
 800c7c8:	2509      	movs	r5, #9
 800c7ca:	e7f6      	b.n	800c7ba <__s2b+0x66>
 800c7cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7d0:	4601      	mov	r1, r0
 800c7d2:	3b30      	subs	r3, #48	@ 0x30
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f7ff ff76 	bl	800c6c8 <__multadd>
 800c7dc:	e7ee      	b.n	800c7bc <__s2b+0x68>
 800c7de:	bf00      	nop
 800c7e0:	0800fb17 	.word	0x0800fb17
 800c7e4:	0800fb80 	.word	0x0800fb80

0800c7e8 <__hi0bits>:
 800c7e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	bf36      	itet	cc
 800c7f0:	0403      	lslcc	r3, r0, #16
 800c7f2:	2000      	movcs	r0, #0
 800c7f4:	2010      	movcc	r0, #16
 800c7f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7fa:	bf3c      	itt	cc
 800c7fc:	021b      	lslcc	r3, r3, #8
 800c7fe:	3008      	addcc	r0, #8
 800c800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c804:	bf3c      	itt	cc
 800c806:	011b      	lslcc	r3, r3, #4
 800c808:	3004      	addcc	r0, #4
 800c80a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c80e:	bf3c      	itt	cc
 800c810:	009b      	lslcc	r3, r3, #2
 800c812:	3002      	addcc	r0, #2
 800c814:	2b00      	cmp	r3, #0
 800c816:	db05      	blt.n	800c824 <__hi0bits+0x3c>
 800c818:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c81c:	f100 0001 	add.w	r0, r0, #1
 800c820:	bf08      	it	eq
 800c822:	2020      	moveq	r0, #32
 800c824:	4770      	bx	lr

0800c826 <__lo0bits>:
 800c826:	6803      	ldr	r3, [r0, #0]
 800c828:	4602      	mov	r2, r0
 800c82a:	f013 0007 	ands.w	r0, r3, #7
 800c82e:	d00b      	beq.n	800c848 <__lo0bits+0x22>
 800c830:	07d9      	lsls	r1, r3, #31
 800c832:	d421      	bmi.n	800c878 <__lo0bits+0x52>
 800c834:	0798      	lsls	r0, r3, #30
 800c836:	bf49      	itett	mi
 800c838:	085b      	lsrmi	r3, r3, #1
 800c83a:	089b      	lsrpl	r3, r3, #2
 800c83c:	2001      	movmi	r0, #1
 800c83e:	6013      	strmi	r3, [r2, #0]
 800c840:	bf5c      	itt	pl
 800c842:	6013      	strpl	r3, [r2, #0]
 800c844:	2002      	movpl	r0, #2
 800c846:	4770      	bx	lr
 800c848:	b299      	uxth	r1, r3
 800c84a:	b909      	cbnz	r1, 800c850 <__lo0bits+0x2a>
 800c84c:	0c1b      	lsrs	r3, r3, #16
 800c84e:	2010      	movs	r0, #16
 800c850:	b2d9      	uxtb	r1, r3
 800c852:	b909      	cbnz	r1, 800c858 <__lo0bits+0x32>
 800c854:	3008      	adds	r0, #8
 800c856:	0a1b      	lsrs	r3, r3, #8
 800c858:	0719      	lsls	r1, r3, #28
 800c85a:	bf04      	itt	eq
 800c85c:	091b      	lsreq	r3, r3, #4
 800c85e:	3004      	addeq	r0, #4
 800c860:	0799      	lsls	r1, r3, #30
 800c862:	bf04      	itt	eq
 800c864:	089b      	lsreq	r3, r3, #2
 800c866:	3002      	addeq	r0, #2
 800c868:	07d9      	lsls	r1, r3, #31
 800c86a:	d403      	bmi.n	800c874 <__lo0bits+0x4e>
 800c86c:	085b      	lsrs	r3, r3, #1
 800c86e:	f100 0001 	add.w	r0, r0, #1
 800c872:	d003      	beq.n	800c87c <__lo0bits+0x56>
 800c874:	6013      	str	r3, [r2, #0]
 800c876:	4770      	bx	lr
 800c878:	2000      	movs	r0, #0
 800c87a:	4770      	bx	lr
 800c87c:	2020      	movs	r0, #32
 800c87e:	4770      	bx	lr

0800c880 <__i2b>:
 800c880:	b510      	push	{r4, lr}
 800c882:	460c      	mov	r4, r1
 800c884:	2101      	movs	r1, #1
 800c886:	f7ff fef1 	bl	800c66c <_Balloc>
 800c88a:	4602      	mov	r2, r0
 800c88c:	b928      	cbnz	r0, 800c89a <__i2b+0x1a>
 800c88e:	4b05      	ldr	r3, [pc, #20]	@ (800c8a4 <__i2b+0x24>)
 800c890:	4805      	ldr	r0, [pc, #20]	@ (800c8a8 <__i2b+0x28>)
 800c892:	f240 1145 	movw	r1, #325	@ 0x145
 800c896:	f001 fc8f 	bl	800e1b8 <__assert_func>
 800c89a:	2301      	movs	r3, #1
 800c89c:	6144      	str	r4, [r0, #20]
 800c89e:	6103      	str	r3, [r0, #16]
 800c8a0:	bd10      	pop	{r4, pc}
 800c8a2:	bf00      	nop
 800c8a4:	0800fb17 	.word	0x0800fb17
 800c8a8:	0800fb80 	.word	0x0800fb80

0800c8ac <__multiply>:
 800c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	690a      	ldr	r2, [r1, #16]
 800c8b4:	6923      	ldr	r3, [r4, #16]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	bfa8      	it	ge
 800c8ba:	4623      	movge	r3, r4
 800c8bc:	460f      	mov	r7, r1
 800c8be:	bfa4      	itt	ge
 800c8c0:	460c      	movge	r4, r1
 800c8c2:	461f      	movge	r7, r3
 800c8c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c8c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c8cc:	68a3      	ldr	r3, [r4, #8]
 800c8ce:	6861      	ldr	r1, [r4, #4]
 800c8d0:	eb0a 0609 	add.w	r6, sl, r9
 800c8d4:	42b3      	cmp	r3, r6
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	bfb8      	it	lt
 800c8da:	3101      	addlt	r1, #1
 800c8dc:	f7ff fec6 	bl	800c66c <_Balloc>
 800c8e0:	b930      	cbnz	r0, 800c8f0 <__multiply+0x44>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	4b44      	ldr	r3, [pc, #272]	@ (800c9f8 <__multiply+0x14c>)
 800c8e6:	4845      	ldr	r0, [pc, #276]	@ (800c9fc <__multiply+0x150>)
 800c8e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c8ec:	f001 fc64 	bl	800e1b8 <__assert_func>
 800c8f0:	f100 0514 	add.w	r5, r0, #20
 800c8f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c8f8:	462b      	mov	r3, r5
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	4543      	cmp	r3, r8
 800c8fe:	d321      	bcc.n	800c944 <__multiply+0x98>
 800c900:	f107 0114 	add.w	r1, r7, #20
 800c904:	f104 0214 	add.w	r2, r4, #20
 800c908:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c90c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c910:	9302      	str	r3, [sp, #8]
 800c912:	1b13      	subs	r3, r2, r4
 800c914:	3b15      	subs	r3, #21
 800c916:	f023 0303 	bic.w	r3, r3, #3
 800c91a:	3304      	adds	r3, #4
 800c91c:	f104 0715 	add.w	r7, r4, #21
 800c920:	42ba      	cmp	r2, r7
 800c922:	bf38      	it	cc
 800c924:	2304      	movcc	r3, #4
 800c926:	9301      	str	r3, [sp, #4]
 800c928:	9b02      	ldr	r3, [sp, #8]
 800c92a:	9103      	str	r1, [sp, #12]
 800c92c:	428b      	cmp	r3, r1
 800c92e:	d80c      	bhi.n	800c94a <__multiply+0x9e>
 800c930:	2e00      	cmp	r6, #0
 800c932:	dd03      	ble.n	800c93c <__multiply+0x90>
 800c934:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d05b      	beq.n	800c9f4 <__multiply+0x148>
 800c93c:	6106      	str	r6, [r0, #16]
 800c93e:	b005      	add	sp, #20
 800c940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c944:	f843 2b04 	str.w	r2, [r3], #4
 800c948:	e7d8      	b.n	800c8fc <__multiply+0x50>
 800c94a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c94e:	f1ba 0f00 	cmp.w	sl, #0
 800c952:	d024      	beq.n	800c99e <__multiply+0xf2>
 800c954:	f104 0e14 	add.w	lr, r4, #20
 800c958:	46a9      	mov	r9, r5
 800c95a:	f04f 0c00 	mov.w	ip, #0
 800c95e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c962:	f8d9 3000 	ldr.w	r3, [r9]
 800c966:	fa1f fb87 	uxth.w	fp, r7
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c970:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c974:	f8d9 7000 	ldr.w	r7, [r9]
 800c978:	4463      	add	r3, ip
 800c97a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c97e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c982:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c986:	b29b      	uxth	r3, r3
 800c988:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c98c:	4572      	cmp	r2, lr
 800c98e:	f849 3b04 	str.w	r3, [r9], #4
 800c992:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c996:	d8e2      	bhi.n	800c95e <__multiply+0xb2>
 800c998:	9b01      	ldr	r3, [sp, #4]
 800c99a:	f845 c003 	str.w	ip, [r5, r3]
 800c99e:	9b03      	ldr	r3, [sp, #12]
 800c9a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c9a4:	3104      	adds	r1, #4
 800c9a6:	f1b9 0f00 	cmp.w	r9, #0
 800c9aa:	d021      	beq.n	800c9f0 <__multiply+0x144>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	f104 0c14 	add.w	ip, r4, #20
 800c9b2:	46ae      	mov	lr, r5
 800c9b4:	f04f 0a00 	mov.w	sl, #0
 800c9b8:	f8bc b000 	ldrh.w	fp, [ip]
 800c9bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c9c0:	fb09 770b 	mla	r7, r9, fp, r7
 800c9c4:	4457      	add	r7, sl
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c9cc:	f84e 3b04 	str.w	r3, [lr], #4
 800c9d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9d8:	f8be 3000 	ldrh.w	r3, [lr]
 800c9dc:	fb09 330a 	mla	r3, r9, sl, r3
 800c9e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c9e4:	4562      	cmp	r2, ip
 800c9e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9ea:	d8e5      	bhi.n	800c9b8 <__multiply+0x10c>
 800c9ec:	9f01      	ldr	r7, [sp, #4]
 800c9ee:	51eb      	str	r3, [r5, r7]
 800c9f0:	3504      	adds	r5, #4
 800c9f2:	e799      	b.n	800c928 <__multiply+0x7c>
 800c9f4:	3e01      	subs	r6, #1
 800c9f6:	e79b      	b.n	800c930 <__multiply+0x84>
 800c9f8:	0800fb17 	.word	0x0800fb17
 800c9fc:	0800fb80 	.word	0x0800fb80

0800ca00 <__pow5mult>:
 800ca00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca04:	4615      	mov	r5, r2
 800ca06:	f012 0203 	ands.w	r2, r2, #3
 800ca0a:	4607      	mov	r7, r0
 800ca0c:	460e      	mov	r6, r1
 800ca0e:	d007      	beq.n	800ca20 <__pow5mult+0x20>
 800ca10:	4c1a      	ldr	r4, [pc, #104]	@ (800ca7c <__pow5mult+0x7c>)
 800ca12:	3a01      	subs	r2, #1
 800ca14:	2300      	movs	r3, #0
 800ca16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca1a:	f7ff fe55 	bl	800c6c8 <__multadd>
 800ca1e:	4606      	mov	r6, r0
 800ca20:	10ad      	asrs	r5, r5, #2
 800ca22:	d027      	beq.n	800ca74 <__pow5mult+0x74>
 800ca24:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ca26:	b944      	cbnz	r4, 800ca3a <__pow5mult+0x3a>
 800ca28:	f240 2171 	movw	r1, #625	@ 0x271
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f7ff ff27 	bl	800c880 <__i2b>
 800ca32:	2300      	movs	r3, #0
 800ca34:	6438      	str	r0, [r7, #64]	@ 0x40
 800ca36:	4604      	mov	r4, r0
 800ca38:	6003      	str	r3, [r0, #0]
 800ca3a:	f04f 0900 	mov.w	r9, #0
 800ca3e:	07eb      	lsls	r3, r5, #31
 800ca40:	d50a      	bpl.n	800ca58 <__pow5mult+0x58>
 800ca42:	4631      	mov	r1, r6
 800ca44:	4622      	mov	r2, r4
 800ca46:	4638      	mov	r0, r7
 800ca48:	f7ff ff30 	bl	800c8ac <__multiply>
 800ca4c:	4631      	mov	r1, r6
 800ca4e:	4680      	mov	r8, r0
 800ca50:	4638      	mov	r0, r7
 800ca52:	f7ff fe30 	bl	800c6b6 <_Bfree>
 800ca56:	4646      	mov	r6, r8
 800ca58:	106d      	asrs	r5, r5, #1
 800ca5a:	d00b      	beq.n	800ca74 <__pow5mult+0x74>
 800ca5c:	6820      	ldr	r0, [r4, #0]
 800ca5e:	b938      	cbnz	r0, 800ca70 <__pow5mult+0x70>
 800ca60:	4622      	mov	r2, r4
 800ca62:	4621      	mov	r1, r4
 800ca64:	4638      	mov	r0, r7
 800ca66:	f7ff ff21 	bl	800c8ac <__multiply>
 800ca6a:	6020      	str	r0, [r4, #0]
 800ca6c:	f8c0 9000 	str.w	r9, [r0]
 800ca70:	4604      	mov	r4, r0
 800ca72:	e7e4      	b.n	800ca3e <__pow5mult+0x3e>
 800ca74:	4630      	mov	r0, r6
 800ca76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca7a:	bf00      	nop
 800ca7c:	0800fbdc 	.word	0x0800fbdc

0800ca80 <__lshift>:
 800ca80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca84:	460c      	mov	r4, r1
 800ca86:	6849      	ldr	r1, [r1, #4]
 800ca88:	6923      	ldr	r3, [r4, #16]
 800ca8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	4607      	mov	r7, r0
 800ca92:	4691      	mov	r9, r2
 800ca94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca98:	f108 0601 	add.w	r6, r8, #1
 800ca9c:	42b3      	cmp	r3, r6
 800ca9e:	db0b      	blt.n	800cab8 <__lshift+0x38>
 800caa0:	4638      	mov	r0, r7
 800caa2:	f7ff fde3 	bl	800c66c <_Balloc>
 800caa6:	4605      	mov	r5, r0
 800caa8:	b948      	cbnz	r0, 800cabe <__lshift+0x3e>
 800caaa:	4602      	mov	r2, r0
 800caac:	4b28      	ldr	r3, [pc, #160]	@ (800cb50 <__lshift+0xd0>)
 800caae:	4829      	ldr	r0, [pc, #164]	@ (800cb54 <__lshift+0xd4>)
 800cab0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cab4:	f001 fb80 	bl	800e1b8 <__assert_func>
 800cab8:	3101      	adds	r1, #1
 800caba:	005b      	lsls	r3, r3, #1
 800cabc:	e7ee      	b.n	800ca9c <__lshift+0x1c>
 800cabe:	2300      	movs	r3, #0
 800cac0:	f100 0114 	add.w	r1, r0, #20
 800cac4:	f100 0210 	add.w	r2, r0, #16
 800cac8:	4618      	mov	r0, r3
 800caca:	4553      	cmp	r3, sl
 800cacc:	db33      	blt.n	800cb36 <__lshift+0xb6>
 800cace:	6920      	ldr	r0, [r4, #16]
 800cad0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cad4:	f104 0314 	add.w	r3, r4, #20
 800cad8:	f019 091f 	ands.w	r9, r9, #31
 800cadc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cae0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cae4:	d02b      	beq.n	800cb3e <__lshift+0xbe>
 800cae6:	f1c9 0e20 	rsb	lr, r9, #32
 800caea:	468a      	mov	sl, r1
 800caec:	2200      	movs	r2, #0
 800caee:	6818      	ldr	r0, [r3, #0]
 800caf0:	fa00 f009 	lsl.w	r0, r0, r9
 800caf4:	4310      	orrs	r0, r2
 800caf6:	f84a 0b04 	str.w	r0, [sl], #4
 800cafa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cafe:	459c      	cmp	ip, r3
 800cb00:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb04:	d8f3      	bhi.n	800caee <__lshift+0x6e>
 800cb06:	ebac 0304 	sub.w	r3, ip, r4
 800cb0a:	3b15      	subs	r3, #21
 800cb0c:	f023 0303 	bic.w	r3, r3, #3
 800cb10:	3304      	adds	r3, #4
 800cb12:	f104 0015 	add.w	r0, r4, #21
 800cb16:	4584      	cmp	ip, r0
 800cb18:	bf38      	it	cc
 800cb1a:	2304      	movcc	r3, #4
 800cb1c:	50ca      	str	r2, [r1, r3]
 800cb1e:	b10a      	cbz	r2, 800cb24 <__lshift+0xa4>
 800cb20:	f108 0602 	add.w	r6, r8, #2
 800cb24:	3e01      	subs	r6, #1
 800cb26:	4638      	mov	r0, r7
 800cb28:	612e      	str	r6, [r5, #16]
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	f7ff fdc3 	bl	800c6b6 <_Bfree>
 800cb30:	4628      	mov	r0, r5
 800cb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb36:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	e7c5      	b.n	800caca <__lshift+0x4a>
 800cb3e:	3904      	subs	r1, #4
 800cb40:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb44:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb48:	459c      	cmp	ip, r3
 800cb4a:	d8f9      	bhi.n	800cb40 <__lshift+0xc0>
 800cb4c:	e7ea      	b.n	800cb24 <__lshift+0xa4>
 800cb4e:	bf00      	nop
 800cb50:	0800fb17 	.word	0x0800fb17
 800cb54:	0800fb80 	.word	0x0800fb80

0800cb58 <__mcmp>:
 800cb58:	690a      	ldr	r2, [r1, #16]
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	6900      	ldr	r0, [r0, #16]
 800cb5e:	1a80      	subs	r0, r0, r2
 800cb60:	b530      	push	{r4, r5, lr}
 800cb62:	d10e      	bne.n	800cb82 <__mcmp+0x2a>
 800cb64:	3314      	adds	r3, #20
 800cb66:	3114      	adds	r1, #20
 800cb68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb78:	4295      	cmp	r5, r2
 800cb7a:	d003      	beq.n	800cb84 <__mcmp+0x2c>
 800cb7c:	d205      	bcs.n	800cb8a <__mcmp+0x32>
 800cb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb82:	bd30      	pop	{r4, r5, pc}
 800cb84:	42a3      	cmp	r3, r4
 800cb86:	d3f3      	bcc.n	800cb70 <__mcmp+0x18>
 800cb88:	e7fb      	b.n	800cb82 <__mcmp+0x2a>
 800cb8a:	2001      	movs	r0, #1
 800cb8c:	e7f9      	b.n	800cb82 <__mcmp+0x2a>
	...

0800cb90 <__mdiff>:
 800cb90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	4689      	mov	r9, r1
 800cb96:	4606      	mov	r6, r0
 800cb98:	4611      	mov	r1, r2
 800cb9a:	4648      	mov	r0, r9
 800cb9c:	4614      	mov	r4, r2
 800cb9e:	f7ff ffdb 	bl	800cb58 <__mcmp>
 800cba2:	1e05      	subs	r5, r0, #0
 800cba4:	d112      	bne.n	800cbcc <__mdiff+0x3c>
 800cba6:	4629      	mov	r1, r5
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f7ff fd5f 	bl	800c66c <_Balloc>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	b928      	cbnz	r0, 800cbbe <__mdiff+0x2e>
 800cbb2:	4b3f      	ldr	r3, [pc, #252]	@ (800ccb0 <__mdiff+0x120>)
 800cbb4:	f240 2137 	movw	r1, #567	@ 0x237
 800cbb8:	483e      	ldr	r0, [pc, #248]	@ (800ccb4 <__mdiff+0x124>)
 800cbba:	f001 fafd 	bl	800e1b8 <__assert_func>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	b003      	add	sp, #12
 800cbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbcc:	bfbc      	itt	lt
 800cbce:	464b      	movlt	r3, r9
 800cbd0:	46a1      	movlt	r9, r4
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cbd8:	bfba      	itte	lt
 800cbda:	461c      	movlt	r4, r3
 800cbdc:	2501      	movlt	r5, #1
 800cbde:	2500      	movge	r5, #0
 800cbe0:	f7ff fd44 	bl	800c66c <_Balloc>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	b918      	cbnz	r0, 800cbf0 <__mdiff+0x60>
 800cbe8:	4b31      	ldr	r3, [pc, #196]	@ (800ccb0 <__mdiff+0x120>)
 800cbea:	f240 2145 	movw	r1, #581	@ 0x245
 800cbee:	e7e3      	b.n	800cbb8 <__mdiff+0x28>
 800cbf0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cbf4:	6926      	ldr	r6, [r4, #16]
 800cbf6:	60c5      	str	r5, [r0, #12]
 800cbf8:	f109 0310 	add.w	r3, r9, #16
 800cbfc:	f109 0514 	add.w	r5, r9, #20
 800cc00:	f104 0e14 	add.w	lr, r4, #20
 800cc04:	f100 0b14 	add.w	fp, r0, #20
 800cc08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cc0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cc10:	9301      	str	r3, [sp, #4]
 800cc12:	46d9      	mov	r9, fp
 800cc14:	f04f 0c00 	mov.w	ip, #0
 800cc18:	9b01      	ldr	r3, [sp, #4]
 800cc1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cc1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc22:	9301      	str	r3, [sp, #4]
 800cc24:	fa1f f38a 	uxth.w	r3, sl
 800cc28:	4619      	mov	r1, r3
 800cc2a:	b283      	uxth	r3, r0
 800cc2c:	1acb      	subs	r3, r1, r3
 800cc2e:	0c00      	lsrs	r0, r0, #16
 800cc30:	4463      	add	r3, ip
 800cc32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc40:	4576      	cmp	r6, lr
 800cc42:	f849 3b04 	str.w	r3, [r9], #4
 800cc46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc4a:	d8e5      	bhi.n	800cc18 <__mdiff+0x88>
 800cc4c:	1b33      	subs	r3, r6, r4
 800cc4e:	3b15      	subs	r3, #21
 800cc50:	f023 0303 	bic.w	r3, r3, #3
 800cc54:	3415      	adds	r4, #21
 800cc56:	3304      	adds	r3, #4
 800cc58:	42a6      	cmp	r6, r4
 800cc5a:	bf38      	it	cc
 800cc5c:	2304      	movcc	r3, #4
 800cc5e:	441d      	add	r5, r3
 800cc60:	445b      	add	r3, fp
 800cc62:	461e      	mov	r6, r3
 800cc64:	462c      	mov	r4, r5
 800cc66:	4544      	cmp	r4, r8
 800cc68:	d30e      	bcc.n	800cc88 <__mdiff+0xf8>
 800cc6a:	f108 0103 	add.w	r1, r8, #3
 800cc6e:	1b49      	subs	r1, r1, r5
 800cc70:	f021 0103 	bic.w	r1, r1, #3
 800cc74:	3d03      	subs	r5, #3
 800cc76:	45a8      	cmp	r8, r5
 800cc78:	bf38      	it	cc
 800cc7a:	2100      	movcc	r1, #0
 800cc7c:	440b      	add	r3, r1
 800cc7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc82:	b191      	cbz	r1, 800ccaa <__mdiff+0x11a>
 800cc84:	6117      	str	r7, [r2, #16]
 800cc86:	e79d      	b.n	800cbc4 <__mdiff+0x34>
 800cc88:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc8c:	46e6      	mov	lr, ip
 800cc8e:	0c08      	lsrs	r0, r1, #16
 800cc90:	fa1c fc81 	uxtah	ip, ip, r1
 800cc94:	4471      	add	r1, lr
 800cc96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc9a:	b289      	uxth	r1, r1
 800cc9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cca0:	f846 1b04 	str.w	r1, [r6], #4
 800cca4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cca8:	e7dd      	b.n	800cc66 <__mdiff+0xd6>
 800ccaa:	3f01      	subs	r7, #1
 800ccac:	e7e7      	b.n	800cc7e <__mdiff+0xee>
 800ccae:	bf00      	nop
 800ccb0:	0800fb17 	.word	0x0800fb17
 800ccb4:	0800fb80 	.word	0x0800fb80

0800ccb8 <__ulp>:
 800ccb8:	b082      	sub	sp, #8
 800ccba:	ed8d 0b00 	vstr	d0, [sp]
 800ccbe:	9a01      	ldr	r2, [sp, #4]
 800ccc0:	4b0f      	ldr	r3, [pc, #60]	@ (800cd00 <__ulp+0x48>)
 800ccc2:	4013      	ands	r3, r2
 800ccc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	dc08      	bgt.n	800ccde <__ulp+0x26>
 800cccc:	425b      	negs	r3, r3
 800ccce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ccd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ccd6:	da04      	bge.n	800cce2 <__ulp+0x2a>
 800ccd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ccdc:	4113      	asrs	r3, r2
 800ccde:	2200      	movs	r2, #0
 800cce0:	e008      	b.n	800ccf4 <__ulp+0x3c>
 800cce2:	f1a2 0314 	sub.w	r3, r2, #20
 800cce6:	2b1e      	cmp	r3, #30
 800cce8:	bfda      	itte	le
 800ccea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ccee:	40da      	lsrle	r2, r3
 800ccf0:	2201      	movgt	r2, #1
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	ec41 0b10 	vmov	d0, r0, r1
 800ccfc:	b002      	add	sp, #8
 800ccfe:	4770      	bx	lr
 800cd00:	7ff00000 	.word	0x7ff00000

0800cd04 <__b2d>:
 800cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd08:	6906      	ldr	r6, [r0, #16]
 800cd0a:	f100 0814 	add.w	r8, r0, #20
 800cd0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cd12:	1f37      	subs	r7, r6, #4
 800cd14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cd18:	4610      	mov	r0, r2
 800cd1a:	f7ff fd65 	bl	800c7e8 <__hi0bits>
 800cd1e:	f1c0 0320 	rsb	r3, r0, #32
 800cd22:	280a      	cmp	r0, #10
 800cd24:	600b      	str	r3, [r1, #0]
 800cd26:	491b      	ldr	r1, [pc, #108]	@ (800cd94 <__b2d+0x90>)
 800cd28:	dc15      	bgt.n	800cd56 <__b2d+0x52>
 800cd2a:	f1c0 0c0b 	rsb	ip, r0, #11
 800cd2e:	fa22 f30c 	lsr.w	r3, r2, ip
 800cd32:	45b8      	cmp	r8, r7
 800cd34:	ea43 0501 	orr.w	r5, r3, r1
 800cd38:	bf34      	ite	cc
 800cd3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cd3e:	2300      	movcs	r3, #0
 800cd40:	3015      	adds	r0, #21
 800cd42:	fa02 f000 	lsl.w	r0, r2, r0
 800cd46:	fa23 f30c 	lsr.w	r3, r3, ip
 800cd4a:	4303      	orrs	r3, r0
 800cd4c:	461c      	mov	r4, r3
 800cd4e:	ec45 4b10 	vmov	d0, r4, r5
 800cd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd56:	45b8      	cmp	r8, r7
 800cd58:	bf3a      	itte	cc
 800cd5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cd5e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cd62:	2300      	movcs	r3, #0
 800cd64:	380b      	subs	r0, #11
 800cd66:	d012      	beq.n	800cd8e <__b2d+0x8a>
 800cd68:	f1c0 0120 	rsb	r1, r0, #32
 800cd6c:	fa23 f401 	lsr.w	r4, r3, r1
 800cd70:	4082      	lsls	r2, r0
 800cd72:	4322      	orrs	r2, r4
 800cd74:	4547      	cmp	r7, r8
 800cd76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cd7a:	bf8c      	ite	hi
 800cd7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cd80:	2200      	movls	r2, #0
 800cd82:	4083      	lsls	r3, r0
 800cd84:	40ca      	lsrs	r2, r1
 800cd86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	e7de      	b.n	800cd4c <__b2d+0x48>
 800cd8e:	ea42 0501 	orr.w	r5, r2, r1
 800cd92:	e7db      	b.n	800cd4c <__b2d+0x48>
 800cd94:	3ff00000 	.word	0x3ff00000

0800cd98 <__d2b>:
 800cd98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	460f      	mov	r7, r1
 800cd9e:	2101      	movs	r1, #1
 800cda0:	ec59 8b10 	vmov	r8, r9, d0
 800cda4:	4616      	mov	r6, r2
 800cda6:	f7ff fc61 	bl	800c66c <_Balloc>
 800cdaa:	4604      	mov	r4, r0
 800cdac:	b930      	cbnz	r0, 800cdbc <__d2b+0x24>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	4b23      	ldr	r3, [pc, #140]	@ (800ce40 <__d2b+0xa8>)
 800cdb2:	4824      	ldr	r0, [pc, #144]	@ (800ce44 <__d2b+0xac>)
 800cdb4:	f240 310f 	movw	r1, #783	@ 0x30f
 800cdb8:	f001 f9fe 	bl	800e1b8 <__assert_func>
 800cdbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cdc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdc4:	b10d      	cbz	r5, 800cdca <__d2b+0x32>
 800cdc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdca:	9301      	str	r3, [sp, #4]
 800cdcc:	f1b8 0300 	subs.w	r3, r8, #0
 800cdd0:	d023      	beq.n	800ce1a <__d2b+0x82>
 800cdd2:	4668      	mov	r0, sp
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	f7ff fd26 	bl	800c826 <__lo0bits>
 800cdda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdde:	b1d0      	cbz	r0, 800ce16 <__d2b+0x7e>
 800cde0:	f1c0 0320 	rsb	r3, r0, #32
 800cde4:	fa02 f303 	lsl.w	r3, r2, r3
 800cde8:	430b      	orrs	r3, r1
 800cdea:	40c2      	lsrs	r2, r0
 800cdec:	6163      	str	r3, [r4, #20]
 800cdee:	9201      	str	r2, [sp, #4]
 800cdf0:	9b01      	ldr	r3, [sp, #4]
 800cdf2:	61a3      	str	r3, [r4, #24]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bf0c      	ite	eq
 800cdf8:	2201      	moveq	r2, #1
 800cdfa:	2202      	movne	r2, #2
 800cdfc:	6122      	str	r2, [r4, #16]
 800cdfe:	b1a5      	cbz	r5, 800ce2a <__d2b+0x92>
 800ce00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ce04:	4405      	add	r5, r0
 800ce06:	603d      	str	r5, [r7, #0]
 800ce08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ce0c:	6030      	str	r0, [r6, #0]
 800ce0e:	4620      	mov	r0, r4
 800ce10:	b003      	add	sp, #12
 800ce12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce16:	6161      	str	r1, [r4, #20]
 800ce18:	e7ea      	b.n	800cdf0 <__d2b+0x58>
 800ce1a:	a801      	add	r0, sp, #4
 800ce1c:	f7ff fd03 	bl	800c826 <__lo0bits>
 800ce20:	9b01      	ldr	r3, [sp, #4]
 800ce22:	6163      	str	r3, [r4, #20]
 800ce24:	3020      	adds	r0, #32
 800ce26:	2201      	movs	r2, #1
 800ce28:	e7e8      	b.n	800cdfc <__d2b+0x64>
 800ce2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce32:	6038      	str	r0, [r7, #0]
 800ce34:	6918      	ldr	r0, [r3, #16]
 800ce36:	f7ff fcd7 	bl	800c7e8 <__hi0bits>
 800ce3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce3e:	e7e5      	b.n	800ce0c <__d2b+0x74>
 800ce40:	0800fb17 	.word	0x0800fb17
 800ce44:	0800fb80 	.word	0x0800fb80

0800ce48 <__ratio>:
 800ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	e9cd 1000 	strd	r1, r0, [sp]
 800ce52:	a902      	add	r1, sp, #8
 800ce54:	f7ff ff56 	bl	800cd04 <__b2d>
 800ce58:	9800      	ldr	r0, [sp, #0]
 800ce5a:	a903      	add	r1, sp, #12
 800ce5c:	ec55 4b10 	vmov	r4, r5, d0
 800ce60:	f7ff ff50 	bl	800cd04 <__b2d>
 800ce64:	9b01      	ldr	r3, [sp, #4]
 800ce66:	6919      	ldr	r1, [r3, #16]
 800ce68:	9b00      	ldr	r3, [sp, #0]
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	1ac9      	subs	r1, r1, r3
 800ce6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ce72:	1a9b      	subs	r3, r3, r2
 800ce74:	ec5b ab10 	vmov	sl, fp, d0
 800ce78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	bfce      	itee	gt
 800ce80:	462a      	movgt	r2, r5
 800ce82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce86:	465a      	movle	r2, fp
 800ce88:	462f      	mov	r7, r5
 800ce8a:	46d9      	mov	r9, fp
 800ce8c:	bfcc      	ite	gt
 800ce8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ce96:	464b      	mov	r3, r9
 800ce98:	4652      	mov	r2, sl
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	4639      	mov	r1, r7
 800ce9e:	f7f3 fd05 	bl	80008ac <__aeabi_ddiv>
 800cea2:	ec41 0b10 	vmov	d0, r0, r1
 800cea6:	b005      	add	sp, #20
 800cea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ceac <__copybits>:
 800ceac:	3901      	subs	r1, #1
 800ceae:	b570      	push	{r4, r5, r6, lr}
 800ceb0:	1149      	asrs	r1, r1, #5
 800ceb2:	6914      	ldr	r4, [r2, #16]
 800ceb4:	3101      	adds	r1, #1
 800ceb6:	f102 0314 	add.w	r3, r2, #20
 800ceba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cebe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cec2:	1f05      	subs	r5, r0, #4
 800cec4:	42a3      	cmp	r3, r4
 800cec6:	d30c      	bcc.n	800cee2 <__copybits+0x36>
 800cec8:	1aa3      	subs	r3, r4, r2
 800ceca:	3b11      	subs	r3, #17
 800cecc:	f023 0303 	bic.w	r3, r3, #3
 800ced0:	3211      	adds	r2, #17
 800ced2:	42a2      	cmp	r2, r4
 800ced4:	bf88      	it	hi
 800ced6:	2300      	movhi	r3, #0
 800ced8:	4418      	add	r0, r3
 800ceda:	2300      	movs	r3, #0
 800cedc:	4288      	cmp	r0, r1
 800cede:	d305      	bcc.n	800ceec <__copybits+0x40>
 800cee0:	bd70      	pop	{r4, r5, r6, pc}
 800cee2:	f853 6b04 	ldr.w	r6, [r3], #4
 800cee6:	f845 6f04 	str.w	r6, [r5, #4]!
 800ceea:	e7eb      	b.n	800cec4 <__copybits+0x18>
 800ceec:	f840 3b04 	str.w	r3, [r0], #4
 800cef0:	e7f4      	b.n	800cedc <__copybits+0x30>

0800cef2 <__any_on>:
 800cef2:	f100 0214 	add.w	r2, r0, #20
 800cef6:	6900      	ldr	r0, [r0, #16]
 800cef8:	114b      	asrs	r3, r1, #5
 800cefa:	4298      	cmp	r0, r3
 800cefc:	b510      	push	{r4, lr}
 800cefe:	db11      	blt.n	800cf24 <__any_on+0x32>
 800cf00:	dd0a      	ble.n	800cf18 <__any_on+0x26>
 800cf02:	f011 011f 	ands.w	r1, r1, #31
 800cf06:	d007      	beq.n	800cf18 <__any_on+0x26>
 800cf08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf0c:	fa24 f001 	lsr.w	r0, r4, r1
 800cf10:	fa00 f101 	lsl.w	r1, r0, r1
 800cf14:	428c      	cmp	r4, r1
 800cf16:	d10b      	bne.n	800cf30 <__any_on+0x3e>
 800cf18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d803      	bhi.n	800cf28 <__any_on+0x36>
 800cf20:	2000      	movs	r0, #0
 800cf22:	bd10      	pop	{r4, pc}
 800cf24:	4603      	mov	r3, r0
 800cf26:	e7f7      	b.n	800cf18 <__any_on+0x26>
 800cf28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf2c:	2900      	cmp	r1, #0
 800cf2e:	d0f5      	beq.n	800cf1c <__any_on+0x2a>
 800cf30:	2001      	movs	r0, #1
 800cf32:	e7f6      	b.n	800cf22 <__any_on+0x30>

0800cf34 <realloc>:
 800cf34:	4b02      	ldr	r3, [pc, #8]	@ (800cf40 <realloc+0xc>)
 800cf36:	460a      	mov	r2, r1
 800cf38:	4601      	mov	r1, r0
 800cf3a:	6818      	ldr	r0, [r3, #0]
 800cf3c:	f7fb be36 	b.w	8008bac <_realloc_r>
 800cf40:	20000050 	.word	0x20000050

0800cf44 <sulp>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	4604      	mov	r4, r0
 800cf48:	460d      	mov	r5, r1
 800cf4a:	ec45 4b10 	vmov	d0, r4, r5
 800cf4e:	4616      	mov	r6, r2
 800cf50:	f7ff feb2 	bl	800ccb8 <__ulp>
 800cf54:	ec51 0b10 	vmov	r0, r1, d0
 800cf58:	b17e      	cbz	r6, 800cf7a <sulp+0x36>
 800cf5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	dd09      	ble.n	800cf7a <sulp+0x36>
 800cf66:	051b      	lsls	r3, r3, #20
 800cf68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cf6c:	2400      	movs	r4, #0
 800cf6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cf72:	4622      	mov	r2, r4
 800cf74:	462b      	mov	r3, r5
 800cf76:	f7f3 fb6f 	bl	8000658 <__aeabi_dmul>
 800cf7a:	ec41 0b10 	vmov	d0, r0, r1
 800cf7e:	bd70      	pop	{r4, r5, r6, pc}

0800cf80 <_strtod_l>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	b09f      	sub	sp, #124	@ 0x7c
 800cf86:	460c      	mov	r4, r1
 800cf88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800cf8e:	9005      	str	r0, [sp, #20]
 800cf90:	f04f 0a00 	mov.w	sl, #0
 800cf94:	f04f 0b00 	mov.w	fp, #0
 800cf98:	460a      	mov	r2, r1
 800cf9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf9c:	7811      	ldrb	r1, [r2, #0]
 800cf9e:	292b      	cmp	r1, #43	@ 0x2b
 800cfa0:	d04a      	beq.n	800d038 <_strtod_l+0xb8>
 800cfa2:	d838      	bhi.n	800d016 <_strtod_l+0x96>
 800cfa4:	290d      	cmp	r1, #13
 800cfa6:	d832      	bhi.n	800d00e <_strtod_l+0x8e>
 800cfa8:	2908      	cmp	r1, #8
 800cfaa:	d832      	bhi.n	800d012 <_strtod_l+0x92>
 800cfac:	2900      	cmp	r1, #0
 800cfae:	d03b      	beq.n	800d028 <_strtod_l+0xa8>
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cfb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cfb6:	782a      	ldrb	r2, [r5, #0]
 800cfb8:	2a30      	cmp	r2, #48	@ 0x30
 800cfba:	f040 80b3 	bne.w	800d124 <_strtod_l+0x1a4>
 800cfbe:	786a      	ldrb	r2, [r5, #1]
 800cfc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cfc4:	2a58      	cmp	r2, #88	@ 0x58
 800cfc6:	d16e      	bne.n	800d0a6 <_strtod_l+0x126>
 800cfc8:	9302      	str	r3, [sp, #8]
 800cfca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfcc:	9301      	str	r3, [sp, #4]
 800cfce:	ab1a      	add	r3, sp, #104	@ 0x68
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	4a8e      	ldr	r2, [pc, #568]	@ (800d20c <_strtod_l+0x28c>)
 800cfd4:	9805      	ldr	r0, [sp, #20]
 800cfd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cfd8:	a919      	add	r1, sp, #100	@ 0x64
 800cfda:	f001 f9a7 	bl	800e32c <__gethex>
 800cfde:	f010 060f 	ands.w	r6, r0, #15
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	d005      	beq.n	800cff2 <_strtod_l+0x72>
 800cfe6:	2e06      	cmp	r6, #6
 800cfe8:	d128      	bne.n	800d03c <_strtod_l+0xbc>
 800cfea:	3501      	adds	r5, #1
 800cfec:	2300      	movs	r3, #0
 800cfee:	9519      	str	r5, [sp, #100]	@ 0x64
 800cff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cff2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f040 858e 	bne.w	800db16 <_strtod_l+0xb96>
 800cffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cffc:	b1cb      	cbz	r3, 800d032 <_strtod_l+0xb2>
 800cffe:	4652      	mov	r2, sl
 800d000:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d004:	ec43 2b10 	vmov	d0, r2, r3
 800d008:	b01f      	add	sp, #124	@ 0x7c
 800d00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00e:	2920      	cmp	r1, #32
 800d010:	d1ce      	bne.n	800cfb0 <_strtod_l+0x30>
 800d012:	3201      	adds	r2, #1
 800d014:	e7c1      	b.n	800cf9a <_strtod_l+0x1a>
 800d016:	292d      	cmp	r1, #45	@ 0x2d
 800d018:	d1ca      	bne.n	800cfb0 <_strtod_l+0x30>
 800d01a:	2101      	movs	r1, #1
 800d01c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d01e:	1c51      	adds	r1, r2, #1
 800d020:	9119      	str	r1, [sp, #100]	@ 0x64
 800d022:	7852      	ldrb	r2, [r2, #1]
 800d024:	2a00      	cmp	r2, #0
 800d026:	d1c5      	bne.n	800cfb4 <_strtod_l+0x34>
 800d028:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d02a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f040 8570 	bne.w	800db12 <_strtod_l+0xb92>
 800d032:	4652      	mov	r2, sl
 800d034:	465b      	mov	r3, fp
 800d036:	e7e5      	b.n	800d004 <_strtod_l+0x84>
 800d038:	2100      	movs	r1, #0
 800d03a:	e7ef      	b.n	800d01c <_strtod_l+0x9c>
 800d03c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d03e:	b13a      	cbz	r2, 800d050 <_strtod_l+0xd0>
 800d040:	2135      	movs	r1, #53	@ 0x35
 800d042:	a81c      	add	r0, sp, #112	@ 0x70
 800d044:	f7ff ff32 	bl	800ceac <__copybits>
 800d048:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d04a:	9805      	ldr	r0, [sp, #20]
 800d04c:	f7ff fb33 	bl	800c6b6 <_Bfree>
 800d050:	3e01      	subs	r6, #1
 800d052:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d054:	2e04      	cmp	r6, #4
 800d056:	d806      	bhi.n	800d066 <_strtod_l+0xe6>
 800d058:	e8df f006 	tbb	[pc, r6]
 800d05c:	201d0314 	.word	0x201d0314
 800d060:	14          	.byte	0x14
 800d061:	00          	.byte	0x00
 800d062:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d066:	05e1      	lsls	r1, r4, #23
 800d068:	bf48      	it	mi
 800d06a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d06e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d072:	0d1b      	lsrs	r3, r3, #20
 800d074:	051b      	lsls	r3, r3, #20
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1bb      	bne.n	800cff2 <_strtod_l+0x72>
 800d07a:	f7fb f9ef 	bl	800845c <__errno>
 800d07e:	2322      	movs	r3, #34	@ 0x22
 800d080:	6003      	str	r3, [r0, #0]
 800d082:	e7b6      	b.n	800cff2 <_strtod_l+0x72>
 800d084:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d088:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d08c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d090:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d094:	e7e7      	b.n	800d066 <_strtod_l+0xe6>
 800d096:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d214 <_strtod_l+0x294>
 800d09a:	e7e4      	b.n	800d066 <_strtod_l+0xe6>
 800d09c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d0a0:	f04f 3aff 	mov.w	sl, #4294967295
 800d0a4:	e7df      	b.n	800d066 <_strtod_l+0xe6>
 800d0a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0a8:	1c5a      	adds	r2, r3, #1
 800d0aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0ac:	785b      	ldrb	r3, [r3, #1]
 800d0ae:	2b30      	cmp	r3, #48	@ 0x30
 800d0b0:	d0f9      	beq.n	800d0a6 <_strtod_l+0x126>
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d09d      	beq.n	800cff2 <_strtod_l+0x72>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0be:	2300      	movs	r3, #0
 800d0c0:	9308      	str	r3, [sp, #32]
 800d0c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0c4:	461f      	mov	r7, r3
 800d0c6:	220a      	movs	r2, #10
 800d0c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d0ca:	7805      	ldrb	r5, [r0, #0]
 800d0cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d0d0:	b2d9      	uxtb	r1, r3
 800d0d2:	2909      	cmp	r1, #9
 800d0d4:	d928      	bls.n	800d128 <_strtod_l+0x1a8>
 800d0d6:	494e      	ldr	r1, [pc, #312]	@ (800d210 <_strtod_l+0x290>)
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f001 f850 	bl	800e17e <strncmp>
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	d032      	beq.n	800d148 <_strtod_l+0x1c8>
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	462a      	mov	r2, r5
 800d0e6:	4681      	mov	r9, r0
 800d0e8:	463d      	mov	r5, r7
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2a65      	cmp	r2, #101	@ 0x65
 800d0ee:	d001      	beq.n	800d0f4 <_strtod_l+0x174>
 800d0f0:	2a45      	cmp	r2, #69	@ 0x45
 800d0f2:	d114      	bne.n	800d11e <_strtod_l+0x19e>
 800d0f4:	b91d      	cbnz	r5, 800d0fe <_strtod_l+0x17e>
 800d0f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0f8:	4302      	orrs	r2, r0
 800d0fa:	d095      	beq.n	800d028 <_strtod_l+0xa8>
 800d0fc:	2500      	movs	r5, #0
 800d0fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d100:	1c62      	adds	r2, r4, #1
 800d102:	9219      	str	r2, [sp, #100]	@ 0x64
 800d104:	7862      	ldrb	r2, [r4, #1]
 800d106:	2a2b      	cmp	r2, #43	@ 0x2b
 800d108:	d077      	beq.n	800d1fa <_strtod_l+0x27a>
 800d10a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d10c:	d07b      	beq.n	800d206 <_strtod_l+0x286>
 800d10e:	f04f 0c00 	mov.w	ip, #0
 800d112:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d116:	2909      	cmp	r1, #9
 800d118:	f240 8082 	bls.w	800d220 <_strtod_l+0x2a0>
 800d11c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d11e:	f04f 0800 	mov.w	r8, #0
 800d122:	e0a2      	b.n	800d26a <_strtod_l+0x2ea>
 800d124:	2300      	movs	r3, #0
 800d126:	e7c7      	b.n	800d0b8 <_strtod_l+0x138>
 800d128:	2f08      	cmp	r7, #8
 800d12a:	bfd5      	itete	le
 800d12c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d12e:	9908      	ldrgt	r1, [sp, #32]
 800d130:	fb02 3301 	mlale	r3, r2, r1, r3
 800d134:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d138:	f100 0001 	add.w	r0, r0, #1
 800d13c:	bfd4      	ite	le
 800d13e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d140:	9308      	strgt	r3, [sp, #32]
 800d142:	3701      	adds	r7, #1
 800d144:	9019      	str	r0, [sp, #100]	@ 0x64
 800d146:	e7bf      	b.n	800d0c8 <_strtod_l+0x148>
 800d148:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d14a:	1c5a      	adds	r2, r3, #1
 800d14c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d14e:	785a      	ldrb	r2, [r3, #1]
 800d150:	b37f      	cbz	r7, 800d1b2 <_strtod_l+0x232>
 800d152:	4681      	mov	r9, r0
 800d154:	463d      	mov	r5, r7
 800d156:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d15a:	2b09      	cmp	r3, #9
 800d15c:	d912      	bls.n	800d184 <_strtod_l+0x204>
 800d15e:	2301      	movs	r3, #1
 800d160:	e7c4      	b.n	800d0ec <_strtod_l+0x16c>
 800d162:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	9219      	str	r2, [sp, #100]	@ 0x64
 800d168:	785a      	ldrb	r2, [r3, #1]
 800d16a:	3001      	adds	r0, #1
 800d16c:	2a30      	cmp	r2, #48	@ 0x30
 800d16e:	d0f8      	beq.n	800d162 <_strtod_l+0x1e2>
 800d170:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d174:	2b08      	cmp	r3, #8
 800d176:	f200 84d3 	bhi.w	800db20 <_strtod_l+0xba0>
 800d17a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d17c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d17e:	4681      	mov	r9, r0
 800d180:	2000      	movs	r0, #0
 800d182:	4605      	mov	r5, r0
 800d184:	3a30      	subs	r2, #48	@ 0x30
 800d186:	f100 0301 	add.w	r3, r0, #1
 800d18a:	d02a      	beq.n	800d1e2 <_strtod_l+0x262>
 800d18c:	4499      	add	r9, r3
 800d18e:	eb00 0c05 	add.w	ip, r0, r5
 800d192:	462b      	mov	r3, r5
 800d194:	210a      	movs	r1, #10
 800d196:	4563      	cmp	r3, ip
 800d198:	d10d      	bne.n	800d1b6 <_strtod_l+0x236>
 800d19a:	1c69      	adds	r1, r5, #1
 800d19c:	4401      	add	r1, r0
 800d19e:	4428      	add	r0, r5
 800d1a0:	2808      	cmp	r0, #8
 800d1a2:	dc16      	bgt.n	800d1d2 <_strtod_l+0x252>
 800d1a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d1a6:	230a      	movs	r3, #10
 800d1a8:	fb03 2300 	mla	r3, r3, r0, r2
 800d1ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e018      	b.n	800d1e4 <_strtod_l+0x264>
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	e7da      	b.n	800d16c <_strtod_l+0x1ec>
 800d1b6:	2b08      	cmp	r3, #8
 800d1b8:	f103 0301 	add.w	r3, r3, #1
 800d1bc:	dc03      	bgt.n	800d1c6 <_strtod_l+0x246>
 800d1be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d1c0:	434e      	muls	r6, r1
 800d1c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800d1c4:	e7e7      	b.n	800d196 <_strtod_l+0x216>
 800d1c6:	2b10      	cmp	r3, #16
 800d1c8:	bfde      	ittt	le
 800d1ca:	9e08      	ldrle	r6, [sp, #32]
 800d1cc:	434e      	mulle	r6, r1
 800d1ce:	9608      	strle	r6, [sp, #32]
 800d1d0:	e7e1      	b.n	800d196 <_strtod_l+0x216>
 800d1d2:	280f      	cmp	r0, #15
 800d1d4:	dceb      	bgt.n	800d1ae <_strtod_l+0x22e>
 800d1d6:	9808      	ldr	r0, [sp, #32]
 800d1d8:	230a      	movs	r3, #10
 800d1da:	fb03 2300 	mla	r3, r3, r0, r2
 800d1de:	9308      	str	r3, [sp, #32]
 800d1e0:	e7e5      	b.n	800d1ae <_strtod_l+0x22e>
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1e6:	1c50      	adds	r0, r2, #1
 800d1e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d1ea:	7852      	ldrb	r2, [r2, #1]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	e7b1      	b.n	800d156 <_strtod_l+0x1d6>
 800d1f2:	f04f 0900 	mov.w	r9, #0
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e77d      	b.n	800d0f6 <_strtod_l+0x176>
 800d1fa:	f04f 0c00 	mov.w	ip, #0
 800d1fe:	1ca2      	adds	r2, r4, #2
 800d200:	9219      	str	r2, [sp, #100]	@ 0x64
 800d202:	78a2      	ldrb	r2, [r4, #2]
 800d204:	e785      	b.n	800d112 <_strtod_l+0x192>
 800d206:	f04f 0c01 	mov.w	ip, #1
 800d20a:	e7f8      	b.n	800d1fe <_strtod_l+0x27e>
 800d20c:	0800fcec 	.word	0x0800fcec
 800d210:	0800fb08 	.word	0x0800fb08
 800d214:	7ff00000 	.word	0x7ff00000
 800d218:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d21a:	1c51      	adds	r1, r2, #1
 800d21c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d21e:	7852      	ldrb	r2, [r2, #1]
 800d220:	2a30      	cmp	r2, #48	@ 0x30
 800d222:	d0f9      	beq.n	800d218 <_strtod_l+0x298>
 800d224:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d228:	2908      	cmp	r1, #8
 800d22a:	f63f af78 	bhi.w	800d11e <_strtod_l+0x19e>
 800d22e:	3a30      	subs	r2, #48	@ 0x30
 800d230:	920e      	str	r2, [sp, #56]	@ 0x38
 800d232:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d234:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d236:	f04f 080a 	mov.w	r8, #10
 800d23a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d23c:	1c56      	adds	r6, r2, #1
 800d23e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d240:	7852      	ldrb	r2, [r2, #1]
 800d242:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d246:	f1be 0f09 	cmp.w	lr, #9
 800d24a:	d939      	bls.n	800d2c0 <_strtod_l+0x340>
 800d24c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d24e:	1a76      	subs	r6, r6, r1
 800d250:	2e08      	cmp	r6, #8
 800d252:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d256:	dc03      	bgt.n	800d260 <_strtod_l+0x2e0>
 800d258:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d25a:	4588      	cmp	r8, r1
 800d25c:	bfa8      	it	ge
 800d25e:	4688      	movge	r8, r1
 800d260:	f1bc 0f00 	cmp.w	ip, #0
 800d264:	d001      	beq.n	800d26a <_strtod_l+0x2ea>
 800d266:	f1c8 0800 	rsb	r8, r8, #0
 800d26a:	2d00      	cmp	r5, #0
 800d26c:	d14e      	bne.n	800d30c <_strtod_l+0x38c>
 800d26e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d270:	4308      	orrs	r0, r1
 800d272:	f47f aebe 	bne.w	800cff2 <_strtod_l+0x72>
 800d276:	2b00      	cmp	r3, #0
 800d278:	f47f aed6 	bne.w	800d028 <_strtod_l+0xa8>
 800d27c:	2a69      	cmp	r2, #105	@ 0x69
 800d27e:	d028      	beq.n	800d2d2 <_strtod_l+0x352>
 800d280:	dc25      	bgt.n	800d2ce <_strtod_l+0x34e>
 800d282:	2a49      	cmp	r2, #73	@ 0x49
 800d284:	d025      	beq.n	800d2d2 <_strtod_l+0x352>
 800d286:	2a4e      	cmp	r2, #78	@ 0x4e
 800d288:	f47f aece 	bne.w	800d028 <_strtod_l+0xa8>
 800d28c:	499b      	ldr	r1, [pc, #620]	@ (800d4fc <_strtod_l+0x57c>)
 800d28e:	a819      	add	r0, sp, #100	@ 0x64
 800d290:	f001 fa6e 	bl	800e770 <__match>
 800d294:	2800      	cmp	r0, #0
 800d296:	f43f aec7 	beq.w	800d028 <_strtod_l+0xa8>
 800d29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	2b28      	cmp	r3, #40	@ 0x28
 800d2a0:	d12e      	bne.n	800d300 <_strtod_l+0x380>
 800d2a2:	4997      	ldr	r1, [pc, #604]	@ (800d500 <_strtod_l+0x580>)
 800d2a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800d2a6:	a819      	add	r0, sp, #100	@ 0x64
 800d2a8:	f001 fa76 	bl	800e798 <__hexnan>
 800d2ac:	2805      	cmp	r0, #5
 800d2ae:	d127      	bne.n	800d300 <_strtod_l+0x380>
 800d2b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d2b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d2b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d2ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d2be:	e698      	b.n	800cff2 <_strtod_l+0x72>
 800d2c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d2c2:	fb08 2101 	mla	r1, r8, r1, r2
 800d2c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d2ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2cc:	e7b5      	b.n	800d23a <_strtod_l+0x2ba>
 800d2ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800d2d0:	e7da      	b.n	800d288 <_strtod_l+0x308>
 800d2d2:	498c      	ldr	r1, [pc, #560]	@ (800d504 <_strtod_l+0x584>)
 800d2d4:	a819      	add	r0, sp, #100	@ 0x64
 800d2d6:	f001 fa4b 	bl	800e770 <__match>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	f43f aea4 	beq.w	800d028 <_strtod_l+0xa8>
 800d2e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2e2:	4989      	ldr	r1, [pc, #548]	@ (800d508 <_strtod_l+0x588>)
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	a819      	add	r0, sp, #100	@ 0x64
 800d2e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d2ea:	f001 fa41 	bl	800e770 <__match>
 800d2ee:	b910      	cbnz	r0, 800d2f6 <_strtod_l+0x376>
 800d2f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d2f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d518 <_strtod_l+0x598>
 800d2fa:	f04f 0a00 	mov.w	sl, #0
 800d2fe:	e678      	b.n	800cff2 <_strtod_l+0x72>
 800d300:	4882      	ldr	r0, [pc, #520]	@ (800d50c <_strtod_l+0x58c>)
 800d302:	f000 ff51 	bl	800e1a8 <nan>
 800d306:	ec5b ab10 	vmov	sl, fp, d0
 800d30a:	e672      	b.n	800cff2 <_strtod_l+0x72>
 800d30c:	eba8 0309 	sub.w	r3, r8, r9
 800d310:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d312:	9309      	str	r3, [sp, #36]	@ 0x24
 800d314:	2f00      	cmp	r7, #0
 800d316:	bf08      	it	eq
 800d318:	462f      	moveq	r7, r5
 800d31a:	2d10      	cmp	r5, #16
 800d31c:	462c      	mov	r4, r5
 800d31e:	bfa8      	it	ge
 800d320:	2410      	movge	r4, #16
 800d322:	f7f3 f91f 	bl	8000564 <__aeabi_ui2d>
 800d326:	2d09      	cmp	r5, #9
 800d328:	4682      	mov	sl, r0
 800d32a:	468b      	mov	fp, r1
 800d32c:	dc13      	bgt.n	800d356 <_strtod_l+0x3d6>
 800d32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d330:	2b00      	cmp	r3, #0
 800d332:	f43f ae5e 	beq.w	800cff2 <_strtod_l+0x72>
 800d336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d338:	dd78      	ble.n	800d42c <_strtod_l+0x4ac>
 800d33a:	2b16      	cmp	r3, #22
 800d33c:	dc5f      	bgt.n	800d3fe <_strtod_l+0x47e>
 800d33e:	4974      	ldr	r1, [pc, #464]	@ (800d510 <_strtod_l+0x590>)
 800d340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d348:	4652      	mov	r2, sl
 800d34a:	465b      	mov	r3, fp
 800d34c:	f7f3 f984 	bl	8000658 <__aeabi_dmul>
 800d350:	4682      	mov	sl, r0
 800d352:	468b      	mov	fp, r1
 800d354:	e64d      	b.n	800cff2 <_strtod_l+0x72>
 800d356:	4b6e      	ldr	r3, [pc, #440]	@ (800d510 <_strtod_l+0x590>)
 800d358:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d35c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d360:	f7f3 f97a 	bl	8000658 <__aeabi_dmul>
 800d364:	4682      	mov	sl, r0
 800d366:	9808      	ldr	r0, [sp, #32]
 800d368:	468b      	mov	fp, r1
 800d36a:	f7f3 f8fb 	bl	8000564 <__aeabi_ui2d>
 800d36e:	4602      	mov	r2, r0
 800d370:	460b      	mov	r3, r1
 800d372:	4650      	mov	r0, sl
 800d374:	4659      	mov	r1, fp
 800d376:	f7f2 ffb9 	bl	80002ec <__adddf3>
 800d37a:	2d0f      	cmp	r5, #15
 800d37c:	4682      	mov	sl, r0
 800d37e:	468b      	mov	fp, r1
 800d380:	ddd5      	ble.n	800d32e <_strtod_l+0x3ae>
 800d382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d384:	1b2c      	subs	r4, r5, r4
 800d386:	441c      	add	r4, r3
 800d388:	2c00      	cmp	r4, #0
 800d38a:	f340 8096 	ble.w	800d4ba <_strtod_l+0x53a>
 800d38e:	f014 030f 	ands.w	r3, r4, #15
 800d392:	d00a      	beq.n	800d3aa <_strtod_l+0x42a>
 800d394:	495e      	ldr	r1, [pc, #376]	@ (800d510 <_strtod_l+0x590>)
 800d396:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d39a:	4652      	mov	r2, sl
 800d39c:	465b      	mov	r3, fp
 800d39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3a2:	f7f3 f959 	bl	8000658 <__aeabi_dmul>
 800d3a6:	4682      	mov	sl, r0
 800d3a8:	468b      	mov	fp, r1
 800d3aa:	f034 040f 	bics.w	r4, r4, #15
 800d3ae:	d073      	beq.n	800d498 <_strtod_l+0x518>
 800d3b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d3b4:	dd48      	ble.n	800d448 <_strtod_l+0x4c8>
 800d3b6:	2400      	movs	r4, #0
 800d3b8:	46a0      	mov	r8, r4
 800d3ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800d3bc:	46a1      	mov	r9, r4
 800d3be:	9a05      	ldr	r2, [sp, #20]
 800d3c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d518 <_strtod_l+0x598>
 800d3c4:	2322      	movs	r3, #34	@ 0x22
 800d3c6:	6013      	str	r3, [r2, #0]
 800d3c8:	f04f 0a00 	mov.w	sl, #0
 800d3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f43f ae0f 	beq.w	800cff2 <_strtod_l+0x72>
 800d3d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3d6:	9805      	ldr	r0, [sp, #20]
 800d3d8:	f7ff f96d 	bl	800c6b6 <_Bfree>
 800d3dc:	9805      	ldr	r0, [sp, #20]
 800d3de:	4649      	mov	r1, r9
 800d3e0:	f7ff f969 	bl	800c6b6 <_Bfree>
 800d3e4:	9805      	ldr	r0, [sp, #20]
 800d3e6:	4641      	mov	r1, r8
 800d3e8:	f7ff f965 	bl	800c6b6 <_Bfree>
 800d3ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3ee:	9805      	ldr	r0, [sp, #20]
 800d3f0:	f7ff f961 	bl	800c6b6 <_Bfree>
 800d3f4:	9805      	ldr	r0, [sp, #20]
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	f7ff f95d 	bl	800c6b6 <_Bfree>
 800d3fc:	e5f9      	b.n	800cff2 <_strtod_l+0x72>
 800d3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d400:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d404:	4293      	cmp	r3, r2
 800d406:	dbbc      	blt.n	800d382 <_strtod_l+0x402>
 800d408:	4c41      	ldr	r4, [pc, #260]	@ (800d510 <_strtod_l+0x590>)
 800d40a:	f1c5 050f 	rsb	r5, r5, #15
 800d40e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d412:	4652      	mov	r2, sl
 800d414:	465b      	mov	r3, fp
 800d416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d41a:	f7f3 f91d 	bl	8000658 <__aeabi_dmul>
 800d41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d420:	1b5d      	subs	r5, r3, r5
 800d422:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d426:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d42a:	e78f      	b.n	800d34c <_strtod_l+0x3cc>
 800d42c:	3316      	adds	r3, #22
 800d42e:	dba8      	blt.n	800d382 <_strtod_l+0x402>
 800d430:	4b37      	ldr	r3, [pc, #220]	@ (800d510 <_strtod_l+0x590>)
 800d432:	eba9 0808 	sub.w	r8, r9, r8
 800d436:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d43a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d43e:	4650      	mov	r0, sl
 800d440:	4659      	mov	r1, fp
 800d442:	f7f3 fa33 	bl	80008ac <__aeabi_ddiv>
 800d446:	e783      	b.n	800d350 <_strtod_l+0x3d0>
 800d448:	4b32      	ldr	r3, [pc, #200]	@ (800d514 <_strtod_l+0x594>)
 800d44a:	9308      	str	r3, [sp, #32]
 800d44c:	2300      	movs	r3, #0
 800d44e:	1124      	asrs	r4, r4, #4
 800d450:	4650      	mov	r0, sl
 800d452:	4659      	mov	r1, fp
 800d454:	461e      	mov	r6, r3
 800d456:	2c01      	cmp	r4, #1
 800d458:	dc21      	bgt.n	800d49e <_strtod_l+0x51e>
 800d45a:	b10b      	cbz	r3, 800d460 <_strtod_l+0x4e0>
 800d45c:	4682      	mov	sl, r0
 800d45e:	468b      	mov	fp, r1
 800d460:	492c      	ldr	r1, [pc, #176]	@ (800d514 <_strtod_l+0x594>)
 800d462:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d466:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d46a:	4652      	mov	r2, sl
 800d46c:	465b      	mov	r3, fp
 800d46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d472:	f7f3 f8f1 	bl	8000658 <__aeabi_dmul>
 800d476:	4b28      	ldr	r3, [pc, #160]	@ (800d518 <_strtod_l+0x598>)
 800d478:	460a      	mov	r2, r1
 800d47a:	400b      	ands	r3, r1
 800d47c:	4927      	ldr	r1, [pc, #156]	@ (800d51c <_strtod_l+0x59c>)
 800d47e:	428b      	cmp	r3, r1
 800d480:	4682      	mov	sl, r0
 800d482:	d898      	bhi.n	800d3b6 <_strtod_l+0x436>
 800d484:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d488:	428b      	cmp	r3, r1
 800d48a:	bf86      	itte	hi
 800d48c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d520 <_strtod_l+0x5a0>
 800d490:	f04f 3aff 	movhi.w	sl, #4294967295
 800d494:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d498:	2300      	movs	r3, #0
 800d49a:	9308      	str	r3, [sp, #32]
 800d49c:	e07a      	b.n	800d594 <_strtod_l+0x614>
 800d49e:	07e2      	lsls	r2, r4, #31
 800d4a0:	d505      	bpl.n	800d4ae <_strtod_l+0x52e>
 800d4a2:	9b08      	ldr	r3, [sp, #32]
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f7f3 f8d6 	bl	8000658 <__aeabi_dmul>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	9a08      	ldr	r2, [sp, #32]
 800d4b0:	3208      	adds	r2, #8
 800d4b2:	3601      	adds	r6, #1
 800d4b4:	1064      	asrs	r4, r4, #1
 800d4b6:	9208      	str	r2, [sp, #32]
 800d4b8:	e7cd      	b.n	800d456 <_strtod_l+0x4d6>
 800d4ba:	d0ed      	beq.n	800d498 <_strtod_l+0x518>
 800d4bc:	4264      	negs	r4, r4
 800d4be:	f014 020f 	ands.w	r2, r4, #15
 800d4c2:	d00a      	beq.n	800d4da <_strtod_l+0x55a>
 800d4c4:	4b12      	ldr	r3, [pc, #72]	@ (800d510 <_strtod_l+0x590>)
 800d4c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4ca:	4650      	mov	r0, sl
 800d4cc:	4659      	mov	r1, fp
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	f7f3 f9eb 	bl	80008ac <__aeabi_ddiv>
 800d4d6:	4682      	mov	sl, r0
 800d4d8:	468b      	mov	fp, r1
 800d4da:	1124      	asrs	r4, r4, #4
 800d4dc:	d0dc      	beq.n	800d498 <_strtod_l+0x518>
 800d4de:	2c1f      	cmp	r4, #31
 800d4e0:	dd20      	ble.n	800d524 <_strtod_l+0x5a4>
 800d4e2:	2400      	movs	r4, #0
 800d4e4:	46a0      	mov	r8, r4
 800d4e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d4e8:	46a1      	mov	r9, r4
 800d4ea:	9a05      	ldr	r2, [sp, #20]
 800d4ec:	2322      	movs	r3, #34	@ 0x22
 800d4ee:	f04f 0a00 	mov.w	sl, #0
 800d4f2:	f04f 0b00 	mov.w	fp, #0
 800d4f6:	6013      	str	r3, [r2, #0]
 800d4f8:	e768      	b.n	800d3cc <_strtod_l+0x44c>
 800d4fa:	bf00      	nop
 800d4fc:	0800fab3 	.word	0x0800fab3
 800d500:	0800fcd8 	.word	0x0800fcd8
 800d504:	0800faab 	.word	0x0800faab
 800d508:	0800fb0d 	.word	0x0800fb0d
 800d50c:	0800fe64 	.word	0x0800fe64
 800d510:	0800fc10 	.word	0x0800fc10
 800d514:	0800fbe8 	.word	0x0800fbe8
 800d518:	7ff00000 	.word	0x7ff00000
 800d51c:	7ca00000 	.word	0x7ca00000
 800d520:	7fefffff 	.word	0x7fefffff
 800d524:	f014 0310 	ands.w	r3, r4, #16
 800d528:	bf18      	it	ne
 800d52a:	236a      	movne	r3, #106	@ 0x6a
 800d52c:	4ea9      	ldr	r6, [pc, #676]	@ (800d7d4 <_strtod_l+0x854>)
 800d52e:	9308      	str	r3, [sp, #32]
 800d530:	4650      	mov	r0, sl
 800d532:	4659      	mov	r1, fp
 800d534:	2300      	movs	r3, #0
 800d536:	07e2      	lsls	r2, r4, #31
 800d538:	d504      	bpl.n	800d544 <_strtod_l+0x5c4>
 800d53a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d53e:	f7f3 f88b 	bl	8000658 <__aeabi_dmul>
 800d542:	2301      	movs	r3, #1
 800d544:	1064      	asrs	r4, r4, #1
 800d546:	f106 0608 	add.w	r6, r6, #8
 800d54a:	d1f4      	bne.n	800d536 <_strtod_l+0x5b6>
 800d54c:	b10b      	cbz	r3, 800d552 <_strtod_l+0x5d2>
 800d54e:	4682      	mov	sl, r0
 800d550:	468b      	mov	fp, r1
 800d552:	9b08      	ldr	r3, [sp, #32]
 800d554:	b1b3      	cbz	r3, 800d584 <_strtod_l+0x604>
 800d556:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d55a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d55e:	2b00      	cmp	r3, #0
 800d560:	4659      	mov	r1, fp
 800d562:	dd0f      	ble.n	800d584 <_strtod_l+0x604>
 800d564:	2b1f      	cmp	r3, #31
 800d566:	dd55      	ble.n	800d614 <_strtod_l+0x694>
 800d568:	2b34      	cmp	r3, #52	@ 0x34
 800d56a:	bfde      	ittt	le
 800d56c:	f04f 33ff 	movle.w	r3, #4294967295
 800d570:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d574:	4093      	lslle	r3, r2
 800d576:	f04f 0a00 	mov.w	sl, #0
 800d57a:	bfcc      	ite	gt
 800d57c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d580:	ea03 0b01 	andle.w	fp, r3, r1
 800d584:	2200      	movs	r2, #0
 800d586:	2300      	movs	r3, #0
 800d588:	4650      	mov	r0, sl
 800d58a:	4659      	mov	r1, fp
 800d58c:	f7f3 facc 	bl	8000b28 <__aeabi_dcmpeq>
 800d590:	2800      	cmp	r0, #0
 800d592:	d1a6      	bne.n	800d4e2 <_strtod_l+0x562>
 800d594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d59a:	9805      	ldr	r0, [sp, #20]
 800d59c:	462b      	mov	r3, r5
 800d59e:	463a      	mov	r2, r7
 800d5a0:	f7ff f8d8 	bl	800c754 <__s2b>
 800d5a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	f43f af05 	beq.w	800d3b6 <_strtod_l+0x436>
 800d5ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5ae:	2a00      	cmp	r2, #0
 800d5b0:	eba9 0308 	sub.w	r3, r9, r8
 800d5b4:	bfa8      	it	ge
 800d5b6:	2300      	movge	r3, #0
 800d5b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d5ba:	2400      	movs	r4, #0
 800d5bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d5c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d5c2:	46a0      	mov	r8, r4
 800d5c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5c6:	9805      	ldr	r0, [sp, #20]
 800d5c8:	6859      	ldr	r1, [r3, #4]
 800d5ca:	f7ff f84f 	bl	800c66c <_Balloc>
 800d5ce:	4681      	mov	r9, r0
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	f43f aef4 	beq.w	800d3be <_strtod_l+0x43e>
 800d5d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5d8:	691a      	ldr	r2, [r3, #16]
 800d5da:	3202      	adds	r2, #2
 800d5dc:	f103 010c 	add.w	r1, r3, #12
 800d5e0:	0092      	lsls	r2, r2, #2
 800d5e2:	300c      	adds	r0, #12
 800d5e4:	f7fa ff68 	bl	80084b8 <memcpy>
 800d5e8:	ec4b ab10 	vmov	d0, sl, fp
 800d5ec:	9805      	ldr	r0, [sp, #20]
 800d5ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800d5f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d5f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d5f6:	f7ff fbcf 	bl	800cd98 <__d2b>
 800d5fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f43f aede 	beq.w	800d3be <_strtod_l+0x43e>
 800d602:	9805      	ldr	r0, [sp, #20]
 800d604:	2101      	movs	r1, #1
 800d606:	f7ff f93b 	bl	800c880 <__i2b>
 800d60a:	4680      	mov	r8, r0
 800d60c:	b948      	cbnz	r0, 800d622 <_strtod_l+0x6a2>
 800d60e:	f04f 0800 	mov.w	r8, #0
 800d612:	e6d4      	b.n	800d3be <_strtod_l+0x43e>
 800d614:	f04f 32ff 	mov.w	r2, #4294967295
 800d618:	fa02 f303 	lsl.w	r3, r2, r3
 800d61c:	ea03 0a0a 	and.w	sl, r3, sl
 800d620:	e7b0      	b.n	800d584 <_strtod_l+0x604>
 800d622:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d624:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d626:	2d00      	cmp	r5, #0
 800d628:	bfab      	itete	ge
 800d62a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d62c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d62e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d630:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d632:	bfac      	ite	ge
 800d634:	18ef      	addge	r7, r5, r3
 800d636:	1b5e      	sublt	r6, r3, r5
 800d638:	9b08      	ldr	r3, [sp, #32]
 800d63a:	1aed      	subs	r5, r5, r3
 800d63c:	4415      	add	r5, r2
 800d63e:	4b66      	ldr	r3, [pc, #408]	@ (800d7d8 <_strtod_l+0x858>)
 800d640:	3d01      	subs	r5, #1
 800d642:	429d      	cmp	r5, r3
 800d644:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d648:	da50      	bge.n	800d6ec <_strtod_l+0x76c>
 800d64a:	1b5b      	subs	r3, r3, r5
 800d64c:	2b1f      	cmp	r3, #31
 800d64e:	eba2 0203 	sub.w	r2, r2, r3
 800d652:	f04f 0101 	mov.w	r1, #1
 800d656:	dc3d      	bgt.n	800d6d4 <_strtod_l+0x754>
 800d658:	fa01 f303 	lsl.w	r3, r1, r3
 800d65c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d65e:	2300      	movs	r3, #0
 800d660:	9310      	str	r3, [sp, #64]	@ 0x40
 800d662:	18bd      	adds	r5, r7, r2
 800d664:	9b08      	ldr	r3, [sp, #32]
 800d666:	42af      	cmp	r7, r5
 800d668:	4416      	add	r6, r2
 800d66a:	441e      	add	r6, r3
 800d66c:	463b      	mov	r3, r7
 800d66e:	bfa8      	it	ge
 800d670:	462b      	movge	r3, r5
 800d672:	42b3      	cmp	r3, r6
 800d674:	bfa8      	it	ge
 800d676:	4633      	movge	r3, r6
 800d678:	2b00      	cmp	r3, #0
 800d67a:	bfc2      	ittt	gt
 800d67c:	1aed      	subgt	r5, r5, r3
 800d67e:	1af6      	subgt	r6, r6, r3
 800d680:	1aff      	subgt	r7, r7, r3
 800d682:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d684:	2b00      	cmp	r3, #0
 800d686:	dd16      	ble.n	800d6b6 <_strtod_l+0x736>
 800d688:	4641      	mov	r1, r8
 800d68a:	9805      	ldr	r0, [sp, #20]
 800d68c:	461a      	mov	r2, r3
 800d68e:	f7ff f9b7 	bl	800ca00 <__pow5mult>
 800d692:	4680      	mov	r8, r0
 800d694:	2800      	cmp	r0, #0
 800d696:	d0ba      	beq.n	800d60e <_strtod_l+0x68e>
 800d698:	4601      	mov	r1, r0
 800d69a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d69c:	9805      	ldr	r0, [sp, #20]
 800d69e:	f7ff f905 	bl	800c8ac <__multiply>
 800d6a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	f43f ae8a 	beq.w	800d3be <_strtod_l+0x43e>
 800d6aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6ac:	9805      	ldr	r0, [sp, #20]
 800d6ae:	f7ff f802 	bl	800c6b6 <_Bfree>
 800d6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	dc1d      	bgt.n	800d6f6 <_strtod_l+0x776>
 800d6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dd23      	ble.n	800d708 <_strtod_l+0x788>
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d6c4:	9805      	ldr	r0, [sp, #20]
 800d6c6:	f7ff f99b 	bl	800ca00 <__pow5mult>
 800d6ca:	4681      	mov	r9, r0
 800d6cc:	b9e0      	cbnz	r0, 800d708 <_strtod_l+0x788>
 800d6ce:	f04f 0900 	mov.w	r9, #0
 800d6d2:	e674      	b.n	800d3be <_strtod_l+0x43e>
 800d6d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d6d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d6dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d6e0:	35e2      	adds	r5, #226	@ 0xe2
 800d6e2:	fa01 f305 	lsl.w	r3, r1, r5
 800d6e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d6ea:	e7ba      	b.n	800d662 <_strtod_l+0x6e2>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d6f4:	e7b5      	b.n	800d662 <_strtod_l+0x6e2>
 800d6f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6f8:	9805      	ldr	r0, [sp, #20]
 800d6fa:	462a      	mov	r2, r5
 800d6fc:	f7ff f9c0 	bl	800ca80 <__lshift>
 800d700:	901a      	str	r0, [sp, #104]	@ 0x68
 800d702:	2800      	cmp	r0, #0
 800d704:	d1d9      	bne.n	800d6ba <_strtod_l+0x73a>
 800d706:	e65a      	b.n	800d3be <_strtod_l+0x43e>
 800d708:	2e00      	cmp	r6, #0
 800d70a:	dd07      	ble.n	800d71c <_strtod_l+0x79c>
 800d70c:	4649      	mov	r1, r9
 800d70e:	9805      	ldr	r0, [sp, #20]
 800d710:	4632      	mov	r2, r6
 800d712:	f7ff f9b5 	bl	800ca80 <__lshift>
 800d716:	4681      	mov	r9, r0
 800d718:	2800      	cmp	r0, #0
 800d71a:	d0d8      	beq.n	800d6ce <_strtod_l+0x74e>
 800d71c:	2f00      	cmp	r7, #0
 800d71e:	dd08      	ble.n	800d732 <_strtod_l+0x7b2>
 800d720:	4641      	mov	r1, r8
 800d722:	9805      	ldr	r0, [sp, #20]
 800d724:	463a      	mov	r2, r7
 800d726:	f7ff f9ab 	bl	800ca80 <__lshift>
 800d72a:	4680      	mov	r8, r0
 800d72c:	2800      	cmp	r0, #0
 800d72e:	f43f ae46 	beq.w	800d3be <_strtod_l+0x43e>
 800d732:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d734:	9805      	ldr	r0, [sp, #20]
 800d736:	464a      	mov	r2, r9
 800d738:	f7ff fa2a 	bl	800cb90 <__mdiff>
 800d73c:	4604      	mov	r4, r0
 800d73e:	2800      	cmp	r0, #0
 800d740:	f43f ae3d 	beq.w	800d3be <_strtod_l+0x43e>
 800d744:	68c3      	ldr	r3, [r0, #12]
 800d746:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d748:	2300      	movs	r3, #0
 800d74a:	60c3      	str	r3, [r0, #12]
 800d74c:	4641      	mov	r1, r8
 800d74e:	f7ff fa03 	bl	800cb58 <__mcmp>
 800d752:	2800      	cmp	r0, #0
 800d754:	da46      	bge.n	800d7e4 <_strtod_l+0x864>
 800d756:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d758:	ea53 030a 	orrs.w	r3, r3, sl
 800d75c:	d16c      	bne.n	800d838 <_strtod_l+0x8b8>
 800d75e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d762:	2b00      	cmp	r3, #0
 800d764:	d168      	bne.n	800d838 <_strtod_l+0x8b8>
 800d766:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d76a:	0d1b      	lsrs	r3, r3, #20
 800d76c:	051b      	lsls	r3, r3, #20
 800d76e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d772:	d961      	bls.n	800d838 <_strtod_l+0x8b8>
 800d774:	6963      	ldr	r3, [r4, #20]
 800d776:	b913      	cbnz	r3, 800d77e <_strtod_l+0x7fe>
 800d778:	6923      	ldr	r3, [r4, #16]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	dd5c      	ble.n	800d838 <_strtod_l+0x8b8>
 800d77e:	4621      	mov	r1, r4
 800d780:	2201      	movs	r2, #1
 800d782:	9805      	ldr	r0, [sp, #20]
 800d784:	f7ff f97c 	bl	800ca80 <__lshift>
 800d788:	4641      	mov	r1, r8
 800d78a:	4604      	mov	r4, r0
 800d78c:	f7ff f9e4 	bl	800cb58 <__mcmp>
 800d790:	2800      	cmp	r0, #0
 800d792:	dd51      	ble.n	800d838 <_strtod_l+0x8b8>
 800d794:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d798:	9a08      	ldr	r2, [sp, #32]
 800d79a:	0d1b      	lsrs	r3, r3, #20
 800d79c:	051b      	lsls	r3, r3, #20
 800d79e:	2a00      	cmp	r2, #0
 800d7a0:	d06b      	beq.n	800d87a <_strtod_l+0x8fa>
 800d7a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d7a6:	d868      	bhi.n	800d87a <_strtod_l+0x8fa>
 800d7a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d7ac:	f67f ae9d 	bls.w	800d4ea <_strtod_l+0x56a>
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d7dc <_strtod_l+0x85c>)
 800d7b2:	4650      	mov	r0, sl
 800d7b4:	4659      	mov	r1, fp
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f7f2 ff4e 	bl	8000658 <__aeabi_dmul>
 800d7bc:	4b08      	ldr	r3, [pc, #32]	@ (800d7e0 <_strtod_l+0x860>)
 800d7be:	400b      	ands	r3, r1
 800d7c0:	4682      	mov	sl, r0
 800d7c2:	468b      	mov	fp, r1
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f47f ae05 	bne.w	800d3d4 <_strtod_l+0x454>
 800d7ca:	9a05      	ldr	r2, [sp, #20]
 800d7cc:	2322      	movs	r3, #34	@ 0x22
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	e600      	b.n	800d3d4 <_strtod_l+0x454>
 800d7d2:	bf00      	nop
 800d7d4:	0800fd00 	.word	0x0800fd00
 800d7d8:	fffffc02 	.word	0xfffffc02
 800d7dc:	39500000 	.word	0x39500000
 800d7e0:	7ff00000 	.word	0x7ff00000
 800d7e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d7e8:	d165      	bne.n	800d8b6 <_strtod_l+0x936>
 800d7ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7f0:	b35a      	cbz	r2, 800d84a <_strtod_l+0x8ca>
 800d7f2:	4a9f      	ldr	r2, [pc, #636]	@ (800da70 <_strtod_l+0xaf0>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d12b      	bne.n	800d850 <_strtod_l+0x8d0>
 800d7f8:	9b08      	ldr	r3, [sp, #32]
 800d7fa:	4651      	mov	r1, sl
 800d7fc:	b303      	cbz	r3, 800d840 <_strtod_l+0x8c0>
 800d7fe:	4b9d      	ldr	r3, [pc, #628]	@ (800da74 <_strtod_l+0xaf4>)
 800d800:	465a      	mov	r2, fp
 800d802:	4013      	ands	r3, r2
 800d804:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d808:	f04f 32ff 	mov.w	r2, #4294967295
 800d80c:	d81b      	bhi.n	800d846 <_strtod_l+0x8c6>
 800d80e:	0d1b      	lsrs	r3, r3, #20
 800d810:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d814:	fa02 f303 	lsl.w	r3, r2, r3
 800d818:	4299      	cmp	r1, r3
 800d81a:	d119      	bne.n	800d850 <_strtod_l+0x8d0>
 800d81c:	4b96      	ldr	r3, [pc, #600]	@ (800da78 <_strtod_l+0xaf8>)
 800d81e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d820:	429a      	cmp	r2, r3
 800d822:	d102      	bne.n	800d82a <_strtod_l+0x8aa>
 800d824:	3101      	adds	r1, #1
 800d826:	f43f adca 	beq.w	800d3be <_strtod_l+0x43e>
 800d82a:	4b92      	ldr	r3, [pc, #584]	@ (800da74 <_strtod_l+0xaf4>)
 800d82c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d82e:	401a      	ands	r2, r3
 800d830:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d834:	f04f 0a00 	mov.w	sl, #0
 800d838:	9b08      	ldr	r3, [sp, #32]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1b8      	bne.n	800d7b0 <_strtod_l+0x830>
 800d83e:	e5c9      	b.n	800d3d4 <_strtod_l+0x454>
 800d840:	f04f 33ff 	mov.w	r3, #4294967295
 800d844:	e7e8      	b.n	800d818 <_strtod_l+0x898>
 800d846:	4613      	mov	r3, r2
 800d848:	e7e6      	b.n	800d818 <_strtod_l+0x898>
 800d84a:	ea53 030a 	orrs.w	r3, r3, sl
 800d84e:	d0a1      	beq.n	800d794 <_strtod_l+0x814>
 800d850:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d852:	b1db      	cbz	r3, 800d88c <_strtod_l+0x90c>
 800d854:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d856:	4213      	tst	r3, r2
 800d858:	d0ee      	beq.n	800d838 <_strtod_l+0x8b8>
 800d85a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d85c:	9a08      	ldr	r2, [sp, #32]
 800d85e:	4650      	mov	r0, sl
 800d860:	4659      	mov	r1, fp
 800d862:	b1bb      	cbz	r3, 800d894 <_strtod_l+0x914>
 800d864:	f7ff fb6e 	bl	800cf44 <sulp>
 800d868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d86c:	ec53 2b10 	vmov	r2, r3, d0
 800d870:	f7f2 fd3c 	bl	80002ec <__adddf3>
 800d874:	4682      	mov	sl, r0
 800d876:	468b      	mov	fp, r1
 800d878:	e7de      	b.n	800d838 <_strtod_l+0x8b8>
 800d87a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d87e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d882:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d886:	f04f 3aff 	mov.w	sl, #4294967295
 800d88a:	e7d5      	b.n	800d838 <_strtod_l+0x8b8>
 800d88c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d88e:	ea13 0f0a 	tst.w	r3, sl
 800d892:	e7e1      	b.n	800d858 <_strtod_l+0x8d8>
 800d894:	f7ff fb56 	bl	800cf44 <sulp>
 800d898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d89c:	ec53 2b10 	vmov	r2, r3, d0
 800d8a0:	f7f2 fd22 	bl	80002e8 <__aeabi_dsub>
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	4682      	mov	sl, r0
 800d8aa:	468b      	mov	fp, r1
 800d8ac:	f7f3 f93c 	bl	8000b28 <__aeabi_dcmpeq>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d0c1      	beq.n	800d838 <_strtod_l+0x8b8>
 800d8b4:	e619      	b.n	800d4ea <_strtod_l+0x56a>
 800d8b6:	4641      	mov	r1, r8
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f7ff fac5 	bl	800ce48 <__ratio>
 800d8be:	ec57 6b10 	vmov	r6, r7, d0
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	f7f3 f940 	bl	8000b50 <__aeabi_dcmple>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d06f      	beq.n	800d9b4 <_strtod_l+0xa34>
 800d8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d17a      	bne.n	800d9d0 <_strtod_l+0xa50>
 800d8da:	f1ba 0f00 	cmp.w	sl, #0
 800d8de:	d158      	bne.n	800d992 <_strtod_l+0xa12>
 800d8e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d15a      	bne.n	800d9a0 <_strtod_l+0xa20>
 800d8ea:	4b64      	ldr	r3, [pc, #400]	@ (800da7c <_strtod_l+0xafc>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	4639      	mov	r1, r7
 800d8f2:	f7f3 f923 	bl	8000b3c <__aeabi_dcmplt>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d159      	bne.n	800d9ae <_strtod_l+0xa2e>
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	4b60      	ldr	r3, [pc, #384]	@ (800da80 <_strtod_l+0xb00>)
 800d900:	2200      	movs	r2, #0
 800d902:	f7f2 fea9 	bl	8000658 <__aeabi_dmul>
 800d906:	4606      	mov	r6, r0
 800d908:	460f      	mov	r7, r1
 800d90a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d90e:	9606      	str	r6, [sp, #24]
 800d910:	9307      	str	r3, [sp, #28]
 800d912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d916:	4d57      	ldr	r5, [pc, #348]	@ (800da74 <_strtod_l+0xaf4>)
 800d918:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d91c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d91e:	401d      	ands	r5, r3
 800d920:	4b58      	ldr	r3, [pc, #352]	@ (800da84 <_strtod_l+0xb04>)
 800d922:	429d      	cmp	r5, r3
 800d924:	f040 80b2 	bne.w	800da8c <_strtod_l+0xb0c>
 800d928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d92a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d92e:	ec4b ab10 	vmov	d0, sl, fp
 800d932:	f7ff f9c1 	bl	800ccb8 <__ulp>
 800d936:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d93a:	ec51 0b10 	vmov	r0, r1, d0
 800d93e:	f7f2 fe8b 	bl	8000658 <__aeabi_dmul>
 800d942:	4652      	mov	r2, sl
 800d944:	465b      	mov	r3, fp
 800d946:	f7f2 fcd1 	bl	80002ec <__adddf3>
 800d94a:	460b      	mov	r3, r1
 800d94c:	4949      	ldr	r1, [pc, #292]	@ (800da74 <_strtod_l+0xaf4>)
 800d94e:	4a4e      	ldr	r2, [pc, #312]	@ (800da88 <_strtod_l+0xb08>)
 800d950:	4019      	ands	r1, r3
 800d952:	4291      	cmp	r1, r2
 800d954:	4682      	mov	sl, r0
 800d956:	d942      	bls.n	800d9de <_strtod_l+0xa5e>
 800d958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d95a:	4b47      	ldr	r3, [pc, #284]	@ (800da78 <_strtod_l+0xaf8>)
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d103      	bne.n	800d968 <_strtod_l+0x9e8>
 800d960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d962:	3301      	adds	r3, #1
 800d964:	f43f ad2b 	beq.w	800d3be <_strtod_l+0x43e>
 800d968:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800da78 <_strtod_l+0xaf8>
 800d96c:	f04f 3aff 	mov.w	sl, #4294967295
 800d970:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d972:	9805      	ldr	r0, [sp, #20]
 800d974:	f7fe fe9f 	bl	800c6b6 <_Bfree>
 800d978:	9805      	ldr	r0, [sp, #20]
 800d97a:	4649      	mov	r1, r9
 800d97c:	f7fe fe9b 	bl	800c6b6 <_Bfree>
 800d980:	9805      	ldr	r0, [sp, #20]
 800d982:	4641      	mov	r1, r8
 800d984:	f7fe fe97 	bl	800c6b6 <_Bfree>
 800d988:	9805      	ldr	r0, [sp, #20]
 800d98a:	4621      	mov	r1, r4
 800d98c:	f7fe fe93 	bl	800c6b6 <_Bfree>
 800d990:	e618      	b.n	800d5c4 <_strtod_l+0x644>
 800d992:	f1ba 0f01 	cmp.w	sl, #1
 800d996:	d103      	bne.n	800d9a0 <_strtod_l+0xa20>
 800d998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f43f ada5 	beq.w	800d4ea <_strtod_l+0x56a>
 800d9a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800da50 <_strtod_l+0xad0>
 800d9a4:	4f35      	ldr	r7, [pc, #212]	@ (800da7c <_strtod_l+0xafc>)
 800d9a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d9aa:	2600      	movs	r6, #0
 800d9ac:	e7b1      	b.n	800d912 <_strtod_l+0x992>
 800d9ae:	4f34      	ldr	r7, [pc, #208]	@ (800da80 <_strtod_l+0xb00>)
 800d9b0:	2600      	movs	r6, #0
 800d9b2:	e7aa      	b.n	800d90a <_strtod_l+0x98a>
 800d9b4:	4b32      	ldr	r3, [pc, #200]	@ (800da80 <_strtod_l+0xb00>)
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	4639      	mov	r1, r7
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f7f2 fe4c 	bl	8000658 <__aeabi_dmul>
 800d9c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9c2:	4606      	mov	r6, r0
 800d9c4:	460f      	mov	r7, r1
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d09f      	beq.n	800d90a <_strtod_l+0x98a>
 800d9ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d9ce:	e7a0      	b.n	800d912 <_strtod_l+0x992>
 800d9d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800da58 <_strtod_l+0xad8>
 800d9d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d9d8:	ec57 6b17 	vmov	r6, r7, d7
 800d9dc:	e799      	b.n	800d912 <_strtod_l+0x992>
 800d9de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d9e2:	9b08      	ldr	r3, [sp, #32]
 800d9e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1c1      	bne.n	800d970 <_strtod_l+0x9f0>
 800d9ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d9f0:	0d1b      	lsrs	r3, r3, #20
 800d9f2:	051b      	lsls	r3, r3, #20
 800d9f4:	429d      	cmp	r5, r3
 800d9f6:	d1bb      	bne.n	800d970 <_strtod_l+0x9f0>
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	4639      	mov	r1, r7
 800d9fc:	f7f3 f98c 	bl	8000d18 <__aeabi_d2lz>
 800da00:	f7f2 fdfc 	bl	80005fc <__aeabi_l2d>
 800da04:	4602      	mov	r2, r0
 800da06:	460b      	mov	r3, r1
 800da08:	4630      	mov	r0, r6
 800da0a:	4639      	mov	r1, r7
 800da0c:	f7f2 fc6c 	bl	80002e8 <__aeabi_dsub>
 800da10:	460b      	mov	r3, r1
 800da12:	4602      	mov	r2, r0
 800da14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800da18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800da1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da1e:	ea46 060a 	orr.w	r6, r6, sl
 800da22:	431e      	orrs	r6, r3
 800da24:	d06f      	beq.n	800db06 <_strtod_l+0xb86>
 800da26:	a30e      	add	r3, pc, #56	@ (adr r3, 800da60 <_strtod_l+0xae0>)
 800da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2c:	f7f3 f886 	bl	8000b3c <__aeabi_dcmplt>
 800da30:	2800      	cmp	r0, #0
 800da32:	f47f accf 	bne.w	800d3d4 <_strtod_l+0x454>
 800da36:	a30c      	add	r3, pc, #48	@ (adr r3, 800da68 <_strtod_l+0xae8>)
 800da38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da40:	f7f3 f89a 	bl	8000b78 <__aeabi_dcmpgt>
 800da44:	2800      	cmp	r0, #0
 800da46:	d093      	beq.n	800d970 <_strtod_l+0x9f0>
 800da48:	e4c4      	b.n	800d3d4 <_strtod_l+0x454>
 800da4a:	bf00      	nop
 800da4c:	f3af 8000 	nop.w
 800da50:	00000000 	.word	0x00000000
 800da54:	bff00000 	.word	0xbff00000
 800da58:	00000000 	.word	0x00000000
 800da5c:	3ff00000 	.word	0x3ff00000
 800da60:	94a03595 	.word	0x94a03595
 800da64:	3fdfffff 	.word	0x3fdfffff
 800da68:	35afe535 	.word	0x35afe535
 800da6c:	3fe00000 	.word	0x3fe00000
 800da70:	000fffff 	.word	0x000fffff
 800da74:	7ff00000 	.word	0x7ff00000
 800da78:	7fefffff 	.word	0x7fefffff
 800da7c:	3ff00000 	.word	0x3ff00000
 800da80:	3fe00000 	.word	0x3fe00000
 800da84:	7fe00000 	.word	0x7fe00000
 800da88:	7c9fffff 	.word	0x7c9fffff
 800da8c:	9b08      	ldr	r3, [sp, #32]
 800da8e:	b323      	cbz	r3, 800dada <_strtod_l+0xb5a>
 800da90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800da94:	d821      	bhi.n	800dada <_strtod_l+0xb5a>
 800da96:	a328      	add	r3, pc, #160	@ (adr r3, 800db38 <_strtod_l+0xbb8>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	4630      	mov	r0, r6
 800da9e:	4639      	mov	r1, r7
 800daa0:	f7f3 f856 	bl	8000b50 <__aeabi_dcmple>
 800daa4:	b1a0      	cbz	r0, 800dad0 <_strtod_l+0xb50>
 800daa6:	4639      	mov	r1, r7
 800daa8:	4630      	mov	r0, r6
 800daaa:	f7f3 f8ad 	bl	8000c08 <__aeabi_d2uiz>
 800daae:	2801      	cmp	r0, #1
 800dab0:	bf38      	it	cc
 800dab2:	2001      	movcc	r0, #1
 800dab4:	f7f2 fd56 	bl	8000564 <__aeabi_ui2d>
 800dab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daba:	4606      	mov	r6, r0
 800dabc:	460f      	mov	r7, r1
 800dabe:	b9fb      	cbnz	r3, 800db00 <_strtod_l+0xb80>
 800dac0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dac4:	9014      	str	r0, [sp, #80]	@ 0x50
 800dac6:	9315      	str	r3, [sp, #84]	@ 0x54
 800dac8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dacc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dad0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dad2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dad6:	1b5b      	subs	r3, r3, r5
 800dad8:	9311      	str	r3, [sp, #68]	@ 0x44
 800dada:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dade:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dae2:	f7ff f8e9 	bl	800ccb8 <__ulp>
 800dae6:	4650      	mov	r0, sl
 800dae8:	ec53 2b10 	vmov	r2, r3, d0
 800daec:	4659      	mov	r1, fp
 800daee:	f7f2 fdb3 	bl	8000658 <__aeabi_dmul>
 800daf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800daf6:	f7f2 fbf9 	bl	80002ec <__adddf3>
 800dafa:	4682      	mov	sl, r0
 800dafc:	468b      	mov	fp, r1
 800dafe:	e770      	b.n	800d9e2 <_strtod_l+0xa62>
 800db00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800db04:	e7e0      	b.n	800dac8 <_strtod_l+0xb48>
 800db06:	a30e      	add	r3, pc, #56	@ (adr r3, 800db40 <_strtod_l+0xbc0>)
 800db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0c:	f7f3 f816 	bl	8000b3c <__aeabi_dcmplt>
 800db10:	e798      	b.n	800da44 <_strtod_l+0xac4>
 800db12:	2300      	movs	r3, #0
 800db14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800db18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db1a:	6013      	str	r3, [r2, #0]
 800db1c:	f7ff ba6d 	b.w	800cffa <_strtod_l+0x7a>
 800db20:	2a65      	cmp	r2, #101	@ 0x65
 800db22:	f43f ab66 	beq.w	800d1f2 <_strtod_l+0x272>
 800db26:	2a45      	cmp	r2, #69	@ 0x45
 800db28:	f43f ab63 	beq.w	800d1f2 <_strtod_l+0x272>
 800db2c:	2301      	movs	r3, #1
 800db2e:	f7ff bb9e 	b.w	800d26e <_strtod_l+0x2ee>
 800db32:	bf00      	nop
 800db34:	f3af 8000 	nop.w
 800db38:	ffc00000 	.word	0xffc00000
 800db3c:	41dfffff 	.word	0x41dfffff
 800db40:	94a03595 	.word	0x94a03595
 800db44:	3fcfffff 	.word	0x3fcfffff

0800db48 <_strtod_r>:
 800db48:	4b01      	ldr	r3, [pc, #4]	@ (800db50 <_strtod_r+0x8>)
 800db4a:	f7ff ba19 	b.w	800cf80 <_strtod_l>
 800db4e:	bf00      	nop
 800db50:	2000058c 	.word	0x2000058c

0800db54 <_strtol_l.constprop.0>:
 800db54:	2b24      	cmp	r3, #36	@ 0x24
 800db56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db5a:	4686      	mov	lr, r0
 800db5c:	4690      	mov	r8, r2
 800db5e:	d801      	bhi.n	800db64 <_strtol_l.constprop.0+0x10>
 800db60:	2b01      	cmp	r3, #1
 800db62:	d106      	bne.n	800db72 <_strtol_l.constprop.0+0x1e>
 800db64:	f7fa fc7a 	bl	800845c <__errno>
 800db68:	2316      	movs	r3, #22
 800db6a:	6003      	str	r3, [r0, #0]
 800db6c:	2000      	movs	r0, #0
 800db6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db72:	4834      	ldr	r0, [pc, #208]	@ (800dc44 <_strtol_l.constprop.0+0xf0>)
 800db74:	460d      	mov	r5, r1
 800db76:	462a      	mov	r2, r5
 800db78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db7c:	5d06      	ldrb	r6, [r0, r4]
 800db7e:	f016 0608 	ands.w	r6, r6, #8
 800db82:	d1f8      	bne.n	800db76 <_strtol_l.constprop.0+0x22>
 800db84:	2c2d      	cmp	r4, #45	@ 0x2d
 800db86:	d12d      	bne.n	800dbe4 <_strtol_l.constprop.0+0x90>
 800db88:	782c      	ldrb	r4, [r5, #0]
 800db8a:	2601      	movs	r6, #1
 800db8c:	1c95      	adds	r5, r2, #2
 800db8e:	f033 0210 	bics.w	r2, r3, #16
 800db92:	d109      	bne.n	800dba8 <_strtol_l.constprop.0+0x54>
 800db94:	2c30      	cmp	r4, #48	@ 0x30
 800db96:	d12a      	bne.n	800dbee <_strtol_l.constprop.0+0x9a>
 800db98:	782a      	ldrb	r2, [r5, #0]
 800db9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800db9e:	2a58      	cmp	r2, #88	@ 0x58
 800dba0:	d125      	bne.n	800dbee <_strtol_l.constprop.0+0x9a>
 800dba2:	786c      	ldrb	r4, [r5, #1]
 800dba4:	2310      	movs	r3, #16
 800dba6:	3502      	adds	r5, #2
 800dba8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dbac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	fbbc f9f3 	udiv	r9, ip, r3
 800dbb6:	4610      	mov	r0, r2
 800dbb8:	fb03 ca19 	mls	sl, r3, r9, ip
 800dbbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dbc0:	2f09      	cmp	r7, #9
 800dbc2:	d81b      	bhi.n	800dbfc <_strtol_l.constprop.0+0xa8>
 800dbc4:	463c      	mov	r4, r7
 800dbc6:	42a3      	cmp	r3, r4
 800dbc8:	dd27      	ble.n	800dc1a <_strtol_l.constprop.0+0xc6>
 800dbca:	1c57      	adds	r7, r2, #1
 800dbcc:	d007      	beq.n	800dbde <_strtol_l.constprop.0+0x8a>
 800dbce:	4581      	cmp	r9, r0
 800dbd0:	d320      	bcc.n	800dc14 <_strtol_l.constprop.0+0xc0>
 800dbd2:	d101      	bne.n	800dbd8 <_strtol_l.constprop.0+0x84>
 800dbd4:	45a2      	cmp	sl, r4
 800dbd6:	db1d      	blt.n	800dc14 <_strtol_l.constprop.0+0xc0>
 800dbd8:	fb00 4003 	mla	r0, r0, r3, r4
 800dbdc:	2201      	movs	r2, #1
 800dbde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbe2:	e7eb      	b.n	800dbbc <_strtol_l.constprop.0+0x68>
 800dbe4:	2c2b      	cmp	r4, #43	@ 0x2b
 800dbe6:	bf04      	itt	eq
 800dbe8:	782c      	ldrbeq	r4, [r5, #0]
 800dbea:	1c95      	addeq	r5, r2, #2
 800dbec:	e7cf      	b.n	800db8e <_strtol_l.constprop.0+0x3a>
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1da      	bne.n	800dba8 <_strtol_l.constprop.0+0x54>
 800dbf2:	2c30      	cmp	r4, #48	@ 0x30
 800dbf4:	bf0c      	ite	eq
 800dbf6:	2308      	moveq	r3, #8
 800dbf8:	230a      	movne	r3, #10
 800dbfa:	e7d5      	b.n	800dba8 <_strtol_l.constprop.0+0x54>
 800dbfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dc00:	2f19      	cmp	r7, #25
 800dc02:	d801      	bhi.n	800dc08 <_strtol_l.constprop.0+0xb4>
 800dc04:	3c37      	subs	r4, #55	@ 0x37
 800dc06:	e7de      	b.n	800dbc6 <_strtol_l.constprop.0+0x72>
 800dc08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dc0c:	2f19      	cmp	r7, #25
 800dc0e:	d804      	bhi.n	800dc1a <_strtol_l.constprop.0+0xc6>
 800dc10:	3c57      	subs	r4, #87	@ 0x57
 800dc12:	e7d8      	b.n	800dbc6 <_strtol_l.constprop.0+0x72>
 800dc14:	f04f 32ff 	mov.w	r2, #4294967295
 800dc18:	e7e1      	b.n	800dbde <_strtol_l.constprop.0+0x8a>
 800dc1a:	1c53      	adds	r3, r2, #1
 800dc1c:	d108      	bne.n	800dc30 <_strtol_l.constprop.0+0xdc>
 800dc1e:	2322      	movs	r3, #34	@ 0x22
 800dc20:	f8ce 3000 	str.w	r3, [lr]
 800dc24:	4660      	mov	r0, ip
 800dc26:	f1b8 0f00 	cmp.w	r8, #0
 800dc2a:	d0a0      	beq.n	800db6e <_strtol_l.constprop.0+0x1a>
 800dc2c:	1e69      	subs	r1, r5, #1
 800dc2e:	e006      	b.n	800dc3e <_strtol_l.constprop.0+0xea>
 800dc30:	b106      	cbz	r6, 800dc34 <_strtol_l.constprop.0+0xe0>
 800dc32:	4240      	negs	r0, r0
 800dc34:	f1b8 0f00 	cmp.w	r8, #0
 800dc38:	d099      	beq.n	800db6e <_strtol_l.constprop.0+0x1a>
 800dc3a:	2a00      	cmp	r2, #0
 800dc3c:	d1f6      	bne.n	800dc2c <_strtol_l.constprop.0+0xd8>
 800dc3e:	f8c8 1000 	str.w	r1, [r8]
 800dc42:	e794      	b.n	800db6e <_strtol_l.constprop.0+0x1a>
 800dc44:	0800fd29 	.word	0x0800fd29

0800dc48 <_strtol_r>:
 800dc48:	f7ff bf84 	b.w	800db54 <_strtol_l.constprop.0>

0800dc4c <_strtoul_l.constprop.0>:
 800dc4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc50:	4e34      	ldr	r6, [pc, #208]	@ (800dd24 <_strtoul_l.constprop.0+0xd8>)
 800dc52:	4686      	mov	lr, r0
 800dc54:	460d      	mov	r5, r1
 800dc56:	4628      	mov	r0, r5
 800dc58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc5c:	5d37      	ldrb	r7, [r6, r4]
 800dc5e:	f017 0708 	ands.w	r7, r7, #8
 800dc62:	d1f8      	bne.n	800dc56 <_strtoul_l.constprop.0+0xa>
 800dc64:	2c2d      	cmp	r4, #45	@ 0x2d
 800dc66:	d12f      	bne.n	800dcc8 <_strtoul_l.constprop.0+0x7c>
 800dc68:	782c      	ldrb	r4, [r5, #0]
 800dc6a:	2701      	movs	r7, #1
 800dc6c:	1c85      	adds	r5, r0, #2
 800dc6e:	f033 0010 	bics.w	r0, r3, #16
 800dc72:	d109      	bne.n	800dc88 <_strtoul_l.constprop.0+0x3c>
 800dc74:	2c30      	cmp	r4, #48	@ 0x30
 800dc76:	d12c      	bne.n	800dcd2 <_strtoul_l.constprop.0+0x86>
 800dc78:	7828      	ldrb	r0, [r5, #0]
 800dc7a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800dc7e:	2858      	cmp	r0, #88	@ 0x58
 800dc80:	d127      	bne.n	800dcd2 <_strtoul_l.constprop.0+0x86>
 800dc82:	786c      	ldrb	r4, [r5, #1]
 800dc84:	2310      	movs	r3, #16
 800dc86:	3502      	adds	r5, #2
 800dc88:	f04f 38ff 	mov.w	r8, #4294967295
 800dc8c:	2600      	movs	r6, #0
 800dc8e:	fbb8 f8f3 	udiv	r8, r8, r3
 800dc92:	fb03 f908 	mul.w	r9, r3, r8
 800dc96:	ea6f 0909 	mvn.w	r9, r9
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800dca0:	f1bc 0f09 	cmp.w	ip, #9
 800dca4:	d81c      	bhi.n	800dce0 <_strtoul_l.constprop.0+0x94>
 800dca6:	4664      	mov	r4, ip
 800dca8:	42a3      	cmp	r3, r4
 800dcaa:	dd2a      	ble.n	800dd02 <_strtoul_l.constprop.0+0xb6>
 800dcac:	f1b6 3fff 	cmp.w	r6, #4294967295
 800dcb0:	d007      	beq.n	800dcc2 <_strtoul_l.constprop.0+0x76>
 800dcb2:	4580      	cmp	r8, r0
 800dcb4:	d322      	bcc.n	800dcfc <_strtoul_l.constprop.0+0xb0>
 800dcb6:	d101      	bne.n	800dcbc <_strtoul_l.constprop.0+0x70>
 800dcb8:	45a1      	cmp	r9, r4
 800dcba:	db1f      	blt.n	800dcfc <_strtoul_l.constprop.0+0xb0>
 800dcbc:	fb00 4003 	mla	r0, r0, r3, r4
 800dcc0:	2601      	movs	r6, #1
 800dcc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcc6:	e7e9      	b.n	800dc9c <_strtoul_l.constprop.0+0x50>
 800dcc8:	2c2b      	cmp	r4, #43	@ 0x2b
 800dcca:	bf04      	itt	eq
 800dccc:	782c      	ldrbeq	r4, [r5, #0]
 800dcce:	1c85      	addeq	r5, r0, #2
 800dcd0:	e7cd      	b.n	800dc6e <_strtoul_l.constprop.0+0x22>
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1d8      	bne.n	800dc88 <_strtoul_l.constprop.0+0x3c>
 800dcd6:	2c30      	cmp	r4, #48	@ 0x30
 800dcd8:	bf0c      	ite	eq
 800dcda:	2308      	moveq	r3, #8
 800dcdc:	230a      	movne	r3, #10
 800dcde:	e7d3      	b.n	800dc88 <_strtoul_l.constprop.0+0x3c>
 800dce0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800dce4:	f1bc 0f19 	cmp.w	ip, #25
 800dce8:	d801      	bhi.n	800dcee <_strtoul_l.constprop.0+0xa2>
 800dcea:	3c37      	subs	r4, #55	@ 0x37
 800dcec:	e7dc      	b.n	800dca8 <_strtoul_l.constprop.0+0x5c>
 800dcee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800dcf2:	f1bc 0f19 	cmp.w	ip, #25
 800dcf6:	d804      	bhi.n	800dd02 <_strtoul_l.constprop.0+0xb6>
 800dcf8:	3c57      	subs	r4, #87	@ 0x57
 800dcfa:	e7d5      	b.n	800dca8 <_strtoul_l.constprop.0+0x5c>
 800dcfc:	f04f 36ff 	mov.w	r6, #4294967295
 800dd00:	e7df      	b.n	800dcc2 <_strtoul_l.constprop.0+0x76>
 800dd02:	1c73      	adds	r3, r6, #1
 800dd04:	d106      	bne.n	800dd14 <_strtoul_l.constprop.0+0xc8>
 800dd06:	2322      	movs	r3, #34	@ 0x22
 800dd08:	f8ce 3000 	str.w	r3, [lr]
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	b932      	cbnz	r2, 800dd1e <_strtoul_l.constprop.0+0xd2>
 800dd10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd14:	b107      	cbz	r7, 800dd18 <_strtoul_l.constprop.0+0xcc>
 800dd16:	4240      	negs	r0, r0
 800dd18:	2a00      	cmp	r2, #0
 800dd1a:	d0f9      	beq.n	800dd10 <_strtoul_l.constprop.0+0xc4>
 800dd1c:	b106      	cbz	r6, 800dd20 <_strtoul_l.constprop.0+0xd4>
 800dd1e:	1e69      	subs	r1, r5, #1
 800dd20:	6011      	str	r1, [r2, #0]
 800dd22:	e7f5      	b.n	800dd10 <_strtoul_l.constprop.0+0xc4>
 800dd24:	0800fd29 	.word	0x0800fd29

0800dd28 <_strtoul_r>:
 800dd28:	f7ff bf90 	b.w	800dc4c <_strtoul_l.constprop.0>

0800dd2c <__ascii_wctomb>:
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	4608      	mov	r0, r1
 800dd30:	b141      	cbz	r1, 800dd44 <__ascii_wctomb+0x18>
 800dd32:	2aff      	cmp	r2, #255	@ 0xff
 800dd34:	d904      	bls.n	800dd40 <__ascii_wctomb+0x14>
 800dd36:	228a      	movs	r2, #138	@ 0x8a
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3e:	4770      	bx	lr
 800dd40:	700a      	strb	r2, [r1, #0]
 800dd42:	2001      	movs	r0, #1
 800dd44:	4770      	bx	lr
	...

0800dd48 <_strtoll_l.constprop.0>:
 800dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4c:	b085      	sub	sp, #20
 800dd4e:	4690      	mov	r8, r2
 800dd50:	4a43      	ldr	r2, [pc, #268]	@ (800de60 <_strtoll_l.constprop.0+0x118>)
 800dd52:	9002      	str	r0, [sp, #8]
 800dd54:	4689      	mov	r9, r1
 800dd56:	461e      	mov	r6, r3
 800dd58:	460d      	mov	r5, r1
 800dd5a:	462b      	mov	r3, r5
 800dd5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd60:	5d17      	ldrb	r7, [r2, r4]
 800dd62:	f017 0708 	ands.w	r7, r7, #8
 800dd66:	d1f8      	bne.n	800dd5a <_strtoll_l.constprop.0+0x12>
 800dd68:	2c2d      	cmp	r4, #45	@ 0x2d
 800dd6a:	d149      	bne.n	800de00 <_strtoll_l.constprop.0+0xb8>
 800dd6c:	782c      	ldrb	r4, [r5, #0]
 800dd6e:	2701      	movs	r7, #1
 800dd70:	1c9d      	adds	r5, r3, #2
 800dd72:	f036 0310 	bics.w	r3, r6, #16
 800dd76:	d109      	bne.n	800dd8c <_strtoll_l.constprop.0+0x44>
 800dd78:	2c30      	cmp	r4, #48	@ 0x30
 800dd7a:	d146      	bne.n	800de0a <_strtoll_l.constprop.0+0xc2>
 800dd7c:	782b      	ldrb	r3, [r5, #0]
 800dd7e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dd82:	2b58      	cmp	r3, #88	@ 0x58
 800dd84:	d141      	bne.n	800de0a <_strtoll_l.constprop.0+0xc2>
 800dd86:	786c      	ldrb	r4, [r5, #1]
 800dd88:	2610      	movs	r6, #16
 800dd8a:	3502      	adds	r5, #2
 800dd8c:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 800dd90:	f107 3bff 	add.w	fp, r7, #4294967295
 800dd94:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd98:	17f3      	asrs	r3, r6, #31
 800dd9a:	4632      	mov	r2, r6
 800dd9c:	4658      	mov	r0, fp
 800dd9e:	4651      	mov	r1, sl
 800dda0:	9303      	str	r3, [sp, #12]
 800dda2:	f7f2 ffa1 	bl	8000ce8 <__aeabi_uldivmod>
 800dda6:	9201      	str	r2, [sp, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	468e      	mov	lr, r1
 800ddac:	4684      	mov	ip, r0
 800ddae:	4611      	mov	r1, r2
 800ddb0:	4610      	mov	r0, r2
 800ddb2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800ddb6:	2b09      	cmp	r3, #9
 800ddb8:	d905      	bls.n	800ddc6 <_strtoll_l.constprop.0+0x7e>
 800ddba:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800ddbe:	2b19      	cmp	r3, #25
 800ddc0:	d82a      	bhi.n	800de18 <_strtoll_l.constprop.0+0xd0>
 800ddc2:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 800ddc6:	429e      	cmp	r6, r3
 800ddc8:	dd30      	ble.n	800de2c <_strtoll_l.constprop.0+0xe4>
 800ddca:	1c54      	adds	r4, r2, #1
 800ddcc:	d015      	beq.n	800ddfa <_strtoll_l.constprop.0+0xb2>
 800ddce:	4584      	cmp	ip, r0
 800ddd0:	eb7e 0201 	sbcs.w	r2, lr, r1
 800ddd4:	d327      	bcc.n	800de26 <_strtoll_l.constprop.0+0xde>
 800ddd6:	458e      	cmp	lr, r1
 800ddd8:	bf08      	it	eq
 800ddda:	4584      	cmpeq	ip, r0
 800dddc:	d102      	bne.n	800dde4 <_strtoll_l.constprop.0+0x9c>
 800ddde:	9a01      	ldr	r2, [sp, #4]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	db20      	blt.n	800de26 <_strtoll_l.constprop.0+0xde>
 800dde4:	9a03      	ldr	r2, [sp, #12]
 800dde6:	4371      	muls	r1, r6
 800dde8:	fb00 1102 	mla	r1, r0, r2, r1
 800ddec:	fba6 0200 	umull	r0, r2, r6, r0
 800ddf0:	440a      	add	r2, r1
 800ddf2:	1818      	adds	r0, r3, r0
 800ddf4:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddfe:	e7d8      	b.n	800ddb2 <_strtoll_l.constprop.0+0x6a>
 800de00:	2c2b      	cmp	r4, #43	@ 0x2b
 800de02:	bf04      	itt	eq
 800de04:	782c      	ldrbeq	r4, [r5, #0]
 800de06:	1c9d      	addeq	r5, r3, #2
 800de08:	e7b3      	b.n	800dd72 <_strtoll_l.constprop.0+0x2a>
 800de0a:	2e00      	cmp	r6, #0
 800de0c:	d1be      	bne.n	800dd8c <_strtoll_l.constprop.0+0x44>
 800de0e:	2c30      	cmp	r4, #48	@ 0x30
 800de10:	bf0c      	ite	eq
 800de12:	2608      	moveq	r6, #8
 800de14:	260a      	movne	r6, #10
 800de16:	e7b9      	b.n	800dd8c <_strtoll_l.constprop.0+0x44>
 800de18:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 800de1c:	2b19      	cmp	r3, #25
 800de1e:	d805      	bhi.n	800de2c <_strtoll_l.constprop.0+0xe4>
 800de20:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 800de24:	e7cf      	b.n	800ddc6 <_strtoll_l.constprop.0+0x7e>
 800de26:	f04f 32ff 	mov.w	r2, #4294967295
 800de2a:	e7e6      	b.n	800ddfa <_strtoll_l.constprop.0+0xb2>
 800de2c:	1c53      	adds	r3, r2, #1
 800de2e:	d10a      	bne.n	800de46 <_strtoll_l.constprop.0+0xfe>
 800de30:	9a02      	ldr	r2, [sp, #8]
 800de32:	2322      	movs	r3, #34	@ 0x22
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	4658      	mov	r0, fp
 800de38:	4651      	mov	r1, sl
 800de3a:	f1b8 0f00 	cmp.w	r8, #0
 800de3e:	d10a      	bne.n	800de56 <_strtoll_l.constprop.0+0x10e>
 800de40:	b005      	add	sp, #20
 800de42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de46:	b117      	cbz	r7, 800de4e <_strtoll_l.constprop.0+0x106>
 800de48:	4240      	negs	r0, r0
 800de4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800de4e:	f1b8 0f00 	cmp.w	r8, #0
 800de52:	d0f5      	beq.n	800de40 <_strtoll_l.constprop.0+0xf8>
 800de54:	b10a      	cbz	r2, 800de5a <_strtoll_l.constprop.0+0x112>
 800de56:	f105 39ff 	add.w	r9, r5, #4294967295
 800de5a:	f8c8 9000 	str.w	r9, [r8]
 800de5e:	e7ef      	b.n	800de40 <_strtoll_l.constprop.0+0xf8>
 800de60:	0800fd29 	.word	0x0800fd29

0800de64 <_strtoll_r>:
 800de64:	f7ff bf70 	b.w	800dd48 <_strtoll_l.constprop.0>

0800de68 <_strtoull_l.constprop.0>:
 800de68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	4691      	mov	r9, r2
 800de6e:	4a48      	ldr	r2, [pc, #288]	@ (800df90 <_strtoull_l.constprop.0+0x128>)
 800de70:	9001      	str	r0, [sp, #4]
 800de72:	468a      	mov	sl, r1
 800de74:	461e      	mov	r6, r3
 800de76:	460d      	mov	r5, r1
 800de78:	462b      	mov	r3, r5
 800de7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de7e:	5d17      	ldrb	r7, [r2, r4]
 800de80:	f017 0708 	ands.w	r7, r7, #8
 800de84:	d1f8      	bne.n	800de78 <_strtoull_l.constprop.0+0x10>
 800de86:	2c2d      	cmp	r4, #45	@ 0x2d
 800de88:	d14a      	bne.n	800df20 <_strtoull_l.constprop.0+0xb8>
 800de8a:	782c      	ldrb	r4, [r5, #0]
 800de8c:	2701      	movs	r7, #1
 800de8e:	1c9d      	adds	r5, r3, #2
 800de90:	f036 0310 	bics.w	r3, r6, #16
 800de94:	d109      	bne.n	800deaa <_strtoull_l.constprop.0+0x42>
 800de96:	2c30      	cmp	r4, #48	@ 0x30
 800de98:	d147      	bne.n	800df2a <_strtoull_l.constprop.0+0xc2>
 800de9a:	782b      	ldrb	r3, [r5, #0]
 800de9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dea0:	2b58      	cmp	r3, #88	@ 0x58
 800dea2:	d142      	bne.n	800df2a <_strtoull_l.constprop.0+0xc2>
 800dea4:	786c      	ldrb	r4, [r5, #1]
 800dea6:	2610      	movs	r6, #16
 800dea8:	3502      	adds	r5, #2
 800deaa:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800deae:	4632      	mov	r2, r6
 800deb0:	465b      	mov	r3, fp
 800deb2:	f04f 30ff 	mov.w	r0, #4294967295
 800deb6:	f04f 31ff 	mov.w	r1, #4294967295
 800deba:	f7f2 ff15 	bl	8000ce8 <__aeabi_uldivmod>
 800debe:	4632      	mov	r2, r6
 800dec0:	9000      	str	r0, [sp, #0]
 800dec2:	4688      	mov	r8, r1
 800dec4:	465b      	mov	r3, fp
 800dec6:	f04f 30ff 	mov.w	r0, #4294967295
 800deca:	f04f 31ff 	mov.w	r1, #4294967295
 800dece:	f7f2 ff0b 	bl	8000ce8 <__aeabi_uldivmod>
 800ded2:	2300      	movs	r3, #0
 800ded4:	4618      	mov	r0, r3
 800ded6:	4619      	mov	r1, r3
 800ded8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800dedc:	f1bc 0f09 	cmp.w	ip, #9
 800dee0:	d82a      	bhi.n	800df38 <_strtoull_l.constprop.0+0xd0>
 800dee2:	4664      	mov	r4, ip
 800dee4:	42a6      	cmp	r6, r4
 800dee6:	dd38      	ble.n	800df5a <_strtoull_l.constprop.0+0xf2>
 800dee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deec:	d015      	beq.n	800df1a <_strtoull_l.constprop.0+0xb2>
 800deee:	9b00      	ldr	r3, [sp, #0]
 800def0:	4283      	cmp	r3, r0
 800def2:	eb78 0301 	sbcs.w	r3, r8, r1
 800def6:	d32d      	bcc.n	800df54 <_strtoull_l.constprop.0+0xec>
 800def8:	9b00      	ldr	r3, [sp, #0]
 800defa:	4588      	cmp	r8, r1
 800defc:	bf08      	it	eq
 800defe:	4283      	cmpeq	r3, r0
 800df00:	d101      	bne.n	800df06 <_strtoull_l.constprop.0+0x9e>
 800df02:	42a2      	cmp	r2, r4
 800df04:	db26      	blt.n	800df54 <_strtoull_l.constprop.0+0xec>
 800df06:	4371      	muls	r1, r6
 800df08:	fb00 110b 	mla	r1, r0, fp, r1
 800df0c:	fba6 0300 	umull	r0, r3, r6, r0
 800df10:	4419      	add	r1, r3
 800df12:	1820      	adds	r0, r4, r0
 800df14:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800df18:	2301      	movs	r3, #1
 800df1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df1e:	e7db      	b.n	800ded8 <_strtoull_l.constprop.0+0x70>
 800df20:	2c2b      	cmp	r4, #43	@ 0x2b
 800df22:	bf04      	itt	eq
 800df24:	782c      	ldrbeq	r4, [r5, #0]
 800df26:	1c9d      	addeq	r5, r3, #2
 800df28:	e7b2      	b.n	800de90 <_strtoull_l.constprop.0+0x28>
 800df2a:	2e00      	cmp	r6, #0
 800df2c:	d1bd      	bne.n	800deaa <_strtoull_l.constprop.0+0x42>
 800df2e:	2c30      	cmp	r4, #48	@ 0x30
 800df30:	bf0c      	ite	eq
 800df32:	2608      	moveq	r6, #8
 800df34:	260a      	movne	r6, #10
 800df36:	e7b8      	b.n	800deaa <_strtoull_l.constprop.0+0x42>
 800df38:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800df3c:	f1bc 0f19 	cmp.w	ip, #25
 800df40:	d801      	bhi.n	800df46 <_strtoull_l.constprop.0+0xde>
 800df42:	3c37      	subs	r4, #55	@ 0x37
 800df44:	e7ce      	b.n	800dee4 <_strtoull_l.constprop.0+0x7c>
 800df46:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800df4a:	f1bc 0f19 	cmp.w	ip, #25
 800df4e:	d804      	bhi.n	800df5a <_strtoull_l.constprop.0+0xf2>
 800df50:	3c57      	subs	r4, #87	@ 0x57
 800df52:	e7c7      	b.n	800dee4 <_strtoull_l.constprop.0+0x7c>
 800df54:	f04f 33ff 	mov.w	r3, #4294967295
 800df58:	e7df      	b.n	800df1a <_strtoull_l.constprop.0+0xb2>
 800df5a:	1c5a      	adds	r2, r3, #1
 800df5c:	d10a      	bne.n	800df74 <_strtoull_l.constprop.0+0x10c>
 800df5e:	9901      	ldr	r1, [sp, #4]
 800df60:	2222      	movs	r2, #34	@ 0x22
 800df62:	600a      	str	r2, [r1, #0]
 800df64:	4618      	mov	r0, r3
 800df66:	4619      	mov	r1, r3
 800df68:	f1b9 0f00 	cmp.w	r9, #0
 800df6c:	d10a      	bne.n	800df84 <_strtoull_l.constprop.0+0x11c>
 800df6e:	b003      	add	sp, #12
 800df70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df74:	b117      	cbz	r7, 800df7c <_strtoull_l.constprop.0+0x114>
 800df76:	4240      	negs	r0, r0
 800df78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800df7c:	f1b9 0f00 	cmp.w	r9, #0
 800df80:	d0f5      	beq.n	800df6e <_strtoull_l.constprop.0+0x106>
 800df82:	b10b      	cbz	r3, 800df88 <_strtoull_l.constprop.0+0x120>
 800df84:	f105 3aff 	add.w	sl, r5, #4294967295
 800df88:	f8c9 a000 	str.w	sl, [r9]
 800df8c:	e7ef      	b.n	800df6e <_strtoull_l.constprop.0+0x106>
 800df8e:	bf00      	nop
 800df90:	0800fd29 	.word	0x0800fd29

0800df94 <_strtoull_r>:
 800df94:	f7ff bf68 	b.w	800de68 <_strtoull_l.constprop.0>

0800df98 <_mbrtowc_r>:
 800df98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df9a:	4c0a      	ldr	r4, [pc, #40]	@ (800dfc4 <_mbrtowc_r+0x2c>)
 800df9c:	9e08      	ldr	r6, [sp, #32]
 800df9e:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 800dfa2:	9600      	str	r6, [sp, #0]
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	4614      	mov	r4, r2
 800dfa8:	b912      	cbnz	r2, 800dfb0 <_mbrtowc_r+0x18>
 800dfaa:	4a07      	ldr	r2, [pc, #28]	@ (800dfc8 <_mbrtowc_r+0x30>)
 800dfac:	2301      	movs	r3, #1
 800dfae:	4621      	mov	r1, r4
 800dfb0:	47b8      	blx	r7
 800dfb2:	1c43      	adds	r3, r0, #1
 800dfb4:	bf01      	itttt	eq
 800dfb6:	2300      	moveq	r3, #0
 800dfb8:	6033      	streq	r3, [r6, #0]
 800dfba:	238a      	moveq	r3, #138	@ 0x8a
 800dfbc:	602b      	streq	r3, [r5, #0]
 800dfbe:	b003      	add	sp, #12
 800dfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	2000058c 	.word	0x2000058c
 800dfc8:	0800fe64 	.word	0x0800fe64

0800dfcc <iswspace>:
 800dfcc:	2100      	movs	r1, #0
 800dfce:	f000 b801 	b.w	800dfd4 <iswspace_l>
	...

0800dfd4 <iswspace_l>:
 800dfd4:	28ff      	cmp	r0, #255	@ 0xff
 800dfd6:	bf9d      	ittte	ls
 800dfd8:	4b02      	ldrls	r3, [pc, #8]	@ (800dfe4 <iswspace_l+0x10>)
 800dfda:	5c18      	ldrbls	r0, [r3, r0]
 800dfdc:	f000 0008 	andls.w	r0, r0, #8
 800dfe0:	2000      	movhi	r0, #0
 800dfe2:	4770      	bx	lr
 800dfe4:	0800fd29 	.word	0x0800fd29

0800dfe8 <_sungetc_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	1c4b      	adds	r3, r1, #1
 800dfec:	4614      	mov	r4, r2
 800dfee:	d103      	bne.n	800dff8 <_sungetc_r+0x10>
 800dff0:	f04f 35ff 	mov.w	r5, #4294967295
 800dff4:	4628      	mov	r0, r5
 800dff6:	bd38      	pop	{r3, r4, r5, pc}
 800dff8:	8993      	ldrh	r3, [r2, #12]
 800dffa:	f023 0320 	bic.w	r3, r3, #32
 800dffe:	8193      	strh	r3, [r2, #12]
 800e000:	6853      	ldr	r3, [r2, #4]
 800e002:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e004:	b2cd      	uxtb	r5, r1
 800e006:	b18a      	cbz	r2, 800e02c <_sungetc_r+0x44>
 800e008:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e00a:	429a      	cmp	r2, r3
 800e00c:	dd08      	ble.n	800e020 <_sungetc_r+0x38>
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	1e5a      	subs	r2, r3, #1
 800e012:	6022      	str	r2, [r4, #0]
 800e014:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e018:	6863      	ldr	r3, [r4, #4]
 800e01a:	3301      	adds	r3, #1
 800e01c:	6063      	str	r3, [r4, #4]
 800e01e:	e7e9      	b.n	800dff4 <_sungetc_r+0xc>
 800e020:	4621      	mov	r1, r4
 800e022:	f000 f872 	bl	800e10a <__submore>
 800e026:	2800      	cmp	r0, #0
 800e028:	d0f1      	beq.n	800e00e <_sungetc_r+0x26>
 800e02a:	e7e1      	b.n	800dff0 <_sungetc_r+0x8>
 800e02c:	6921      	ldr	r1, [r4, #16]
 800e02e:	6822      	ldr	r2, [r4, #0]
 800e030:	b141      	cbz	r1, 800e044 <_sungetc_r+0x5c>
 800e032:	4291      	cmp	r1, r2
 800e034:	d206      	bcs.n	800e044 <_sungetc_r+0x5c>
 800e036:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e03a:	42a9      	cmp	r1, r5
 800e03c:	d102      	bne.n	800e044 <_sungetc_r+0x5c>
 800e03e:	3a01      	subs	r2, #1
 800e040:	6022      	str	r2, [r4, #0]
 800e042:	e7ea      	b.n	800e01a <_sungetc_r+0x32>
 800e044:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 800e048:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e04c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e04e:	2303      	movs	r3, #3
 800e050:	6363      	str	r3, [r4, #52]	@ 0x34
 800e052:	4623      	mov	r3, r4
 800e054:	f803 5f42 	strb.w	r5, [r3, #66]!
 800e058:	6023      	str	r3, [r4, #0]
 800e05a:	2301      	movs	r3, #1
 800e05c:	e7de      	b.n	800e01c <_sungetc_r+0x34>

0800e05e <__ssrefill_r>:
 800e05e:	b510      	push	{r4, lr}
 800e060:	460c      	mov	r4, r1
 800e062:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800e064:	b169      	cbz	r1, 800e082 <__ssrefill_r+0x24>
 800e066:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e06a:	4299      	cmp	r1, r3
 800e06c:	d001      	beq.n	800e072 <__ssrefill_r+0x14>
 800e06e:	f7fa fa97 	bl	80085a0 <_free_r>
 800e072:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e074:	6063      	str	r3, [r4, #4]
 800e076:	2000      	movs	r0, #0
 800e078:	6320      	str	r0, [r4, #48]	@ 0x30
 800e07a:	b113      	cbz	r3, 800e082 <__ssrefill_r+0x24>
 800e07c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e07e:	6023      	str	r3, [r4, #0]
 800e080:	bd10      	pop	{r4, pc}
 800e082:	6923      	ldr	r3, [r4, #16]
 800e084:	6023      	str	r3, [r4, #0]
 800e086:	2300      	movs	r3, #0
 800e088:	6063      	str	r3, [r4, #4]
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	f043 0320 	orr.w	r3, r3, #32
 800e090:	81a3      	strh	r3, [r4, #12]
 800e092:	f04f 30ff 	mov.w	r0, #4294967295
 800e096:	e7f3      	b.n	800e080 <__ssrefill_r+0x22>

0800e098 <_sfread_r>:
 800e098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e09c:	461f      	mov	r7, r3
 800e09e:	4613      	mov	r3, r2
 800e0a0:	437b      	muls	r3, r7
 800e0a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800e0a4:	9000      	str	r0, [sp, #0]
 800e0a6:	4688      	mov	r8, r1
 800e0a8:	4691      	mov	r9, r2
 800e0aa:	d028      	beq.n	800e0fe <_sfread_r+0x66>
 800e0ac:	461e      	mov	r6, r3
 800e0ae:	f04f 0b00 	mov.w	fp, #0
 800e0b2:	e9d4 1500 	ldrd	r1, r5, [r4]
 800e0b6:	42b5      	cmp	r5, r6
 800e0b8:	d30b      	bcc.n	800e0d2 <_sfread_r+0x3a>
 800e0ba:	4632      	mov	r2, r6
 800e0bc:	4640      	mov	r0, r8
 800e0be:	f7fa f9fb 	bl	80084b8 <memcpy>
 800e0c2:	6862      	ldr	r2, [r4, #4]
 800e0c4:	6821      	ldr	r1, [r4, #0]
 800e0c6:	1b92      	subs	r2, r2, r6
 800e0c8:	4431      	add	r1, r6
 800e0ca:	6062      	str	r2, [r4, #4]
 800e0cc:	6021      	str	r1, [r4, #0]
 800e0ce:	463b      	mov	r3, r7
 800e0d0:	e015      	b.n	800e0fe <_sfread_r+0x66>
 800e0d2:	462a      	mov	r2, r5
 800e0d4:	4640      	mov	r0, r8
 800e0d6:	9301      	str	r3, [sp, #4]
 800e0d8:	f7fa f9ee 	bl	80084b8 <memcpy>
 800e0dc:	6822      	ldr	r2, [r4, #0]
 800e0de:	9800      	ldr	r0, [sp, #0]
 800e0e0:	442a      	add	r2, r5
 800e0e2:	e9c4 2b00 	strd	r2, fp, [r4]
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	f7ff ffb9 	bl	800e05e <__ssrefill_r>
 800e0ec:	44a8      	add	r8, r5
 800e0ee:	9b01      	ldr	r3, [sp, #4]
 800e0f0:	eba6 0a05 	sub.w	sl, r6, r5
 800e0f4:	b138      	cbz	r0, 800e106 <_sfread_r+0x6e>
 800e0f6:	441d      	add	r5, r3
 800e0f8:	1bad      	subs	r5, r5, r6
 800e0fa:	fbb5 f3f9 	udiv	r3, r5, r9
 800e0fe:	4618      	mov	r0, r3
 800e100:	b003      	add	sp, #12
 800e102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e106:	4656      	mov	r6, sl
 800e108:	e7d3      	b.n	800e0b2 <_sfread_r+0x1a>

0800e10a <__submore>:
 800e10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e10e:	460c      	mov	r4, r1
 800e110:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800e112:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e116:	4299      	cmp	r1, r3
 800e118:	d11d      	bne.n	800e156 <__submore+0x4c>
 800e11a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e11e:	f7fa faff 	bl	8008720 <_malloc_r>
 800e122:	b918      	cbnz	r0, 800e12c <__submore+0x22>
 800e124:	f04f 30ff 	mov.w	r0, #4294967295
 800e128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e12c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e130:	6363      	str	r3, [r4, #52]	@ 0x34
 800e132:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800e136:	6320      	str	r0, [r4, #48]	@ 0x30
 800e138:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e13c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800e140:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e144:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e148:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e14c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e150:	6020      	str	r0, [r4, #0]
 800e152:	2000      	movs	r0, #0
 800e154:	e7e8      	b.n	800e128 <__submore+0x1e>
 800e156:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800e158:	0077      	lsls	r7, r6, #1
 800e15a:	463a      	mov	r2, r7
 800e15c:	f7fa fd26 	bl	8008bac <_realloc_r>
 800e160:	4605      	mov	r5, r0
 800e162:	2800      	cmp	r0, #0
 800e164:	d0de      	beq.n	800e124 <__submore+0x1a>
 800e166:	eb00 0806 	add.w	r8, r0, r6
 800e16a:	4601      	mov	r1, r0
 800e16c:	4632      	mov	r2, r6
 800e16e:	4640      	mov	r0, r8
 800e170:	f7fa f9a2 	bl	80084b8 <memcpy>
 800e174:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 800e178:	f8c4 8000 	str.w	r8, [r4]
 800e17c:	e7e9      	b.n	800e152 <__submore+0x48>

0800e17e <strncmp>:
 800e17e:	b510      	push	{r4, lr}
 800e180:	b16a      	cbz	r2, 800e19e <strncmp+0x20>
 800e182:	3901      	subs	r1, #1
 800e184:	1884      	adds	r4, r0, r2
 800e186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e18a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e18e:	429a      	cmp	r2, r3
 800e190:	d103      	bne.n	800e19a <strncmp+0x1c>
 800e192:	42a0      	cmp	r0, r4
 800e194:	d001      	beq.n	800e19a <strncmp+0x1c>
 800e196:	2a00      	cmp	r2, #0
 800e198:	d1f5      	bne.n	800e186 <strncmp+0x8>
 800e19a:	1ad0      	subs	r0, r2, r3
 800e19c:	bd10      	pop	{r4, pc}
 800e19e:	4610      	mov	r0, r2
 800e1a0:	e7fc      	b.n	800e19c <strncmp+0x1e>
 800e1a2:	0000      	movs	r0, r0
 800e1a4:	0000      	movs	r0, r0
	...

0800e1a8 <nan>:
 800e1a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e1b0 <nan+0x8>
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	00000000 	.word	0x00000000
 800e1b4:	7ff80000 	.word	0x7ff80000

0800e1b8 <__assert_func>:
 800e1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1ba:	4614      	mov	r4, r2
 800e1bc:	461a      	mov	r2, r3
 800e1be:	4b09      	ldr	r3, [pc, #36]	@ (800e1e4 <__assert_func+0x2c>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	68d8      	ldr	r0, [r3, #12]
 800e1c6:	b954      	cbnz	r4, 800e1de <__assert_func+0x26>
 800e1c8:	4b07      	ldr	r3, [pc, #28]	@ (800e1e8 <__assert_func+0x30>)
 800e1ca:	461c      	mov	r4, r3
 800e1cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1d0:	9100      	str	r1, [sp, #0]
 800e1d2:	462b      	mov	r3, r5
 800e1d4:	4905      	ldr	r1, [pc, #20]	@ (800e1ec <__assert_func+0x34>)
 800e1d6:	f000 fb7b 	bl	800e8d0 <fiprintf>
 800e1da:	f001 fa91 	bl	800f700 <abort>
 800e1de:	4b04      	ldr	r3, [pc, #16]	@ (800e1f0 <__assert_func+0x38>)
 800e1e0:	e7f4      	b.n	800e1cc <__assert_func+0x14>
 800e1e2:	bf00      	nop
 800e1e4:	20000050 	.word	0x20000050
 800e1e8:	0800fe64 	.word	0x0800fe64
 800e1ec:	0800fe36 	.word	0x0800fe36
 800e1f0:	0800fe29 	.word	0x0800fe29

0800e1f4 <_calloc_r>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	fba1 1502 	umull	r1, r5, r1, r2
 800e1fa:	b935      	cbnz	r5, 800e20a <_calloc_r+0x16>
 800e1fc:	f7fa fa90 	bl	8008720 <_malloc_r>
 800e200:	4604      	mov	r4, r0
 800e202:	b938      	cbnz	r0, 800e214 <_calloc_r+0x20>
 800e204:	2400      	movs	r4, #0
 800e206:	4620      	mov	r0, r4
 800e208:	bd38      	pop	{r3, r4, r5, pc}
 800e20a:	f7fa f927 	bl	800845c <__errno>
 800e20e:	230c      	movs	r3, #12
 800e210:	6003      	str	r3, [r0, #0]
 800e212:	e7f7      	b.n	800e204 <_calloc_r+0x10>
 800e214:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e218:	f022 0203 	bic.w	r2, r2, #3
 800e21c:	3a04      	subs	r2, #4
 800e21e:	2a24      	cmp	r2, #36	@ 0x24
 800e220:	d819      	bhi.n	800e256 <_calloc_r+0x62>
 800e222:	2a13      	cmp	r2, #19
 800e224:	d915      	bls.n	800e252 <_calloc_r+0x5e>
 800e226:	2a1b      	cmp	r2, #27
 800e228:	e9c0 5500 	strd	r5, r5, [r0]
 800e22c:	d806      	bhi.n	800e23c <_calloc_r+0x48>
 800e22e:	f100 0308 	add.w	r3, r0, #8
 800e232:	2200      	movs	r2, #0
 800e234:	e9c3 2200 	strd	r2, r2, [r3]
 800e238:	609a      	str	r2, [r3, #8]
 800e23a:	e7e4      	b.n	800e206 <_calloc_r+0x12>
 800e23c:	2a24      	cmp	r2, #36	@ 0x24
 800e23e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800e242:	bf11      	iteee	ne
 800e244:	f100 0310 	addne.w	r3, r0, #16
 800e248:	6105      	streq	r5, [r0, #16]
 800e24a:	f100 0318 	addeq.w	r3, r0, #24
 800e24e:	6145      	streq	r5, [r0, #20]
 800e250:	e7ef      	b.n	800e232 <_calloc_r+0x3e>
 800e252:	4603      	mov	r3, r0
 800e254:	e7ed      	b.n	800e232 <_calloc_r+0x3e>
 800e256:	4629      	mov	r1, r5
 800e258:	f7fa f89b 	bl	8008392 <memset>
 800e25c:	e7d3      	b.n	800e206 <_calloc_r+0x12>

0800e25e <rshift>:
 800e25e:	6903      	ldr	r3, [r0, #16]
 800e260:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e268:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e26c:	f100 0414 	add.w	r4, r0, #20
 800e270:	dd45      	ble.n	800e2fe <rshift+0xa0>
 800e272:	f011 011f 	ands.w	r1, r1, #31
 800e276:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e27a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e27e:	d10c      	bne.n	800e29a <rshift+0x3c>
 800e280:	f100 0710 	add.w	r7, r0, #16
 800e284:	4629      	mov	r1, r5
 800e286:	42b1      	cmp	r1, r6
 800e288:	d334      	bcc.n	800e2f4 <rshift+0x96>
 800e28a:	1a9b      	subs	r3, r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	1eea      	subs	r2, r5, #3
 800e290:	4296      	cmp	r6, r2
 800e292:	bf38      	it	cc
 800e294:	2300      	movcc	r3, #0
 800e296:	4423      	add	r3, r4
 800e298:	e015      	b.n	800e2c6 <rshift+0x68>
 800e29a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e29e:	f1c1 0820 	rsb	r8, r1, #32
 800e2a2:	40cf      	lsrs	r7, r1
 800e2a4:	f105 0e04 	add.w	lr, r5, #4
 800e2a8:	46a1      	mov	r9, r4
 800e2aa:	4576      	cmp	r6, lr
 800e2ac:	46f4      	mov	ip, lr
 800e2ae:	d815      	bhi.n	800e2dc <rshift+0x7e>
 800e2b0:	1a9a      	subs	r2, r3, r2
 800e2b2:	0092      	lsls	r2, r2, #2
 800e2b4:	3a04      	subs	r2, #4
 800e2b6:	3501      	adds	r5, #1
 800e2b8:	42ae      	cmp	r6, r5
 800e2ba:	bf38      	it	cc
 800e2bc:	2200      	movcc	r2, #0
 800e2be:	18a3      	adds	r3, r4, r2
 800e2c0:	50a7      	str	r7, [r4, r2]
 800e2c2:	b107      	cbz	r7, 800e2c6 <rshift+0x68>
 800e2c4:	3304      	adds	r3, #4
 800e2c6:	1b1a      	subs	r2, r3, r4
 800e2c8:	42a3      	cmp	r3, r4
 800e2ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e2ce:	bf08      	it	eq
 800e2d0:	2300      	moveq	r3, #0
 800e2d2:	6102      	str	r2, [r0, #16]
 800e2d4:	bf08      	it	eq
 800e2d6:	6143      	streq	r3, [r0, #20]
 800e2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2dc:	f8dc c000 	ldr.w	ip, [ip]
 800e2e0:	fa0c fc08 	lsl.w	ip, ip, r8
 800e2e4:	ea4c 0707 	orr.w	r7, ip, r7
 800e2e8:	f849 7b04 	str.w	r7, [r9], #4
 800e2ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2f0:	40cf      	lsrs	r7, r1
 800e2f2:	e7da      	b.n	800e2aa <rshift+0x4c>
 800e2f4:	f851 cb04 	ldr.w	ip, [r1], #4
 800e2f8:	f847 cf04 	str.w	ip, [r7, #4]!
 800e2fc:	e7c3      	b.n	800e286 <rshift+0x28>
 800e2fe:	4623      	mov	r3, r4
 800e300:	e7e1      	b.n	800e2c6 <rshift+0x68>

0800e302 <__hexdig_fun>:
 800e302:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e306:	2b09      	cmp	r3, #9
 800e308:	d802      	bhi.n	800e310 <__hexdig_fun+0xe>
 800e30a:	3820      	subs	r0, #32
 800e30c:	b2c0      	uxtb	r0, r0
 800e30e:	4770      	bx	lr
 800e310:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e314:	2b05      	cmp	r3, #5
 800e316:	d801      	bhi.n	800e31c <__hexdig_fun+0x1a>
 800e318:	3847      	subs	r0, #71	@ 0x47
 800e31a:	e7f7      	b.n	800e30c <__hexdig_fun+0xa>
 800e31c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e320:	2b05      	cmp	r3, #5
 800e322:	d801      	bhi.n	800e328 <__hexdig_fun+0x26>
 800e324:	3827      	subs	r0, #39	@ 0x27
 800e326:	e7f1      	b.n	800e30c <__hexdig_fun+0xa>
 800e328:	2000      	movs	r0, #0
 800e32a:	4770      	bx	lr

0800e32c <__gethex>:
 800e32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e330:	b085      	sub	sp, #20
 800e332:	468a      	mov	sl, r1
 800e334:	9302      	str	r3, [sp, #8]
 800e336:	680b      	ldr	r3, [r1, #0]
 800e338:	9001      	str	r0, [sp, #4]
 800e33a:	4690      	mov	r8, r2
 800e33c:	1c9c      	adds	r4, r3, #2
 800e33e:	46a1      	mov	r9, r4
 800e340:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e344:	2830      	cmp	r0, #48	@ 0x30
 800e346:	d0fa      	beq.n	800e33e <__gethex+0x12>
 800e348:	eba9 0303 	sub.w	r3, r9, r3
 800e34c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e350:	f7ff ffd7 	bl	800e302 <__hexdig_fun>
 800e354:	4605      	mov	r5, r0
 800e356:	2800      	cmp	r0, #0
 800e358:	d168      	bne.n	800e42c <__gethex+0x100>
 800e35a:	49a0      	ldr	r1, [pc, #640]	@ (800e5dc <__gethex+0x2b0>)
 800e35c:	2201      	movs	r2, #1
 800e35e:	4648      	mov	r0, r9
 800e360:	f7ff ff0d 	bl	800e17e <strncmp>
 800e364:	4607      	mov	r7, r0
 800e366:	2800      	cmp	r0, #0
 800e368:	d167      	bne.n	800e43a <__gethex+0x10e>
 800e36a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e36e:	4626      	mov	r6, r4
 800e370:	f7ff ffc7 	bl	800e302 <__hexdig_fun>
 800e374:	2800      	cmp	r0, #0
 800e376:	d062      	beq.n	800e43e <__gethex+0x112>
 800e378:	4623      	mov	r3, r4
 800e37a:	7818      	ldrb	r0, [r3, #0]
 800e37c:	2830      	cmp	r0, #48	@ 0x30
 800e37e:	4699      	mov	r9, r3
 800e380:	f103 0301 	add.w	r3, r3, #1
 800e384:	d0f9      	beq.n	800e37a <__gethex+0x4e>
 800e386:	f7ff ffbc 	bl	800e302 <__hexdig_fun>
 800e38a:	fab0 f580 	clz	r5, r0
 800e38e:	096d      	lsrs	r5, r5, #5
 800e390:	f04f 0b01 	mov.w	fp, #1
 800e394:	464a      	mov	r2, r9
 800e396:	4616      	mov	r6, r2
 800e398:	3201      	adds	r2, #1
 800e39a:	7830      	ldrb	r0, [r6, #0]
 800e39c:	f7ff ffb1 	bl	800e302 <__hexdig_fun>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d1f8      	bne.n	800e396 <__gethex+0x6a>
 800e3a4:	498d      	ldr	r1, [pc, #564]	@ (800e5dc <__gethex+0x2b0>)
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	f7ff fee8 	bl	800e17e <strncmp>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d13f      	bne.n	800e432 <__gethex+0x106>
 800e3b2:	b944      	cbnz	r4, 800e3c6 <__gethex+0x9a>
 800e3b4:	1c74      	adds	r4, r6, #1
 800e3b6:	4622      	mov	r2, r4
 800e3b8:	4616      	mov	r6, r2
 800e3ba:	3201      	adds	r2, #1
 800e3bc:	7830      	ldrb	r0, [r6, #0]
 800e3be:	f7ff ffa0 	bl	800e302 <__hexdig_fun>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	d1f8      	bne.n	800e3b8 <__gethex+0x8c>
 800e3c6:	1ba4      	subs	r4, r4, r6
 800e3c8:	00a7      	lsls	r7, r4, #2
 800e3ca:	7833      	ldrb	r3, [r6, #0]
 800e3cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e3d0:	2b50      	cmp	r3, #80	@ 0x50
 800e3d2:	d13e      	bne.n	800e452 <__gethex+0x126>
 800e3d4:	7873      	ldrb	r3, [r6, #1]
 800e3d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e3d8:	d033      	beq.n	800e442 <__gethex+0x116>
 800e3da:	2b2d      	cmp	r3, #45	@ 0x2d
 800e3dc:	d034      	beq.n	800e448 <__gethex+0x11c>
 800e3de:	1c71      	adds	r1, r6, #1
 800e3e0:	2400      	movs	r4, #0
 800e3e2:	7808      	ldrb	r0, [r1, #0]
 800e3e4:	f7ff ff8d 	bl	800e302 <__hexdig_fun>
 800e3e8:	1e43      	subs	r3, r0, #1
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	2b18      	cmp	r3, #24
 800e3ee:	d830      	bhi.n	800e452 <__gethex+0x126>
 800e3f0:	f1a0 0210 	sub.w	r2, r0, #16
 800e3f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e3f8:	f7ff ff83 	bl	800e302 <__hexdig_fun>
 800e3fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800e400:	fa5f fc8c 	uxtb.w	ip, ip
 800e404:	f1bc 0f18 	cmp.w	ip, #24
 800e408:	f04f 030a 	mov.w	r3, #10
 800e40c:	d91e      	bls.n	800e44c <__gethex+0x120>
 800e40e:	b104      	cbz	r4, 800e412 <__gethex+0xe6>
 800e410:	4252      	negs	r2, r2
 800e412:	4417      	add	r7, r2
 800e414:	f8ca 1000 	str.w	r1, [sl]
 800e418:	b1ed      	cbz	r5, 800e456 <__gethex+0x12a>
 800e41a:	f1bb 0f00 	cmp.w	fp, #0
 800e41e:	bf0c      	ite	eq
 800e420:	2506      	moveq	r5, #6
 800e422:	2500      	movne	r5, #0
 800e424:	4628      	mov	r0, r5
 800e426:	b005      	add	sp, #20
 800e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42c:	2500      	movs	r5, #0
 800e42e:	462c      	mov	r4, r5
 800e430:	e7b0      	b.n	800e394 <__gethex+0x68>
 800e432:	2c00      	cmp	r4, #0
 800e434:	d1c7      	bne.n	800e3c6 <__gethex+0x9a>
 800e436:	4627      	mov	r7, r4
 800e438:	e7c7      	b.n	800e3ca <__gethex+0x9e>
 800e43a:	464e      	mov	r6, r9
 800e43c:	462f      	mov	r7, r5
 800e43e:	2501      	movs	r5, #1
 800e440:	e7c3      	b.n	800e3ca <__gethex+0x9e>
 800e442:	2400      	movs	r4, #0
 800e444:	1cb1      	adds	r1, r6, #2
 800e446:	e7cc      	b.n	800e3e2 <__gethex+0xb6>
 800e448:	2401      	movs	r4, #1
 800e44a:	e7fb      	b.n	800e444 <__gethex+0x118>
 800e44c:	fb03 0002 	mla	r0, r3, r2, r0
 800e450:	e7ce      	b.n	800e3f0 <__gethex+0xc4>
 800e452:	4631      	mov	r1, r6
 800e454:	e7de      	b.n	800e414 <__gethex+0xe8>
 800e456:	eba6 0309 	sub.w	r3, r6, r9
 800e45a:	3b01      	subs	r3, #1
 800e45c:	4629      	mov	r1, r5
 800e45e:	2b07      	cmp	r3, #7
 800e460:	dc0a      	bgt.n	800e478 <__gethex+0x14c>
 800e462:	9801      	ldr	r0, [sp, #4]
 800e464:	f7fe f902 	bl	800c66c <_Balloc>
 800e468:	4604      	mov	r4, r0
 800e46a:	b940      	cbnz	r0, 800e47e <__gethex+0x152>
 800e46c:	4b5c      	ldr	r3, [pc, #368]	@ (800e5e0 <__gethex+0x2b4>)
 800e46e:	4602      	mov	r2, r0
 800e470:	21e4      	movs	r1, #228	@ 0xe4
 800e472:	485c      	ldr	r0, [pc, #368]	@ (800e5e4 <__gethex+0x2b8>)
 800e474:	f7ff fea0 	bl	800e1b8 <__assert_func>
 800e478:	3101      	adds	r1, #1
 800e47a:	105b      	asrs	r3, r3, #1
 800e47c:	e7ef      	b.n	800e45e <__gethex+0x132>
 800e47e:	f100 0a14 	add.w	sl, r0, #20
 800e482:	2300      	movs	r3, #0
 800e484:	4655      	mov	r5, sl
 800e486:	469b      	mov	fp, r3
 800e488:	45b1      	cmp	r9, r6
 800e48a:	d337      	bcc.n	800e4fc <__gethex+0x1d0>
 800e48c:	f845 bb04 	str.w	fp, [r5], #4
 800e490:	eba5 050a 	sub.w	r5, r5, sl
 800e494:	10ad      	asrs	r5, r5, #2
 800e496:	6125      	str	r5, [r4, #16]
 800e498:	4658      	mov	r0, fp
 800e49a:	f7fe f9a5 	bl	800c7e8 <__hi0bits>
 800e49e:	016d      	lsls	r5, r5, #5
 800e4a0:	f8d8 6000 	ldr.w	r6, [r8]
 800e4a4:	1a2d      	subs	r5, r5, r0
 800e4a6:	42b5      	cmp	r5, r6
 800e4a8:	dd54      	ble.n	800e554 <__gethex+0x228>
 800e4aa:	1bad      	subs	r5, r5, r6
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f7fe fd1f 	bl	800cef2 <__any_on>
 800e4b4:	4681      	mov	r9, r0
 800e4b6:	b178      	cbz	r0, 800e4d8 <__gethex+0x1ac>
 800e4b8:	1e6b      	subs	r3, r5, #1
 800e4ba:	1159      	asrs	r1, r3, #5
 800e4bc:	f003 021f 	and.w	r2, r3, #31
 800e4c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e4c4:	f04f 0901 	mov.w	r9, #1
 800e4c8:	fa09 f202 	lsl.w	r2, r9, r2
 800e4cc:	420a      	tst	r2, r1
 800e4ce:	d003      	beq.n	800e4d8 <__gethex+0x1ac>
 800e4d0:	454b      	cmp	r3, r9
 800e4d2:	dc36      	bgt.n	800e542 <__gethex+0x216>
 800e4d4:	f04f 0902 	mov.w	r9, #2
 800e4d8:	4629      	mov	r1, r5
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f7ff febf 	bl	800e25e <rshift>
 800e4e0:	442f      	add	r7, r5
 800e4e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4e6:	42bb      	cmp	r3, r7
 800e4e8:	da42      	bge.n	800e570 <__gethex+0x244>
 800e4ea:	9801      	ldr	r0, [sp, #4]
 800e4ec:	4621      	mov	r1, r4
 800e4ee:	f7fe f8e2 	bl	800c6b6 <_Bfree>
 800e4f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	25a3      	movs	r5, #163	@ 0xa3
 800e4fa:	e793      	b.n	800e424 <__gethex+0xf8>
 800e4fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e500:	2a2e      	cmp	r2, #46	@ 0x2e
 800e502:	d012      	beq.n	800e52a <__gethex+0x1fe>
 800e504:	2b20      	cmp	r3, #32
 800e506:	d104      	bne.n	800e512 <__gethex+0x1e6>
 800e508:	f845 bb04 	str.w	fp, [r5], #4
 800e50c:	f04f 0b00 	mov.w	fp, #0
 800e510:	465b      	mov	r3, fp
 800e512:	7830      	ldrb	r0, [r6, #0]
 800e514:	9303      	str	r3, [sp, #12]
 800e516:	f7ff fef4 	bl	800e302 <__hexdig_fun>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	f000 000f 	and.w	r0, r0, #15
 800e520:	4098      	lsls	r0, r3
 800e522:	ea4b 0b00 	orr.w	fp, fp, r0
 800e526:	3304      	adds	r3, #4
 800e528:	e7ae      	b.n	800e488 <__gethex+0x15c>
 800e52a:	45b1      	cmp	r9, r6
 800e52c:	d8ea      	bhi.n	800e504 <__gethex+0x1d8>
 800e52e:	492b      	ldr	r1, [pc, #172]	@ (800e5dc <__gethex+0x2b0>)
 800e530:	9303      	str	r3, [sp, #12]
 800e532:	2201      	movs	r2, #1
 800e534:	4630      	mov	r0, r6
 800e536:	f7ff fe22 	bl	800e17e <strncmp>
 800e53a:	9b03      	ldr	r3, [sp, #12]
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d1e1      	bne.n	800e504 <__gethex+0x1d8>
 800e540:	e7a2      	b.n	800e488 <__gethex+0x15c>
 800e542:	1ea9      	subs	r1, r5, #2
 800e544:	4620      	mov	r0, r4
 800e546:	f7fe fcd4 	bl	800cef2 <__any_on>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	d0c2      	beq.n	800e4d4 <__gethex+0x1a8>
 800e54e:	f04f 0903 	mov.w	r9, #3
 800e552:	e7c1      	b.n	800e4d8 <__gethex+0x1ac>
 800e554:	da09      	bge.n	800e56a <__gethex+0x23e>
 800e556:	1b75      	subs	r5, r6, r5
 800e558:	4621      	mov	r1, r4
 800e55a:	9801      	ldr	r0, [sp, #4]
 800e55c:	462a      	mov	r2, r5
 800e55e:	f7fe fa8f 	bl	800ca80 <__lshift>
 800e562:	1b7f      	subs	r7, r7, r5
 800e564:	4604      	mov	r4, r0
 800e566:	f100 0a14 	add.w	sl, r0, #20
 800e56a:	f04f 0900 	mov.w	r9, #0
 800e56e:	e7b8      	b.n	800e4e2 <__gethex+0x1b6>
 800e570:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e574:	42bd      	cmp	r5, r7
 800e576:	dd6f      	ble.n	800e658 <__gethex+0x32c>
 800e578:	1bed      	subs	r5, r5, r7
 800e57a:	42ae      	cmp	r6, r5
 800e57c:	dc34      	bgt.n	800e5e8 <__gethex+0x2bc>
 800e57e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e582:	2b02      	cmp	r3, #2
 800e584:	d022      	beq.n	800e5cc <__gethex+0x2a0>
 800e586:	2b03      	cmp	r3, #3
 800e588:	d024      	beq.n	800e5d4 <__gethex+0x2a8>
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d115      	bne.n	800e5ba <__gethex+0x28e>
 800e58e:	42ae      	cmp	r6, r5
 800e590:	d113      	bne.n	800e5ba <__gethex+0x28e>
 800e592:	2e01      	cmp	r6, #1
 800e594:	d10b      	bne.n	800e5ae <__gethex+0x282>
 800e596:	9a02      	ldr	r2, [sp, #8]
 800e598:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e59c:	6013      	str	r3, [r2, #0]
 800e59e:	2301      	movs	r3, #1
 800e5a0:	6123      	str	r3, [r4, #16]
 800e5a2:	f8ca 3000 	str.w	r3, [sl]
 800e5a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5a8:	2562      	movs	r5, #98	@ 0x62
 800e5aa:	601c      	str	r4, [r3, #0]
 800e5ac:	e73a      	b.n	800e424 <__gethex+0xf8>
 800e5ae:	1e71      	subs	r1, r6, #1
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f7fe fc9e 	bl	800cef2 <__any_on>
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	d1ed      	bne.n	800e596 <__gethex+0x26a>
 800e5ba:	9801      	ldr	r0, [sp, #4]
 800e5bc:	4621      	mov	r1, r4
 800e5be:	f7fe f87a 	bl	800c6b6 <_Bfree>
 800e5c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	6013      	str	r3, [r2, #0]
 800e5c8:	2550      	movs	r5, #80	@ 0x50
 800e5ca:	e72b      	b.n	800e424 <__gethex+0xf8>
 800e5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1f3      	bne.n	800e5ba <__gethex+0x28e>
 800e5d2:	e7e0      	b.n	800e596 <__gethex+0x26a>
 800e5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1dd      	bne.n	800e596 <__gethex+0x26a>
 800e5da:	e7ee      	b.n	800e5ba <__gethex+0x28e>
 800e5dc:	0800fb08 	.word	0x0800fb08
 800e5e0:	0800fb17 	.word	0x0800fb17
 800e5e4:	0800fe65 	.word	0x0800fe65
 800e5e8:	1e6f      	subs	r7, r5, #1
 800e5ea:	f1b9 0f00 	cmp.w	r9, #0
 800e5ee:	d130      	bne.n	800e652 <__gethex+0x326>
 800e5f0:	b127      	cbz	r7, 800e5fc <__gethex+0x2d0>
 800e5f2:	4639      	mov	r1, r7
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f7fe fc7c 	bl	800cef2 <__any_on>
 800e5fa:	4681      	mov	r9, r0
 800e5fc:	117a      	asrs	r2, r7, #5
 800e5fe:	2301      	movs	r3, #1
 800e600:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e604:	f007 071f 	and.w	r7, r7, #31
 800e608:	40bb      	lsls	r3, r7
 800e60a:	4213      	tst	r3, r2
 800e60c:	4629      	mov	r1, r5
 800e60e:	4620      	mov	r0, r4
 800e610:	bf18      	it	ne
 800e612:	f049 0902 	orrne.w	r9, r9, #2
 800e616:	f7ff fe22 	bl	800e25e <rshift>
 800e61a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e61e:	1b76      	subs	r6, r6, r5
 800e620:	2502      	movs	r5, #2
 800e622:	f1b9 0f00 	cmp.w	r9, #0
 800e626:	d047      	beq.n	800e6b8 <__gethex+0x38c>
 800e628:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e62c:	2b02      	cmp	r3, #2
 800e62e:	d015      	beq.n	800e65c <__gethex+0x330>
 800e630:	2b03      	cmp	r3, #3
 800e632:	d017      	beq.n	800e664 <__gethex+0x338>
 800e634:	2b01      	cmp	r3, #1
 800e636:	d109      	bne.n	800e64c <__gethex+0x320>
 800e638:	f019 0f02 	tst.w	r9, #2
 800e63c:	d006      	beq.n	800e64c <__gethex+0x320>
 800e63e:	f8da 3000 	ldr.w	r3, [sl]
 800e642:	ea49 0903 	orr.w	r9, r9, r3
 800e646:	f019 0f01 	tst.w	r9, #1
 800e64a:	d10e      	bne.n	800e66a <__gethex+0x33e>
 800e64c:	f045 0510 	orr.w	r5, r5, #16
 800e650:	e032      	b.n	800e6b8 <__gethex+0x38c>
 800e652:	f04f 0901 	mov.w	r9, #1
 800e656:	e7d1      	b.n	800e5fc <__gethex+0x2d0>
 800e658:	2501      	movs	r5, #1
 800e65a:	e7e2      	b.n	800e622 <__gethex+0x2f6>
 800e65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e65e:	f1c3 0301 	rsb	r3, r3, #1
 800e662:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e666:	2b00      	cmp	r3, #0
 800e668:	d0f0      	beq.n	800e64c <__gethex+0x320>
 800e66a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e66e:	f104 0314 	add.w	r3, r4, #20
 800e672:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e676:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e67a:	f04f 0c00 	mov.w	ip, #0
 800e67e:	4618      	mov	r0, r3
 800e680:	f853 2b04 	ldr.w	r2, [r3], #4
 800e684:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e688:	d01b      	beq.n	800e6c2 <__gethex+0x396>
 800e68a:	3201      	adds	r2, #1
 800e68c:	6002      	str	r2, [r0, #0]
 800e68e:	2d02      	cmp	r5, #2
 800e690:	f104 0314 	add.w	r3, r4, #20
 800e694:	d13c      	bne.n	800e710 <__gethex+0x3e4>
 800e696:	f8d8 2000 	ldr.w	r2, [r8]
 800e69a:	3a01      	subs	r2, #1
 800e69c:	42b2      	cmp	r2, r6
 800e69e:	d109      	bne.n	800e6b4 <__gethex+0x388>
 800e6a0:	1171      	asrs	r1, r6, #5
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6a8:	f006 061f 	and.w	r6, r6, #31
 800e6ac:	fa02 f606 	lsl.w	r6, r2, r6
 800e6b0:	421e      	tst	r6, r3
 800e6b2:	d13a      	bne.n	800e72a <__gethex+0x3fe>
 800e6b4:	f045 0520 	orr.w	r5, r5, #32
 800e6b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6ba:	601c      	str	r4, [r3, #0]
 800e6bc:	9b02      	ldr	r3, [sp, #8]
 800e6be:	601f      	str	r7, [r3, #0]
 800e6c0:	e6b0      	b.n	800e424 <__gethex+0xf8>
 800e6c2:	4299      	cmp	r1, r3
 800e6c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e6c8:	d8d9      	bhi.n	800e67e <__gethex+0x352>
 800e6ca:	68a3      	ldr	r3, [r4, #8]
 800e6cc:	459b      	cmp	fp, r3
 800e6ce:	db17      	blt.n	800e700 <__gethex+0x3d4>
 800e6d0:	6861      	ldr	r1, [r4, #4]
 800e6d2:	9801      	ldr	r0, [sp, #4]
 800e6d4:	3101      	adds	r1, #1
 800e6d6:	f7fd ffc9 	bl	800c66c <_Balloc>
 800e6da:	4681      	mov	r9, r0
 800e6dc:	b918      	cbnz	r0, 800e6e6 <__gethex+0x3ba>
 800e6de:	4b1a      	ldr	r3, [pc, #104]	@ (800e748 <__gethex+0x41c>)
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	2184      	movs	r1, #132	@ 0x84
 800e6e4:	e6c5      	b.n	800e472 <__gethex+0x146>
 800e6e6:	6922      	ldr	r2, [r4, #16]
 800e6e8:	3202      	adds	r2, #2
 800e6ea:	f104 010c 	add.w	r1, r4, #12
 800e6ee:	0092      	lsls	r2, r2, #2
 800e6f0:	300c      	adds	r0, #12
 800e6f2:	f7f9 fee1 	bl	80084b8 <memcpy>
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	9801      	ldr	r0, [sp, #4]
 800e6fa:	f7fd ffdc 	bl	800c6b6 <_Bfree>
 800e6fe:	464c      	mov	r4, r9
 800e700:	6923      	ldr	r3, [r4, #16]
 800e702:	1c5a      	adds	r2, r3, #1
 800e704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e708:	6122      	str	r2, [r4, #16]
 800e70a:	2201      	movs	r2, #1
 800e70c:	615a      	str	r2, [r3, #20]
 800e70e:	e7be      	b.n	800e68e <__gethex+0x362>
 800e710:	6922      	ldr	r2, [r4, #16]
 800e712:	455a      	cmp	r2, fp
 800e714:	dd0b      	ble.n	800e72e <__gethex+0x402>
 800e716:	2101      	movs	r1, #1
 800e718:	4620      	mov	r0, r4
 800e71a:	f7ff fda0 	bl	800e25e <rshift>
 800e71e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e722:	3701      	adds	r7, #1
 800e724:	42bb      	cmp	r3, r7
 800e726:	f6ff aee0 	blt.w	800e4ea <__gethex+0x1be>
 800e72a:	2501      	movs	r5, #1
 800e72c:	e7c2      	b.n	800e6b4 <__gethex+0x388>
 800e72e:	f016 061f 	ands.w	r6, r6, #31
 800e732:	d0fa      	beq.n	800e72a <__gethex+0x3fe>
 800e734:	4453      	add	r3, sl
 800e736:	f1c6 0620 	rsb	r6, r6, #32
 800e73a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e73e:	f7fe f853 	bl	800c7e8 <__hi0bits>
 800e742:	42b0      	cmp	r0, r6
 800e744:	dbe7      	blt.n	800e716 <__gethex+0x3ea>
 800e746:	e7f0      	b.n	800e72a <__gethex+0x3fe>
 800e748:	0800fb17 	.word	0x0800fb17

0800e74c <L_shift>:
 800e74c:	f1c2 0208 	rsb	r2, r2, #8
 800e750:	0092      	lsls	r2, r2, #2
 800e752:	b570      	push	{r4, r5, r6, lr}
 800e754:	f1c2 0620 	rsb	r6, r2, #32
 800e758:	6843      	ldr	r3, [r0, #4]
 800e75a:	6804      	ldr	r4, [r0, #0]
 800e75c:	fa03 f506 	lsl.w	r5, r3, r6
 800e760:	432c      	orrs	r4, r5
 800e762:	40d3      	lsrs	r3, r2
 800e764:	6004      	str	r4, [r0, #0]
 800e766:	f840 3f04 	str.w	r3, [r0, #4]!
 800e76a:	4288      	cmp	r0, r1
 800e76c:	d3f4      	bcc.n	800e758 <L_shift+0xc>
 800e76e:	bd70      	pop	{r4, r5, r6, pc}

0800e770 <__match>:
 800e770:	b530      	push	{r4, r5, lr}
 800e772:	6803      	ldr	r3, [r0, #0]
 800e774:	3301      	adds	r3, #1
 800e776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e77a:	b914      	cbnz	r4, 800e782 <__match+0x12>
 800e77c:	6003      	str	r3, [r0, #0]
 800e77e:	2001      	movs	r0, #1
 800e780:	bd30      	pop	{r4, r5, pc}
 800e782:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e786:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e78a:	2d19      	cmp	r5, #25
 800e78c:	bf98      	it	ls
 800e78e:	3220      	addls	r2, #32
 800e790:	42a2      	cmp	r2, r4
 800e792:	d0f0      	beq.n	800e776 <__match+0x6>
 800e794:	2000      	movs	r0, #0
 800e796:	e7f3      	b.n	800e780 <__match+0x10>

0800e798 <__hexnan>:
 800e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79c:	680b      	ldr	r3, [r1, #0]
 800e79e:	6801      	ldr	r1, [r0, #0]
 800e7a0:	115e      	asrs	r6, r3, #5
 800e7a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e7a6:	f013 031f 	ands.w	r3, r3, #31
 800e7aa:	b087      	sub	sp, #28
 800e7ac:	bf18      	it	ne
 800e7ae:	3604      	addne	r6, #4
 800e7b0:	2500      	movs	r5, #0
 800e7b2:	1f37      	subs	r7, r6, #4
 800e7b4:	4682      	mov	sl, r0
 800e7b6:	4690      	mov	r8, r2
 800e7b8:	9301      	str	r3, [sp, #4]
 800e7ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800e7be:	46b9      	mov	r9, r7
 800e7c0:	463c      	mov	r4, r7
 800e7c2:	9502      	str	r5, [sp, #8]
 800e7c4:	46ab      	mov	fp, r5
 800e7c6:	784a      	ldrb	r2, [r1, #1]
 800e7c8:	1c4b      	adds	r3, r1, #1
 800e7ca:	9303      	str	r3, [sp, #12]
 800e7cc:	b342      	cbz	r2, 800e820 <__hexnan+0x88>
 800e7ce:	4610      	mov	r0, r2
 800e7d0:	9105      	str	r1, [sp, #20]
 800e7d2:	9204      	str	r2, [sp, #16]
 800e7d4:	f7ff fd95 	bl	800e302 <__hexdig_fun>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d151      	bne.n	800e880 <__hexnan+0xe8>
 800e7dc:	9a04      	ldr	r2, [sp, #16]
 800e7de:	9905      	ldr	r1, [sp, #20]
 800e7e0:	2a20      	cmp	r2, #32
 800e7e2:	d818      	bhi.n	800e816 <__hexnan+0x7e>
 800e7e4:	9b02      	ldr	r3, [sp, #8]
 800e7e6:	459b      	cmp	fp, r3
 800e7e8:	dd13      	ble.n	800e812 <__hexnan+0x7a>
 800e7ea:	454c      	cmp	r4, r9
 800e7ec:	d206      	bcs.n	800e7fc <__hexnan+0x64>
 800e7ee:	2d07      	cmp	r5, #7
 800e7f0:	dc04      	bgt.n	800e7fc <__hexnan+0x64>
 800e7f2:	462a      	mov	r2, r5
 800e7f4:	4649      	mov	r1, r9
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f7ff ffa8 	bl	800e74c <L_shift>
 800e7fc:	4544      	cmp	r4, r8
 800e7fe:	d952      	bls.n	800e8a6 <__hexnan+0x10e>
 800e800:	2300      	movs	r3, #0
 800e802:	f1a4 0904 	sub.w	r9, r4, #4
 800e806:	f844 3c04 	str.w	r3, [r4, #-4]
 800e80a:	f8cd b008 	str.w	fp, [sp, #8]
 800e80e:	464c      	mov	r4, r9
 800e810:	461d      	mov	r5, r3
 800e812:	9903      	ldr	r1, [sp, #12]
 800e814:	e7d7      	b.n	800e7c6 <__hexnan+0x2e>
 800e816:	2a29      	cmp	r2, #41	@ 0x29
 800e818:	d157      	bne.n	800e8ca <__hexnan+0x132>
 800e81a:	3102      	adds	r1, #2
 800e81c:	f8ca 1000 	str.w	r1, [sl]
 800e820:	f1bb 0f00 	cmp.w	fp, #0
 800e824:	d051      	beq.n	800e8ca <__hexnan+0x132>
 800e826:	454c      	cmp	r4, r9
 800e828:	d206      	bcs.n	800e838 <__hexnan+0xa0>
 800e82a:	2d07      	cmp	r5, #7
 800e82c:	dc04      	bgt.n	800e838 <__hexnan+0xa0>
 800e82e:	462a      	mov	r2, r5
 800e830:	4649      	mov	r1, r9
 800e832:	4620      	mov	r0, r4
 800e834:	f7ff ff8a 	bl	800e74c <L_shift>
 800e838:	4544      	cmp	r4, r8
 800e83a:	d936      	bls.n	800e8aa <__hexnan+0x112>
 800e83c:	f1a8 0204 	sub.w	r2, r8, #4
 800e840:	4623      	mov	r3, r4
 800e842:	f853 1b04 	ldr.w	r1, [r3], #4
 800e846:	f842 1f04 	str.w	r1, [r2, #4]!
 800e84a:	429f      	cmp	r7, r3
 800e84c:	d2f9      	bcs.n	800e842 <__hexnan+0xaa>
 800e84e:	1b3b      	subs	r3, r7, r4
 800e850:	f023 0303 	bic.w	r3, r3, #3
 800e854:	3304      	adds	r3, #4
 800e856:	3401      	adds	r4, #1
 800e858:	3e03      	subs	r6, #3
 800e85a:	42b4      	cmp	r4, r6
 800e85c:	bf88      	it	hi
 800e85e:	2304      	movhi	r3, #4
 800e860:	4443      	add	r3, r8
 800e862:	2200      	movs	r2, #0
 800e864:	f843 2b04 	str.w	r2, [r3], #4
 800e868:	429f      	cmp	r7, r3
 800e86a:	d2fb      	bcs.n	800e864 <__hexnan+0xcc>
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	b91b      	cbnz	r3, 800e878 <__hexnan+0xe0>
 800e870:	4547      	cmp	r7, r8
 800e872:	d128      	bne.n	800e8c6 <__hexnan+0x12e>
 800e874:	2301      	movs	r3, #1
 800e876:	603b      	str	r3, [r7, #0]
 800e878:	2005      	movs	r0, #5
 800e87a:	b007      	add	sp, #28
 800e87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e880:	3501      	adds	r5, #1
 800e882:	2d08      	cmp	r5, #8
 800e884:	f10b 0b01 	add.w	fp, fp, #1
 800e888:	dd06      	ble.n	800e898 <__hexnan+0x100>
 800e88a:	4544      	cmp	r4, r8
 800e88c:	d9c1      	bls.n	800e812 <__hexnan+0x7a>
 800e88e:	2300      	movs	r3, #0
 800e890:	f844 3c04 	str.w	r3, [r4, #-4]
 800e894:	2501      	movs	r5, #1
 800e896:	3c04      	subs	r4, #4
 800e898:	6822      	ldr	r2, [r4, #0]
 800e89a:	f000 000f 	and.w	r0, r0, #15
 800e89e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e8a2:	6020      	str	r0, [r4, #0]
 800e8a4:	e7b5      	b.n	800e812 <__hexnan+0x7a>
 800e8a6:	2508      	movs	r5, #8
 800e8a8:	e7b3      	b.n	800e812 <__hexnan+0x7a>
 800e8aa:	9b01      	ldr	r3, [sp, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d0dd      	beq.n	800e86c <__hexnan+0xd4>
 800e8b0:	f1c3 0320 	rsb	r3, r3, #32
 800e8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b8:	40da      	lsrs	r2, r3
 800e8ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e8be:	4013      	ands	r3, r2
 800e8c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e8c4:	e7d2      	b.n	800e86c <__hexnan+0xd4>
 800e8c6:	3f04      	subs	r7, #4
 800e8c8:	e7d0      	b.n	800e86c <__hexnan+0xd4>
 800e8ca:	2004      	movs	r0, #4
 800e8cc:	e7d5      	b.n	800e87a <__hexnan+0xe2>
	...

0800e8d0 <fiprintf>:
 800e8d0:	b40e      	push	{r1, r2, r3}
 800e8d2:	b503      	push	{r0, r1, lr}
 800e8d4:	4601      	mov	r1, r0
 800e8d6:	ab03      	add	r3, sp, #12
 800e8d8:	4805      	ldr	r0, [pc, #20]	@ (800e8f0 <fiprintf+0x20>)
 800e8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8de:	6800      	ldr	r0, [r0, #0]
 800e8e0:	9301      	str	r3, [sp, #4]
 800e8e2:	f000 f839 	bl	800e958 <_vfiprintf_r>
 800e8e6:	b002      	add	sp, #8
 800e8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8ec:	b003      	add	sp, #12
 800e8ee:	4770      	bx	lr
 800e8f0:	20000050 	.word	0x20000050

0800e8f4 <__sprint_r>:
 800e8f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f8:	6893      	ldr	r3, [r2, #8]
 800e8fa:	4680      	mov	r8, r0
 800e8fc:	460e      	mov	r6, r1
 800e8fe:	4614      	mov	r4, r2
 800e900:	b343      	cbz	r3, 800e954 <__sprint_r+0x60>
 800e902:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800e904:	049d      	lsls	r5, r3, #18
 800e906:	d522      	bpl.n	800e94e <__sprint_r+0x5a>
 800e908:	6815      	ldr	r5, [r2, #0]
 800e90a:	68a0      	ldr	r0, [r4, #8]
 800e90c:	3508      	adds	r5, #8
 800e90e:	b928      	cbnz	r0, 800e91c <__sprint_r+0x28>
 800e910:	2300      	movs	r3, #0
 800e912:	60a3      	str	r3, [r4, #8]
 800e914:	2300      	movs	r3, #0
 800e916:	6063      	str	r3, [r4, #4]
 800e918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91c:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800e920:	f04f 0900 	mov.w	r9, #0
 800e924:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800e928:	45ca      	cmp	sl, r9
 800e92a:	dc05      	bgt.n	800e938 <__sprint_r+0x44>
 800e92c:	68a3      	ldr	r3, [r4, #8]
 800e92e:	f027 0703 	bic.w	r7, r7, #3
 800e932:	1bdb      	subs	r3, r3, r7
 800e934:	60a3      	str	r3, [r4, #8]
 800e936:	e7e8      	b.n	800e90a <__sprint_r+0x16>
 800e938:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800e93c:	4632      	mov	r2, r6
 800e93e:	4640      	mov	r0, r8
 800e940:	f000 feb5 	bl	800f6ae <_fputwc_r>
 800e944:	1c43      	adds	r3, r0, #1
 800e946:	d0e3      	beq.n	800e910 <__sprint_r+0x1c>
 800e948:	f109 0901 	add.w	r9, r9, #1
 800e94c:	e7ec      	b.n	800e928 <__sprint_r+0x34>
 800e94e:	f000 fccb 	bl	800f2e8 <__sfvwrite_r>
 800e952:	e7dd      	b.n	800e910 <__sprint_r+0x1c>
 800e954:	4618      	mov	r0, r3
 800e956:	e7dd      	b.n	800e914 <__sprint_r+0x20>

0800e958 <_vfiprintf_r>:
 800e958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95c:	b0bb      	sub	sp, #236	@ 0xec
 800e95e:	460f      	mov	r7, r1
 800e960:	4693      	mov	fp, r2
 800e962:	461c      	mov	r4, r3
 800e964:	461d      	mov	r5, r3
 800e966:	9000      	str	r0, [sp, #0]
 800e968:	b118      	cbz	r0, 800e972 <_vfiprintf_r+0x1a>
 800e96a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e96c:	b90b      	cbnz	r3, 800e972 <_vfiprintf_r+0x1a>
 800e96e:	f7f9 fc1d 	bl	80081ac <__sinit>
 800e972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e974:	07db      	lsls	r3, r3, #31
 800e976:	d405      	bmi.n	800e984 <_vfiprintf_r+0x2c>
 800e978:	89bb      	ldrh	r3, [r7, #12]
 800e97a:	059e      	lsls	r6, r3, #22
 800e97c:	d402      	bmi.n	800e984 <_vfiprintf_r+0x2c>
 800e97e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e980:	f7f9 fd98 	bl	80084b4 <__retarget_lock_acquire_recursive>
 800e984:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e988:	0498      	lsls	r0, r3, #18
 800e98a:	d406      	bmi.n	800e99a <_vfiprintf_r+0x42>
 800e98c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e990:	81bb      	strh	r3, [r7, #12]
 800e992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e994:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e998:	667b      	str	r3, [r7, #100]	@ 0x64
 800e99a:	89bb      	ldrh	r3, [r7, #12]
 800e99c:	0719      	lsls	r1, r3, #28
 800e99e:	d501      	bpl.n	800e9a4 <_vfiprintf_r+0x4c>
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	b9ab      	cbnz	r3, 800e9d0 <_vfiprintf_r+0x78>
 800e9a4:	9800      	ldr	r0, [sp, #0]
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	f000 fdea 	bl	800f580 <__swsetup_r>
 800e9ac:	b180      	cbz	r0, 800e9d0 <_vfiprintf_r+0x78>
 800e9ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9b0:	07da      	lsls	r2, r3, #31
 800e9b2:	d506      	bpl.n	800e9c2 <_vfiprintf_r+0x6a>
 800e9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b8:	9303      	str	r3, [sp, #12]
 800e9ba:	9803      	ldr	r0, [sp, #12]
 800e9bc:	b03b      	add	sp, #236	@ 0xec
 800e9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c2:	89bb      	ldrh	r3, [r7, #12]
 800e9c4:	059b      	lsls	r3, r3, #22
 800e9c6:	d4f5      	bmi.n	800e9b4 <_vfiprintf_r+0x5c>
 800e9c8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e9ca:	f7f9 fd74 	bl	80084b6 <__retarget_lock_release_recursive>
 800e9ce:	e7f1      	b.n	800e9b4 <_vfiprintf_r+0x5c>
 800e9d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e9d4:	f003 021a 	and.w	r2, r3, #26
 800e9d8:	2a0a      	cmp	r2, #10
 800e9da:	d114      	bne.n	800ea06 <_vfiprintf_r+0xae>
 800e9dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e9e0:	2a00      	cmp	r2, #0
 800e9e2:	db10      	blt.n	800ea06 <_vfiprintf_r+0xae>
 800e9e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e9e6:	07d6      	lsls	r6, r2, #31
 800e9e8:	d404      	bmi.n	800e9f4 <_vfiprintf_r+0x9c>
 800e9ea:	059d      	lsls	r5, r3, #22
 800e9ec:	d402      	bmi.n	800e9f4 <_vfiprintf_r+0x9c>
 800e9ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e9f0:	f7f9 fd61 	bl	80084b6 <__retarget_lock_release_recursive>
 800e9f4:	9800      	ldr	r0, [sp, #0]
 800e9f6:	4623      	mov	r3, r4
 800e9f8:	465a      	mov	r2, fp
 800e9fa:	4639      	mov	r1, r7
 800e9fc:	b03b      	add	sp, #236	@ 0xec
 800e9fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea02:	f000 bc31 	b.w	800f268 <__sbprintf>
 800ea06:	2300      	movs	r3, #0
 800ea08:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800ea0c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ea10:	ae11      	add	r6, sp, #68	@ 0x44
 800ea12:	960e      	str	r6, [sp, #56]	@ 0x38
 800ea14:	9307      	str	r3, [sp, #28]
 800ea16:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea18:	9303      	str	r3, [sp, #12]
 800ea1a:	465b      	mov	r3, fp
 800ea1c:	461c      	mov	r4, r3
 800ea1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea22:	b10a      	cbz	r2, 800ea28 <_vfiprintf_r+0xd0>
 800ea24:	2a25      	cmp	r2, #37	@ 0x25
 800ea26:	d1f9      	bne.n	800ea1c <_vfiprintf_r+0xc4>
 800ea28:	ebb4 080b 	subs.w	r8, r4, fp
 800ea2c:	d00d      	beq.n	800ea4a <_vfiprintf_r+0xf2>
 800ea2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea30:	4443      	add	r3, r8
 800ea32:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea36:	3301      	adds	r3, #1
 800ea38:	2b07      	cmp	r3, #7
 800ea3a:	e9c6 b800 	strd	fp, r8, [r6]
 800ea3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea40:	dc75      	bgt.n	800eb2e <_vfiprintf_r+0x1d6>
 800ea42:	3608      	adds	r6, #8
 800ea44:	9b03      	ldr	r3, [sp, #12]
 800ea46:	4443      	add	r3, r8
 800ea48:	9303      	str	r3, [sp, #12]
 800ea4a:	7823      	ldrb	r3, [r4, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 83cd 	beq.w	800f1ec <_vfiprintf_r+0x894>
 800ea52:	2300      	movs	r3, #0
 800ea54:	f04f 32ff 	mov.w	r2, #4294967295
 800ea58:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ea5c:	3401      	adds	r4, #1
 800ea5e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ea62:	469a      	mov	sl, r3
 800ea64:	46a3      	mov	fp, r4
 800ea66:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800ea6a:	f1a3 0220 	sub.w	r2, r3, #32
 800ea6e:	2a5a      	cmp	r2, #90	@ 0x5a
 800ea70:	f200 8316 	bhi.w	800f0a0 <_vfiprintf_r+0x748>
 800ea74:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ea78:	0314009a 	.word	0x0314009a
 800ea7c:	00a20314 	.word	0x00a20314
 800ea80:	03140314 	.word	0x03140314
 800ea84:	00820314 	.word	0x00820314
 800ea88:	03140314 	.word	0x03140314
 800ea8c:	00af00a5 	.word	0x00af00a5
 800ea90:	00ac0314 	.word	0x00ac0314
 800ea94:	031400b1 	.word	0x031400b1
 800ea98:	00d000cd 	.word	0x00d000cd
 800ea9c:	00d000d0 	.word	0x00d000d0
 800eaa0:	00d000d0 	.word	0x00d000d0
 800eaa4:	00d000d0 	.word	0x00d000d0
 800eaa8:	00d000d0 	.word	0x00d000d0
 800eaac:	03140314 	.word	0x03140314
 800eab0:	03140314 	.word	0x03140314
 800eab4:	03140314 	.word	0x03140314
 800eab8:	03140314 	.word	0x03140314
 800eabc:	00f70314 	.word	0x00f70314
 800eac0:	03140104 	.word	0x03140104
 800eac4:	03140314 	.word	0x03140314
 800eac8:	03140314 	.word	0x03140314
 800eacc:	03140314 	.word	0x03140314
 800ead0:	03140314 	.word	0x03140314
 800ead4:	01520314 	.word	0x01520314
 800ead8:	03140314 	.word	0x03140314
 800eadc:	019a0314 	.word	0x019a0314
 800eae0:	027a0314 	.word	0x027a0314
 800eae4:	03140314 	.word	0x03140314
 800eae8:	0314029a 	.word	0x0314029a
 800eaec:	03140314 	.word	0x03140314
 800eaf0:	03140314 	.word	0x03140314
 800eaf4:	03140314 	.word	0x03140314
 800eaf8:	03140314 	.word	0x03140314
 800eafc:	00f70314 	.word	0x00f70314
 800eb00:	03140106 	.word	0x03140106
 800eb04:	03140314 	.word	0x03140314
 800eb08:	010600e0 	.word	0x010600e0
 800eb0c:	031400f1 	.word	0x031400f1
 800eb10:	031400eb 	.word	0x031400eb
 800eb14:	01540132 	.word	0x01540132
 800eb18:	00f10189 	.word	0x00f10189
 800eb1c:	019a0314 	.word	0x019a0314
 800eb20:	027c0098 	.word	0x027c0098
 800eb24:	03140314 	.word	0x03140314
 800eb28:	03140065 	.word	0x03140065
 800eb2c:	0098      	.short	0x0098
 800eb2e:	9800      	ldr	r0, [sp, #0]
 800eb30:	aa0e      	add	r2, sp, #56	@ 0x38
 800eb32:	4639      	mov	r1, r7
 800eb34:	f7ff fede 	bl	800e8f4 <__sprint_r>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	f040 8336 	bne.w	800f1aa <_vfiprintf_r+0x852>
 800eb3e:	ae11      	add	r6, sp, #68	@ 0x44
 800eb40:	e780      	b.n	800ea44 <_vfiprintf_r+0xec>
 800eb42:	4a99      	ldr	r2, [pc, #612]	@ (800eda8 <_vfiprintf_r+0x450>)
 800eb44:	9205      	str	r2, [sp, #20]
 800eb46:	f01a 0220 	ands.w	r2, sl, #32
 800eb4a:	f000 8231 	beq.w	800efb0 <_vfiprintf_r+0x658>
 800eb4e:	3507      	adds	r5, #7
 800eb50:	f025 0507 	bic.w	r5, r5, #7
 800eb54:	46a8      	mov	r8, r5
 800eb56:	686d      	ldr	r5, [r5, #4]
 800eb58:	f858 4b08 	ldr.w	r4, [r8], #8
 800eb5c:	f01a 0f01 	tst.w	sl, #1
 800eb60:	d009      	beq.n	800eb76 <_vfiprintf_r+0x21e>
 800eb62:	ea54 0205 	orrs.w	r2, r4, r5
 800eb66:	bf1f      	itttt	ne
 800eb68:	2230      	movne	r2, #48	@ 0x30
 800eb6a:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800eb6e:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800eb72:	f04a 0a02 	orrne.w	sl, sl, #2
 800eb76:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800eb7a:	e112      	b.n	800eda2 <_vfiprintf_r+0x44a>
 800eb7c:	9800      	ldr	r0, [sp, #0]
 800eb7e:	f7f9 fc23 	bl	80083c8 <_localeconv_r>
 800eb82:	6843      	ldr	r3, [r0, #4]
 800eb84:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7f1 fba2 	bl	80002d0 <strlen>
 800eb8c:	9007      	str	r0, [sp, #28]
 800eb8e:	9800      	ldr	r0, [sp, #0]
 800eb90:	f7f9 fc1a 	bl	80083c8 <_localeconv_r>
 800eb94:	6883      	ldr	r3, [r0, #8]
 800eb96:	9306      	str	r3, [sp, #24]
 800eb98:	9b07      	ldr	r3, [sp, #28]
 800eb9a:	b12b      	cbz	r3, 800eba8 <_vfiprintf_r+0x250>
 800eb9c:	9b06      	ldr	r3, [sp, #24]
 800eb9e:	b11b      	cbz	r3, 800eba8 <_vfiprintf_r+0x250>
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	b10b      	cbz	r3, 800eba8 <_vfiprintf_r+0x250>
 800eba4:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800eba8:	465c      	mov	r4, fp
 800ebaa:	e75b      	b.n	800ea64 <_vfiprintf_r+0x10c>
 800ebac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1f9      	bne.n	800eba8 <_vfiprintf_r+0x250>
 800ebb4:	2320      	movs	r3, #32
 800ebb6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ebba:	e7f5      	b.n	800eba8 <_vfiprintf_r+0x250>
 800ebbc:	f04a 0a01 	orr.w	sl, sl, #1
 800ebc0:	e7f2      	b.n	800eba8 <_vfiprintf_r+0x250>
 800ebc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebc6:	9302      	str	r3, [sp, #8]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	daed      	bge.n	800eba8 <_vfiprintf_r+0x250>
 800ebcc:	425b      	negs	r3, r3
 800ebce:	9302      	str	r3, [sp, #8]
 800ebd0:	f04a 0a04 	orr.w	sl, sl, #4
 800ebd4:	e7e8      	b.n	800eba8 <_vfiprintf_r+0x250>
 800ebd6:	232b      	movs	r3, #43	@ 0x2b
 800ebd8:	e7ed      	b.n	800ebb6 <_vfiprintf_r+0x25e>
 800ebda:	465a      	mov	r2, fp
 800ebdc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ebe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebe2:	d112      	bne.n	800ec0a <_vfiprintf_r+0x2b2>
 800ebe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebe8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebec:	9301      	str	r3, [sp, #4]
 800ebee:	4693      	mov	fp, r2
 800ebf0:	e7da      	b.n	800eba8 <_vfiprintf_r+0x250>
 800ebf2:	9b01      	ldr	r3, [sp, #4]
 800ebf4:	fb00 1303 	mla	r3, r0, r3, r1
 800ebf8:	9301      	str	r3, [sp, #4]
 800ebfa:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ebfe:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ec02:	2909      	cmp	r1, #9
 800ec04:	d9f5      	bls.n	800ebf2 <_vfiprintf_r+0x29a>
 800ec06:	4693      	mov	fp, r2
 800ec08:	e72f      	b.n	800ea6a <_vfiprintf_r+0x112>
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	9101      	str	r1, [sp, #4]
 800ec0e:	200a      	movs	r0, #10
 800ec10:	e7f5      	b.n	800ebfe <_vfiprintf_r+0x2a6>
 800ec12:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800ec16:	e7c7      	b.n	800eba8 <_vfiprintf_r+0x250>
 800ec18:	2100      	movs	r1, #0
 800ec1a:	465a      	mov	r2, fp
 800ec1c:	9102      	str	r1, [sp, #8]
 800ec1e:	200a      	movs	r0, #10
 800ec20:	9902      	ldr	r1, [sp, #8]
 800ec22:	3b30      	subs	r3, #48	@ 0x30
 800ec24:	fb00 3301 	mla	r3, r0, r1, r3
 800ec28:	9302      	str	r3, [sp, #8]
 800ec2a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec2e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ec32:	2909      	cmp	r1, #9
 800ec34:	d9f4      	bls.n	800ec20 <_vfiprintf_r+0x2c8>
 800ec36:	e7e6      	b.n	800ec06 <_vfiprintf_r+0x2ae>
 800ec38:	f89b 3000 	ldrb.w	r3, [fp]
 800ec3c:	2b68      	cmp	r3, #104	@ 0x68
 800ec3e:	bf06      	itte	eq
 800ec40:	f10b 0b01 	addeq.w	fp, fp, #1
 800ec44:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800ec48:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800ec4c:	e7ac      	b.n	800eba8 <_vfiprintf_r+0x250>
 800ec4e:	f89b 3000 	ldrb.w	r3, [fp]
 800ec52:	2b6c      	cmp	r3, #108	@ 0x6c
 800ec54:	d104      	bne.n	800ec60 <_vfiprintf_r+0x308>
 800ec56:	f10b 0b01 	add.w	fp, fp, #1
 800ec5a:	f04a 0a20 	orr.w	sl, sl, #32
 800ec5e:	e7a3      	b.n	800eba8 <_vfiprintf_r+0x250>
 800ec60:	f04a 0a10 	orr.w	sl, sl, #16
 800ec64:	e7a0      	b.n	800eba8 <_vfiprintf_r+0x250>
 800ec66:	46a8      	mov	r8, r5
 800ec68:	2400      	movs	r4, #0
 800ec6a:	f858 3b04 	ldr.w	r3, [r8], #4
 800ec6e:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ec72:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ec76:	2301      	movs	r3, #1
 800ec78:	9301      	str	r3, [sp, #4]
 800ec7a:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800ec7e:	e0ab      	b.n	800edd8 <_vfiprintf_r+0x480>
 800ec80:	f04a 0a10 	orr.w	sl, sl, #16
 800ec84:	f01a 0f20 	tst.w	sl, #32
 800ec88:	d011      	beq.n	800ecae <_vfiprintf_r+0x356>
 800ec8a:	3507      	adds	r5, #7
 800ec8c:	f025 0507 	bic.w	r5, r5, #7
 800ec90:	46a8      	mov	r8, r5
 800ec92:	686d      	ldr	r5, [r5, #4]
 800ec94:	f858 4b08 	ldr.w	r4, [r8], #8
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	da06      	bge.n	800ecaa <_vfiprintf_r+0x352>
 800ec9c:	4264      	negs	r4, r4
 800ec9e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800eca2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800eca6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e048      	b.n	800ed40 <_vfiprintf_r+0x3e8>
 800ecae:	46a8      	mov	r8, r5
 800ecb0:	f01a 0f10 	tst.w	sl, #16
 800ecb4:	f858 5b04 	ldr.w	r5, [r8], #4
 800ecb8:	d002      	beq.n	800ecc0 <_vfiprintf_r+0x368>
 800ecba:	462c      	mov	r4, r5
 800ecbc:	17ed      	asrs	r5, r5, #31
 800ecbe:	e7eb      	b.n	800ec98 <_vfiprintf_r+0x340>
 800ecc0:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ecc4:	d003      	beq.n	800ecce <_vfiprintf_r+0x376>
 800ecc6:	b22c      	sxth	r4, r5
 800ecc8:	f345 35c0 	sbfx	r5, r5, #15, #1
 800eccc:	e7e4      	b.n	800ec98 <_vfiprintf_r+0x340>
 800ecce:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ecd2:	d0f2      	beq.n	800ecba <_vfiprintf_r+0x362>
 800ecd4:	b26c      	sxtb	r4, r5
 800ecd6:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ecda:	e7dd      	b.n	800ec98 <_vfiprintf_r+0x340>
 800ecdc:	f01a 0f20 	tst.w	sl, #32
 800ece0:	d007      	beq.n	800ecf2 <_vfiprintf_r+0x39a>
 800ece2:	9a03      	ldr	r2, [sp, #12]
 800ece4:	682b      	ldr	r3, [r5, #0]
 800ece6:	9903      	ldr	r1, [sp, #12]
 800ece8:	17d2      	asrs	r2, r2, #31
 800ecea:	e9c3 1200 	strd	r1, r2, [r3]
 800ecee:	3504      	adds	r5, #4
 800ecf0:	e693      	b.n	800ea1a <_vfiprintf_r+0xc2>
 800ecf2:	f01a 0f10 	tst.w	sl, #16
 800ecf6:	d003      	beq.n	800ed00 <_vfiprintf_r+0x3a8>
 800ecf8:	682b      	ldr	r3, [r5, #0]
 800ecfa:	9a03      	ldr	r2, [sp, #12]
 800ecfc:	601a      	str	r2, [r3, #0]
 800ecfe:	e7f6      	b.n	800ecee <_vfiprintf_r+0x396>
 800ed00:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ed04:	d003      	beq.n	800ed0e <_vfiprintf_r+0x3b6>
 800ed06:	682b      	ldr	r3, [r5, #0]
 800ed08:	9a03      	ldr	r2, [sp, #12]
 800ed0a:	801a      	strh	r2, [r3, #0]
 800ed0c:	e7ef      	b.n	800ecee <_vfiprintf_r+0x396>
 800ed0e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ed12:	d0f1      	beq.n	800ecf8 <_vfiprintf_r+0x3a0>
 800ed14:	682b      	ldr	r3, [r5, #0]
 800ed16:	9a03      	ldr	r2, [sp, #12]
 800ed18:	701a      	strb	r2, [r3, #0]
 800ed1a:	e7e8      	b.n	800ecee <_vfiprintf_r+0x396>
 800ed1c:	f04a 0a10 	orr.w	sl, sl, #16
 800ed20:	f01a 0320 	ands.w	r3, sl, #32
 800ed24:	d01f      	beq.n	800ed66 <_vfiprintf_r+0x40e>
 800ed26:	3507      	adds	r5, #7
 800ed28:	f025 0507 	bic.w	r5, r5, #7
 800ed2c:	46a8      	mov	r8, r5
 800ed2e:	686d      	ldr	r5, [r5, #4]
 800ed30:	f858 4b08 	ldr.w	r4, [r8], #8
 800ed34:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800ed38:	2300      	movs	r3, #0
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800ed40:	9a01      	ldr	r2, [sp, #4]
 800ed42:	3201      	adds	r2, #1
 800ed44:	f000 825f 	beq.w	800f206 <_vfiprintf_r+0x8ae>
 800ed48:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800ed4c:	9204      	str	r2, [sp, #16]
 800ed4e:	ea54 0205 	orrs.w	r2, r4, r5
 800ed52:	f040 825e 	bne.w	800f212 <_vfiprintf_r+0x8ba>
 800ed56:	9a01      	ldr	r2, [sp, #4]
 800ed58:	2a00      	cmp	r2, #0
 800ed5a:	f000 8198 	beq.w	800f08e <_vfiprintf_r+0x736>
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	f040 825a 	bne.w	800f218 <_vfiprintf_r+0x8c0>
 800ed64:	e13b      	b.n	800efde <_vfiprintf_r+0x686>
 800ed66:	46a8      	mov	r8, r5
 800ed68:	f01a 0510 	ands.w	r5, sl, #16
 800ed6c:	f858 4b04 	ldr.w	r4, [r8], #4
 800ed70:	d001      	beq.n	800ed76 <_vfiprintf_r+0x41e>
 800ed72:	461d      	mov	r5, r3
 800ed74:	e7de      	b.n	800ed34 <_vfiprintf_r+0x3dc>
 800ed76:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ed7a:	d001      	beq.n	800ed80 <_vfiprintf_r+0x428>
 800ed7c:	b2a4      	uxth	r4, r4
 800ed7e:	e7d9      	b.n	800ed34 <_vfiprintf_r+0x3dc>
 800ed80:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ed84:	d0d6      	beq.n	800ed34 <_vfiprintf_r+0x3dc>
 800ed86:	b2e4      	uxtb	r4, r4
 800ed88:	e7f3      	b.n	800ed72 <_vfiprintf_r+0x41a>
 800ed8a:	46a8      	mov	r8, r5
 800ed8c:	f647 0330 	movw	r3, #30768	@ 0x7830
 800ed90:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800ed94:	f858 4b04 	ldr.w	r4, [r8], #4
 800ed98:	4b03      	ldr	r3, [pc, #12]	@ (800eda8 <_vfiprintf_r+0x450>)
 800ed9a:	9305      	str	r3, [sp, #20]
 800ed9c:	2500      	movs	r5, #0
 800ed9e:	f04a 0a02 	orr.w	sl, sl, #2
 800eda2:	2302      	movs	r3, #2
 800eda4:	e7c9      	b.n	800ed3a <_vfiprintf_r+0x3e2>
 800eda6:	bf00      	nop
 800eda8:	0800fa75 	.word	0x0800fa75
 800edac:	9b01      	ldr	r3, [sp, #4]
 800edae:	46a8      	mov	r8, r5
 800edb0:	1c5c      	adds	r4, r3, #1
 800edb2:	f04f 0500 	mov.w	r5, #0
 800edb6:	f858 9b04 	ldr.w	r9, [r8], #4
 800edba:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800edbe:	f000 80d0 	beq.w	800ef62 <_vfiprintf_r+0x60a>
 800edc2:	461a      	mov	r2, r3
 800edc4:	4629      	mov	r1, r5
 800edc6:	4648      	mov	r0, r9
 800edc8:	f7f1 fa32 	bl	8000230 <memchr>
 800edcc:	4604      	mov	r4, r0
 800edce:	b118      	cbz	r0, 800edd8 <_vfiprintf_r+0x480>
 800edd0:	eba0 0309 	sub.w	r3, r0, r9
 800edd4:	9301      	str	r3, [sp, #4]
 800edd6:	462c      	mov	r4, r5
 800edd8:	9b01      	ldr	r3, [sp, #4]
 800edda:	42a3      	cmp	r3, r4
 800eddc:	bfb8      	it	lt
 800edde:	4623      	movlt	r3, r4
 800ede0:	9304      	str	r3, [sp, #16]
 800ede2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ede6:	b113      	cbz	r3, 800edee <_vfiprintf_r+0x496>
 800ede8:	9b04      	ldr	r3, [sp, #16]
 800edea:	3301      	adds	r3, #1
 800edec:	9304      	str	r3, [sp, #16]
 800edee:	f01a 0302 	ands.w	r3, sl, #2
 800edf2:	9308      	str	r3, [sp, #32]
 800edf4:	bf1e      	ittt	ne
 800edf6:	9b04      	ldrne	r3, [sp, #16]
 800edf8:	3302      	addne	r3, #2
 800edfa:	9304      	strne	r3, [sp, #16]
 800edfc:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800ee00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee02:	d11f      	bne.n	800ee44 <_vfiprintf_r+0x4ec>
 800ee04:	9b02      	ldr	r3, [sp, #8]
 800ee06:	9a04      	ldr	r2, [sp, #16]
 800ee08:	1a9d      	subs	r5, r3, r2
 800ee0a:	2d00      	cmp	r5, #0
 800ee0c:	dd1a      	ble.n	800ee44 <_vfiprintf_r+0x4ec>
 800ee0e:	4ba9      	ldr	r3, [pc, #676]	@ (800f0b4 <_vfiprintf_r+0x75c>)
 800ee10:	6033      	str	r3, [r6, #0]
 800ee12:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800ee16:	2d10      	cmp	r5, #16
 800ee18:	f102 0201 	add.w	r2, r2, #1
 800ee1c:	f106 0008 	add.w	r0, r6, #8
 800ee20:	f300 814e 	bgt.w	800f0c0 <_vfiprintf_r+0x768>
 800ee24:	6075      	str	r5, [r6, #4]
 800ee26:	2a07      	cmp	r2, #7
 800ee28:	4465      	add	r5, ip
 800ee2a:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800ee2e:	f340 815a 	ble.w	800f0e6 <_vfiprintf_r+0x78e>
 800ee32:	9800      	ldr	r0, [sp, #0]
 800ee34:	aa0e      	add	r2, sp, #56	@ 0x38
 800ee36:	4639      	mov	r1, r7
 800ee38:	f7ff fd5c 	bl	800e8f4 <__sprint_r>
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	f040 81b4 	bne.w	800f1aa <_vfiprintf_r+0x852>
 800ee42:	ae11      	add	r6, sp, #68	@ 0x44
 800ee44:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800ee48:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ee4c:	b161      	cbz	r1, 800ee68 <_vfiprintf_r+0x510>
 800ee4e:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800ee52:	3301      	adds	r3, #1
 800ee54:	6031      	str	r1, [r6, #0]
 800ee56:	2101      	movs	r1, #1
 800ee58:	440a      	add	r2, r1
 800ee5a:	2b07      	cmp	r3, #7
 800ee5c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800ee60:	6071      	str	r1, [r6, #4]
 800ee62:	f300 8142 	bgt.w	800f0ea <_vfiprintf_r+0x792>
 800ee66:	3608      	adds	r6, #8
 800ee68:	9908      	ldr	r1, [sp, #32]
 800ee6a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ee6e:	b159      	cbz	r1, 800ee88 <_vfiprintf_r+0x530>
 800ee70:	a90d      	add	r1, sp, #52	@ 0x34
 800ee72:	3301      	adds	r3, #1
 800ee74:	6031      	str	r1, [r6, #0]
 800ee76:	2102      	movs	r1, #2
 800ee78:	440a      	add	r2, r1
 800ee7a:	2b07      	cmp	r3, #7
 800ee7c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800ee80:	6071      	str	r1, [r6, #4]
 800ee82:	f300 813b 	bgt.w	800f0fc <_vfiprintf_r+0x7a4>
 800ee86:	3608      	adds	r6, #8
 800ee88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee8a:	2b80      	cmp	r3, #128	@ 0x80
 800ee8c:	d11f      	bne.n	800eece <_vfiprintf_r+0x576>
 800ee8e:	9b02      	ldr	r3, [sp, #8]
 800ee90:	9a04      	ldr	r2, [sp, #16]
 800ee92:	1a9d      	subs	r5, r3, r2
 800ee94:	2d00      	cmp	r5, #0
 800ee96:	dd1a      	ble.n	800eece <_vfiprintf_r+0x576>
 800ee98:	4b87      	ldr	r3, [pc, #540]	@ (800f0b8 <_vfiprintf_r+0x760>)
 800ee9a:	6033      	str	r3, [r6, #0]
 800ee9c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800eea0:	2d10      	cmp	r5, #16
 800eea2:	f102 0201 	add.w	r2, r2, #1
 800eea6:	f106 0008 	add.w	r0, r6, #8
 800eeaa:	f300 8130 	bgt.w	800f10e <_vfiprintf_r+0x7b6>
 800eeae:	6075      	str	r5, [r6, #4]
 800eeb0:	2a07      	cmp	r2, #7
 800eeb2:	4465      	add	r5, ip
 800eeb4:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800eeb8:	f340 813c 	ble.w	800f134 <_vfiprintf_r+0x7dc>
 800eebc:	9800      	ldr	r0, [sp, #0]
 800eebe:	aa0e      	add	r2, sp, #56	@ 0x38
 800eec0:	4639      	mov	r1, r7
 800eec2:	f7ff fd17 	bl	800e8f4 <__sprint_r>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	f040 816f 	bne.w	800f1aa <_vfiprintf_r+0x852>
 800eecc:	ae11      	add	r6, sp, #68	@ 0x44
 800eece:	9b01      	ldr	r3, [sp, #4]
 800eed0:	1ae4      	subs	r4, r4, r3
 800eed2:	2c00      	cmp	r4, #0
 800eed4:	dd1a      	ble.n	800ef0c <_vfiprintf_r+0x5b4>
 800eed6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eeda:	4877      	ldr	r0, [pc, #476]	@ (800f0b8 <_vfiprintf_r+0x760>)
 800eedc:	6030      	str	r0, [r6, #0]
 800eede:	2c10      	cmp	r4, #16
 800eee0:	f103 0301 	add.w	r3, r3, #1
 800eee4:	f106 0108 	add.w	r1, r6, #8
 800eee8:	f300 8126 	bgt.w	800f138 <_vfiprintf_r+0x7e0>
 800eeec:	6074      	str	r4, [r6, #4]
 800eeee:	2b07      	cmp	r3, #7
 800eef0:	4414      	add	r4, r2
 800eef2:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800eef6:	f340 8130 	ble.w	800f15a <_vfiprintf_r+0x802>
 800eefa:	9800      	ldr	r0, [sp, #0]
 800eefc:	aa0e      	add	r2, sp, #56	@ 0x38
 800eefe:	4639      	mov	r1, r7
 800ef00:	f7ff fcf8 	bl	800e8f4 <__sprint_r>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	f040 8150 	bne.w	800f1aa <_vfiprintf_r+0x852>
 800ef0a:	ae11      	add	r6, sp, #68	@ 0x44
 800ef0c:	9b01      	ldr	r3, [sp, #4]
 800ef0e:	9a01      	ldr	r2, [sp, #4]
 800ef10:	6073      	str	r3, [r6, #4]
 800ef12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef14:	f8c6 9000 	str.w	r9, [r6]
 800ef18:	4413      	add	r3, r2
 800ef1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef1e:	3301      	adds	r3, #1
 800ef20:	2b07      	cmp	r3, #7
 800ef22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef24:	f300 811b 	bgt.w	800f15e <_vfiprintf_r+0x806>
 800ef28:	f106 0308 	add.w	r3, r6, #8
 800ef2c:	f01a 0f04 	tst.w	sl, #4
 800ef30:	f040 811d 	bne.w	800f16e <_vfiprintf_r+0x816>
 800ef34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef38:	9904      	ldr	r1, [sp, #16]
 800ef3a:	428a      	cmp	r2, r1
 800ef3c:	bfac      	ite	ge
 800ef3e:	189b      	addge	r3, r3, r2
 800ef40:	185b      	addlt	r3, r3, r1
 800ef42:	9303      	str	r3, [sp, #12]
 800ef44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef46:	b13b      	cbz	r3, 800ef58 <_vfiprintf_r+0x600>
 800ef48:	9800      	ldr	r0, [sp, #0]
 800ef4a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef4c:	4639      	mov	r1, r7
 800ef4e:	f7ff fcd1 	bl	800e8f4 <__sprint_r>
 800ef52:	2800      	cmp	r0, #0
 800ef54:	f040 8129 	bne.w	800f1aa <_vfiprintf_r+0x852>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef5c:	4645      	mov	r5, r8
 800ef5e:	ae11      	add	r6, sp, #68	@ 0x44
 800ef60:	e55b      	b.n	800ea1a <_vfiprintf_r+0xc2>
 800ef62:	4648      	mov	r0, r9
 800ef64:	f7f1 f9b4 	bl	80002d0 <strlen>
 800ef68:	9001      	str	r0, [sp, #4]
 800ef6a:	e734      	b.n	800edd6 <_vfiprintf_r+0x47e>
 800ef6c:	f04a 0a10 	orr.w	sl, sl, #16
 800ef70:	f01a 0320 	ands.w	r3, sl, #32
 800ef74:	d008      	beq.n	800ef88 <_vfiprintf_r+0x630>
 800ef76:	3507      	adds	r5, #7
 800ef78:	f025 0507 	bic.w	r5, r5, #7
 800ef7c:	46a8      	mov	r8, r5
 800ef7e:	686d      	ldr	r5, [r5, #4]
 800ef80:	f858 4b08 	ldr.w	r4, [r8], #8
 800ef84:	2301      	movs	r3, #1
 800ef86:	e6d8      	b.n	800ed3a <_vfiprintf_r+0x3e2>
 800ef88:	46a8      	mov	r8, r5
 800ef8a:	f01a 0510 	ands.w	r5, sl, #16
 800ef8e:	f858 4b04 	ldr.w	r4, [r8], #4
 800ef92:	d001      	beq.n	800ef98 <_vfiprintf_r+0x640>
 800ef94:	461d      	mov	r5, r3
 800ef96:	e7f5      	b.n	800ef84 <_vfiprintf_r+0x62c>
 800ef98:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ef9c:	d001      	beq.n	800efa2 <_vfiprintf_r+0x64a>
 800ef9e:	b2a4      	uxth	r4, r4
 800efa0:	e7f0      	b.n	800ef84 <_vfiprintf_r+0x62c>
 800efa2:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800efa6:	d0ed      	beq.n	800ef84 <_vfiprintf_r+0x62c>
 800efa8:	b2e4      	uxtb	r4, r4
 800efaa:	e7f3      	b.n	800ef94 <_vfiprintf_r+0x63c>
 800efac:	4a43      	ldr	r2, [pc, #268]	@ (800f0bc <_vfiprintf_r+0x764>)
 800efae:	e5c9      	b.n	800eb44 <_vfiprintf_r+0x1ec>
 800efb0:	46a8      	mov	r8, r5
 800efb2:	f01a 0510 	ands.w	r5, sl, #16
 800efb6:	f858 4b04 	ldr.w	r4, [r8], #4
 800efba:	d001      	beq.n	800efc0 <_vfiprintf_r+0x668>
 800efbc:	4615      	mov	r5, r2
 800efbe:	e5cd      	b.n	800eb5c <_vfiprintf_r+0x204>
 800efc0:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800efc4:	d001      	beq.n	800efca <_vfiprintf_r+0x672>
 800efc6:	b2a4      	uxth	r4, r4
 800efc8:	e5c8      	b.n	800eb5c <_vfiprintf_r+0x204>
 800efca:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800efce:	f43f adc5 	beq.w	800eb5c <_vfiprintf_r+0x204>
 800efd2:	b2e4      	uxtb	r4, r4
 800efd4:	e7f2      	b.n	800efbc <_vfiprintf_r+0x664>
 800efd6:	2c0a      	cmp	r4, #10
 800efd8:	f175 0300 	sbcs.w	r3, r5, #0
 800efdc:	d206      	bcs.n	800efec <_vfiprintf_r+0x694>
 800efde:	3430      	adds	r4, #48	@ 0x30
 800efe0:	b2e4      	uxtb	r4, r4
 800efe2:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800efe6:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800efea:	e131      	b.n	800f250 <_vfiprintf_r+0x8f8>
 800efec:	ab3a      	add	r3, sp, #232	@ 0xe8
 800efee:	9308      	str	r3, [sp, #32]
 800eff0:	9b04      	ldr	r3, [sp, #16]
 800eff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eff6:	f04f 0a00 	mov.w	sl, #0
 800effa:	930a      	str	r3, [sp, #40]	@ 0x28
 800effc:	220a      	movs	r2, #10
 800effe:	2300      	movs	r3, #0
 800f000:	4620      	mov	r0, r4
 800f002:	4629      	mov	r1, r5
 800f004:	f7f1 fe70 	bl	8000ce8 <__aeabi_uldivmod>
 800f008:	460b      	mov	r3, r1
 800f00a:	9908      	ldr	r1, [sp, #32]
 800f00c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f00e:	3230      	adds	r2, #48	@ 0x30
 800f010:	f801 2c01 	strb.w	r2, [r1, #-1]
 800f014:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f016:	f101 39ff 	add.w	r9, r1, #4294967295
 800f01a:	f10a 0a01 	add.w	sl, sl, #1
 800f01e:	b1e2      	cbz	r2, 800f05a <_vfiprintf_r+0x702>
 800f020:	9a06      	ldr	r2, [sp, #24]
 800f022:	7812      	ldrb	r2, [r2, #0]
 800f024:	4552      	cmp	r2, sl
 800f026:	d118      	bne.n	800f05a <_vfiprintf_r+0x702>
 800f028:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800f02c:	d015      	beq.n	800f05a <_vfiprintf_r+0x702>
 800f02e:	2c0a      	cmp	r4, #10
 800f030:	f175 0200 	sbcs.w	r2, r5, #0
 800f034:	d311      	bcc.n	800f05a <_vfiprintf_r+0x702>
 800f036:	9308      	str	r3, [sp, #32]
 800f038:	9b07      	ldr	r3, [sp, #28]
 800f03a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f03c:	eba9 0903 	sub.w	r9, r9, r3
 800f040:	461a      	mov	r2, r3
 800f042:	4648      	mov	r0, r9
 800f044:	f7f9 f9ad 	bl	80083a2 <strncpy>
 800f048:	9b06      	ldr	r3, [sp, #24]
 800f04a:	785a      	ldrb	r2, [r3, #1]
 800f04c:	9b08      	ldr	r3, [sp, #32]
 800f04e:	b172      	cbz	r2, 800f06e <_vfiprintf_r+0x716>
 800f050:	9a06      	ldr	r2, [sp, #24]
 800f052:	3201      	adds	r2, #1
 800f054:	9206      	str	r2, [sp, #24]
 800f056:	f04f 0a00 	mov.w	sl, #0
 800f05a:	2c0a      	cmp	r4, #10
 800f05c:	f175 0500 	sbcs.w	r5, r5, #0
 800f060:	f0c0 80f6 	bcc.w	800f250 <_vfiprintf_r+0x8f8>
 800f064:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f066:	f8cd 9020 	str.w	r9, [sp, #32]
 800f06a:	461d      	mov	r5, r3
 800f06c:	e7c6      	b.n	800effc <_vfiprintf_r+0x6a4>
 800f06e:	4692      	mov	sl, r2
 800f070:	e7f3      	b.n	800f05a <_vfiprintf_r+0x702>
 800f072:	f004 030f 	and.w	r3, r4, #15
 800f076:	9a05      	ldr	r2, [sp, #20]
 800f078:	0924      	lsrs	r4, r4, #4
 800f07a:	5cd3      	ldrb	r3, [r2, r3]
 800f07c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f080:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f084:	092d      	lsrs	r5, r5, #4
 800f086:	ea54 0305 	orrs.w	r3, r4, r5
 800f08a:	d1f2      	bne.n	800f072 <_vfiprintf_r+0x71a>
 800f08c:	e0e0      	b.n	800f250 <_vfiprintf_r+0x8f8>
 800f08e:	b923      	cbnz	r3, 800f09a <_vfiprintf_r+0x742>
 800f090:	f01a 0f01 	tst.w	sl, #1
 800f094:	d001      	beq.n	800f09a <_vfiprintf_r+0x742>
 800f096:	2430      	movs	r4, #48	@ 0x30
 800f098:	e7a3      	b.n	800efe2 <_vfiprintf_r+0x68a>
 800f09a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f09e:	e0d7      	b.n	800f250 <_vfiprintf_r+0x8f8>
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 80a3 	beq.w	800f1ec <_vfiprintf_r+0x894>
 800f0a6:	2400      	movs	r4, #0
 800f0a8:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800f0ac:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800f0b0:	46a8      	mov	r8, r5
 800f0b2:	e5e0      	b.n	800ec76 <_vfiprintf_r+0x31e>
 800f0b4:	0800fed5 	.word	0x0800fed5
 800f0b8:	0800fec5 	.word	0x0800fec5
 800f0bc:	0800fa64 	.word	0x0800fa64
 800f0c0:	2110      	movs	r1, #16
 800f0c2:	6071      	str	r1, [r6, #4]
 800f0c4:	2a07      	cmp	r2, #7
 800f0c6:	4461      	add	r1, ip
 800f0c8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f0cc:	dd08      	ble.n	800f0e0 <_vfiprintf_r+0x788>
 800f0ce:	9800      	ldr	r0, [sp, #0]
 800f0d0:	aa0e      	add	r2, sp, #56	@ 0x38
 800f0d2:	4639      	mov	r1, r7
 800f0d4:	f7ff fc0e 	bl	800e8f4 <__sprint_r>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d166      	bne.n	800f1aa <_vfiprintf_r+0x852>
 800f0dc:	4b60      	ldr	r3, [pc, #384]	@ (800f260 <_vfiprintf_r+0x908>)
 800f0de:	a811      	add	r0, sp, #68	@ 0x44
 800f0e0:	3d10      	subs	r5, #16
 800f0e2:	4606      	mov	r6, r0
 800f0e4:	e694      	b.n	800ee10 <_vfiprintf_r+0x4b8>
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	e6ac      	b.n	800ee44 <_vfiprintf_r+0x4ec>
 800f0ea:	9800      	ldr	r0, [sp, #0]
 800f0ec:	aa0e      	add	r2, sp, #56	@ 0x38
 800f0ee:	4639      	mov	r1, r7
 800f0f0:	f7ff fc00 	bl	800e8f4 <__sprint_r>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d158      	bne.n	800f1aa <_vfiprintf_r+0x852>
 800f0f8:	ae11      	add	r6, sp, #68	@ 0x44
 800f0fa:	e6b5      	b.n	800ee68 <_vfiprintf_r+0x510>
 800f0fc:	9800      	ldr	r0, [sp, #0]
 800f0fe:	aa0e      	add	r2, sp, #56	@ 0x38
 800f100:	4639      	mov	r1, r7
 800f102:	f7ff fbf7 	bl	800e8f4 <__sprint_r>
 800f106:	2800      	cmp	r0, #0
 800f108:	d14f      	bne.n	800f1aa <_vfiprintf_r+0x852>
 800f10a:	ae11      	add	r6, sp, #68	@ 0x44
 800f10c:	e6bc      	b.n	800ee88 <_vfiprintf_r+0x530>
 800f10e:	2110      	movs	r1, #16
 800f110:	6071      	str	r1, [r6, #4]
 800f112:	2a07      	cmp	r2, #7
 800f114:	4461      	add	r1, ip
 800f116:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f11a:	dd08      	ble.n	800f12e <_vfiprintf_r+0x7d6>
 800f11c:	9800      	ldr	r0, [sp, #0]
 800f11e:	aa0e      	add	r2, sp, #56	@ 0x38
 800f120:	4639      	mov	r1, r7
 800f122:	f7ff fbe7 	bl	800e8f4 <__sprint_r>
 800f126:	2800      	cmp	r0, #0
 800f128:	d13f      	bne.n	800f1aa <_vfiprintf_r+0x852>
 800f12a:	4b4e      	ldr	r3, [pc, #312]	@ (800f264 <_vfiprintf_r+0x90c>)
 800f12c:	a811      	add	r0, sp, #68	@ 0x44
 800f12e:	3d10      	subs	r5, #16
 800f130:	4606      	mov	r6, r0
 800f132:	e6b2      	b.n	800ee9a <_vfiprintf_r+0x542>
 800f134:	4606      	mov	r6, r0
 800f136:	e6ca      	b.n	800eece <_vfiprintf_r+0x576>
 800f138:	2010      	movs	r0, #16
 800f13a:	4402      	add	r2, r0
 800f13c:	2b07      	cmp	r3, #7
 800f13e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800f142:	6070      	str	r0, [r6, #4]
 800f144:	dd06      	ble.n	800f154 <_vfiprintf_r+0x7fc>
 800f146:	9800      	ldr	r0, [sp, #0]
 800f148:	aa0e      	add	r2, sp, #56	@ 0x38
 800f14a:	4639      	mov	r1, r7
 800f14c:	f7ff fbd2 	bl	800e8f4 <__sprint_r>
 800f150:	bb58      	cbnz	r0, 800f1aa <_vfiprintf_r+0x852>
 800f152:	a911      	add	r1, sp, #68	@ 0x44
 800f154:	3c10      	subs	r4, #16
 800f156:	460e      	mov	r6, r1
 800f158:	e6bd      	b.n	800eed6 <_vfiprintf_r+0x57e>
 800f15a:	460e      	mov	r6, r1
 800f15c:	e6d6      	b.n	800ef0c <_vfiprintf_r+0x5b4>
 800f15e:	9800      	ldr	r0, [sp, #0]
 800f160:	aa0e      	add	r2, sp, #56	@ 0x38
 800f162:	4639      	mov	r1, r7
 800f164:	f7ff fbc6 	bl	800e8f4 <__sprint_r>
 800f168:	b9f8      	cbnz	r0, 800f1aa <_vfiprintf_r+0x852>
 800f16a:	ab11      	add	r3, sp, #68	@ 0x44
 800f16c:	e6de      	b.n	800ef2c <_vfiprintf_r+0x5d4>
 800f16e:	9a02      	ldr	r2, [sp, #8]
 800f170:	9904      	ldr	r1, [sp, #16]
 800f172:	1a54      	subs	r4, r2, r1
 800f174:	2c00      	cmp	r4, #0
 800f176:	f77f aedd 	ble.w	800ef34 <_vfiprintf_r+0x5dc>
 800f17a:	4d39      	ldr	r5, [pc, #228]	@ (800f260 <_vfiprintf_r+0x908>)
 800f17c:	2610      	movs	r6, #16
 800f17e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800f182:	2c10      	cmp	r4, #16
 800f184:	f102 0201 	add.w	r2, r2, #1
 800f188:	601d      	str	r5, [r3, #0]
 800f18a:	dc1d      	bgt.n	800f1c8 <_vfiprintf_r+0x870>
 800f18c:	605c      	str	r4, [r3, #4]
 800f18e:	2a07      	cmp	r2, #7
 800f190:	440c      	add	r4, r1
 800f192:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800f196:	f77f aecd 	ble.w	800ef34 <_vfiprintf_r+0x5dc>
 800f19a:	9800      	ldr	r0, [sp, #0]
 800f19c:	aa0e      	add	r2, sp, #56	@ 0x38
 800f19e:	4639      	mov	r1, r7
 800f1a0:	f7ff fba8 	bl	800e8f4 <__sprint_r>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	f43f aec5 	beq.w	800ef34 <_vfiprintf_r+0x5dc>
 800f1aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1ac:	07d9      	lsls	r1, r3, #31
 800f1ae:	d405      	bmi.n	800f1bc <_vfiprintf_r+0x864>
 800f1b0:	89bb      	ldrh	r3, [r7, #12]
 800f1b2:	059a      	lsls	r2, r3, #22
 800f1b4:	d402      	bmi.n	800f1bc <_vfiprintf_r+0x864>
 800f1b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f1b8:	f7f9 f97d 	bl	80084b6 <__retarget_lock_release_recursive>
 800f1bc:	89bb      	ldrh	r3, [r7, #12]
 800f1be:	065b      	lsls	r3, r3, #25
 800f1c0:	f57f abfb 	bpl.w	800e9ba <_vfiprintf_r+0x62>
 800f1c4:	f7ff bbf6 	b.w	800e9b4 <_vfiprintf_r+0x5c>
 800f1c8:	3110      	adds	r1, #16
 800f1ca:	2a07      	cmp	r2, #7
 800f1cc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f1d0:	605e      	str	r6, [r3, #4]
 800f1d2:	dc02      	bgt.n	800f1da <_vfiprintf_r+0x882>
 800f1d4:	3308      	adds	r3, #8
 800f1d6:	3c10      	subs	r4, #16
 800f1d8:	e7d1      	b.n	800f17e <_vfiprintf_r+0x826>
 800f1da:	9800      	ldr	r0, [sp, #0]
 800f1dc:	aa0e      	add	r2, sp, #56	@ 0x38
 800f1de:	4639      	mov	r1, r7
 800f1e0:	f7ff fb88 	bl	800e8f4 <__sprint_r>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d1e0      	bne.n	800f1aa <_vfiprintf_r+0x852>
 800f1e8:	ab11      	add	r3, sp, #68	@ 0x44
 800f1ea:	e7f4      	b.n	800f1d6 <_vfiprintf_r+0x87e>
 800f1ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f1ee:	b913      	cbnz	r3, 800f1f6 <_vfiprintf_r+0x89e>
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f1f4:	e7d9      	b.n	800f1aa <_vfiprintf_r+0x852>
 800f1f6:	9800      	ldr	r0, [sp, #0]
 800f1f8:	aa0e      	add	r2, sp, #56	@ 0x38
 800f1fa:	4639      	mov	r1, r7
 800f1fc:	f7ff fb7a 	bl	800e8f4 <__sprint_r>
 800f200:	2800      	cmp	r0, #0
 800f202:	d0f5      	beq.n	800f1f0 <_vfiprintf_r+0x898>
 800f204:	e7d1      	b.n	800f1aa <_vfiprintf_r+0x852>
 800f206:	ea54 0205 	orrs.w	r2, r4, r5
 800f20a:	f8cd a010 	str.w	sl, [sp, #16]
 800f20e:	f43f ada6 	beq.w	800ed5e <_vfiprintf_r+0x406>
 800f212:	2b01      	cmp	r3, #1
 800f214:	f43f aedf 	beq.w	800efd6 <_vfiprintf_r+0x67e>
 800f218:	2b02      	cmp	r3, #2
 800f21a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f21e:	f43f af28 	beq.w	800f072 <_vfiprintf_r+0x71a>
 800f222:	f004 0307 	and.w	r3, r4, #7
 800f226:	08e4      	lsrs	r4, r4, #3
 800f228:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f22c:	08ed      	lsrs	r5, r5, #3
 800f22e:	3330      	adds	r3, #48	@ 0x30
 800f230:	ea54 0105 	orrs.w	r1, r4, r5
 800f234:	464a      	mov	r2, r9
 800f236:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f23a:	d1f2      	bne.n	800f222 <_vfiprintf_r+0x8ca>
 800f23c:	9904      	ldr	r1, [sp, #16]
 800f23e:	07c8      	lsls	r0, r1, #31
 800f240:	d506      	bpl.n	800f250 <_vfiprintf_r+0x8f8>
 800f242:	2b30      	cmp	r3, #48	@ 0x30
 800f244:	d004      	beq.n	800f250 <_vfiprintf_r+0x8f8>
 800f246:	2330      	movs	r3, #48	@ 0x30
 800f248:	f809 3c01 	strb.w	r3, [r9, #-1]
 800f24c:	f1a2 0902 	sub.w	r9, r2, #2
 800f250:	ab3a      	add	r3, sp, #232	@ 0xe8
 800f252:	eba3 0309 	sub.w	r3, r3, r9
 800f256:	9c01      	ldr	r4, [sp, #4]
 800f258:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f25c:	9301      	str	r3, [sp, #4]
 800f25e:	e5bb      	b.n	800edd8 <_vfiprintf_r+0x480>
 800f260:	0800fed5 	.word	0x0800fed5
 800f264:	0800fec5 	.word	0x0800fec5

0800f268 <__sbprintf>:
 800f268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f26a:	461f      	mov	r7, r3
 800f26c:	898b      	ldrh	r3, [r1, #12]
 800f26e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800f272:	f023 0302 	bic.w	r3, r3, #2
 800f276:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f27a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800f27c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f27e:	89cb      	ldrh	r3, [r1, #14]
 800f280:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f284:	69cb      	ldr	r3, [r1, #28]
 800f286:	9307      	str	r3, [sp, #28]
 800f288:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800f28a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f28c:	ab1a      	add	r3, sp, #104	@ 0x68
 800f28e:	9300      	str	r3, [sp, #0]
 800f290:	9304      	str	r3, [sp, #16]
 800f292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f296:	4615      	mov	r5, r2
 800f298:	4606      	mov	r6, r0
 800f29a:	9302      	str	r3, [sp, #8]
 800f29c:	9305      	str	r3, [sp, #20]
 800f29e:	a816      	add	r0, sp, #88	@ 0x58
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	460c      	mov	r4, r1
 800f2a4:	9306      	str	r3, [sp, #24]
 800f2a6:	f7f9 f903 	bl	80084b0 <__retarget_lock_init_recursive>
 800f2aa:	462a      	mov	r2, r5
 800f2ac:	463b      	mov	r3, r7
 800f2ae:	4669      	mov	r1, sp
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	f7ff fb51 	bl	800e958 <_vfiprintf_r>
 800f2b6:	1e05      	subs	r5, r0, #0
 800f2b8:	db07      	blt.n	800f2ca <__sbprintf+0x62>
 800f2ba:	4669      	mov	r1, sp
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f7fc fa4d 	bl	800b75c <_fflush_r>
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	bf18      	it	ne
 800f2c6:	f04f 35ff 	movne.w	r5, #4294967295
 800f2ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f2ce:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f2d0:	065b      	lsls	r3, r3, #25
 800f2d2:	bf42      	ittt	mi
 800f2d4:	89a3      	ldrhmi	r3, [r4, #12]
 800f2d6:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800f2da:	81a3      	strhmi	r3, [r4, #12]
 800f2dc:	f7f9 f8e9 	bl	80084b2 <__retarget_lock_close_recursive>
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800f2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2e8 <__sfvwrite_r>:
 800f2e8:	6893      	ldr	r3, [r2, #8]
 800f2ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ee:	4606      	mov	r6, r0
 800f2f0:	460c      	mov	r4, r1
 800f2f2:	4691      	mov	r9, r2
 800f2f4:	b91b      	cbnz	r3, 800f2fe <__sfvwrite_r+0x16>
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	b003      	add	sp, #12
 800f2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2fe:	898b      	ldrh	r3, [r1, #12]
 800f300:	0718      	lsls	r0, r3, #28
 800f302:	d550      	bpl.n	800f3a6 <__sfvwrite_r+0xbe>
 800f304:	690b      	ldr	r3, [r1, #16]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d04d      	beq.n	800f3a6 <__sfvwrite_r+0xbe>
 800f30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f30e:	f8d9 8000 	ldr.w	r8, [r9]
 800f312:	f013 0702 	ands.w	r7, r3, #2
 800f316:	d16b      	bne.n	800f3f0 <__sfvwrite_r+0x108>
 800f318:	f013 0301 	ands.w	r3, r3, #1
 800f31c:	f000 809c 	beq.w	800f458 <__sfvwrite_r+0x170>
 800f320:	4638      	mov	r0, r7
 800f322:	46ba      	mov	sl, r7
 800f324:	46bb      	mov	fp, r7
 800f326:	f1bb 0f00 	cmp.w	fp, #0
 800f32a:	f000 8103 	beq.w	800f534 <__sfvwrite_r+0x24c>
 800f32e:	b950      	cbnz	r0, 800f346 <__sfvwrite_r+0x5e>
 800f330:	465a      	mov	r2, fp
 800f332:	210a      	movs	r1, #10
 800f334:	4650      	mov	r0, sl
 800f336:	f7f0 ff7b 	bl	8000230 <memchr>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	f000 8100 	beq.w	800f540 <__sfvwrite_r+0x258>
 800f340:	3001      	adds	r0, #1
 800f342:	eba0 070a 	sub.w	r7, r0, sl
 800f346:	6820      	ldr	r0, [r4, #0]
 800f348:	6921      	ldr	r1, [r4, #16]
 800f34a:	68a5      	ldr	r5, [r4, #8]
 800f34c:	6963      	ldr	r3, [r4, #20]
 800f34e:	455f      	cmp	r7, fp
 800f350:	463a      	mov	r2, r7
 800f352:	bf28      	it	cs
 800f354:	465a      	movcs	r2, fp
 800f356:	4288      	cmp	r0, r1
 800f358:	f240 80f5 	bls.w	800f546 <__sfvwrite_r+0x25e>
 800f35c:	441d      	add	r5, r3
 800f35e:	42aa      	cmp	r2, r5
 800f360:	f340 80f1 	ble.w	800f546 <__sfvwrite_r+0x25e>
 800f364:	4651      	mov	r1, sl
 800f366:	462a      	mov	r2, r5
 800f368:	f7f8 fff9 	bl	800835e <memmove>
 800f36c:	6823      	ldr	r3, [r4, #0]
 800f36e:	442b      	add	r3, r5
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	4621      	mov	r1, r4
 800f374:	4630      	mov	r0, r6
 800f376:	f7fc f9f1 	bl	800b75c <_fflush_r>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d167      	bne.n	800f44e <__sfvwrite_r+0x166>
 800f37e:	1b7f      	subs	r7, r7, r5
 800f380:	f040 80f9 	bne.w	800f576 <__sfvwrite_r+0x28e>
 800f384:	4621      	mov	r1, r4
 800f386:	4630      	mov	r0, r6
 800f388:	f7fc f9e8 	bl	800b75c <_fflush_r>
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d15e      	bne.n	800f44e <__sfvwrite_r+0x166>
 800f390:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f394:	1b5b      	subs	r3, r3, r5
 800f396:	44aa      	add	sl, r5
 800f398:	ebab 0b05 	sub.w	fp, fp, r5
 800f39c:	f8c9 3008 	str.w	r3, [r9, #8]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1c0      	bne.n	800f326 <__sfvwrite_r+0x3e>
 800f3a4:	e7a7      	b.n	800f2f6 <__sfvwrite_r+0xe>
 800f3a6:	4621      	mov	r1, r4
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f000 f8e9 	bl	800f580 <__swsetup_r>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d0ab      	beq.n	800f30a <__sfvwrite_r+0x22>
 800f3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b6:	e79f      	b.n	800f2f8 <__sfvwrite_r+0x10>
 800f3b8:	e9d8 a500 	ldrd	sl, r5, [r8]
 800f3bc:	f108 0808 	add.w	r8, r8, #8
 800f3c0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f3c4:	69e1      	ldr	r1, [r4, #28]
 800f3c6:	2d00      	cmp	r5, #0
 800f3c8:	d0f6      	beq.n	800f3b8 <__sfvwrite_r+0xd0>
 800f3ca:	42bd      	cmp	r5, r7
 800f3cc:	462b      	mov	r3, r5
 800f3ce:	4652      	mov	r2, sl
 800f3d0:	bf28      	it	cs
 800f3d2:	463b      	movcs	r3, r7
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	47d8      	blx	fp
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	dd38      	ble.n	800f44e <__sfvwrite_r+0x166>
 800f3dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f3e0:	1a1b      	subs	r3, r3, r0
 800f3e2:	4482      	add	sl, r0
 800f3e4:	1a2d      	subs	r5, r5, r0
 800f3e6:	f8c9 3008 	str.w	r3, [r9, #8]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d1e8      	bne.n	800f3c0 <__sfvwrite_r+0xd8>
 800f3ee:	e782      	b.n	800f2f6 <__sfvwrite_r+0xe>
 800f3f0:	f04f 0a00 	mov.w	sl, #0
 800f3f4:	4f61      	ldr	r7, [pc, #388]	@ (800f57c <__sfvwrite_r+0x294>)
 800f3f6:	4655      	mov	r5, sl
 800f3f8:	e7e2      	b.n	800f3c0 <__sfvwrite_r+0xd8>
 800f3fa:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800f3fe:	f108 0808 	add.w	r8, r8, #8
 800f402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f406:	6820      	ldr	r0, [r4, #0]
 800f408:	68a2      	ldr	r2, [r4, #8]
 800f40a:	f1ba 0f00 	cmp.w	sl, #0
 800f40e:	d0f4      	beq.n	800f3fa <__sfvwrite_r+0x112>
 800f410:	0599      	lsls	r1, r3, #22
 800f412:	d563      	bpl.n	800f4dc <__sfvwrite_r+0x1f4>
 800f414:	4552      	cmp	r2, sl
 800f416:	d836      	bhi.n	800f486 <__sfvwrite_r+0x19e>
 800f418:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800f41c:	d033      	beq.n	800f486 <__sfvwrite_r+0x19e>
 800f41e:	6921      	ldr	r1, [r4, #16]
 800f420:	6965      	ldr	r5, [r4, #20]
 800f422:	eba0 0b01 	sub.w	fp, r0, r1
 800f426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f42a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f42e:	f10b 0201 	add.w	r2, fp, #1
 800f432:	106d      	asrs	r5, r5, #1
 800f434:	4452      	add	r2, sl
 800f436:	4295      	cmp	r5, r2
 800f438:	bf38      	it	cc
 800f43a:	4615      	movcc	r5, r2
 800f43c:	055b      	lsls	r3, r3, #21
 800f43e:	d53d      	bpl.n	800f4bc <__sfvwrite_r+0x1d4>
 800f440:	4629      	mov	r1, r5
 800f442:	4630      	mov	r0, r6
 800f444:	f7f9 f96c 	bl	8008720 <_malloc_r>
 800f448:	b948      	cbnz	r0, 800f45e <__sfvwrite_r+0x176>
 800f44a:	230c      	movs	r3, #12
 800f44c:	6033      	str	r3, [r6, #0]
 800f44e:	89a3      	ldrh	r3, [r4, #12]
 800f450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f454:	81a3      	strh	r3, [r4, #12]
 800f456:	e7ac      	b.n	800f3b2 <__sfvwrite_r+0xca>
 800f458:	461f      	mov	r7, r3
 800f45a:	469a      	mov	sl, r3
 800f45c:	e7d1      	b.n	800f402 <__sfvwrite_r+0x11a>
 800f45e:	465a      	mov	r2, fp
 800f460:	6921      	ldr	r1, [r4, #16]
 800f462:	9001      	str	r0, [sp, #4]
 800f464:	f7f9 f828 	bl	80084b8 <memcpy>
 800f468:	89a2      	ldrh	r2, [r4, #12]
 800f46a:	9b01      	ldr	r3, [sp, #4]
 800f46c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800f470:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800f474:	81a2      	strh	r2, [r4, #12]
 800f476:	6123      	str	r3, [r4, #16]
 800f478:	6165      	str	r5, [r4, #20]
 800f47a:	445b      	add	r3, fp
 800f47c:	eba5 050b 	sub.w	r5, r5, fp
 800f480:	6023      	str	r3, [r4, #0]
 800f482:	4652      	mov	r2, sl
 800f484:	60a5      	str	r5, [r4, #8]
 800f486:	4552      	cmp	r2, sl
 800f488:	bf28      	it	cs
 800f48a:	4652      	movcs	r2, sl
 800f48c:	6820      	ldr	r0, [r4, #0]
 800f48e:	9201      	str	r2, [sp, #4]
 800f490:	4639      	mov	r1, r7
 800f492:	f7f8 ff64 	bl	800835e <memmove>
 800f496:	68a3      	ldr	r3, [r4, #8]
 800f498:	9a01      	ldr	r2, [sp, #4]
 800f49a:	1a9b      	subs	r3, r3, r2
 800f49c:	60a3      	str	r3, [r4, #8]
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	4655      	mov	r5, sl
 800f4a4:	6023      	str	r3, [r4, #0]
 800f4a6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f4aa:	1b5b      	subs	r3, r3, r5
 800f4ac:	442f      	add	r7, r5
 800f4ae:	ebaa 0a05 	sub.w	sl, sl, r5
 800f4b2:	f8c9 3008 	str.w	r3, [r9, #8]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1a3      	bne.n	800f402 <__sfvwrite_r+0x11a>
 800f4ba:	e71c      	b.n	800f2f6 <__sfvwrite_r+0xe>
 800f4bc:	462a      	mov	r2, r5
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f7f9 fb74 	bl	8008bac <_realloc_r>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d1d5      	bne.n	800f476 <__sfvwrite_r+0x18e>
 800f4ca:	6921      	ldr	r1, [r4, #16]
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f7f9 f867 	bl	80085a0 <_free_r>
 800f4d2:	89a3      	ldrh	r3, [r4, #12]
 800f4d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f4d8:	81a3      	strh	r3, [r4, #12]
 800f4da:	e7b6      	b.n	800f44a <__sfvwrite_r+0x162>
 800f4dc:	6923      	ldr	r3, [r4, #16]
 800f4de:	4283      	cmp	r3, r0
 800f4e0:	d302      	bcc.n	800f4e8 <__sfvwrite_r+0x200>
 800f4e2:	6961      	ldr	r1, [r4, #20]
 800f4e4:	4551      	cmp	r1, sl
 800f4e6:	d915      	bls.n	800f514 <__sfvwrite_r+0x22c>
 800f4e8:	4552      	cmp	r2, sl
 800f4ea:	bf28      	it	cs
 800f4ec:	4652      	movcs	r2, sl
 800f4ee:	4639      	mov	r1, r7
 800f4f0:	4615      	mov	r5, r2
 800f4f2:	f7f8 ff34 	bl	800835e <memmove>
 800f4f6:	68a3      	ldr	r3, [r4, #8]
 800f4f8:	6822      	ldr	r2, [r4, #0]
 800f4fa:	1b5b      	subs	r3, r3, r5
 800f4fc:	442a      	add	r2, r5
 800f4fe:	60a3      	str	r3, [r4, #8]
 800f500:	6022      	str	r2, [r4, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1cf      	bne.n	800f4a6 <__sfvwrite_r+0x1be>
 800f506:	4621      	mov	r1, r4
 800f508:	4630      	mov	r0, r6
 800f50a:	f7fc f927 	bl	800b75c <_fflush_r>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d0c9      	beq.n	800f4a6 <__sfvwrite_r+0x1be>
 800f512:	e79c      	b.n	800f44e <__sfvwrite_r+0x166>
 800f514:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f518:	4553      	cmp	r3, sl
 800f51a:	bf28      	it	cs
 800f51c:	4653      	movcs	r3, sl
 800f51e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f520:	fb93 f3f1 	sdiv	r3, r3, r1
 800f524:	463a      	mov	r2, r7
 800f526:	434b      	muls	r3, r1
 800f528:	4630      	mov	r0, r6
 800f52a:	69e1      	ldr	r1, [r4, #28]
 800f52c:	47a8      	blx	r5
 800f52e:	1e05      	subs	r5, r0, #0
 800f530:	dcb9      	bgt.n	800f4a6 <__sfvwrite_r+0x1be>
 800f532:	e78c      	b.n	800f44e <__sfvwrite_r+0x166>
 800f534:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800f538:	2000      	movs	r0, #0
 800f53a:	f108 0808 	add.w	r8, r8, #8
 800f53e:	e6f2      	b.n	800f326 <__sfvwrite_r+0x3e>
 800f540:	f10b 0701 	add.w	r7, fp, #1
 800f544:	e6ff      	b.n	800f346 <__sfvwrite_r+0x5e>
 800f546:	4293      	cmp	r3, r2
 800f548:	dc08      	bgt.n	800f55c <__sfvwrite_r+0x274>
 800f54a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f54c:	69e1      	ldr	r1, [r4, #28]
 800f54e:	4652      	mov	r2, sl
 800f550:	4630      	mov	r0, r6
 800f552:	47a8      	blx	r5
 800f554:	1e05      	subs	r5, r0, #0
 800f556:	f73f af12 	bgt.w	800f37e <__sfvwrite_r+0x96>
 800f55a:	e778      	b.n	800f44e <__sfvwrite_r+0x166>
 800f55c:	4651      	mov	r1, sl
 800f55e:	9201      	str	r2, [sp, #4]
 800f560:	f7f8 fefd 	bl	800835e <memmove>
 800f564:	9a01      	ldr	r2, [sp, #4]
 800f566:	68a3      	ldr	r3, [r4, #8]
 800f568:	1a9b      	subs	r3, r3, r2
 800f56a:	60a3      	str	r3, [r4, #8]
 800f56c:	6823      	ldr	r3, [r4, #0]
 800f56e:	4413      	add	r3, r2
 800f570:	6023      	str	r3, [r4, #0]
 800f572:	4615      	mov	r5, r2
 800f574:	e703      	b.n	800f37e <__sfvwrite_r+0x96>
 800f576:	2001      	movs	r0, #1
 800f578:	e70a      	b.n	800f390 <__sfvwrite_r+0xa8>
 800f57a:	bf00      	nop
 800f57c:	7ffffc00 	.word	0x7ffffc00

0800f580 <__swsetup_r>:
 800f580:	b538      	push	{r3, r4, r5, lr}
 800f582:	4b29      	ldr	r3, [pc, #164]	@ (800f628 <__swsetup_r+0xa8>)
 800f584:	4605      	mov	r5, r0
 800f586:	6818      	ldr	r0, [r3, #0]
 800f588:	460c      	mov	r4, r1
 800f58a:	b118      	cbz	r0, 800f594 <__swsetup_r+0x14>
 800f58c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f58e:	b90b      	cbnz	r3, 800f594 <__swsetup_r+0x14>
 800f590:	f7f8 fe0c 	bl	80081ac <__sinit>
 800f594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f598:	0719      	lsls	r1, r3, #28
 800f59a:	d422      	bmi.n	800f5e2 <__swsetup_r+0x62>
 800f59c:	06da      	lsls	r2, r3, #27
 800f59e:	d407      	bmi.n	800f5b0 <__swsetup_r+0x30>
 800f5a0:	2209      	movs	r2, #9
 800f5a2:	602a      	str	r2, [r5, #0]
 800f5a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5a8:	81a3      	strh	r3, [r4, #12]
 800f5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ae:	e033      	b.n	800f618 <__swsetup_r+0x98>
 800f5b0:	0758      	lsls	r0, r3, #29
 800f5b2:	d512      	bpl.n	800f5da <__swsetup_r+0x5a>
 800f5b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f5b6:	b141      	cbz	r1, 800f5ca <__swsetup_r+0x4a>
 800f5b8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f5bc:	4299      	cmp	r1, r3
 800f5be:	d002      	beq.n	800f5c6 <__swsetup_r+0x46>
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	f7f8 ffed 	bl	80085a0 <_free_r>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5ca:	89a3      	ldrh	r3, [r4, #12]
 800f5cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f5d0:	81a3      	strh	r3, [r4, #12]
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	6063      	str	r3, [r4, #4]
 800f5d6:	6923      	ldr	r3, [r4, #16]
 800f5d8:	6023      	str	r3, [r4, #0]
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	f043 0308 	orr.w	r3, r3, #8
 800f5e0:	81a3      	strh	r3, [r4, #12]
 800f5e2:	6923      	ldr	r3, [r4, #16]
 800f5e4:	b94b      	cbnz	r3, 800f5fa <__swsetup_r+0x7a>
 800f5e6:	89a3      	ldrh	r3, [r4, #12]
 800f5e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f5ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5f0:	d003      	beq.n	800f5fa <__swsetup_r+0x7a>
 800f5f2:	4621      	mov	r1, r4
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	f000 f8c9 	bl	800f78c <__smakebuf_r>
 800f5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5fe:	f013 0201 	ands.w	r2, r3, #1
 800f602:	d00a      	beq.n	800f61a <__swsetup_r+0x9a>
 800f604:	2200      	movs	r2, #0
 800f606:	60a2      	str	r2, [r4, #8]
 800f608:	6962      	ldr	r2, [r4, #20]
 800f60a:	4252      	negs	r2, r2
 800f60c:	61a2      	str	r2, [r4, #24]
 800f60e:	6922      	ldr	r2, [r4, #16]
 800f610:	b942      	cbnz	r2, 800f624 <__swsetup_r+0xa4>
 800f612:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f616:	d1c5      	bne.n	800f5a4 <__swsetup_r+0x24>
 800f618:	bd38      	pop	{r3, r4, r5, pc}
 800f61a:	0799      	lsls	r1, r3, #30
 800f61c:	bf58      	it	pl
 800f61e:	6962      	ldrpl	r2, [r4, #20]
 800f620:	60a2      	str	r2, [r4, #8]
 800f622:	e7f4      	b.n	800f60e <__swsetup_r+0x8e>
 800f624:	2000      	movs	r0, #0
 800f626:	e7f7      	b.n	800f618 <__swsetup_r+0x98>
 800f628:	20000050 	.word	0x20000050

0800f62c <__fputwc>:
 800f62c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f630:	4680      	mov	r8, r0
 800f632:	460f      	mov	r7, r1
 800f634:	4614      	mov	r4, r2
 800f636:	f7fc f90f 	bl	800b858 <__locale_mb_cur_max>
 800f63a:	2801      	cmp	r0, #1
 800f63c:	4605      	mov	r5, r0
 800f63e:	d11b      	bne.n	800f678 <__fputwc+0x4c>
 800f640:	1e7b      	subs	r3, r7, #1
 800f642:	2bfe      	cmp	r3, #254	@ 0xfe
 800f644:	d818      	bhi.n	800f678 <__fputwc+0x4c>
 800f646:	f88d 7004 	strb.w	r7, [sp, #4]
 800f64a:	2600      	movs	r6, #0
 800f64c:	f10d 0904 	add.w	r9, sp, #4
 800f650:	42ae      	cmp	r6, r5
 800f652:	d021      	beq.n	800f698 <__fputwc+0x6c>
 800f654:	68a3      	ldr	r3, [r4, #8]
 800f656:	f816 1009 	ldrb.w	r1, [r6, r9]
 800f65a:	3b01      	subs	r3, #1
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	60a3      	str	r3, [r4, #8]
 800f660:	da04      	bge.n	800f66c <__fputwc+0x40>
 800f662:	69a2      	ldr	r2, [r4, #24]
 800f664:	4293      	cmp	r3, r2
 800f666:	db1b      	blt.n	800f6a0 <__fputwc+0x74>
 800f668:	290a      	cmp	r1, #10
 800f66a:	d019      	beq.n	800f6a0 <__fputwc+0x74>
 800f66c:	6823      	ldr	r3, [r4, #0]
 800f66e:	1c5a      	adds	r2, r3, #1
 800f670:	6022      	str	r2, [r4, #0]
 800f672:	7019      	strb	r1, [r3, #0]
 800f674:	3601      	adds	r6, #1
 800f676:	e7eb      	b.n	800f650 <__fputwc+0x24>
 800f678:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800f67c:	463a      	mov	r2, r7
 800f67e:	a901      	add	r1, sp, #4
 800f680:	4640      	mov	r0, r8
 800f682:	f000 f845 	bl	800f710 <_wcrtomb_r>
 800f686:	1c43      	adds	r3, r0, #1
 800f688:	4605      	mov	r5, r0
 800f68a:	d1de      	bne.n	800f64a <__fputwc+0x1e>
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f692:	81a3      	strh	r3, [r4, #12]
 800f694:	f04f 37ff 	mov.w	r7, #4294967295
 800f698:	4638      	mov	r0, r7
 800f69a:	b003      	add	sp, #12
 800f69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	4640      	mov	r0, r8
 800f6a4:	f000 f8ae 	bl	800f804 <__swbuf_r>
 800f6a8:	3001      	adds	r0, #1
 800f6aa:	d1e3      	bne.n	800f674 <__fputwc+0x48>
 800f6ac:	e7f2      	b.n	800f694 <__fputwc+0x68>

0800f6ae <_fputwc_r>:
 800f6ae:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800f6b0:	07db      	lsls	r3, r3, #31
 800f6b2:	b570      	push	{r4, r5, r6, lr}
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	460e      	mov	r6, r1
 800f6b8:	4614      	mov	r4, r2
 800f6ba:	d405      	bmi.n	800f6c8 <_fputwc_r+0x1a>
 800f6bc:	8993      	ldrh	r3, [r2, #12]
 800f6be:	0598      	lsls	r0, r3, #22
 800f6c0:	d402      	bmi.n	800f6c8 <_fputwc_r+0x1a>
 800f6c2:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800f6c4:	f7f8 fef6 	bl	80084b4 <__retarget_lock_acquire_recursive>
 800f6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6cc:	0499      	lsls	r1, r3, #18
 800f6ce:	d406      	bmi.n	800f6de <_fputwc_r+0x30>
 800f6d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f6d4:	81a3      	strh	r3, [r4, #12]
 800f6d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f6dc:	6663      	str	r3, [r4, #100]	@ 0x64
 800f6de:	4622      	mov	r2, r4
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	f7ff ffa2 	bl	800f62c <__fputwc>
 800f6e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6ea:	07da      	lsls	r2, r3, #31
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	d405      	bmi.n	800f6fc <_fputwc_r+0x4e>
 800f6f0:	89a3      	ldrh	r3, [r4, #12]
 800f6f2:	059b      	lsls	r3, r3, #22
 800f6f4:	d402      	bmi.n	800f6fc <_fputwc_r+0x4e>
 800f6f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6f8:	f7f8 fedd 	bl	80084b6 <__retarget_lock_release_recursive>
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}

0800f700 <abort>:
 800f700:	b508      	push	{r3, lr}
 800f702:	2006      	movs	r0, #6
 800f704:	f000 f8f0 	bl	800f8e8 <raise>
 800f708:	2001      	movs	r0, #1
 800f70a:	f7f3 f8e5 	bl	80028d8 <_exit>
	...

0800f710 <_wcrtomb_r>:
 800f710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f712:	4c09      	ldr	r4, [pc, #36]	@ (800f738 <_wcrtomb_r+0x28>)
 800f714:	b085      	sub	sp, #20
 800f716:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800f71a:	4605      	mov	r5, r0
 800f71c:	461e      	mov	r6, r3
 800f71e:	b909      	cbnz	r1, 800f724 <_wcrtomb_r+0x14>
 800f720:	460a      	mov	r2, r1
 800f722:	a901      	add	r1, sp, #4
 800f724:	47b8      	blx	r7
 800f726:	1c43      	adds	r3, r0, #1
 800f728:	bf01      	itttt	eq
 800f72a:	2300      	moveq	r3, #0
 800f72c:	6033      	streq	r3, [r6, #0]
 800f72e:	238a      	moveq	r3, #138	@ 0x8a
 800f730:	602b      	streq	r3, [r5, #0]
 800f732:	b005      	add	sp, #20
 800f734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f736:	bf00      	nop
 800f738:	2000058c 	.word	0x2000058c

0800f73c <__swhatbuf_r>:
 800f73c:	b570      	push	{r4, r5, r6, lr}
 800f73e:	460c      	mov	r4, r1
 800f740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f744:	2900      	cmp	r1, #0
 800f746:	b096      	sub	sp, #88	@ 0x58
 800f748:	4615      	mov	r5, r2
 800f74a:	461e      	mov	r6, r3
 800f74c:	da07      	bge.n	800f75e <__swhatbuf_r+0x22>
 800f74e:	89a1      	ldrh	r1, [r4, #12]
 800f750:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800f754:	d117      	bne.n	800f786 <__swhatbuf_r+0x4a>
 800f756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f75a:	4608      	mov	r0, r1
 800f75c:	e00f      	b.n	800f77e <__swhatbuf_r+0x42>
 800f75e:	466a      	mov	r2, sp
 800f760:	f000 f8ca 	bl	800f8f8 <_fstat_r>
 800f764:	2800      	cmp	r0, #0
 800f766:	dbf2      	blt.n	800f74e <__swhatbuf_r+0x12>
 800f768:	9901      	ldr	r1, [sp, #4]
 800f76a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f76e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f772:	4259      	negs	r1, r3
 800f774:	4159      	adcs	r1, r3
 800f776:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800f77a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f77e:	6031      	str	r1, [r6, #0]
 800f780:	602b      	str	r3, [r5, #0]
 800f782:	b016      	add	sp, #88	@ 0x58
 800f784:	bd70      	pop	{r4, r5, r6, pc}
 800f786:	2100      	movs	r1, #0
 800f788:	2340      	movs	r3, #64	@ 0x40
 800f78a:	e7e6      	b.n	800f75a <__swhatbuf_r+0x1e>

0800f78c <__smakebuf_r>:
 800f78c:	898b      	ldrh	r3, [r1, #12]
 800f78e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f790:	079d      	lsls	r5, r3, #30
 800f792:	4606      	mov	r6, r0
 800f794:	460c      	mov	r4, r1
 800f796:	d507      	bpl.n	800f7a8 <__smakebuf_r+0x1c>
 800f798:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800f79c:	6023      	str	r3, [r4, #0]
 800f79e:	6123      	str	r3, [r4, #16]
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	6163      	str	r3, [r4, #20]
 800f7a4:	b003      	add	sp, #12
 800f7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7a8:	ab01      	add	r3, sp, #4
 800f7aa:	466a      	mov	r2, sp
 800f7ac:	f7ff ffc6 	bl	800f73c <__swhatbuf_r>
 800f7b0:	9f00      	ldr	r7, [sp, #0]
 800f7b2:	4605      	mov	r5, r0
 800f7b4:	4639      	mov	r1, r7
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	f7f8 ffb2 	bl	8008720 <_malloc_r>
 800f7bc:	b948      	cbnz	r0, 800f7d2 <__smakebuf_r+0x46>
 800f7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7c2:	059a      	lsls	r2, r3, #22
 800f7c4:	d4ee      	bmi.n	800f7a4 <__smakebuf_r+0x18>
 800f7c6:	f023 0303 	bic.w	r3, r3, #3
 800f7ca:	f043 0302 	orr.w	r3, r3, #2
 800f7ce:	81a3      	strh	r3, [r4, #12]
 800f7d0:	e7e2      	b.n	800f798 <__smakebuf_r+0xc>
 800f7d2:	89a3      	ldrh	r3, [r4, #12]
 800f7d4:	6020      	str	r0, [r4, #0]
 800f7d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7da:	81a3      	strh	r3, [r4, #12]
 800f7dc:	9b01      	ldr	r3, [sp, #4]
 800f7de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7e2:	b15b      	cbz	r3, 800f7fc <__smakebuf_r+0x70>
 800f7e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	f000 f897 	bl	800f91c <_isatty_r>
 800f7ee:	b128      	cbz	r0, 800f7fc <__smakebuf_r+0x70>
 800f7f0:	89a3      	ldrh	r3, [r4, #12]
 800f7f2:	f023 0303 	bic.w	r3, r3, #3
 800f7f6:	f043 0301 	orr.w	r3, r3, #1
 800f7fa:	81a3      	strh	r3, [r4, #12]
 800f7fc:	89a3      	ldrh	r3, [r4, #12]
 800f7fe:	431d      	orrs	r5, r3
 800f800:	81a5      	strh	r5, [r4, #12]
 800f802:	e7cf      	b.n	800f7a4 <__smakebuf_r+0x18>

0800f804 <__swbuf_r>:
 800f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f806:	460e      	mov	r6, r1
 800f808:	4614      	mov	r4, r2
 800f80a:	4605      	mov	r5, r0
 800f80c:	b118      	cbz	r0, 800f816 <__swbuf_r+0x12>
 800f80e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f810:	b90b      	cbnz	r3, 800f816 <__swbuf_r+0x12>
 800f812:	f7f8 fccb 	bl	80081ac <__sinit>
 800f816:	69a3      	ldr	r3, [r4, #24]
 800f818:	60a3      	str	r3, [r4, #8]
 800f81a:	89a3      	ldrh	r3, [r4, #12]
 800f81c:	0719      	lsls	r1, r3, #28
 800f81e:	d501      	bpl.n	800f824 <__swbuf_r+0x20>
 800f820:	6923      	ldr	r3, [r4, #16]
 800f822:	b943      	cbnz	r3, 800f836 <__swbuf_r+0x32>
 800f824:	4621      	mov	r1, r4
 800f826:	4628      	mov	r0, r5
 800f828:	f7ff feaa 	bl	800f580 <__swsetup_r>
 800f82c:	b118      	cbz	r0, 800f836 <__swbuf_r+0x32>
 800f82e:	f04f 37ff 	mov.w	r7, #4294967295
 800f832:	4638      	mov	r0, r7
 800f834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f83a:	b2f6      	uxtb	r6, r6
 800f83c:	049a      	lsls	r2, r3, #18
 800f83e:	4637      	mov	r7, r6
 800f840:	d406      	bmi.n	800f850 <__swbuf_r+0x4c>
 800f842:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f846:	81a3      	strh	r3, [r4, #12]
 800f848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f84a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f84e:	6663      	str	r3, [r4, #100]	@ 0x64
 800f850:	6823      	ldr	r3, [r4, #0]
 800f852:	6922      	ldr	r2, [r4, #16]
 800f854:	1a98      	subs	r0, r3, r2
 800f856:	6963      	ldr	r3, [r4, #20]
 800f858:	4283      	cmp	r3, r0
 800f85a:	dc05      	bgt.n	800f868 <__swbuf_r+0x64>
 800f85c:	4621      	mov	r1, r4
 800f85e:	4628      	mov	r0, r5
 800f860:	f7fb ff7c 	bl	800b75c <_fflush_r>
 800f864:	2800      	cmp	r0, #0
 800f866:	d1e2      	bne.n	800f82e <__swbuf_r+0x2a>
 800f868:	68a3      	ldr	r3, [r4, #8]
 800f86a:	3b01      	subs	r3, #1
 800f86c:	60a3      	str	r3, [r4, #8]
 800f86e:	6823      	ldr	r3, [r4, #0]
 800f870:	1c5a      	adds	r2, r3, #1
 800f872:	6022      	str	r2, [r4, #0]
 800f874:	701e      	strb	r6, [r3, #0]
 800f876:	6962      	ldr	r2, [r4, #20]
 800f878:	1c43      	adds	r3, r0, #1
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d004      	beq.n	800f888 <__swbuf_r+0x84>
 800f87e:	89a3      	ldrh	r3, [r4, #12]
 800f880:	07db      	lsls	r3, r3, #31
 800f882:	d5d6      	bpl.n	800f832 <__swbuf_r+0x2e>
 800f884:	2e0a      	cmp	r6, #10
 800f886:	d1d4      	bne.n	800f832 <__swbuf_r+0x2e>
 800f888:	4621      	mov	r1, r4
 800f88a:	4628      	mov	r0, r5
 800f88c:	f7fb ff66 	bl	800b75c <_fflush_r>
 800f890:	2800      	cmp	r0, #0
 800f892:	d0ce      	beq.n	800f832 <__swbuf_r+0x2e>
 800f894:	e7cb      	b.n	800f82e <__swbuf_r+0x2a>

0800f896 <_raise_r>:
 800f896:	291f      	cmp	r1, #31
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4605      	mov	r5, r0
 800f89c:	460c      	mov	r4, r1
 800f89e:	d904      	bls.n	800f8aa <_raise_r+0x14>
 800f8a0:	2316      	movs	r3, #22
 800f8a2:	6003      	str	r3, [r0, #0]
 800f8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a8:	bd38      	pop	{r3, r4, r5, pc}
 800f8aa:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800f8ae:	b112      	cbz	r2, 800f8b6 <_raise_r+0x20>
 800f8b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8b4:	b94b      	cbnz	r3, 800f8ca <_raise_r+0x34>
 800f8b6:	4628      	mov	r0, r5
 800f8b8:	f000 f852 	bl	800f960 <_getpid_r>
 800f8bc:	4622      	mov	r2, r4
 800f8be:	4601      	mov	r1, r0
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8c6:	f000 b839 	b.w	800f93c <_kill_r>
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d00a      	beq.n	800f8e4 <_raise_r+0x4e>
 800f8ce:	1c59      	adds	r1, r3, #1
 800f8d0:	d103      	bne.n	800f8da <_raise_r+0x44>
 800f8d2:	2316      	movs	r3, #22
 800f8d4:	6003      	str	r3, [r0, #0]
 800f8d6:	2001      	movs	r0, #1
 800f8d8:	e7e6      	b.n	800f8a8 <_raise_r+0x12>
 800f8da:	2100      	movs	r1, #0
 800f8dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	4798      	blx	r3
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	e7df      	b.n	800f8a8 <_raise_r+0x12>

0800f8e8 <raise>:
 800f8e8:	4b02      	ldr	r3, [pc, #8]	@ (800f8f4 <raise+0xc>)
 800f8ea:	4601      	mov	r1, r0
 800f8ec:	6818      	ldr	r0, [r3, #0]
 800f8ee:	f7ff bfd2 	b.w	800f896 <_raise_r>
 800f8f2:	bf00      	nop
 800f8f4:	20000050 	.word	0x20000050

0800f8f8 <_fstat_r>:
 800f8f8:	b538      	push	{r3, r4, r5, lr}
 800f8fa:	4d07      	ldr	r5, [pc, #28]	@ (800f918 <_fstat_r+0x20>)
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	4604      	mov	r4, r0
 800f900:	4608      	mov	r0, r1
 800f902:	4611      	mov	r1, r2
 800f904:	602b      	str	r3, [r5, #0]
 800f906:	f7f3 f837 	bl	8002978 <_fstat>
 800f90a:	1c43      	adds	r3, r0, #1
 800f90c:	d102      	bne.n	800f914 <_fstat_r+0x1c>
 800f90e:	682b      	ldr	r3, [r5, #0]
 800f910:	b103      	cbz	r3, 800f914 <_fstat_r+0x1c>
 800f912:	6023      	str	r3, [r4, #0]
 800f914:	bd38      	pop	{r3, r4, r5, pc}
 800f916:	bf00      	nop
 800f918:	20000bec 	.word	0x20000bec

0800f91c <_isatty_r>:
 800f91c:	b538      	push	{r3, r4, r5, lr}
 800f91e:	4d06      	ldr	r5, [pc, #24]	@ (800f938 <_isatty_r+0x1c>)
 800f920:	2300      	movs	r3, #0
 800f922:	4604      	mov	r4, r0
 800f924:	4608      	mov	r0, r1
 800f926:	602b      	str	r3, [r5, #0]
 800f928:	f7f3 f836 	bl	8002998 <_isatty>
 800f92c:	1c43      	adds	r3, r0, #1
 800f92e:	d102      	bne.n	800f936 <_isatty_r+0x1a>
 800f930:	682b      	ldr	r3, [r5, #0]
 800f932:	b103      	cbz	r3, 800f936 <_isatty_r+0x1a>
 800f934:	6023      	str	r3, [r4, #0]
 800f936:	bd38      	pop	{r3, r4, r5, pc}
 800f938:	20000bec 	.word	0x20000bec

0800f93c <_kill_r>:
 800f93c:	b538      	push	{r3, r4, r5, lr}
 800f93e:	4d07      	ldr	r5, [pc, #28]	@ (800f95c <_kill_r+0x20>)
 800f940:	2300      	movs	r3, #0
 800f942:	4604      	mov	r4, r0
 800f944:	4608      	mov	r0, r1
 800f946:	4611      	mov	r1, r2
 800f948:	602b      	str	r3, [r5, #0]
 800f94a:	f7f2 ffb5 	bl	80028b8 <_kill>
 800f94e:	1c43      	adds	r3, r0, #1
 800f950:	d102      	bne.n	800f958 <_kill_r+0x1c>
 800f952:	682b      	ldr	r3, [r5, #0]
 800f954:	b103      	cbz	r3, 800f958 <_kill_r+0x1c>
 800f956:	6023      	str	r3, [r4, #0]
 800f958:	bd38      	pop	{r3, r4, r5, pc}
 800f95a:	bf00      	nop
 800f95c:	20000bec 	.word	0x20000bec

0800f960 <_getpid_r>:
 800f960:	f7f2 bfa2 	b.w	80028a8 <_getpid>

0800f964 <_init>:
 800f964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f966:	bf00      	nop
 800f968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f96a:	bc08      	pop	{r3}
 800f96c:	469e      	mov	lr, r3
 800f96e:	4770      	bx	lr

0800f970 <_fini>:
 800f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f972:	bf00      	nop
 800f974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f976:	bc08      	pop	{r3}
 800f978:	469e      	mov	lr, r3
 800f97a:	4770      	bx	lr
