
ProjektFeladat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800f990  0800f990  00010990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fef8  0800fef8  000116f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fef8  0800fef8  00010ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff00  0800ff00  000116f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800ff00  0800ff00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff0c  0800ff0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006f8  20000000  0800ff10  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  200006f8  08010608  000116f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000dbc  08010608  00011dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000116f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e1b  00000000  00000000  00011728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c1  00000000  00000000  00027543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0002a708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff6  00000000  00000000  0002bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026899  00000000  00000000  0002cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c3f  00000000  00000000  000533e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9e95  00000000  00000000  0006c026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007234  00000000  00000000  00145f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0014d134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200006f8 	.word	0x200006f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f974 	.word	0x0800f974

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200006fc 	.word	0x200006fc
 800020c:	0800f974 	.word	0x0800f974

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <_ZN4GPIOC1EP12GPIO_TypeDeft>:
 *      Author: Andris
 */

#include "GPIO.hpp"

GPIO::GPIO(GPIO_TypeDef* GPIOx_p, uint16_t GPIO_Pin_p)
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	4613      	mov	r3, r2
 8001050:	80fb      	strh	r3, [r7, #6]
{
	this->GPIOx = GPIOx_p;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	601a      	str	r2, [r3, #0]
	this->GPIO_Pin = GPIO_Pin_p;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	88fa      	ldrh	r2, [r7, #6]
 800105c:	809a      	strh	r2, [r3, #4]
}
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>:

void GPIO::digitalWrite(GPIO_PinState state_p)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, state_p);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	889b      	ldrh	r3, [r3, #4]
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	4619      	mov	r1, r3
 8001084:	f002 f90a 	bl	800329c <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN8MAX3186511tempFromRTDEt>:
 */

#include "MAX31865.hpp"

float MAX31865::tempFromRTD(uint16_t rtdValue_p)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
    float resistance = (rtdValue_p >> 1) * R_REF / 32768.0; // 430.0 value of reference resistor
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa69 	bl	8000584 <__aeabi_i2d>
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <_ZN8MAX3186511tempFromRTDEt+0x90>)
 80010b8:	f7ff fbf8 	bl	80008ac <__aeabi_ddiv>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fdc0 	bl	8000c48 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]
    float temperature = (resistance - r0) / 0.385; // 0.385 is the temperature coefficient
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e0:	ee17 0a90 	vmov	r0, s15
 80010e4:	f7ff fa60 	bl	80005a8 <__aeabi_f2d>
 80010e8:	a30b      	add	r3, pc, #44	@ (adr r3, 8001118 <_ZN8MAX3186511tempFromRTDEt+0x88>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fbdd 	bl	80008ac <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fda5 	bl	8000c48 <__aeabi_d2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	60bb      	str	r3, [r7, #8]
    return temperature;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	ee07 3a90 	vmov	s15, r3
}
 8001108:	eeb0 0a67 	vmov.f32	s0, s15
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	0a3d70a4 	.word	0x0a3d70a4
 800111c:	3fd8a3d7 	.word	0x3fd8a3d7
 8001120:	40e00000 	.word	0x40e00000

08001124 <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t>:

    //15 bit RTD value, LSB is do not care
    return rtdValue << 1;
}

MAX31865::MAX31865( SPI_HandleTypeDef *hspi_p, GPIO* csPin_p , GPIO* DRDYpin_p, RTD_type_t RTD_type_p )
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
{
	hspi = hspi_p;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	605a      	str	r2, [r3, #4]
	csPin = csPin_p;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
	DRDYpin = DRDYpin_p;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	60da      	str	r2, [r3, #12]
	if(RTD_type_p == PT100)
 800114a:	7e3b      	ldrb	r3, [r7, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t+0x34>
	{
		r0 = 100;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2264      	movs	r2, #100	@ 0x64
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e002      	b.n	800115e <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t+0x3a>
	}
	else
	{
		r0 = 1000;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	22e8      	movs	r2, #232	@ 0xe8
 800115c:	701a      	strb	r2, [r3, #0]
	}
}
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_ZN8MAX318654initE24MAX31865_FilterSetting_t>:

HAL_StatusTypeDef MAX31865::init( MAX31865_FilterSetting_t filterSetting_p )
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef stat;

	//First wake up the sensor by reading a register (it will return junk)
	uint8_t buff[1];
	readNFromAddres(MAX31865_CONFIG_REG_ADDRESS, buff, 1);
 8001178:	f107 020c 	add.w	r2, r7, #12
 800117c:	2301      	movs	r3, #1
 800117e:	2100      	movs	r1, #0
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f81d 	bl	80011c0 <_ZN8MAX3186515readNFromAddresEhPhm>

	//Turn the bias voltage on and set the filter
	uint8_t configValue = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	72fb      	strb	r3, [r7, #11]

	configValue |= MAX31865_CONFIG_VBIAS_ON;
 800118a:	7afb      	ldrb	r3, [r7, #11]
 800118c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001190:	b2db      	uxtb	r3, r3
 8001192:	72fb      	strb	r3, [r7, #11]

	//If 50Hz is set, set the bit, a bit value of 0 would set the 60Hz filter
	if ( filterSetting_p == MAX31865_FILTER_50HZ ) {configValue |= MAX31865_CONFIG_REG_FILTER_50Hz;}
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d104      	bne.n	80011a4 <_ZN8MAX318654initE24MAX31865_FilterSetting_t+0x38>
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	72fb      	strb	r3, [r7, #11]

	//Write the config register
	stat = writeNFromAddres(MAX31865_CONFIG_REG_ADDRESS, &configValue, 1);
 80011a4:	f107 020b 	add.w	r2, r7, #11
 80011a8:	2301      	movs	r3, #1
 80011aa:	2100      	movs	r1, #0
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f836 	bl	800121e <_ZN8MAX3186516writeNFromAddresEhPhm>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]

	return stat;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZN8MAX3186515readNFromAddresEhPhm>:

HAL_StatusTypeDef MAX31865::readNFromAddres( uint8_t addr_p, uint8_t* rBuff_p, uint32_t dataSize_p )
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	460b      	mov	r3, r1
 80011ce:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef stat;

	csPin -> digitalWrite( GPIO_PIN_RESET );
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff48 	bl	800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	stat = HAL_SPI_Transmit( hspi, &addr_p, 1, HAL_MAX_DELAY) ; // Transmit and receive data
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6858      	ldr	r0, [r3, #4]
 80011e0:	f107 010b 	add.w	r1, r7, #11
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	2201      	movs	r2, #1
 80011ea:	f004 f854 	bl	8005296 <HAL_SPI_Transmit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	75fb      	strb	r3, [r7, #23]
	stat = HAL_SPI_Receive( hspi, rBuff_p, dataSize_p, HAL_MAX_DELAY ); // Transmit and receive data
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6858      	ldr	r0, [r3, #4]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f004 f98d 	bl	800551e <HAL_SPI_Receive>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]

	csPin -> digitalWrite( GPIO_PIN_SET );
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2101      	movs	r1, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff2c 	bl	800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	return stat;
 8001214:	7dfb      	ldrb	r3, [r7, #23]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_ZN8MAX3186516writeNFromAddresEhPhm>:

HAL_StatusTypeDef MAX31865::writeNFromAddres( uint8_t addr_p, uint8_t* wBuff_p, uint32_t dataSize_p )
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b088      	sub	sp, #32
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	460b      	mov	r3, r1
 800122c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef stat;

	//The device has a maximum of 4 consiquential writable registers
	uint8_t msgBuff[4] = {0, 0, 0, 0};
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]

	//Construct the package
	msgBuff[0] = addr_p | MAX31865_WRITE_OFFSET_MASK;
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001238:	b2db      	uxtb	r3, r3
 800123a:	753b      	strb	r3, [r7, #20]

	for(uint32_t i = 0; i < dataSize_p; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	e00c      	b.n	800125c <_ZN8MAX3186516writeNFromAddresEhPhm+0x3e>
	{
		msgBuff[1+i] = wBuff_p[i];
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	441a      	add	r2, r3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	3301      	adds	r3, #1
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	3320      	adds	r3, #32
 8001250:	443b      	add	r3, r7
 8001252:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint32_t i = 0; i < dataSize_p; i++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d3ee      	bcc.n	8001242 <_ZN8MAX3186516writeNFromAddresEhPhm+0x24>
	}

	csPin -> digitalWrite( GPIO_PIN_RESET );
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fefe 	bl	800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	stat = HAL_SPI_Transmit( hspi, msgBuff, dataSize_p+1, HAL_MAX_DELAY) ; // Transmit and receive data
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6858      	ldr	r0, [r3, #4]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	3301      	adds	r3, #1
 800127a:	b29a      	uxth	r2, r3
 800127c:	f107 0114 	add.w	r1, r7, #20
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	f004 f807 	bl	8005296 <HAL_SPI_Transmit>
 8001288:	4603      	mov	r3, r0
 800128a:	76fb      	strb	r3, [r7, #27]

	csPin -> digitalWrite( GPIO_PIN_SET );
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff feea 	bl	800106c <_ZN4GPIO12digitalWriteE13GPIO_PinState>

	return stat;
 8001298:	7efb      	ldrb	r3, [r7, #27]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_ZN8MAX3186518startContinousMeasEv>:

	return getTemp();
}

void MAX31865::startContinousMeas()
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef stat;
	uint16_t errors = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	81fb      	strh	r3, [r7, #14]
	uint8_t configValue;

	//read current config register
	stat = readNFromAddres(MAX31865_CONFIG_REG_ADDRESS, &configValue, 1);
 80012ae:	f107 020c 	add.w	r2, r7, #12
 80012b2:	2301      	movs	r3, #1
 80012b4:	2100      	movs	r1, #0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff82 	bl	80011c0 <_ZN8MAX3186515readNFromAddresEhPhm>
 80012bc:	4603      	mov	r3, r0
 80012be:	737b      	strb	r3, [r7, #13]

	//new config value
	configValue |= MAX31865_CONFIG_AUTO_CONV;
 80012c0:	7b3b      	ldrb	r3, [r7, #12]
 80012c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	733b      	strb	r3, [r7, #12]

	//set new config value
	stat = writeNFromAddres(MAX31865_CONFIG_REG_ADDRESS, &configValue, 1);
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	2301      	movs	r3, #1
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa3 	bl	800121e <_ZN8MAX3186516writeNFromAddresEhPhm>
 80012d8:	4603      	mov	r3, r0
 80012da:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 80012dc:	7b7b      	ldrb	r3, [r7, #13]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <_ZN8MAX3186518startContinousMeasEv+0x5a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d008      	beq.n	80012fc <_ZN8MAX3186518startContinousMeasEv+0x5a>
	{
		errors += SPI_error;
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	3340      	adds	r3, #64	@ 0x40
 80012ee:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	89fa      	ldrh	r2, [r7, #14]
 80012f6:	4611      	mov	r1, r2
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
	}
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZN8MAX318657getTempEv>:
		errorHandler(this, errors);
	}
}

float MAX31865::getTemp()
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef stat;
	uint16_t errors = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	81fb      	strh	r3, [r7, #14]
	uint8_t RTDbuff[2] = {0, 0};
 8001310:	2300      	movs	r3, #0
 8001312:	813b      	strh	r3, [r7, #8]

	stat = readNFromAddres(MAX31865_RTD_MSB_REG_ADDRESS, RTDbuff, 2);
 8001314:	f107 0208 	add.w	r2, r7, #8
 8001318:	2302      	movs	r3, #2
 800131a:	2101      	movs	r1, #1
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff4f 	bl	80011c0 <_ZN8MAX3186515readNFromAddresEhPhm>
 8001322:	4603      	mov	r3, r0
 8001324:	737b      	strb	r3, [r7, #13]

	uint16_t RTD = (RTDbuff[0] << 8) | RTDbuff[1]; // Combine
 8001326:	7a3b      	ldrb	r3, [r7, #8]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	7a7b      	ldrb	r3, [r7, #9]
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21b      	sxth	r3, r3
 8001334:	817b      	strh	r3, [r7, #10]

	if( ( RTD & (uint16_t) 0x1 ) != 0 ) //RTD LSB D0 ( = fault bit)  is set
 8001336:	897b      	ldrh	r3, [r7, #10]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00d      	beq.n	800135c <_ZN8MAX318657getTempEv+0x58>
	{
		if( errorHandler != NULL )
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <_ZN8MAX318657getTempEv+0x58>
		{
			errors += RTD_fault_general;
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800134e:	81fb      	strh	r3, [r7, #14]
			errorHandler(this, errors);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	89fa      	ldrh	r2, [r7, #14]
 8001356:	4611      	mov	r1, r2
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	4798      	blx	r3
		}
	}

	return tempFromRTD(RTD);
 800135c:	897b      	ldrh	r3, [r7, #10]
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fe95 	bl	8001090 <_ZN8MAX3186511tempFromRTDEt>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
	if( stat != HAL_OK && errorHandler != NULL)
	{
		errors += SPI_error;
		errorHandler(this, errors);
	}
}
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>:
 */

#include "MS.hpp"

HAL_StatusTypeDef write2EEPROM(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout, uint8_t maxTries, uint8_t delayLen)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af04      	add	r7, sp, #16
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4603      	mov	r3, r0
 8001384:	817b      	strh	r3, [r7, #10]
 8001386:	460b      	mov	r3, r1
 8001388:	813b      	strh	r3, [r7, #8]
 800138a:	4613      	mov	r3, r2
 800138c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	HAL_Delay(delayLen);
 800138e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fc06 	bl	8002ba4 <HAL_Delay>
	stat = HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 8001398:	88f8      	ldrh	r0, [r7, #6]
 800139a:	893a      	ldrh	r2, [r7, #8]
 800139c:	8979      	ldrh	r1, [r7, #10]
 800139e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4603      	mov	r3, r0
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f002 f8d3 	bl	8003558 <HAL_I2C_Mem_Write>
 80013b2:	4603      	mov	r3, r0
 80013b4:	75fb      	strb	r3, [r7, #23]

	uint8_t trycounter = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 80013ba:	e00a      	b.n	80013d2 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh+0x5e>
	{
		stat = HAL_I2C_IsDeviceReady(hi2c, DevAddress, 2, 100);
 80013bc:	8979      	ldrh	r1, [r7, #10]
 80013be:	2364      	movs	r3, #100	@ 0x64
 80013c0:	2202      	movs	r2, #2
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f002 fbf4 	bl	8003bb0 <HAL_I2C_IsDeviceReady>
 80013c8:	4603      	mov	r3, r0
 80013ca:	75fb      	strb	r3, [r7, #23]
		trycounter++;
 80013cc:	7dbb      	ldrb	r3, [r7, #22]
 80013ce:	3301      	adds	r3, #1
 80013d0:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh+0x6e>
 80013d8:	7dba      	ldrb	r2, [r7, #22]
 80013da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013de:	429a      	cmp	r2, r3
 80013e0:	d9ec      	bls.n	80013bc <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh+0x48>
	}

	return stat;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>:

HAL_StatusTypeDef readFromEEPROM(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout, uint8_t maxTries, uint8_t delayLen)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af04      	add	r7, sp, #16
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	817b      	strh	r3, [r7, #10]
 80013fe:	460b      	mov	r3, r1
 8001400:	813b      	strh	r3, [r7, #8]
 8001402:	4613      	mov	r3, r2
 8001404:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef stat;
	HAL_Delay(delayLen);
 8001406:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fbca 	bl	8002ba4 <HAL_Delay>
	stat = HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 8001410:	88f8      	ldrh	r0, [r7, #6]
 8001412:	893a      	ldrh	r2, [r7, #8]
 8001414:	8979      	ldrh	r1, [r7, #10]
 8001416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	4603      	mov	r3, r0
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f002 f991 	bl	800374c <HAL_I2C_Mem_Read>
 800142a:	4603      	mov	r3, r0
 800142c:	75fb      	strb	r3, [r7, #23]

	uint8_t trycounter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 8001432:	e011      	b.n	8001458 <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh+0x6c>
	{
		stat = HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
 8001434:	88f8      	ldrh	r0, [r7, #6]
 8001436:	893a      	ldrh	r2, [r7, #8]
 8001438:	8979      	ldrh	r1, [r7, #10]
 800143a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4603      	mov	r3, r0
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f002 f97f 	bl	800374c <HAL_I2C_Mem_Read>
 800144e:	4603      	mov	r3, r0
 8001450:	75fb      	strb	r3, [r7, #23]
		trycounter++;
 8001452:	7dbb      	ldrb	r3, [r7, #22]
 8001454:	3301      	adds	r3, #1
 8001456:	75bb      	strb	r3, [r7, #22]
	while(stat != HAL_OK && trycounter <= maxTries)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh+0x7c>
 800145e:	7dba      	ldrb	r2, [r7, #22]
 8001460:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001464:	429a      	cmp	r2, r3
 8001466:	d9e5      	bls.n	8001434 <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh+0x48>
	}

	return stat;
 8001468:	7dfb      	ldrb	r3, [r7, #23]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth>:

HAL_StatusTypeDef writeMultiPage( I2C_HandleTypeDef* I2Ccontroller, uint8_t EEPROMAddress, uint16_t start, uint8_t *data_p, uint16_t len, uint8_t pageLen )
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b08a      	sub	sp, #40	@ 0x28
 8001476:	af04      	add	r7, sp, #16
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	72fb      	strb	r3, [r7, #11]
 8001480:	4613      	mov	r3, r2
 8001482:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef stat;

	uint16_t remainder; //this much is left until the end of the current page
	while(len != 0)
 8001484:	e068      	b.n	8001558 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xe6>
	{
		remainder = (pageLen-((start)%pageLen));
 8001486:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800148a:	b299      	uxth	r1, r3
 800148c:	893b      	ldrh	r3, [r7, #8]
 800148e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001492:	fb93 f0f2 	sdiv	r0, r3, r2
 8001496:	fb00 f202 	mul.w	r2, r0, r2
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	1acb      	subs	r3, r1, r3
 80014a0:	82bb      	strh	r3, [r7, #20]

		if( remainder <= len )
 80014a2:	8aba      	ldrh	r2, [r7, #20]
 80014a4:	8c3b      	ldrh	r3, [r7, #32]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d830      	bhi.n	800150c <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x9a>
		{
			HAL_Delay(5);
 80014aa:	2005      	movs	r0, #5
 80014ac:	f001 fb7a 	bl	8002ba4 <HAL_Delay>
			stat = HAL_I2C_Mem_Write(I2Ccontroller, EEPROMAddress<<1, start, sizeof(start), data_p, remainder, HAL_MAX_DELAY);
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	b299      	uxth	r1, r3
 80014b8:	893a      	ldrh	r2, [r7, #8]
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	8abb      	ldrh	r3, [r7, #20]
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2302      	movs	r3, #2
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f002 f844 	bl	8003558 <HAL_I2C_Mem_Write>
 80014d0:	4603      	mov	r3, r0
 80014d2:	75fb      	strb	r3, [r7, #23]

			while(stat != HAL_OK)
 80014d4:	e00a      	b.n	80014ec <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x7a>
			{
				stat = HAL_I2C_IsDeviceReady(I2Ccontroller, EEPROMAddress<<1, 2, 100);
 80014d6:	7afb      	ldrb	r3, [r7, #11]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	b299      	uxth	r1, r3
 80014de:	2364      	movs	r3, #100	@ 0x64
 80014e0:	2202      	movs	r2, #2
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f002 fb64 	bl	8003bb0 <HAL_I2C_IsDeviceReady>
 80014e8:	4603      	mov	r3, r0
 80014ea:	75fb      	strb	r3, [r7, #23]
			while(stat != HAL_OK)
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f1      	bne.n	80014d6 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x64>
			}

			start += remainder; //shift the "writer"
 80014f2:	893a      	ldrh	r2, [r7, #8]
 80014f4:	8abb      	ldrh	r3, [r7, #20]
 80014f6:	4413      	add	r3, r2
 80014f8:	813b      	strh	r3, [r7, #8]
			len -= remainder; //decrease the remaining length
 80014fa:	8c3a      	ldrh	r2, [r7, #32]
 80014fc:	8abb      	ldrh	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	843b      	strh	r3, [r7, #32]
			data_p += remainder*sizeof(uint8_t); //shift the "reader"
 8001502:	8abb      	ldrh	r3, [r7, #20]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e025      	b.n	8001558 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xe6>
		}
		else//write the rest of the data
		{
			HAL_Delay(5);
 800150c:	2005      	movs	r0, #5
 800150e:	f001 fb49 	bl	8002ba4 <HAL_Delay>
			stat = HAL_I2C_Mem_Write(I2Ccontroller, EEPROMAddress<<1, start, sizeof(start), data_p, len, HAL_MAX_DELAY);
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	b29b      	uxth	r3, r3
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b299      	uxth	r1, r3
 800151a:	893a      	ldrh	r2, [r7, #8]
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	8c3b      	ldrh	r3, [r7, #32]
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2302      	movs	r3, #2
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f002 f813 	bl	8003558 <HAL_I2C_Mem_Write>
 8001532:	4603      	mov	r3, r0
 8001534:	75fb      	strb	r3, [r7, #23]

			while(stat != HAL_OK)
 8001536:	e00a      	b.n	800154e <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xdc>
			{
				stat = HAL_I2C_IsDeviceReady(I2Ccontroller, EEPROMAddress<<1, 2, 100);
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	b29b      	uxth	r3, r3
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	b299      	uxth	r1, r3
 8001540:	2364      	movs	r3, #100	@ 0x64
 8001542:	2202      	movs	r2, #2
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f002 fb33 	bl	8003bb0 <HAL_I2C_IsDeviceReady>
 800154a:	4603      	mov	r3, r0
 800154c:	75fb      	strb	r3, [r7, #23]
			while(stat != HAL_OK)
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f1      	bne.n	8001538 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0xc6>
			}

			len = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	843b      	strh	r3, [r7, #32]
	while(len != 0)
 8001558:	8c3b      	ldrh	r3, [r7, #32]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d193      	bne.n	8001486 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth+0x14>

		}
	}
	return stat;
 800155e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_ZN18MeasurementStorageC1EP17I2C_HandleTypeDefhht>:
		}
	}
	return stat;
}

MeasurementStorage::MeasurementStorage( I2C_HandleTypeDef* I2Ccontroller_p, uint8_t EEPROMAddress_p, uint8_t pageLen_p, uint16_t freePages_p )
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	460b      	mov	r3, r1
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	4613      	mov	r3, r2
 800157c:	71bb      	strb	r3, [r7, #6]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
{
	this -> I2Ccontroller = I2Ccontroller_p;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	609a      	str	r2, [r3, #8]
	this -> EEPROMAddress = EEPROMAddress_p;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	79fa      	ldrb	r2, [r7, #7]
 8001594:	711a      	strb	r2, [r3, #4]
	this -> pageLen = pageLen_p;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	79ba      	ldrb	r2, [r7, #6]
 800159a:	731a      	strb	r2, [r3, #12]
	this -> freePages = freePages_p;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8b3a      	ldrh	r2, [r7, #24]
 80015a0:	81da      	strh	r2, [r3, #14]
}
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN18MeasurementStorage4initEy>:

void MeasurementStorage::init(uint64_t Timestamp_p)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	e9c7 2300 	strd	r2, r3, [r7]
	setTimestamp(Timestamp_p);
 80015bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f8cc 	bl	800175e <_ZN18MeasurementStorage12setTimestampEy>
	resetCounter();
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f895 	bl	80016f6 <_ZN18MeasurementStorage12resetCounterEv>

	uint16_t maxSize = (pageLen * freePages) / MeasEntry::len;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	7b1b      	ldrb	r3, [r3, #12]
 80015d0:	461a      	mov	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	89db      	ldrh	r3, [r3, #14]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <_ZN18MeasurementStorage4initEy+0x4c>)
 80015dc:	fb82 1203 	smull	r1, r2, r2, r3
 80015e0:	441a      	add	r2, r3
 80015e2:	1092      	asrs	r2, r2, #2
 80015e4:	17db      	asrs	r3, r3, #31
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	82fb      	strh	r3, [r7, #22]

	setMaxSize(maxSize);
 80015ea:	8afb      	ldrh	r3, [r7, #22]
 80015ec:	4619      	mov	r1, r3
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 f8e8 	bl	80017c4 <_ZN18MeasurementStorage10setMaxSizeEt>
}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	92492493 	.word	0x92492493

08001600 <_ZN18MeasurementStorage16incrementCounterEv>:

void MeasurementStorage::incrementCounter()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af06      	add	r7, sp, #24
 8001606:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t counter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	817b      	strh	r3, [r7, #10]
	uint16_t maxSize = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	813b      	strh	r3, [r7, #8]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6898      	ldr	r0, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	791b      	ldrb	r3, [r3, #4]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	b299      	uxth	r1, r3
 8001620:	2305      	movs	r3, #5
 8001622:	9304      	str	r3, [sp, #16]
 8001624:	2364      	movs	r3, #100	@ 0x64
 8001626:	9303      	str	r3, [sp, #12]
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	2302      	movs	r3, #2
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	f107 030a 	add.w	r3, r7, #10
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2302      	movs	r3, #2
 800163a:	2208      	movs	r2, #8
 800163c:	f7ff fed6 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001640:	4603      	mov	r3, r0
 8001642:	737b      	strb	r3, [r7, #13]
	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&maxSize, sizeof(uint16_t), HAL_MAX_DELAY);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6898      	ldr	r0, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	791b      	ldrb	r3, [r3, #4]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	b299      	uxth	r1, r3
 8001650:	2305      	movs	r3, #5
 8001652:	9304      	str	r3, [sp, #16]
 8001654:	2364      	movs	r3, #100	@ 0x64
 8001656:	9303      	str	r3, [sp, #12]
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2302      	movs	r3, #2
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2302      	movs	r3, #2
 800166a:	2208      	movs	r2, #8
 800166c:	f7ff febe 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001670:	4603      	mov	r3, r0
 8001672:	737b      	strb	r3, [r7, #13]

	counter++;
 8001674:	897b      	ldrh	r3, [r7, #10]
 8001676:	3301      	adds	r3, #1
 8001678:	b29b      	uxth	r3, r3
 800167a:	817b      	strh	r3, [r7, #10]

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6898      	ldr	r0, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	791b      	ldrb	r3, [r3, #4]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	b299      	uxth	r1, r3
 8001688:	2305      	movs	r3, #5
 800168a:	9304      	str	r3, [sp, #16]
 800168c:	2364      	movs	r3, #100	@ 0x64
 800168e:	9303      	str	r3, [sp, #12]
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	2302      	movs	r3, #2
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	f107 030a 	add.w	r3, r7, #10
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2302      	movs	r3, #2
 80016a2:	2208      	movs	r2, #8
 80016a4:	f7ff fe66 	bl	8001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 80016a8:	4603      	mov	r3, r0
 80016aa:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 80016ac:	7b7b      	ldrb	r3, [r7, #13]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00c      	beq.n	80016cc <_ZN18MeasurementStorage16incrementCounterEv+0xcc>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <_ZN18MeasurementStorage16incrementCounterEv+0xcc>
	{
		errors += I2C_error;
 80016ba:	89fb      	ldrh	r3, [r7, #14]
 80016bc:	3308      	adds	r3, #8
 80016be:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	89fa      	ldrh	r2, [r7, #14]
 80016c6:	4611      	mov	r1, r2
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
	}

	if( counter == maxSize && errorHandler != NULL)
 80016cc:	897a      	ldrh	r2, [r7, #10]
 80016ce:	893b      	ldrh	r3, [r7, #8]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d10c      	bne.n	80016ee <_ZN18MeasurementStorage16incrementCounterEv+0xee>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <_ZN18MeasurementStorage16incrementCounterEv+0xee>
	{
		errors += Overflow_write_error;
 80016dc:	89fb      	ldrh	r3, [r7, #14]
 80016de:	3301      	adds	r3, #1
 80016e0:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	89fa      	ldrh	r2, [r7, #14]
 80016e8:	4611      	mov	r1, r2
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
	}
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_ZN18MeasurementStorage12resetCounterEv>:

void MeasurementStorage::resetCounter()
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b08a      	sub	sp, #40	@ 0x28
 80016fa:	af06      	add	r7, sp, #24
 80016fc:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t counter = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	817b      	strh	r3, [r7, #10]

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6898      	ldr	r0, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	791b      	ldrb	r3, [r3, #4]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	b299      	uxth	r1, r3
 8001712:	2305      	movs	r3, #5
 8001714:	9304      	str	r3, [sp, #16]
 8001716:	2364      	movs	r3, #100	@ 0x64
 8001718:	9303      	str	r3, [sp, #12]
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	2302      	movs	r3, #2
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	f107 030a 	add.w	r3, r7, #10
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2302      	movs	r3, #2
 800172c:	2208      	movs	r2, #8
 800172e:	f7ff fe21 	bl	8001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001732:	4603      	mov	r3, r0
 8001734:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 8001736:	7b7b      	ldrb	r3, [r7, #13]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00c      	beq.n	8001756 <_ZN18MeasurementStorage12resetCounterEv+0x60>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <_ZN18MeasurementStorage12resetCounterEv+0x60>
	{
		errors += I2C_error;
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	3308      	adds	r3, #8
 8001748:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	89fa      	ldrh	r2, [r7, #14]
 8001750:	4611      	mov	r1, r2
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
	}
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_ZN18MeasurementStorage12setTimestampEy>:

void MeasurementStorage::setTimestamp(uint64_t timestamp_p)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b08c      	sub	sp, #48	@ 0x30
 8001762:	af06      	add	r7, sp, #24
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t errors = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef stat;

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, TIMESTAMP_ADDRESS, sizeof(uint16_t), (uint8_t*)&timestamp_p, sizeof(uint64_t), HAL_MAX_DELAY);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6898      	ldr	r0, [r3, #8]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	b299      	uxth	r1, r3
 800177a:	2305      	movs	r3, #5
 800177c:	9304      	str	r3, [sp, #16]
 800177e:	2364      	movs	r3, #100	@ 0x64
 8001780:	9303      	str	r3, [sp, #12]
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	2308      	movs	r3, #8
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	463b      	mov	r3, r7
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2302      	movs	r3, #2
 8001792:	2200      	movs	r2, #0
 8001794:	f7ff fdee 	bl	8001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001798:	4603      	mov	r3, r0
 800179a:	757b      	strb	r3, [r7, #21]

	if( stat != HAL_OK && errorHandler != NULL)
 800179c:	7d7b      	ldrb	r3, [r7, #21]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <_ZN18MeasurementStorage12setTimestampEy+0x5e>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <_ZN18MeasurementStorage12setTimestampEy+0x5e>
	{
		errors += I2C_error;
 80017aa:	8afb      	ldrh	r3, [r7, #22]
 80017ac:	3308      	adds	r3, #8
 80017ae:	82fb      	strh	r3, [r7, #22]
		errorHandler(this, errors);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	8afa      	ldrh	r2, [r7, #22]
 80017b6:	4611      	mov	r1, r2
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	4798      	blx	r3
	}
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_ZN18MeasurementStorage10setMaxSizeEt>:

void MeasurementStorage::setMaxSize(uint16_t maxSize_p)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	@ 0x28
 80017c8:	af06      	add	r7, sp, #24
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
	uint16_t errors = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;

	stat = write2EEPROM(I2Ccontroller, EEPROMAddress<<1, MAX_SIZE_ADDRESS, sizeof(uint16_t), (uint8_t*)&maxSize_p, sizeof(uint16_t), HAL_MAX_DELAY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6898      	ldr	r0, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	791b      	ldrb	r3, [r3, #4]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	b299      	uxth	r1, r3
 80017e0:	2305      	movs	r3, #5
 80017e2:	9304      	str	r3, [sp, #16]
 80017e4:	2364      	movs	r3, #100	@ 0x64
 80017e6:	9303      	str	r3, [sp, #12]
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	2302      	movs	r3, #2
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	1cbb      	adds	r3, r7, #2
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2302      	movs	r3, #2
 80017f8:	220a      	movs	r2, #10
 80017fa:	f7ff fdbb 	bl	8001374 <_Z12write2EEPROMP17I2C_HandleTypeDeftttPhtmhh>
 80017fe:	4603      	mov	r3, r0
 8001800:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 8001802:	7b7b      	ldrb	r3, [r7, #13]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00c      	beq.n	8001822 <_ZN18MeasurementStorage10setMaxSizeEt+0x5e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <_ZN18MeasurementStorage10setMaxSizeEt+0x5e>
	{
		errors += I2C_error;
 8001810:	89fb      	ldrh	r3, [r7, #14]
 8001812:	3308      	adds	r3, #8
 8001814:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	89fa      	ldrh	r2, [r7, #14]
 800181c:	4611      	mov	r1, r2
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
	}
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_ZN18MeasurementStorage11readCounterEv>:

uint16_t MeasurementStorage::readCounter()
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b08a      	sub	sp, #40	@ 0x28
 800182e:	af06      	add	r7, sp, #24
 8001830:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t counter = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	817b      	strh	r3, [r7, #10]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, COUNTER_ADDRESS, sizeof(uint16_t), (uint8_t*)&counter, sizeof(uint16_t), HAL_MAX_DELAY);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6898      	ldr	r0, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	791b      	ldrb	r3, [r3, #4]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	b299      	uxth	r1, r3
 8001846:	2305      	movs	r3, #5
 8001848:	9304      	str	r3, [sp, #16]
 800184a:	2364      	movs	r3, #100	@ 0x64
 800184c:	9303      	str	r3, [sp, #12]
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	2302      	movs	r3, #2
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	f107 030a 	add.w	r3, r7, #10
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2302      	movs	r3, #2
 8001860:	2208      	movs	r2, #8
 8001862:	f7ff fdc3 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001866:	4603      	mov	r3, r0
 8001868:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 800186a:	7b7b      	ldrb	r3, [r7, #13]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <_ZN18MeasurementStorage11readCounterEv+0x60>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <_ZN18MeasurementStorage11readCounterEv+0x60>
	{
		errors += I2C_error;
 8001878:	89fb      	ldrh	r3, [r7, #14]
 800187a:	3308      	adds	r3, #8
 800187c:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	89fa      	ldrh	r2, [r7, #14]
 8001884:	4611      	mov	r1, r2
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
	}

	return counter;
 800188a:	897b      	ldrh	r3, [r7, #10]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZN18MeasurementStorage13readTimestampEv>:

uint64_t MeasurementStorage::readTimestamp()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	@ 0x30
 8001898:	af06      	add	r7, sp, #24
 800189a:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef stat;
	uint64_t timestamp = 0;
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, TIMESTAMP_ADDRESS, sizeof(uint16_t), (uint8_t*)&timestamp, sizeof(uint64_t), HAL_MAX_DELAY);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6898      	ldr	r0, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	791b      	ldrb	r3, [r3, #4]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b299      	uxth	r1, r3
 80018b8:	2305      	movs	r3, #5
 80018ba:	9304      	str	r3, [sp, #16]
 80018bc:	2364      	movs	r3, #100	@ 0x64
 80018be:	9303      	str	r3, [sp, #12]
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	2308      	movs	r3, #8
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2302      	movs	r3, #2
 80018d2:	2200      	movs	r2, #0
 80018d4:	f7ff fd8a 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 80018d8:	4603      	mov	r3, r0
 80018da:	757b      	strb	r3, [r7, #21]

	if( stat != HAL_OK && errorHandler != NULL)
 80018dc:	7d7b      	ldrb	r3, [r7, #21]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <_ZN18MeasurementStorage13readTimestampEv+0x68>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <_ZN18MeasurementStorage13readTimestampEv+0x68>
	{
		errors += I2C_error;
 80018ea:	8afb      	ldrh	r3, [r7, #22]
 80018ec:	3308      	adds	r3, #8
 80018ee:	82fb      	strh	r3, [r7, #22]
		errorHandler(this, errors);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	8afa      	ldrh	r2, [r7, #22]
 80018f6:	4611      	mov	r1, r2
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
	}

	return timestamp;
 80018fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_ZN18MeasurementStorage10getMaxSizeEv>:

uint16_t MeasurementStorage::getMaxSize()
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b08a      	sub	sp, #40	@ 0x28
 800190e:	af06      	add	r7, sp, #24
 8001910:	6078      	str	r0, [r7, #4]
	uint16_t errors = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef stat;
	uint16_t maxSize = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	817b      	strh	r3, [r7, #10]

	stat = readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, MAX_SIZE_ADDRESS, sizeof(uint16_t), (uint8_t*)&maxSize, sizeof(uint16_t), HAL_MAX_DELAY);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6898      	ldr	r0, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	791b      	ldrb	r3, [r3, #4]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b299      	uxth	r1, r3
 8001926:	2305      	movs	r3, #5
 8001928:	9304      	str	r3, [sp, #16]
 800192a:	2364      	movs	r3, #100	@ 0x64
 800192c:	9303      	str	r3, [sp, #12]
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	2302      	movs	r3, #2
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	f107 030a 	add.w	r3, r7, #10
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2302      	movs	r3, #2
 8001940:	220a      	movs	r2, #10
 8001942:	f7ff fd53 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>
 8001946:	4603      	mov	r3, r0
 8001948:	737b      	strb	r3, [r7, #13]

	if( stat != HAL_OK && errorHandler != NULL)
 800194a:	7b7b      	ldrb	r3, [r7, #13]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00c      	beq.n	800196a <_ZN18MeasurementStorage10getMaxSizeEv+0x60>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <_ZN18MeasurementStorage10getMaxSizeEv+0x60>
	{
		errors += I2C_error;
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	3308      	adds	r3, #8
 800195c:	81fb      	strh	r3, [r7, #14]
		errorHandler(this, errors);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	89fa      	ldrh	r2, [r7, #14]
 8001964:	4611      	mov	r1, r2
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
	}

	return maxSize;
 800196a:	897b      	ldrh	r3, [r7, #10]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZN18MeasurementStorage8addEntryE9MeasEntry>:

void MeasurementStorage::addEntry(MeasEntry MeasEntry_p)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b08b      	sub	sp, #44	@ 0x2c
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t EntryBuffer[MeasEntry::len];
	for(uint8_t i = 0; i<MeasEntry::len; i++) { EntryBuffer[i] = 0; }
 8001982:	2300      	movs	r3, #0
 8001984:	77fb      	strb	r3, [r7, #31]
 8001986:	e008      	b.n	800199a <_ZN18MeasurementStorage8addEntryE9MeasEntry+0x26>
 8001988:	7ffb      	ldrb	r3, [r7, #31]
 800198a:	3320      	adds	r3, #32
 800198c:	443b      	add	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	3301      	adds	r3, #1
 8001998:	77fb      	strb	r3, [r7, #31]
 800199a:	7ffb      	ldrb	r3, [r7, #31]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d9f3      	bls.n	8001988 <_ZN18MeasurementStorage8addEntryE9MeasEntry+0x14>

	memcpy((uint8_t*)(EntryBuffer), 									&(MeasEntry_p.measID), 		sizeof(uint8_t));
 80019a0:	793b      	ldrb	r3, [r7, #4]
 80019a2:	743b      	strb	r3, [r7, #16]
	memcpy((uint8_t*)(EntryBuffer+sizeof(uint8_t)), 					&(MeasEntry_p.deltaT), 		sizeof(uint16_t));
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	3301      	adds	r3, #1
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	801a      	strh	r2, [r3, #0]
	memcpy((uint8_t*)(EntryBuffer+sizeof(uint8_t)+sizeof(uint16_t)), 	&(MeasEntry_p.measData), 	sizeof(uint32_t));
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	3303      	adds	r3, #3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	601a      	str	r2, [r3, #0]

	uint16_t counter = readCounter();
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff ff36 	bl	800182a <_ZN18MeasurementStorage11readCounterEv>
 80019be:	4603      	mov	r3, r0
 80019c0:	83bb      	strh	r3, [r7, #28]
	uint16_t EntryAddr = pageLen + (counter * MeasEntry::len);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	7b1b      	ldrb	r3, [r3, #12]
 80019c6:	461a      	mov	r2, r3
 80019c8:	8bbb      	ldrh	r3, [r7, #28]
 80019ca:	4619      	mov	r1, r3
 80019cc:	00c9      	lsls	r1, r1, #3
 80019ce:	1acb      	subs	r3, r1, r3
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	837b      	strh	r3, [r7, #26]

	writeMultiPage(I2Ccontroller, EEPROMAddress, EntryAddr, EntryBuffer, MeasEntry::len, pageLen);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6898      	ldr	r0, [r3, #8]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	7919      	ldrb	r1, [r3, #4]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	7b1b      	ldrb	r3, [r3, #12]
 80019e2:	f107 0410 	add.w	r4, r7, #16
 80019e6:	8b7a      	ldrh	r2, [r7, #26]
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	2307      	movs	r3, #7
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4623      	mov	r3, r4
 80019f0:	f7ff fd3f 	bl	8001472 <_Z14writeMultiPageP17I2C_HandleTypeDefhtPhth>

	incrementCounter();
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fe03 	bl	8001600 <_ZN18MeasurementStorage16incrementCounterEv>
}
 80019fa:	bf00      	nop
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd90      	pop	{r4, r7, pc}

08001a02 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry>:

bool MeasurementStorage::getEntryAt(uint16_t location_p, MeasEntry* entryBuffer_p)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b08e      	sub	sp, #56	@ 0x38
 8001a06:	af06      	add	r7, sp, #24
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	817b      	strh	r3, [r7, #10]
	uint16_t errors = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	83fb      	strh	r3, [r7, #30]
	uint16_t count = readCounter();
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f7ff ff08 	bl	800182a <_ZN18MeasurementStorage11readCounterEv>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	83bb      	strh	r3, [r7, #28]
	uint16_t maxSize = getMaxSize();
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff ff73 	bl	800190a <_ZN18MeasurementStorage10getMaxSizeEv>
 8001a24:	4603      	mov	r3, r0
 8001a26:	837b      	strh	r3, [r7, #26]

	//Want to read outside of boundaries. -1, as counter of 0 means 0 stored, the "writer head" is set to 0, where as location starts from 0
	if(count == 0)
 8001a28:	8bbb      	ldrh	r3, [r7, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x4a>
	{
		if( errorHandler != NULL)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x46>
		{
			errors += Empty_MS_error;
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	83fb      	strh	r3, [r7, #30]
			errorHandler(this, errors);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	8bfa      	ldrh	r2, [r7, #30]
 8001a42:	4611      	mov	r1, r2
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	4798      	blx	r3
		}
		return false;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e05c      	b.n	8001b06 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x104>
	}

	else if( (location_p > maxSize-1) or (count > maxSize))
 8001a4c:	8b7a      	ldrh	r2, [r7, #26]
 8001a4e:	897b      	ldrh	r3, [r7, #10]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d903      	bls.n	8001a5c <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x5a>
 8001a54:	8bba      	ldrh	r2, [r7, #28]
 8001a56:	8b7b      	ldrh	r3, [r7, #26]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d90e      	bls.n	8001a7a <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x78>
	{
		if( errorHandler != NULL)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x74>
		{
			errors += Maxsize_error;
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	3310      	adds	r3, #16
 8001a68:	83fb      	strh	r3, [r7, #30]
			errorHandler(this, errors);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	8bfa      	ldrh	r2, [r7, #30]
 8001a70:	4611      	mov	r1, r2
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	4798      	blx	r3
		}
		return false;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e045      	b.n	8001b06 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x104>
	}

	else if(location_p > count-1)
 8001a7a:	8bba      	ldrh	r2, [r7, #28]
 8001a7c:	897b      	ldrh	r3, [r7, #10]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d80e      	bhi.n	8001aa0 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x9e>
	{
		if( errorHandler != NULL)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x9a>
		{
			errors += Overflow_read_error;
 8001a8a:	8bfb      	ldrh	r3, [r7, #30]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	83fb      	strh	r3, [r7, #30]
			errorHandler(this, errors);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	8bfa      	ldrh	r2, [r7, #30]
 8001a96:	4611      	mov	r1, r2
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	4798      	blx	r3
		}
		return false;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e032      	b.n	8001b06 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry+0x104>
	}

	uint16_t EntryAddr = pageLen + (location_p * MeasEntry::len);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	897b      	ldrh	r3, [r7, #10]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	00c9      	lsls	r1, r1, #3
 8001aac:	1acb      	subs	r3, r1, r3
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	833b      	strh	r3, [r7, #24]

	uint8_t readBuffer[MeasEntry::len];

	readFromEEPROM(I2Ccontroller, EEPROMAddress<<1, EntryAddr, sizeof(uint16_t), readBuffer, MeasEntry::len, HAL_MAX_DELAY);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6898      	ldr	r0, [r3, #8]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	8b3a      	ldrh	r2, [r7, #24]
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	9304      	str	r3, [sp, #16]
 8001ac6:	2364      	movs	r3, #100	@ 0x64
 8001ac8:	9303      	str	r3, [sp, #12]
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2302      	movs	r3, #2
 8001adc:	f7ff fc86 	bl	80013ec <_Z14readFromEEPROMP17I2C_HandleTypeDeftttPhtmhh>

	memcpy(&entryBuffer_p->measID, 		(uint8_t*)(readBuffer), 									sizeof(uint8_t));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7c3a      	ldrb	r2, [r7, #16]
 8001ae4:	701a      	strb	r2, [r3, #0]
	memcpy(&entryBuffer_p->deltaT, 		(uint8_t*)(readBuffer+sizeof(uint8_t)),						sizeof(uint16_t));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	1c9a      	adds	r2, r3, #2
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	3301      	adds	r3, #1
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	8013      	strh	r3, [r2, #0]
	memcpy(&entryBuffer_p->measData,	(uint8_t*)(readBuffer+sizeof(uint8_t)+sizeof(uint16_t)),	sizeof(uint32_t));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	1d1a      	adds	r2, r3, #4
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	3303      	adds	r3, #3
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6013      	str	r3, [r2, #0]

	return true;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_Z8i2cScannP17I2C_HandleTypeDefPh>:
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void i2cScann(I2C_HandleTypeDef *hi2c_p, uint8_t* devicesBuffer_p)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	for(uint8_t i = 0; i<128; i++){ devicesBuffer_p[i] = 0; }
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e007      	b.n	8001b2e <_Z8i2cScannP17I2C_HandleTypeDefPh+0x20>
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	daf3      	bge.n	8001b1e <_Z8i2cScannP17I2C_HandleTypeDefPh+0x10>

	uint8_t j = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<128; i++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	737b      	strb	r3, [r7, #13]
 8001b3e:	e018      	b.n	8001b72 <_Z8i2cScannP17I2C_HandleTypeDefPh+0x64>
	{
		status = HAL_I2C_IsDeviceReady(hi2c_p, i<<1, 2, 100);
 8001b40:	7b7b      	ldrb	r3, [r7, #13]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	b299      	uxth	r1, r3
 8001b48:	2364      	movs	r3, #100	@ 0x64
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f002 f82f 	bl	8003bb0 <HAL_I2C_IsDeviceReady>
 8001b52:	4603      	mov	r3, r0
 8001b54:	733b      	strb	r3, [r7, #12]
		if(status == HAL_OK)
 8001b56:	7b3b      	ldrb	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <_Z8i2cScannP17I2C_HandleTypeDefPh+0x5e>
		{
			devicesBuffer_p[j] = i;
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	4413      	add	r3, r2
 8001b62:	7b7a      	ldrb	r2, [r7, #13]
 8001b64:	701a      	strb	r2, [r3, #0]
			j++;
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<128; i++)
 8001b6c:	7b7b      	ldrb	r3, [r7, #13]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	737b      	strb	r3, [r7, #13]
 8001b72:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	dae2      	bge.n	8001b40 <_Z8i2cScannP17I2C_HandleTypeDefPh+0x32>
		}
	}
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_Z13handleMessagev>:

void handleMessage()
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

	uint8_t matchResult = sscanf((const char*)FinalData, "%s %s", commandBuffer, argBuffer);
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001b8c:	4a6d      	ldr	r2, [pc, #436]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001b8e:	496e      	ldr	r1, [pc, #440]	@ (8001d48 <_Z13handleMessagev+0x1c4>)
 8001b90:	486e      	ldr	r0, [pc, #440]	@ (8001d4c <_Z13handleMessagev+0x1c8>)
 8001b92:	f006 fb7f 	bl	8008294 <sscanf>
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]

	if(matchResult > 0)
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80ca 	beq.w	8001d36 <_Z13handleMessagev+0x1b2>
	{
		if( strcmp((const char*) commandBuffer, MEAS_command) == 0)
 8001ba2:	4b6b      	ldr	r3, [pc, #428]	@ (8001d50 <_Z13handleMessagev+0x1cc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4866      	ldr	r0, [pc, #408]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001baa:	f7fe fb31 	bl	8000210 <strcmp>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d103      	bne.n	8001bbc <_Z13handleMessagev+0x38>
		{
			currentState = MEAS;
 8001bb4:	4b67      	ldr	r3, [pc, #412]	@ (8001d54 <_Z13handleMessagev+0x1d0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
					currentCommState = INIT;
				}
			}
		}
	}//matchresult
}
 8001bba:	e0bc      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if( strcmp((const char*) commandBuffer, COMM_command) == 0)
 8001bbc:	4b66      	ldr	r3, [pc, #408]	@ (8001d58 <_Z13handleMessagev+0x1d4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4860      	ldr	r0, [pc, #384]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001bc4:	f7fe fb24 	bl	8000210 <strcmp>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <_Z13handleMessagev+0x52>
			currentState = COMM;
 8001bce:	4b61      	ldr	r3, [pc, #388]	@ (8001d54 <_Z13handleMessagev+0x1d0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
}
 8001bd4:	e0af      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if( strcmp((const char*) commandBuffer, GETSTATE_command) == 0)
 8001bd6:	4b61      	ldr	r3, [pc, #388]	@ (8001d5c <_Z13handleMessagev+0x1d8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4859      	ldr	r0, [pc, #356]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001bde:	f7fe fb17 	bl	8000210 <strcmp>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d11e      	bne.n	8001c26 <_Z13handleMessagev+0xa2>
			switch (currentState)
 8001be8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d54 <_Z13handleMessagev+0x1d0>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <_Z13handleMessagev+0x72>
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d006      	beq.n	8001c02 <_Z13handleMessagev+0x7e>
					break;
 8001bf4:	e00b      	b.n	8001c0e <_Z13handleMessagev+0x8a>
					snprintf(msg, Buffer_Size, "MEAS\r\n");
 8001bf6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d60 <_Z13handleMessagev+0x1dc>)
 8001bf8:	2164      	movs	r1, #100	@ 0x64
 8001bfa:	485a      	ldr	r0, [pc, #360]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001bfc:	f006 fb16 	bl	800822c <snprintf>
					break;
 8001c00:	e005      	b.n	8001c0e <_Z13handleMessagev+0x8a>
					snprintf(msg, Buffer_Size, "COMM\r\n");
 8001c02:	4a59      	ldr	r2, [pc, #356]	@ (8001d68 <_Z13handleMessagev+0x1e4>)
 8001c04:	2164      	movs	r1, #100	@ 0x64
 8001c06:	4857      	ldr	r0, [pc, #348]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c08:	f006 fb10 	bl	800822c <snprintf>
					break;
 8001c0c:	bf00      	nop
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001c0e:	4855      	ldr	r0, [pc, #340]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c10:	f7fe fb5e 	bl	80002d0 <strlen>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	4951      	ldr	r1, [pc, #324]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c1e:	4853      	ldr	r0, [pc, #332]	@ (8001d6c <_Z13handleMessagev+0x1e8>)
 8001c20:	f004 fd48 	bl	80066b4 <HAL_UART_Transmit>
}
 8001c24:	e087      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if( strcmp((const char*) commandBuffer, WHOAMI_command) == 0)
 8001c26:	4b52      	ldr	r3, [pc, #328]	@ (8001d70 <_Z13handleMessagev+0x1ec>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4845      	ldr	r0, [pc, #276]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001c2e:	f7fe faef 	bl	8000210 <strcmp>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d110      	bne.n	8001c5a <_Z13handleMessagev+0xd6>
			snprintf(msg, Buffer_Size, "MEAS_STATION\r\n");
 8001c38:	4a4e      	ldr	r2, [pc, #312]	@ (8001d74 <_Z13handleMessagev+0x1f0>)
 8001c3a:	2164      	movs	r1, #100	@ 0x64
 8001c3c:	4849      	ldr	r0, [pc, #292]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c3e:	f006 faf5 	bl	800822c <snprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001c42:	4848      	ldr	r0, [pc, #288]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c44:	f7fe fb44 	bl	80002d0 <strlen>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c50:	4944      	ldr	r1, [pc, #272]	@ (8001d64 <_Z13handleMessagev+0x1e0>)
 8001c52:	4846      	ldr	r0, [pc, #280]	@ (8001d6c <_Z13handleMessagev+0x1e8>)
 8001c54:	f004 fd2e 	bl	80066b4 <HAL_UART_Transmit>
}
 8001c58:	e06d      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if( strcmp((const char*) commandBuffer, DISPLAYMEAS_command) == 0)
 8001c5a:	4b47      	ldr	r3, [pc, #284]	@ (8001d78 <_Z13handleMessagev+0x1f4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4838      	ldr	r0, [pc, #224]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001c62:	f7fe fad5 	bl	8000210 <strcmp>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d119      	bne.n	8001ca0 <_Z13handleMessagev+0x11c>
			if(strcmp((const char*) argBuffer, DISPLAYMEAS_arg_true) == 0)
 8001c6c:	4b43      	ldr	r3, [pc, #268]	@ (8001d7c <_Z13handleMessagev+0x1f8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	4833      	ldr	r0, [pc, #204]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001c74:	f7fe facc 	bl	8000210 <strcmp>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <_Z13handleMessagev+0x102>
				displayMeas = true;
 8001c7e:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <_Z13handleMessagev+0x1fc>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
}
 8001c84:	e057      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
			else if(strcmp((const char*) argBuffer, DISPLAYMEAS_arg_false) == 0)
 8001c86:	4b3f      	ldr	r3, [pc, #252]	@ (8001d84 <_Z13handleMessagev+0x200>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482c      	ldr	r0, [pc, #176]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001c8e:	f7fe fabf 	bl	8000210 <strcmp>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d14e      	bne.n	8001d36 <_Z13handleMessagev+0x1b2>
				displayMeas = false;
 8001c98:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <_Z13handleMessagev+0x1fc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	e04a      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if(matchResult == 2 && strcmp((const char*) commandBuffer, FREQ_command) == 0)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d10e      	bne.n	8001cc4 <_Z13handleMessagev+0x140>
 8001ca6:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <_Z13handleMessagev+0x204>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4825      	ldr	r0, [pc, #148]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001cae:	f7fe faaf 	bl	8000210 <strcmp>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <_Z13handleMessagev+0x140>
			sscanf((const char*)argBuffer, "%lu", &measFrequency);
 8001cb8:	4a34      	ldr	r2, [pc, #208]	@ (8001d8c <_Z13handleMessagev+0x208>)
 8001cba:	4935      	ldr	r1, [pc, #212]	@ (8001d90 <_Z13handleMessagev+0x20c>)
 8001cbc:	4820      	ldr	r0, [pc, #128]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001cbe:	f006 fae9 	bl	8008294 <sscanf>
}
 8001cc2:	e038      	b.n	8001d36 <_Z13handleMessagev+0x1b2>
		else if(currentState == COMM)
 8001cc4:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <_Z13handleMessagev+0x1d0>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d134      	bne.n	8001d36 <_Z13handleMessagev+0x1b2>
			if( strcmp((const char*) commandBuffer, CommIDLE_command) == 0)
 8001ccc:	4b31      	ldr	r3, [pc, #196]	@ (8001d94 <_Z13handleMessagev+0x210>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481c      	ldr	r0, [pc, #112]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001cd4:	f7fe fa9c 	bl	8000210 <strcmp>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <_Z13handleMessagev+0x162>
				currentCommState = IDLE;
 8001cde:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <_Z13handleMessagev+0x214>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e00b      	b.n	8001cfe <_Z13handleMessagev+0x17a>
			else if( strcmp((const char*) commandBuffer, CommREADOUT_command) == 0)
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d9c <_Z13handleMessagev+0x218>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4815      	ldr	r0, [pc, #84]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001cee:	f7fe fa8f 	bl	8000210 <strcmp>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_Z13handleMessagev+0x17a>
				currentCommState = READOUT;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	@ (8001d98 <_Z13handleMessagev+0x214>)
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	701a      	strb	r2, [r3, #0]
			if(matchResult == 2 && strcmp((const char*) commandBuffer, CommINIT_command) == 0)
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d118      	bne.n	8001d36 <_Z13handleMessagev+0x1b2>
 8001d04:	4b26      	ldr	r3, [pc, #152]	@ (8001da0 <_Z13handleMessagev+0x21c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480e      	ldr	r0, [pc, #56]	@ (8001d44 <_Z13handleMessagev+0x1c0>)
 8001d0c:	f7fe fa80 	bl	8000210 <strcmp>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <_Z13handleMessagev+0x1b2>
				if( sscanf((const char*)argBuffer, "%llu", &initTimeastamp) == 1)
 8001d16:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <_Z13handleMessagev+0x220>)
 8001d18:	4923      	ldr	r1, [pc, #140]	@ (8001da8 <_Z13handleMessagev+0x224>)
 8001d1a:	4809      	ldr	r0, [pc, #36]	@ (8001d40 <_Z13handleMessagev+0x1bc>)
 8001d1c:	f006 faba 	bl	8008294 <sscanf>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	bf0c      	ite	eq
 8001d26:	2301      	moveq	r3, #1
 8001d28:	2300      	movne	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <_Z13handleMessagev+0x1b2>
					currentCommState = INIT;
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <_Z13handleMessagev+0x214>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200008c0 	.word	0x200008c0
 8001d44:	2000085c 	.word	0x2000085c
 8001d48:	0800f9f8 	.word	0x0800f9f8
 8001d4c:	20000a04 	.word	0x20000a04
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000929 	.word	0x20000929
 8001d58:	2000000c 	.word	0x2000000c
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	0800fa00 	.word	0x0800fa00
 8001d64:	20000938 	.word	0x20000938
 8001d68:	0800fa08 	.word	0x0800fa08
 8001d6c:	20000808 	.word	0x20000808
 8001d70:	20000014 	.word	0x20000014
 8001d74:	0800fa10 	.word	0x0800fa10
 8001d78:	20000018 	.word	0x20000018
 8001d7c:	20000020 	.word	0x20000020
 8001d80:	20000004 	.word	0x20000004
 8001d84:	20000024 	.word	0x20000024
 8001d88:	2000001c 	.word	0x2000001c
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	0800fa20 	.word	0x0800fa20
 8001d94:	20000028 	.word	0x20000028
 8001d98:	2000092a 	.word	0x2000092a
 8001d9c:	20000030 	.word	0x20000030
 8001da0:	2000002c 	.word	0x2000002c
 8001da4:	20000930 	.word	0x20000930
 8001da8:	0800fa24 	.word	0x0800fa24

08001dac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	sendComplete = true;
 8001db4:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <HAL_UART_TxCpltCallback+0x1c>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000034 	.word	0x20000034

08001dcc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) // Ellenőrizni, hogy melyik UART periféria váltotta ki a megszakítást
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <HAL_UART_RxCpltCallback+0x7c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d130      	bne.n	8001e40 <HAL_UART_RxCpltCallback+0x74>
    {
    	if(idx > Buffer_Size)
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b64      	cmp	r3, #100	@ 0x64
 8001de4:	d902      	bls.n	8001dec <HAL_UART_RxCpltCallback+0x20>
    	{
    		idx = 0;
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
    	}

    	memcpy(RxData+idx, tmp, 1);
 8001dec:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <HAL_UART_RxCpltCallback+0x84>)
 8001df4:	4413      	add	r3, r2
 8001df6:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <HAL_UART_RxCpltCallback+0x88>)
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	701a      	strb	r2, [r3, #0]
    	idx++;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001e06:	701a      	strb	r2, [r3, #0]

    	if (tmp[0] == '\r')
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_UART_RxCpltCallback+0x88>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b0d      	cmp	r3, #13
 8001e0e:	d112      	bne.n	8001e36 <HAL_UART_RxCpltCallback+0x6a>
    	{
    		RxData[idx-1] = '\0';//change \r to \0
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <HAL_UART_RxCpltCallback+0x84>)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	54d1      	strb	r1, [r2, r3]
    		memcpy(FinalData, RxData, Buffer_Size);
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e58 <HAL_UART_RxCpltCallback+0x8c>)
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_UART_RxCpltCallback+0x84>)
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	2364      	movs	r3, #100	@ 0x64
 8001e26:	461a      	mov	r2, r3
 8001e28:	f006 fb50 	bl	80084cc <memcpy>
    		idx = 0;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <HAL_UART_RxCpltCallback+0x80>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
    		handleMessage();
 8001e32:	f7ff fea7 	bl	8001b84 <_Z13handleMessagev>
    	}


    	HAL_UART_Receive_IT(&huart2, tmp, 1);
 8001e36:	2201      	movs	r2, #1
 8001e38:	4906      	ldr	r1, [pc, #24]	@ (8001e54 <HAL_UART_RxCpltCallback+0x88>)
 8001e3a:	4808      	ldr	r0, [pc, #32]	@ (8001e5c <HAL_UART_RxCpltCallback+0x90>)
 8001e3c:	f004 fcc5 	bl	80067ca <HAL_UART_Receive_IT>

    }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40004400 	.word	0x40004400
 8001e4c:	20000a68 	.word	0x20000a68
 8001e50:	2000099c 	.word	0x2000099c
 8001e54:	20000a00 	.word	0x20000a00
 8001e58:	20000a04 	.word	0x20000a04
 8001e5c:	20000808 	.word	0x20000808

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b0aa      	sub	sp, #168	@ 0xa8
 8001e64:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e66:	f000 fe2b 	bl	8002ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e6a:	f000 f93b 	bl	80020e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6e:	f000 faad 	bl	80023cc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001e72:	f000 fa7d 	bl	8002370 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8001e76:	f000 f9ad 	bl	80021d4 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8001e7a:	f000 f9df 	bl	800223c <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 8001e7e:	f000 fa19 	bl	80022b4 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  myPT100.init();
 8001e82:	2101      	movs	r1, #1
 8001e84:	4884      	ldr	r0, [pc, #528]	@ (8002098 <main+0x238>)
 8001e86:	f7ff f971 	bl	800116c <_ZN8MAX318654initE24MAX31865_FilterSetting_t>
  myPT100.startContinousMeas();
 8001e8a:	4883      	ldr	r0, [pc, #524]	@ (8002098 <main+0x238>)
 8001e8c:	f7ff fa09 	bl	80012a2 <_ZN8MAX3186518startContinousMeasEv>

  uint8_t devices[128];
  i2cScann(&hi2c1, devices);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4881      	ldr	r0, [pc, #516]	@ (800209c <main+0x23c>)
 8001e98:	f7ff fe39 	bl	8001b0e <_Z8i2cScannP17I2C_HandleTypeDefPh>

  myMS.init(12345678987654321012);
 8001e9c:	a37c      	add	r3, pc, #496	@ (adr r3, 8002090 <main+0x230>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	487f      	ldr	r0, [pc, #508]	@ (80020a0 <main+0x240>)
 8001ea4:	f7ff fb84 	bl	80015b0 <_ZN18MeasurementStorage4initEy>

  readFromEEPROM(&hi2c1, EEPROM_ADDRESS<<1, memAddress, sizeof(memAddress), firstTwoPage1, sizeof(firstTwoPage1), HAL_MAX_DELAY);

  */

  HAL_UART_Receive_IT(&huart2, tmp, 1);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	497e      	ldr	r1, [pc, #504]	@ (80020a4 <main+0x244>)
 8001eac:	487e      	ldr	r0, [pc, #504]	@ (80020a8 <main+0x248>)
 8001eae:	f004 fc8c 	bl	80067ca <HAL_UART_Receive_IT>

  bool onEntry_meas = true;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  bool onEntry_comm = true;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
    /* USER CODE BEGIN 3 */
	  /* switch-case -> állapotgép
	   * az állapotot lehessen lekérdezni is, ezt a beérkező parancsokat kezelő fgv.-ben kell kezelni.
	   *
	   * */
		switch (currentState)
 8001ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80020ac <main+0x24c>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <main+0x6c>
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d05e      	beq.n	8001f88 <main+0x128>
						break;
				}
			}
				break;
			default:
				break;
 8001eca:	e0df      	b.n	800208c <main+0x22c>
				if(onEntry_meas)
 8001ecc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <main+0x8c>
					HAL_TIM_Base_Start_IT(&htim3);
 8001ed4:	4876      	ldr	r0, [pc, #472]	@ (80020b0 <main+0x250>)
 8001ed6:	f003 ff77 	bl	8005dc8 <HAL_TIM_Base_Start_IT>
					onEntry_meas = false;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					onEntry_comm = true;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
					currentCommState = IDLE; //The next time COMM state is entered it will be idle
 8001ee6:	4b73      	ldr	r3, [pc, #460]	@ (80020b4 <main+0x254>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
				if(timeInterruptTick)
 8001eec:	4b72      	ldr	r3, [pc, #456]	@ (80020b8 <main+0x258>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d040      	beq.n	8001f76 <main+0x116>
					float tempMeas = myPT100.getTemp();
 8001ef4:	4868      	ldr	r0, [pc, #416]	@ (8002098 <main+0x238>)
 8001ef6:	f7ff fa05 	bl	8001304 <_ZN8MAX318657getTempEv>
 8001efa:	eef0 7a40 	vmov.f32	s15, s0
 8001efe:	edc7 7a02 	vstr	s15, [r7, #8]
					memcpy(&data32, (const float*)&tempMeas, sizeof(uint32_t));
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	607b      	str	r3, [r7, #4]
					if(displayMeas)
 8001f06:	4b6d      	ldr	r3, [pc, #436]	@ (80020bc <main+0x25c>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d017      	beq.n	8001f3e <main+0xde>
						snprintf(msg, Buffer_Size, "%0.3f \r\n", tempMeas);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fb49 	bl	80005a8 <__aeabi_f2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f1e:	4a68      	ldr	r2, [pc, #416]	@ (80020c0 <main+0x260>)
 8001f20:	2164      	movs	r1, #100	@ 0x64
 8001f22:	4868      	ldr	r0, [pc, #416]	@ (80020c4 <main+0x264>)
 8001f24:	f006 f982 	bl	800822c <snprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f28:	4866      	ldr	r0, [pc, #408]	@ (80020c4 <main+0x264>)
 8001f2a:	f7fe f9d1 	bl	80002d0 <strlen>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	4963      	ldr	r1, [pc, #396]	@ (80020c4 <main+0x264>)
 8001f38:	485b      	ldr	r0, [pc, #364]	@ (80020a8 <main+0x248>)
 8001f3a:	f004 fbbb 	bl	80066b4 <HAL_UART_Transmit>
					currentMeas.measID = 1;
 8001f3e:	4b62      	ldr	r3, [pc, #392]	@ (80020c8 <main+0x268>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
					currentMeas.deltaT = measFrequency+idleTime;
 8001f44:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <main+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	4b61      	ldr	r3, [pc, #388]	@ (80020d0 <main+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b5c      	ldr	r3, [pc, #368]	@ (80020c8 <main+0x268>)
 8001f56:	805a      	strh	r2, [r3, #2]
					idleTime = 0;
 8001f58:	4b5d      	ldr	r3, [pc, #372]	@ (80020d0 <main+0x270>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
					currentMeas.measData = data32;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a59      	ldr	r2, [pc, #356]	@ (80020c8 <main+0x268>)
 8001f62:	6053      	str	r3, [r2, #4]
					myMS.addEntry(currentMeas);
 8001f64:	4b58      	ldr	r3, [pc, #352]	@ (80020c8 <main+0x268>)
 8001f66:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f6a:	484d      	ldr	r0, [pc, #308]	@ (80020a0 <main+0x240>)
 8001f6c:	f7ff fd02 	bl	8001974 <_ZN18MeasurementStorage8addEntryE9MeasEntry>
					timeInterruptTick = false;
 8001f70:	4b51      	ldr	r3, [pc, #324]	@ (80020b8 <main+0x258>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
				HAL_SuspendTick();
 8001f76:	f000 fe39 	bl	8002bec <HAL_SuspendTick>
				HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f002 faf9 	bl	8004574 <HAL_PWR_EnterSLEEPMode>
				HAL_ResumeTick();
 8001f82:	f000 fe43 	bl	8002c0c <HAL_ResumeTick>
				break;
 8001f86:	e081      	b.n	800208c <main+0x22c>
				if(onEntry_comm)
 8001f88:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <main+0x13c>
					onEntry_meas = true;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					onEntry_comm = false;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
				switch (currentCommState)
 8001f9c:	4b45      	ldr	r3, [pc, #276]	@ (80020b4 <main+0x254>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d00f      	beq.n	8001fc4 <main+0x164>
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	dc6d      	bgt.n	8002084 <main+0x224>
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d06d      	beq.n	8002088 <main+0x228>
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d169      	bne.n	8002084 <main+0x224>
						myMS.init(initTimeastamp);
 8001fb0:	4b48      	ldr	r3, [pc, #288]	@ (80020d4 <main+0x274>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	483a      	ldr	r0, [pc, #232]	@ (80020a0 <main+0x240>)
 8001fb8:	f7ff fafa 	bl	80015b0 <_ZN18MeasurementStorage4initEy>
						currentCommState = IDLE;
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80020b4 <main+0x254>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
						break;
 8001fc2:	e062      	b.n	800208a <main+0x22a>
						uint16_t cnt = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
						sniprintf(msg, Buffer_Size, "%llu; %u;\r\n", myMS.readTimestamp(), myMS.readCounter());
 8001fca:	4835      	ldr	r0, [pc, #212]	@ (80020a0 <main+0x240>)
 8001fcc:	f7ff fc62 	bl	8001894 <_ZN18MeasurementStorage13readTimestampEv>
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	460d      	mov	r5, r1
 8001fd4:	4832      	ldr	r0, [pc, #200]	@ (80020a0 <main+0x240>)
 8001fd6:	f7ff fc28 	bl	800182a <_ZN18MeasurementStorage11readCounterEv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	e9cd 4500 	strd	r4, r5, [sp]
 8001fe2:	4a3d      	ldr	r2, [pc, #244]	@ (80020d8 <main+0x278>)
 8001fe4:	2164      	movs	r1, #100	@ 0x64
 8001fe6:	4837      	ldr	r0, [pc, #220]	@ (80020c4 <main+0x264>)
 8001fe8:	f005 fb60 	bl	80076ac <sniprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001fec:	4835      	ldr	r0, [pc, #212]	@ (80020c4 <main+0x264>)
 8001fee:	f7fe f96f 	bl	80002d0 <strlen>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	4932      	ldr	r1, [pc, #200]	@ (80020c4 <main+0x264>)
 8001ffc:	482a      	ldr	r0, [pc, #168]	@ (80020a8 <main+0x248>)
 8001ffe:	f004 fb59 	bl	80066b4 <HAL_UART_Transmit>
							if( !myMS.getEntryAt(cnt, &entryBuffer) )
 8002002:	f107 020c 	add.w	r2, r7, #12
 8002006:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800200a:	4619      	mov	r1, r3
 800200c:	4824      	ldr	r0, [pc, #144]	@ (80020a0 <main+0x240>)
 800200e:	f7ff fcf8 	bl	8001a02 <_ZN18MeasurementStorage10getEntryAtEtP9MeasEntry>
 8002012:	4603      	mov	r3, r0
 8002014:	f083 0301 	eor.w	r3, r3, #1
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d11d      	bne.n	800205a <main+0x1fa>
								cnt++;
 800201e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002022:	3301      	adds	r3, #1
 8002024:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
								snprintf(msg, Buffer_Size, "%u, %u, %lu;\r\n", entryBuffer.measID, entryBuffer.deltaT, entryBuffer.measData);
 8002028:	7b3b      	ldrb	r3, [r7, #12]
 800202a:	4619      	mov	r1, r3
 800202c:	89fb      	ldrh	r3, [r7, #14]
 800202e:	461a      	mov	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	9200      	str	r2, [sp, #0]
 8002036:	460b      	mov	r3, r1
 8002038:	4a28      	ldr	r2, [pc, #160]	@ (80020dc <main+0x27c>)
 800203a:	2164      	movs	r1, #100	@ 0x64
 800203c:	4821      	ldr	r0, [pc, #132]	@ (80020c4 <main+0x264>)
 800203e:	f006 f8f5 	bl	800822c <snprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002042:	4820      	ldr	r0, [pc, #128]	@ (80020c4 <main+0x264>)
 8002044:	f7fe f944 	bl	80002d0 <strlen>
 8002048:	4603      	mov	r3, r0
 800204a:	b29a      	uxth	r2, r3
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
 8002050:	491c      	ldr	r1, [pc, #112]	@ (80020c4 <main+0x264>)
 8002052:	4815      	ldr	r0, [pc, #84]	@ (80020a8 <main+0x248>)
 8002054:	f004 fb2e 	bl	80066b4 <HAL_UART_Transmit>
							if( !myMS.getEntryAt(cnt, &entryBuffer) )
 8002058:	e7d3      	b.n	8002002 <main+0x1a2>
								break;
 800205a:	bf00      	nop
						snprintf(msg, Buffer_Size, "END\r\n");
 800205c:	4a20      	ldr	r2, [pc, #128]	@ (80020e0 <main+0x280>)
 800205e:	2164      	movs	r1, #100	@ 0x64
 8002060:	4818      	ldr	r0, [pc, #96]	@ (80020c4 <main+0x264>)
 8002062:	f006 f8e3 	bl	800822c <snprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002066:	4817      	ldr	r0, [pc, #92]	@ (80020c4 <main+0x264>)
 8002068:	f7fe f932 	bl	80002d0 <strlen>
 800206c:	4603      	mov	r3, r0
 800206e:	b29a      	uxth	r2, r3
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	4913      	ldr	r1, [pc, #76]	@ (80020c4 <main+0x264>)
 8002076:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <main+0x248>)
 8002078:	f004 fb1c 	bl	80066b4 <HAL_UART_Transmit>
						currentCommState = IDLE;
 800207c:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <main+0x254>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
						break;
 8002082:	e002      	b.n	800208a <main+0x22a>
						break;
 8002084:	bf00      	nop
 8002086:	e000      	b.n	800208a <main+0x22a>
						break;
 8002088:	bf00      	nop
				break;
 800208a:	bf00      	nop
		}

  }
 800208c:	e717      	b.n	8001ebe <main+0x5e>
 800208e:	bf00      	nop
 8002090:	0a23d374 	.word	0x0a23d374
 8002094:	ab54a9a1 	.word	0xab54a9a1
 8002098:	20000a7c 	.word	0x20000a7c
 800209c:	20000714 	.word	0x20000714
 80020a0:	20000a98 	.word	0x20000a98
 80020a4:	20000a00 	.word	0x20000a00
 80020a8:	20000808 	.word	0x20000808
 80020ac:	20000929 	.word	0x20000929
 80020b0:	200007c0 	.word	0x200007c0
 80020b4:	2000092a 	.word	0x2000092a
 80020b8:	20000928 	.word	0x20000928
 80020bc:	20000004 	.word	0x20000004
 80020c0:	0800fa2c 	.word	0x0800fa2c
 80020c4:	20000938 	.word	0x20000938
 80020c8:	20000854 	.word	0x20000854
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000850 	.word	0x20000850
 80020d4:	20000930 	.word	0x20000930
 80020d8:	0800fa38 	.word	0x0800fa38
 80020dc:	0800fa44 	.word	0x0800fa44
 80020e0:	0800fa54 	.word	0x0800fa54

080020e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b094      	sub	sp, #80	@ 0x50
 80020e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	2234      	movs	r2, #52	@ 0x34
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f006 f957 	bl	80083a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	4b2f      	ldr	r3, [pc, #188]	@ (80021cc <_Z18SystemClock_Configv+0xe8>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	4a2e      	ldr	r2, [pc, #184]	@ (80021cc <_Z18SystemClock_Configv+0xe8>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002116:	6413      	str	r3, [r2, #64]	@ 0x40
 8002118:	4b2c      	ldr	r3, [pc, #176]	@ (80021cc <_Z18SystemClock_Configv+0xe8>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002124:	2300      	movs	r3, #0
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <_Z18SystemClock_Configv+0xec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002130:	4a27      	ldr	r2, [pc, #156]	@ (80021d0 <_Z18SystemClock_Configv+0xec>)
 8002132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <_Z18SystemClock_Configv+0xec>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002144:	2302      	movs	r3, #2
 8002146:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002148:	2301      	movs	r3, #1
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800214c:	2310      	movs	r3, #16
 800214e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002150:	2302      	movs	r3, #2
 8002152:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002154:	2300      	movs	r3, #0
 8002156:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002158:	2310      	movs	r3, #16
 800215a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800215c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002160:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002162:	2304      	movs	r3, #4
 8002164:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002166:	2302      	movs	r3, #2
 8002168:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800216a:	2302      	movs	r3, #2
 800216c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fd68 	bl	8004c48 <HAL_RCC_OscConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8002188:	f000 f9da 	bl	8002540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218c:	230f      	movs	r3, #15
 800218e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002190:	2302      	movs	r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800219c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	2102      	movs	r1, #2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 fa03 	bl	80045b4 <HAL_RCC_ClockConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80021be:	f000 f9bf 	bl	8002540 <Error_Handler>
  }
}
 80021c2:	bf00      	nop
 80021c4:	3750      	adds	r7, #80	@ 0x50
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40007000 	.word	0x40007000

080021d4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 80021da:	4a16      	ldr	r2, [pc, #88]	@ (8002234 <_ZL12MX_I2C1_Initv+0x60>)
 80021dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021de:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 80021e0:	4a15      	ldr	r2, [pc, #84]	@ (8002238 <_ZL12MX_I2C1_Initv+0x64>)
 80021e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 80021f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002210:	4807      	ldr	r0, [pc, #28]	@ (8002230 <_ZL12MX_I2C1_Initv+0x5c>)
 8002212:	f001 f85d 	bl	80032d0 <HAL_I2C_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf14      	ite	ne
 800221c:	2301      	movne	r3, #1
 800221e:	2300      	moveq	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002226:	f000 f98b 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000714 	.word	0x20000714
 8002234:	40005400 	.word	0x40005400
 8002238:	000186a0 	.word	0x000186a0

0800223c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002242:	4a1b      	ldr	r2, [pc, #108]	@ (80022b0 <_ZL12MX_SPI1_Initv+0x74>)
 8002244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002248:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800224c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800224e:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002254:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002262:	2201      	movs	r2, #1
 8002264:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002266:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800226e:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002270:	2228      	movs	r2, #40	@ 0x28
 8002272:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002274:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002276:	2200      	movs	r2, #0
 8002278:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800227a:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 800227c:	2200      	movs	r2, #0
 800227e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002280:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002282:	2200      	movs	r2, #0
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 8002288:	220a      	movs	r2, #10
 800228a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800228c:	4807      	ldr	r0, [pc, #28]	@ (80022ac <_ZL12MX_SPI1_Initv+0x70>)
 800228e:	f002 ff79 	bl	8005184 <HAL_SPI_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80022a2:	f000 f94d 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000768 	.word	0x20000768
 80022b0:	40013000 	.word	0x40013000

080022b4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	463b      	mov	r3, r7
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d0:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <_ZL12MX_TIM3_Initv+0xb4>)
 80022d2:	4a26      	ldr	r2, [pc, #152]	@ (800236c <_ZL12MX_TIM3_Initv+0xb8>)
 80022d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80022d6:	4b24      	ldr	r3, [pc, #144]	@ (8002368 <_ZL12MX_TIM3_Initv+0xb4>)
 80022d8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80022dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022de:	4b22      	ldr	r3, [pc, #136]	@ (8002368 <_ZL12MX_TIM3_Initv+0xb4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80022e4:	4b20      	ldr	r3, [pc, #128]	@ (8002368 <_ZL12MX_TIM3_Initv+0xb4>)
 80022e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80022ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <_ZL12MX_TIM3_Initv+0xb4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002368 <_ZL12MX_TIM3_Initv+0xb4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022f8:	481b      	ldr	r0, [pc, #108]	@ (8002368 <_ZL12MX_TIM3_Initv+0xb4>)
 80022fa:	f003 fd15 	bl	8005d28 <HAL_TIM_Base_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 800230e:	f000 f917 	bl	8002540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	4619      	mov	r1, r3
 800231e:	4812      	ldr	r0, [pc, #72]	@ (8002368 <_ZL12MX_TIM3_Initv+0xb4>)
 8002320:	f003 feb2 	bl	8006088 <HAL_TIM_ConfigClockSource>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8002334:	f000 f904 	bl	8002540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002340:	463b      	mov	r3, r7
 8002342:	4619      	mov	r1, r3
 8002344:	4808      	ldr	r0, [pc, #32]	@ (8002368 <_ZL12MX_TIM3_Initv+0xb4>)
 8002346:	f004 f8d5 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 800235a:	f000 f8f1 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200007c0 	.word	0x200007c0
 800236c:	40000400 	.word	0x40000400

08002370 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002374:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002376:	4a14      	ldr	r2, [pc, #80]	@ (80023c8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800237c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023a6:	4807      	ldr	r0, [pc, #28]	@ (80023c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023a8:	f004 f934 	bl	8006614 <HAL_UART_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80023bc:	f000 f8c0 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000808 	.word	0x20000808
 80023c8:	40004400 	.word	0x40004400

080023cc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
 80023e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b34      	ldr	r3, [pc, #208]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	4a33      	ldr	r2, [pc, #204]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f2:	4b31      	ldr	r3, [pc, #196]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	4a2c      	ldr	r2, [pc, #176]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800240c:	6313      	str	r3, [r2, #48]	@ 0x30
 800240e:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	4b26      	ldr	r3, [pc, #152]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	4a25      	ldr	r2, [pc, #148]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	@ 0x30
 800242a:	4b23      	ldr	r3, [pc, #140]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	4a1e      	ldr	r2, [pc, #120]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	6313      	str	r3, [r2, #48]	@ 0x30
 8002446:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <_ZL12MX_GPIO_Initv+0xec>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_SENS_CS_GPIO_Port, TEMP_SENS_CS_Pin, GPIO_PIN_RESET);
 8002452:	2200      	movs	r2, #0
 8002454:	2110      	movs	r1, #16
 8002456:	4819      	ldr	r0, [pc, #100]	@ (80024bc <_ZL12MX_GPIO_Initv+0xf0>)
 8002458:	f000 ff20 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800245c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002462:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4813      	ldr	r0, [pc, #76]	@ (80024c0 <_ZL12MX_GPIO_Initv+0xf4>)
 8002474:	f000 fd7e 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_SENS_CS_Pin */
  GPIO_InitStruct.Pin = TEMP_SENS_CS_Pin;
 8002478:	2310      	movs	r3, #16
 800247a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247c:	2301      	movs	r3, #1
 800247e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEMP_SENS_CS_GPIO_Port, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	480b      	ldr	r0, [pc, #44]	@ (80024bc <_ZL12MX_GPIO_Initv+0xf0>)
 8002490:	f000 fd70 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_RDY_Pin */
  GPIO_InitStruct.Pin = TEMP_RDY_Pin;
 8002494:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_RDY_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4804      	ldr	r0, [pc, #16]	@ (80024bc <_ZL12MX_GPIO_Initv+0xf0>)
 80024aa:	f000 fd63 	bl	8002f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	@ 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020800 	.word	0x40020800

080024c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a16      	ldr	r2, [pc, #88]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d122      	bne.n	800251a <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		timerInterruptCntr++;
 80024d4:	4b15      	ldr	r3, [pc, #84]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	4a14      	ldr	r2, [pc, #80]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80024dc:	6013      	str	r3, [r2, #0]
		if(currentState != MEAS)
 80024de:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			idleTime++;
 80024e6:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	4a11      	ldr	r2, [pc, #68]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024ee:	6013      	str	r3, [r2, #0]
		}
		if(( (timerInterruptCntr % measFrequency) == 0 ) && currentState == MEAS)
 80024f0:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a10      	ldr	r2, [pc, #64]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80024fc:	fb01 f202 	mul.w	r2, r1, r2
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_TIM_PeriodElapsedCallback+0x56>
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d105      	bne.n	800251a <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			timeInterruptTick = true;
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
			timerInterruptCntr = 0;
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
		}
		/*char msg2[20];
		snprintf(msg2, 20, "Interrupt Called\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*)msg2, 20, HAL_MAX_DELAY);*/
	}
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	200007c0 	.word	0x200007c0
 800252c:	20000924 	.word	0x20000924
 8002530:	20000929 	.word	0x20000929
 8002534:	20000850 	.word	0x20000850
 8002538:	20000000 	.word	0x20000000
 800253c:	20000928 	.word	0x20000928

08002540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <Error_Handler+0x8>

0800254c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af02      	add	r7, sp, #8
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d120      	bne.n	800259e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002562:	4293      	cmp	r3, r2
 8002564:	d11b      	bne.n	800259e <_Z41__static_initialization_and_destruction_0ii+0x52>
GPIO TEMP_SENS_CS(TEMP_SENS_CS_GPIO_Port, TEMP_SENS_CS_Pin);
 8002566:	2210      	movs	r2, #16
 8002568:	490f      	ldr	r1, [pc, #60]	@ (80025a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800256a:	4810      	ldr	r0, [pc, #64]	@ (80025ac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800256c:	f7fe fd6a 	bl	8001044 <_ZN4GPIOC1EP12GPIO_TypeDeft>
GPIO TEMP_RDY(TEMP_RDY_GPIO_Port, TEMP_RDY_Pin);
 8002570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002574:	490c      	ldr	r1, [pc, #48]	@ (80025a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002576:	480e      	ldr	r0, [pc, #56]	@ (80025b0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002578:	f7fe fd64 	bl	8001044 <_ZN4GPIOC1EP12GPIO_TypeDeft>
MAX31865 myPT100(&hspi1, &TEMP_SENS_CS, &TEMP_RDY);
 800257c:	2300      	movs	r3, #0
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002584:	490b      	ldr	r1, [pc, #44]	@ (80025b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002586:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002588:	f7fe fdcc 	bl	8001124 <_ZN8MAX31865C1EP19__SPI_HandleTypeDefP4GPIOS3_10RTD_type_t>
MeasurementStorage myMS(&hi2c1, 80);
 800258c:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2380      	movs	r3, #128	@ 0x80
 8002594:	2250      	movs	r2, #80	@ 0x50
 8002596:	4909      	ldr	r1, [pc, #36]	@ (80025bc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002598:	4809      	ldr	r0, [pc, #36]	@ (80025c0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800259a:	f7fe ffe5 	bl	8001568 <_ZN18MeasurementStorageC1EP17I2C_HandleTypeDefhht>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40020000 	.word	0x40020000
 80025ac:	20000a6c 	.word	0x20000a6c
 80025b0:	20000a74 	.word	0x20000a74
 80025b4:	20000768 	.word	0x20000768
 80025b8:	20000a7c 	.word	0x20000a7c
 80025bc:	20000714 	.word	0x20000714
 80025c0:	20000a98 	.word	0x20000a98

080025c4 <_GLOBAL__sub_I_hi2c1>:
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7ff ffbd 	bl	800254c <_Z41__static_initialization_and_destruction_0ii>
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <HAL_MspInit+0x4c>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002620 <HAL_MspInit+0x4c>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <HAL_MspInit+0x4c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_MspInit+0x4c>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	4a08      	ldr	r2, [pc, #32]	@ (8002620 <HAL_MspInit+0x4c>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002604:	6413      	str	r3, [r2, #64]	@ 0x40
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_MspInit+0x4c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002612:	2007      	movs	r0, #7
 8002614:	f000 fbda 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a19      	ldr	r2, [pc, #100]	@ (80026a8 <HAL_I2C_MspInit+0x84>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12c      	bne.n	80026a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b18      	ldr	r3, [pc, #96]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a17      	ldr	r2, [pc, #92]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002662:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002668:	2312      	movs	r3, #18
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002674:	2304      	movs	r3, #4
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	480c      	ldr	r0, [pc, #48]	@ (80026b0 <HAL_I2C_MspInit+0x8c>)
 8002680:	f000 fc78 	bl	8002f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	4a07      	ldr	r2, [pc, #28]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 800268e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002692:	6413      	str	r3, [r2, #64]	@ 0x40
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_I2C_MspInit+0x88>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	@ 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40005400 	.word	0x40005400
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020400 	.word	0x40020400

080026b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	@ 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	@ (8002738 <HAL_SPI_MspInit+0x84>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d12b      	bne.n	800272e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <HAL_SPI_MspInit+0x88>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	4a17      	ldr	r2, [pc, #92]	@ (800273c <HAL_SPI_MspInit+0x88>)
 80026e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <HAL_SPI_MspInit+0x88>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_SPI_MspInit+0x88>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a10      	ldr	r2, [pc, #64]	@ (800273c <HAL_SPI_MspInit+0x88>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <HAL_SPI_MspInit+0x88>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800270e:	23e0      	movs	r3, #224	@ 0xe0
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800271e:	2305      	movs	r3, #5
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	4805      	ldr	r0, [pc, #20]	@ (8002740 <HAL_SPI_MspInit+0x8c>)
 800272a:	f000 fc23 	bl	8002f74 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800272e:	bf00      	nop
 8002730:	3728      	adds	r7, #40	@ 0x28
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40013000 	.word	0x40013000
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000

08002744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <HAL_TIM_Base_MspInit+0x48>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d115      	bne.n	8002782 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <HAL_TIM_Base_MspInit+0x4c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a0c      	ldr	r2, [pc, #48]	@ (8002790 <HAL_TIM_Base_MspInit+0x4c>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <HAL_TIM_Base_MspInit+0x4c>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	201d      	movs	r0, #29
 8002778:	f000 fb33 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800277c:	201d      	movs	r0, #29
 800277e:	f000 fb4c 	bl	8002e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40000400 	.word	0x40000400
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	@ 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <HAL_UART_MspInit+0x94>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d133      	bne.n	800281e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b1c      	ldr	r3, [pc, #112]	@ (800282c <HAL_UART_MspInit+0x98>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <HAL_UART_MspInit+0x98>)
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c6:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_UART_MspInit+0x98>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <HAL_UART_MspInit+0x98>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	4a14      	ldr	r2, [pc, #80]	@ (800282c <HAL_UART_MspInit+0x98>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_UART_MspInit+0x98>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027ee:	230c      	movs	r3, #12
 80027f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027fe:	2307      	movs	r3, #7
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	4809      	ldr	r0, [pc, #36]	@ (8002830 <HAL_UART_MspInit+0x9c>)
 800280a:	f000 fbb3 	bl	8002f74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	2026      	movs	r0, #38	@ 0x26
 8002814:	f000 fae5 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002818:	2026      	movs	r0, #38	@ 0x26
 800281a:	f000 fafe 	bl	8002e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800281e:	bf00      	nop
 8002820:	3728      	adds	r7, #40	@ 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40004400 	.word	0x40004400
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000

08002834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <NMI_Handler+0x4>

0800283c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <MemManage_Handler+0x4>

0800284c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <BusFault_Handler+0x4>

08002854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <UsageFault_Handler+0x4>

0800285c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800288a:	f000 f96b 	bl	8002b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002898:	4802      	ldr	r0, [pc, #8]	@ (80028a4 <TIM3_IRQHandler+0x10>)
 800289a:	f003 fb05 	bl	8005ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200007c0 	.word	0x200007c0

080028a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028ac:	4802      	ldr	r0, [pc, #8]	@ (80028b8 <USART2_IRQHandler+0x10>)
 80028ae:	f003 ffb1 	bl	8006814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000808 	.word	0x20000808

080028bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return 1;
 80028c0:	2301      	movs	r3, #1
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_kill>:

int _kill(int pid, int sig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028d6:	f005 fdcb 	bl	8008470 <__errno>
 80028da:	4603      	mov	r3, r0
 80028dc:	2216      	movs	r2, #22
 80028de:	601a      	str	r2, [r3, #0]
  return -1;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_exit>:

void _exit (int status)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ffe7 	bl	80028cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <_exit+0x12>

08002902 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e00a      	b.n	800292a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002914:	f3af 8000 	nop.w
 8002918:	4601      	mov	r1, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	60ba      	str	r2, [r7, #8]
 8002920:	b2ca      	uxtb	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	dbf0      	blt.n	8002914 <_read+0x12>
  }

  return len;
 8002932:	687b      	ldr	r3, [r7, #4]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e009      	b.n	8002962 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	60ba      	str	r2, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	429a      	cmp	r2, r3
 8002968:	dbf1      	blt.n	800294e <_write+0x12>
  }
  return len;
 800296a:	687b      	ldr	r3, [r7, #4]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_close>:

int _close(int file)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800299c:	605a      	str	r2, [r3, #4]
  return 0;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <_isatty>:

int _isatty(int file)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e4:	4a14      	ldr	r2, [pc, #80]	@ (8002a38 <_sbrk+0x5c>)
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <_sbrk+0x60>)
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <_sbrk+0x64>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	@ (8002a44 <_sbrk+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <_sbrk+0x64>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d207      	bcs.n	8002a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a0c:	f005 fd30 	bl	8008470 <__errno>
 8002a10:	4603      	mov	r3, r0
 8002a12:	220c      	movs	r2, #12
 8002a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	e009      	b.n	8002a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a1c:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <_sbrk+0x64>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a05      	ldr	r2, [pc, #20]	@ (8002a40 <_sbrk+0x64>)
 8002a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20020000 	.word	0x20020000
 8002a3c:	00000400 	.word	0x00000400
 8002a40:	20000aa8 	.word	0x20000aa8
 8002a44:	20000dc0 	.word	0x20000dc0

08002a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <SystemInit+0x20>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <SystemInit+0x20>)
 8002a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a70:	f7ff ffea 	bl	8002a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a74:	480c      	ldr	r0, [pc, #48]	@ (8002aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a76:	490d      	ldr	r1, [pc, #52]	@ (8002aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a78:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a9a:	f005 fcef 	bl	800847c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a9e:	f7ff f9df 	bl	8001e60 <main>
  bx  lr    
 8002aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aac:	200006f8 	.word	0x200006f8
  ldr r2, =_sidata
 8002ab0:	0800ff10 	.word	0x0800ff10
  ldr r2, =_sbss
 8002ab4:	200006f8 	.word	0x200006f8
  ldr r4, =_ebss
 8002ab8:	20000dbc 	.word	0x20000dbc

08002abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002abc:	e7fe      	b.n	8002abc <ADC_IRQHandler>
	...

08002ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <HAL_Init+0x40>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <HAL_Init+0x40>)
 8002aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <HAL_Init+0x40>)
 8002ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a07      	ldr	r2, [pc, #28]	@ (8002b00 <HAL_Init+0x40>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f000 f96f 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f000 f808 	bl	8002b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af4:	f7ff fd6e 	bl	80025d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023c00 	.word	0x40023c00

08002b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_InitTick+0x54>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_InitTick+0x58>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f987 	bl	8002e36 <HAL_SYSTICK_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00e      	b.n	8002b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0f      	cmp	r3, #15
 8002b36:	d80a      	bhi.n	8002b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f000 f94f 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b44:	4a06      	ldr	r2, [pc, #24]	@ (8002b60 <HAL_InitTick+0x5c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000038 	.word	0x20000038
 8002b5c:	20000040 	.word	0x20000040
 8002b60:	2000003c 	.word	0x2000003c

08002b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_IncTick+0x20>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_IncTick+0x24>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <HAL_IncTick+0x24>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000040 	.word	0x20000040
 8002b88:	20000aac 	.word	0x20000aac

08002b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_GetTick+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000aac 	.word	0x20000aac

08002ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff ffee 	bl	8002b8c <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d005      	beq.n	8002bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <HAL_Delay+0x44>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bca:	bf00      	nop
 8002bcc:	f7ff ffde 	bl	8002b8c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8f7      	bhi.n	8002bcc <HAL_Delay+0x28>
  {
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000040 	.word	0x20000040

08002bec <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <HAL_SuspendTick+0x1c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <HAL_SuspendTick+0x1c>)
 8002bf6:	f023 0302 	bic.w	r3, r3, #2
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_ResumeTick+0x1c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <HAL_ResumeTick+0x1c>)
 8002c16:	f043 0302 	orr.w	r3, r3, #2
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000e010 	.word	0xe000e010

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	@ (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	@ (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	@ (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff3e 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff31 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff fe96 	bl	8002b8c <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d008      	beq.n	8002e80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e052      	b.n	8002f26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0216 	bic.w	r2, r2, #22
 8002e8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <HAL_DMA_Abort+0x62>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0208 	bic.w	r2, r2, #8
 8002ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed0:	e013      	b.n	8002efa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed2:	f7ff fe5b 	bl	8002b8c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d90c      	bls.n	8002efa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e015      	b.n	8002f26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e4      	bne.n	8002ed2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	223f      	movs	r2, #63	@ 0x3f
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d004      	beq.n	8002f4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2280      	movs	r2, #128	@ 0x80
 8002f46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e00c      	b.n	8002f66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2205      	movs	r2, #5
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e165      	b.n	800325c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 8154 	bne.w	8003256 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d005      	beq.n	8002fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b03      	cmp	r3, #3
 8003032:	d017      	beq.n	8003064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d123      	bne.n	80030b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80ae 	beq.w	8003256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003274 <HAL_GPIO_Init+0x300>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	4a5c      	ldr	r2, [pc, #368]	@ (8003274 <HAL_GPIO_Init+0x300>)
 8003104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003108:	6453      	str	r3, [r2, #68]	@ 0x44
 800310a:	4b5a      	ldr	r3, [pc, #360]	@ (8003274 <HAL_GPIO_Init+0x300>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003116:	4a58      	ldr	r2, [pc, #352]	@ (8003278 <HAL_GPIO_Init+0x304>)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	@ (800327c <HAL_GPIO_Init+0x308>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d025      	beq.n	800318e <HAL_GPIO_Init+0x21a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4e      	ldr	r2, [pc, #312]	@ (8003280 <HAL_GPIO_Init+0x30c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <HAL_GPIO_Init+0x216>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4d      	ldr	r2, [pc, #308]	@ (8003284 <HAL_GPIO_Init+0x310>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_Init+0x212>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4c      	ldr	r2, [pc, #304]	@ (8003288 <HAL_GPIO_Init+0x314>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0x20e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4b      	ldr	r2, [pc, #300]	@ (800328c <HAL_GPIO_Init+0x318>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_Init+0x20a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4a      	ldr	r2, [pc, #296]	@ (8003290 <HAL_GPIO_Init+0x31c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_Init+0x206>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a49      	ldr	r2, [pc, #292]	@ (8003294 <HAL_GPIO_Init+0x320>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_Init+0x202>
 8003172:	2306      	movs	r3, #6
 8003174:	e00c      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 8003176:	2307      	movs	r3, #7
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 800317a:	2305      	movs	r3, #5
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x21c>
 800318e:	2300      	movs	r3, #0
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a0:	4935      	ldr	r1, [pc, #212]	@ (8003278 <HAL_GPIO_Init+0x304>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003298 <HAL_GPIO_Init+0x324>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d2:	4a31      	ldr	r2, [pc, #196]	@ (8003298 <HAL_GPIO_Init+0x324>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003298 <HAL_GPIO_Init+0x324>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031fc:	4a26      	ldr	r2, [pc, #152]	@ (8003298 <HAL_GPIO_Init+0x324>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003202:	4b25      	ldr	r3, [pc, #148]	@ (8003298 <HAL_GPIO_Init+0x324>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003226:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <HAL_GPIO_Init+0x324>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322c:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_GPIO_Init+0x324>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003250:	4a11      	ldr	r2, [pc, #68]	@ (8003298 <HAL_GPIO_Init+0x324>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	f67f ae96 	bls.w	8002f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3724      	adds	r7, #36	@ 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800
 8003298:	40013c00 	.word	0x40013c00

0800329c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
 80032a8:	4613      	mov	r3, r2
 80032aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ac:	787b      	ldrb	r3, [r7, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b8:	e003      	b.n	80032c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	041a      	lsls	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	619a      	str	r2, [r3, #24]
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e12b      	b.n	800353a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff f994 	bl	8002624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2224      	movs	r2, #36	@ 0x24
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003334:	f001 fa30 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8003338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a81      	ldr	r2, [pc, #516]	@ (8003544 <HAL_I2C_Init+0x274>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d807      	bhi.n	8003354 <HAL_I2C_Init+0x84>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a80      	ldr	r2, [pc, #512]	@ (8003548 <HAL_I2C_Init+0x278>)
 8003348:	4293      	cmp	r3, r2
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e006      	b.n	8003362 <HAL_I2C_Init+0x92>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a7d      	ldr	r2, [pc, #500]	@ (800354c <HAL_I2C_Init+0x27c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	bf94      	ite	ls
 800335c:	2301      	movls	r3, #1
 800335e:	2300      	movhi	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0e7      	b.n	800353a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a78      	ldr	r2, [pc, #480]	@ (8003550 <HAL_I2C_Init+0x280>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0c9b      	lsrs	r3, r3, #18
 8003374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a6a      	ldr	r2, [pc, #424]	@ (8003544 <HAL_I2C_Init+0x274>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d802      	bhi.n	80033a4 <HAL_I2C_Init+0xd4>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3301      	adds	r3, #1
 80033a2:	e009      	b.n	80033b8 <HAL_I2C_Init+0xe8>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	4a69      	ldr	r2, [pc, #420]	@ (8003554 <HAL_I2C_Init+0x284>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	3301      	adds	r3, #1
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	430b      	orrs	r3, r1
 80033be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	495c      	ldr	r1, [pc, #368]	@ (8003544 <HAL_I2C_Init+0x274>)
 80033d4:	428b      	cmp	r3, r1
 80033d6:	d819      	bhi.n	800340c <HAL_I2C_Init+0x13c>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e59      	subs	r1, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e6:	1c59      	adds	r1, r3, #1
 80033e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033ec:	400b      	ands	r3, r1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_I2C_Init+0x138>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1e59      	subs	r1, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003400:	3301      	adds	r3, #1
 8003402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003406:	e051      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 8003408:	2304      	movs	r3, #4
 800340a:	e04f      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d111      	bne.n	8003438 <HAL_I2C_Init+0x168>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e58      	subs	r0, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e012      	b.n	800345e <HAL_I2C_Init+0x18e>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e58      	subs	r0, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	0099      	lsls	r1, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Init+0x196>
 8003462:	2301      	movs	r3, #1
 8003464:	e022      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10e      	bne.n	800348c <HAL_I2C_Init+0x1bc>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1e58      	subs	r0, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	440b      	add	r3, r1
 800347c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003480:	3301      	adds	r3, #1
 8003482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800348a:	e00f      	b.n	80034ac <HAL_I2C_Init+0x1dc>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	0099      	lsls	r1, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	6809      	ldr	r1, [r1, #0]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6911      	ldr	r1, [r2, #16]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68d2      	ldr	r2, [r2, #12]
 80034e6:	4311      	orrs	r1, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	000186a0 	.word	0x000186a0
 8003548:	001e847f 	.word	0x001e847f
 800354c:	003d08ff 	.word	0x003d08ff
 8003550:	431bde83 	.word	0x431bde83
 8003554:	10624dd3 	.word	0x10624dd3

08003558 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	461a      	mov	r2, r3
 8003566:	4603      	mov	r3, r0
 8003568:	817b      	strh	r3, [r7, #10]
 800356a:	460b      	mov	r3, r1
 800356c:	813b      	strh	r3, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003572:	f7ff fb0b 	bl	8002b8c <HAL_GetTick>
 8003576:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b20      	cmp	r3, #32
 8003582:	f040 80d9 	bne.w	8003738 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	2319      	movs	r3, #25
 800358c:	2201      	movs	r2, #1
 800358e:	496d      	ldr	r1, [pc, #436]	@ (8003744 <HAL_I2C_Mem_Write+0x1ec>)
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fdb9 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
 800359e:	e0cc      	b.n	800373a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Mem_Write+0x56>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e0c5      	b.n	800373a <HAL_I2C_Mem_Write+0x1e2>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d007      	beq.n	80035d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2221      	movs	r2, #33	@ 0x21
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2240      	movs	r2, #64	@ 0x40
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003604:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a4d      	ldr	r2, [pc, #308]	@ (8003748 <HAL_I2C_Mem_Write+0x1f0>)
 8003614:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003616:	88f8      	ldrh	r0, [r7, #6]
 8003618:	893a      	ldrh	r2, [r7, #8]
 800361a:	8979      	ldrh	r1, [r7, #10]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4603      	mov	r3, r0
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fbf0 	bl	8003e0c <I2C_RequestMemoryWrite>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d052      	beq.n	80036d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e081      	b.n	800373a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fe7e 	bl	800433c <I2C_WaitOnTXEFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	2b04      	cmp	r3, #4
 800364c:	d107      	bne.n	800365e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06b      	b.n	800373a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	781a      	ldrb	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b04      	cmp	r3, #4
 800369e:	d11b      	bne.n	80036d8 <HAL_I2C_Mem_Write+0x180>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d017      	beq.n	80036d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	781a      	ldrb	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1aa      	bne.n	8003636 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fe71 	bl	80043cc <I2C_WaitOnBTFFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003706:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e016      	b.n	800373a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	00100002 	.word	0x00100002
 8003748:	ffff0000 	.word	0xffff0000

0800374c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	@ 0x30
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	461a      	mov	r2, r3
 800375a:	4603      	mov	r3, r0
 800375c:	817b      	strh	r3, [r7, #10]
 800375e:	460b      	mov	r3, r1
 8003760:	813b      	strh	r3, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003766:	f7ff fa11 	bl	8002b8c <HAL_GetTick>
 800376a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b20      	cmp	r3, #32
 8003776:	f040 8214 	bne.w	8003ba2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2319      	movs	r3, #25
 8003780:	2201      	movs	r2, #1
 8003782:	497b      	ldr	r1, [pc, #492]	@ (8003970 <HAL_I2C_Mem_Read+0x224>)
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fcbf 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
 8003792:	e207      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_Mem_Read+0x56>
 800379e:	2302      	movs	r3, #2
 80037a0:	e200      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x458>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d007      	beq.n	80037c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2222      	movs	r2, #34	@ 0x22
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2240      	movs	r2, #64	@ 0x40
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80037f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a5b      	ldr	r2, [pc, #364]	@ (8003974 <HAL_I2C_Mem_Read+0x228>)
 8003808:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800380a:	88f8      	ldrh	r0, [r7, #6]
 800380c:	893a      	ldrh	r2, [r7, #8]
 800380e:	8979      	ldrh	r1, [r7, #10]
 8003810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	4603      	mov	r3, r0
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fb8c 	bl	8003f38 <I2C_RequestMemoryRead>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e1bc      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	2b00      	cmp	r3, #0
 8003830:	d113      	bne.n	800385a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	623b      	str	r3, [r7, #32]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e190      	b.n	8003b7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	2b01      	cmp	r3, #1
 8003860:	d11b      	bne.n	800389a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e170      	b.n	8003b7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d11b      	bne.n	80038da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	e150      	b.n	8003b7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038f0:	e144      	b.n	8003b7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	f200 80f1 	bhi.w	8003ade <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003900:	2b01      	cmp	r3, #1
 8003902:	d123      	bne.n	800394c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003906:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fda7 	bl	800445c <I2C_WaitOnRXNEFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e145      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800394a:	e117      	b.n	8003b7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003950:	2b02      	cmp	r3, #2
 8003952:	d14e      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395a:	2200      	movs	r2, #0
 800395c:	4906      	ldr	r1, [pc, #24]	@ (8003978 <HAL_I2C_Mem_Read+0x22c>)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fbd2 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d008      	beq.n	800397c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e11a      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x458>
 800396e:	bf00      	nop
 8003970:	00100002 	.word	0x00100002
 8003974:	ffff0000 	.word	0xffff0000
 8003978:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800398a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039f0:	e0c4      	b.n	8003b7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f8:	2200      	movs	r2, #0
 80039fa:	496c      	ldr	r1, [pc, #432]	@ (8003bac <HAL_I2C_Mem_Read+0x460>)
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fb83 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0cb      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a54:	2200      	movs	r2, #0
 8003a56:	4955      	ldr	r1, [pc, #340]	@ (8003bac <HAL_I2C_Mem_Read+0x460>)
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fb55 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e09d      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003adc:	e04e      	b.n	8003b7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fcba 	bl	800445c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e058      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d124      	bne.n	8003b7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f47f aeb6 	bne.w	80038f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3728      	adds	r7, #40	@ 0x28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	00010004 	.word	0x00010004

08003bb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	@ 0x28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7fe ffe4 	bl	8002b8c <HAL_GetTick>
 8003bc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	f040 8111 	bne.w	8003dfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2319      	movs	r3, #25
 8003bde:	2201      	movs	r2, #1
 8003be0:	4988      	ldr	r1, [pc, #544]	@ (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fa90 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e104      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_I2C_IsDeviceReady+0x50>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0fd      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d007      	beq.n	8003c26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2224      	movs	r2, #36	@ 0x24
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4a70      	ldr	r2, [pc, #448]	@ (8003e08 <HAL_I2C_IsDeviceReady+0x258>)
 8003c48:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fa4e 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c80:	d103      	bne.n	8003c8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c88:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0b6      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8e:	897b      	ldrh	r3, [r7, #10]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7fe ff75 	bl	8002b8c <HAL_GetTick>
 8003ca2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cd2:	e025      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fe ff5a 	bl	8002b8c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <HAL_I2C_IsDeviceReady+0x13a>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	22a0      	movs	r2, #160	@ 0xa0
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d2a:	d005      	beq.n	8003d38 <HAL_I2C_IsDeviceReady+0x188>
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_I2C_IsDeviceReady+0x188>
 8003d32:	7dbb      	ldrb	r3, [r7, #22]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0cd      	beq.n	8003cd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d129      	bne.n	8003da2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2319      	movs	r3, #25
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4921      	ldr	r1, [pc, #132]	@ (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f9c2 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e036      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e02c      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2319      	movs	r3, #25
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	490f      	ldr	r1, [pc, #60]	@ (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f99e 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e012      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f4ff af32 	bcc.w	8003c4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	00100002 	.word	0x00100002
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	813b      	strh	r3, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f960 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e5c:	d103      	bne.n	8003e66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e05f      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6a:	897b      	ldrh	r3, [r7, #10]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	492d      	ldr	r1, [pc, #180]	@ (8003f34 <I2C_RequestMemoryWrite+0x128>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f9bb 	bl	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e04c      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea8:	6a39      	ldr	r1, [r7, #32]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fa46 	bl	800433c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d107      	bne.n	8003ece <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e02b      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed8:	893b      	ldrh	r3, [r7, #8]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]
 8003ee2:	e021      	b.n	8003f28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	6a39      	ldr	r1, [r7, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fa20 	bl	800433c <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e005      	b.n	8003f2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f1e:	893b      	ldrh	r3, [r7, #8]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	00010002 	.word	0x00010002

08003f38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	817b      	strh	r3, [r7, #10]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	813b      	strh	r3, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f8c2 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f98:	d103      	bne.n	8003fa2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fa0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0aa      	b.n	80040fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fa6:	897b      	ldrh	r3, [r7, #10]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	6a3a      	ldr	r2, [r7, #32]
 8003fba:	4952      	ldr	r1, [pc, #328]	@ (8004104 <I2C_RequestMemoryRead+0x1cc>)
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f91d 	bl	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e097      	b.n	80040fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe4:	6a39      	ldr	r1, [r7, #32]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f9a8 	bl	800433c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d107      	bne.n	800400a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004008:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e076      	b.n	80040fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d105      	bne.n	8004020 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004014:	893b      	ldrh	r3, [r7, #8]
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	611a      	str	r2, [r3, #16]
 800401e:	e021      	b.n	8004064 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004020:	893b      	ldrh	r3, [r7, #8]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	b29b      	uxth	r3, r3
 8004026:	b2da      	uxtb	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004030:	6a39      	ldr	r1, [r7, #32]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f982 	bl	800433c <I2C_WaitOnTXEFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	2b04      	cmp	r3, #4
 8004044:	d107      	bne.n	8004056 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004054:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e050      	b.n	80040fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800405a:	893b      	ldrh	r3, [r7, #8]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004066:	6a39      	ldr	r1, [r7, #32]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f967 	bl	800433c <I2C_WaitOnTXEFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00d      	beq.n	8004090 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	2b04      	cmp	r3, #4
 800407a:	d107      	bne.n	800408c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800408a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e035      	b.n	80040fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800409e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f82b 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c6:	d103      	bne.n	80040d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e013      	b.n	80040fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040d4:	897b      	ldrh	r3, [r7, #10]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	6a3a      	ldr	r2, [r7, #32]
 80040e8:	4906      	ldr	r1, [pc, #24]	@ (8004104 <I2C_RequestMemoryRead+0x1cc>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f886 	bl	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	00010002 	.word	0x00010002

08004108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004118:	e048      	b.n	80041ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d044      	beq.n	80041ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004122:	f7fe fd33 	bl	8002b8c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d139      	bne.n	80041ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d10d      	bne.n	800415e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	43da      	mvns	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	e00c      	b.n	8004178 <I2C_WaitOnFlagUntilTimeout+0x70>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	43da      	mvns	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	429a      	cmp	r2, r3
 800417c:	d116      	bne.n	80041ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e023      	b.n	80041f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	0c1b      	lsrs	r3, r3, #16
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d10d      	bne.n	80041d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	43da      	mvns	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4013      	ands	r3, r2
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	e00c      	b.n	80041ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	43da      	mvns	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4013      	ands	r3, r2
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d093      	beq.n	800411a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800420a:	e071      	b.n	80042f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421a:	d123      	bne.n	8004264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004234:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	f043 0204 	orr.w	r2, r3, #4
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e067      	b.n	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d041      	beq.n	80042f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426c:	f7fe fc8e 	bl	8002b8c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d302      	bcc.n	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d136      	bne.n	80042f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10c      	bne.n	80042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	43da      	mvns	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	bf14      	ite	ne
 800429e:	2301      	movne	r3, #1
 80042a0:	2300      	moveq	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	e00b      	b.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	43da      	mvns	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4013      	ands	r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e021      	b.n	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10c      	bne.n	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	43da      	mvns	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	4013      	ands	r3, r2
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf14      	ite	ne
 800430c:	2301      	movne	r3, #1
 800430e:	2300      	moveq	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	e00b      	b.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	43da      	mvns	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf14      	ite	ne
 8004326:	2301      	movne	r3, #1
 8004328:	2300      	moveq	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	f47f af6d 	bne.w	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004348:	e034      	b.n	80043b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f8e3 	bl	8004516 <I2C_IsAcknowledgeFailed>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e034      	b.n	80043c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d028      	beq.n	80043b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004362:	f7fe fc13 	bl	8002b8c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	d302      	bcc.n	8004378 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d11d      	bne.n	80043b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004382:	2b80      	cmp	r3, #128	@ 0x80
 8004384:	d016      	beq.n	80043b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e007      	b.n	80043c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043be:	2b80      	cmp	r3, #128	@ 0x80
 80043c0:	d1c3      	bne.n	800434a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043d8:	e034      	b.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f89b 	bl	8004516 <I2C_IsAcknowledgeFailed>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e034      	b.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d028      	beq.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fe fbcb 	bl	8002b8c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11d      	bne.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d016      	beq.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e007      	b.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b04      	cmp	r3, #4
 8004450:	d1c3      	bne.n	80043da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004468:	e049      	b.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b10      	cmp	r3, #16
 8004476:	d119      	bne.n	80044ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0210 	mvn.w	r2, #16
 8004480:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e030      	b.n	800450e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fe fb6e 	bl	8002b8c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d11d      	bne.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044cc:	2b40      	cmp	r3, #64	@ 0x40
 80044ce:	d016      	beq.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e007      	b.n	800450e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004508:	2b40      	cmp	r3, #64	@ 0x40
 800450a:	d1ae      	bne.n	800446a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452c:	d11b      	bne.n	8004566 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004536:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	4a0a      	ldr	r2, [pc, #40]	@ (80045b0 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8004586:	f023 0304 	bic.w	r3, r3, #4
 800458a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004592:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8004594:	e005      	b.n	80045a2 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d001      	beq.n	80045a0 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 800459c:	bf40      	sev
      __WFE();
 800459e:	bf20      	wfe
    __WFE();
 80045a0:	bf20      	wfe
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0cc      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c8:	4b68      	ldr	r3, [pc, #416]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d90c      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b65      	ldr	r3, [pc, #404]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b63      	ldr	r3, [pc, #396]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0b8      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004608:	4b59      	ldr	r3, [pc, #356]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a58      	ldr	r2, [pc, #352]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004620:	4b53      	ldr	r3, [pc, #332]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a52      	ldr	r2, [pc, #328]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800462a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b50      	ldr	r3, [pc, #320]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	494d      	ldr	r1, [pc, #308]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d044      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d119      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d003      	beq.n	8004672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	2b03      	cmp	r3, #3
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004672:	4b3f      	ldr	r3, [pc, #252]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e06f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004682:	4b3b      	ldr	r3, [pc, #236]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e067      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004692:	4b37      	ldr	r3, [pc, #220]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 0203 	bic.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4934      	ldr	r1, [pc, #208]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a4:	f7fe fa72 	bl	8002b8c <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fe fa6e 	bl	8002b8c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e04f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 020c 	and.w	r2, r3, #12
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d1eb      	bne.n	80046ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d4:	4b25      	ldr	r3, [pc, #148]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d20c      	bcs.n	80046fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b22      	ldr	r3, [pc, #136]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b20      	ldr	r3, [pc, #128]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e032      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004708:	4b19      	ldr	r3, [pc, #100]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4916      	ldr	r1, [pc, #88]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004726:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	490e      	ldr	r1, [pc, #56]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800473a:	f000 f855 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 800473e:	4602      	mov	r2, r0
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	490a      	ldr	r1, [pc, #40]	@ (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	5ccb      	ldrb	r3, [r1, r3]
 800474e:	fa22 f303 	lsr.w	r3, r2, r3
 8004752:	4a09      	ldr	r2, [pc, #36]	@ (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004756:	4b09      	ldr	r3, [pc, #36]	@ (800477c <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe f9d2 	bl	8002b04 <HAL_InitTick>

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40023c00 	.word	0x40023c00
 8004770:	40023800 	.word	0x40023800
 8004774:	0800fa5c 	.word	0x0800fa5c
 8004778:	20000038 	.word	0x20000038
 800477c:	2000003c 	.word	0x2000003c

08004780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004784:	4b03      	ldr	r3, [pc, #12]	@ (8004794 <HAL_RCC_GetHCLKFreq+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000038 	.word	0x20000038

08004798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800479c:	f7ff fff0 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	4903      	ldr	r1, [pc, #12]	@ (80047bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40023800 	.word	0x40023800
 80047bc:	0800fa6c 	.word	0x0800fa6c

080047c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047c4:	f7ff ffdc 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0b5b      	lsrs	r3, r3, #13
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4903      	ldr	r1, [pc, #12]	@ (80047e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	0800fa6c 	.word	0x0800fa6c

080047e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ec:	b0ae      	sub	sp, #184	@ 0xb8
 80047ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800480e:	4bcb      	ldr	r3, [pc, #812]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b0c      	cmp	r3, #12
 8004818:	f200 8206 	bhi.w	8004c28 <HAL_RCC_GetSysClockFreq+0x440>
 800481c:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <HAL_RCC_GetSysClockFreq+0x3c>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004859 	.word	0x08004859
 8004828:	08004c29 	.word	0x08004c29
 800482c:	08004c29 	.word	0x08004c29
 8004830:	08004c29 	.word	0x08004c29
 8004834:	08004861 	.word	0x08004861
 8004838:	08004c29 	.word	0x08004c29
 800483c:	08004c29 	.word	0x08004c29
 8004840:	08004c29 	.word	0x08004c29
 8004844:	08004869 	.word	0x08004869
 8004848:	08004c29 	.word	0x08004c29
 800484c:	08004c29 	.word	0x08004c29
 8004850:	08004c29 	.word	0x08004c29
 8004854:	08004a59 	.word	0x08004a59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004858:	4bb9      	ldr	r3, [pc, #740]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x358>)
 800485a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800485e:	e1e7      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004860:	4bb8      	ldr	r3, [pc, #736]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004862:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004866:	e1e3      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004868:	4bb4      	ldr	r3, [pc, #720]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004874:	4bb1      	ldr	r3, [pc, #708]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d071      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004880:	4bae      	ldr	r3, [pc, #696]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	2200      	movs	r2, #0
 8004888:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800488c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004890:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004898:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048a6:	4622      	mov	r2, r4
 80048a8:	462b      	mov	r3, r5
 80048aa:	f04f 0000 	mov.w	r0, #0
 80048ae:	f04f 0100 	mov.w	r1, #0
 80048b2:	0159      	lsls	r1, r3, #5
 80048b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b8:	0150      	lsls	r0, r2, #5
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4621      	mov	r1, r4
 80048c0:	1a51      	subs	r1, r2, r1
 80048c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80048c4:	4629      	mov	r1, r5
 80048c6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80048d8:	4649      	mov	r1, r9
 80048da:	018b      	lsls	r3, r1, #6
 80048dc:	4641      	mov	r1, r8
 80048de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048e2:	4641      	mov	r1, r8
 80048e4:	018a      	lsls	r2, r1, #6
 80048e6:	4641      	mov	r1, r8
 80048e8:	1a51      	subs	r1, r2, r1
 80048ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048ec:	4649      	mov	r1, r9
 80048ee:	eb63 0301 	sbc.w	r3, r3, r1
 80048f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004900:	4649      	mov	r1, r9
 8004902:	00cb      	lsls	r3, r1, #3
 8004904:	4641      	mov	r1, r8
 8004906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490a:	4641      	mov	r1, r8
 800490c:	00ca      	lsls	r2, r1, #3
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	4603      	mov	r3, r0
 8004914:	4622      	mov	r2, r4
 8004916:	189b      	adds	r3, r3, r2
 8004918:	633b      	str	r3, [r7, #48]	@ 0x30
 800491a:	462b      	mov	r3, r5
 800491c:	460a      	mov	r2, r1
 800491e:	eb42 0303 	adc.w	r3, r2, r3
 8004922:	637b      	str	r3, [r7, #52]	@ 0x34
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004930:	4629      	mov	r1, r5
 8004932:	024b      	lsls	r3, r1, #9
 8004934:	4621      	mov	r1, r4
 8004936:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800493a:	4621      	mov	r1, r4
 800493c:	024a      	lsls	r2, r1, #9
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004946:	2200      	movs	r2, #0
 8004948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800494c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004950:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004954:	f7fc f9c8 	bl	8000ce8 <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4613      	mov	r3, r2
 800495e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004962:	e067      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004964:	4b75      	ldr	r3, [pc, #468]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	099b      	lsrs	r3, r3, #6
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004970:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004974:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800497e:	2300      	movs	r3, #0
 8004980:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004982:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004986:	4622      	mov	r2, r4
 8004988:	462b      	mov	r3, r5
 800498a:	f04f 0000 	mov.w	r0, #0
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	0159      	lsls	r1, r3, #5
 8004994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004998:	0150      	lsls	r0, r2, #5
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4621      	mov	r1, r4
 80049a0:	1a51      	subs	r1, r2, r1
 80049a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049a4:	4629      	mov	r1, r5
 80049a6:	eb63 0301 	sbc.w	r3, r3, r1
 80049aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80049b8:	4649      	mov	r1, r9
 80049ba:	018b      	lsls	r3, r1, #6
 80049bc:	4641      	mov	r1, r8
 80049be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049c2:	4641      	mov	r1, r8
 80049c4:	018a      	lsls	r2, r1, #6
 80049c6:	4641      	mov	r1, r8
 80049c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80049cc:	4649      	mov	r1, r9
 80049ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049e6:	4692      	mov	sl, r2
 80049e8:	469b      	mov	fp, r3
 80049ea:	4623      	mov	r3, r4
 80049ec:	eb1a 0303 	adds.w	r3, sl, r3
 80049f0:	623b      	str	r3, [r7, #32]
 80049f2:	462b      	mov	r3, r5
 80049f4:	eb4b 0303 	adc.w	r3, fp, r3
 80049f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a06:	4629      	mov	r1, r5
 8004a08:	028b      	lsls	r3, r1, #10
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a10:	4621      	mov	r1, r4
 8004a12:	028a      	lsls	r2, r1, #10
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a20:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004a26:	f7fc f95f 	bl	8000ce8 <__aeabi_uldivmod>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4613      	mov	r3, r2
 8004a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a34:	4b41      	ldr	r3, [pc, #260]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a56:	e0eb      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a58:	4b38      	ldr	r3, [pc, #224]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a64:	4b35      	ldr	r3, [pc, #212]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d06b      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a70:	4b32      	ldr	r3, [pc, #200]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	099b      	lsrs	r3, r3, #6
 8004a76:	2200      	movs	r2, #0
 8004a78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a84:	2300      	movs	r3, #0
 8004a86:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	462b      	mov	r3, r5
 8004a90:	f04f 0000 	mov.w	r0, #0
 8004a94:	f04f 0100 	mov.w	r1, #0
 8004a98:	0159      	lsls	r1, r3, #5
 8004a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9e:	0150      	lsls	r0, r2, #5
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	1a51      	subs	r1, r2, r1
 8004aa8:	61b9      	str	r1, [r7, #24]
 8004aaa:	4629      	mov	r1, r5
 8004aac:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004abe:	4659      	mov	r1, fp
 8004ac0:	018b      	lsls	r3, r1, #6
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac8:	4651      	mov	r1, sl
 8004aca:	018a      	lsls	r2, r1, #6
 8004acc:	4651      	mov	r1, sl
 8004ace:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ae4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aec:	4690      	mov	r8, r2
 8004aee:	4699      	mov	r9, r3
 8004af0:	4623      	mov	r3, r4
 8004af2:	eb18 0303 	adds.w	r3, r8, r3
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	462b      	mov	r3, r5
 8004afa:	eb49 0303 	adc.w	r3, r9, r3
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	024b      	lsls	r3, r1, #9
 8004b10:	4621      	mov	r1, r4
 8004b12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b16:	4621      	mov	r1, r4
 8004b18:	024a      	lsls	r2, r1, #9
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b22:	2200      	movs	r2, #0
 8004b24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b26:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004b28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b2c:	f7fc f8dc 	bl	8000ce8 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4613      	mov	r3, r2
 8004b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b3a:	e065      	b.n	8004c08 <HAL_RCC_GetSysClockFreq+0x420>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b48:	4b3d      	ldr	r3, [pc, #244]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	2200      	movs	r2, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	4611      	mov	r1, r2
 8004b54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b58:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004b62:	4642      	mov	r2, r8
 8004b64:	464b      	mov	r3, r9
 8004b66:	f04f 0000 	mov.w	r0, #0
 8004b6a:	f04f 0100 	mov.w	r1, #0
 8004b6e:	0159      	lsls	r1, r3, #5
 8004b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b74:	0150      	lsls	r0, r2, #5
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	1a51      	subs	r1, r2, r1
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	4649      	mov	r1, r9
 8004b82:	eb63 0301 	sbc.w	r3, r3, r1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b94:	4659      	mov	r1, fp
 8004b96:	018b      	lsls	r3, r1, #6
 8004b98:	4651      	mov	r1, sl
 8004b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	018a      	lsls	r2, r1, #6
 8004ba2:	4651      	mov	r1, sl
 8004ba4:	1a54      	subs	r4, r2, r1
 8004ba6:	4659      	mov	r1, fp
 8004ba8:	eb63 0501 	sbc.w	r5, r3, r1
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	00eb      	lsls	r3, r5, #3
 8004bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bba:	00e2      	lsls	r2, r4, #3
 8004bbc:	4614      	mov	r4, r2
 8004bbe:	461d      	mov	r5, r3
 8004bc0:	4643      	mov	r3, r8
 8004bc2:	18e3      	adds	r3, r4, r3
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	eb45 0303 	adc.w	r3, r5, r3
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bda:	4629      	mov	r1, r5
 8004bdc:	028b      	lsls	r3, r1, #10
 8004bde:	4621      	mov	r1, r4
 8004be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be4:	4621      	mov	r1, r4
 8004be6:	028a      	lsls	r2, r1, #10
 8004be8:	4610      	mov	r0, r2
 8004bea:	4619      	mov	r1, r3
 8004bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bf4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004bf6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bfa:	f7fc f875 	bl	8000ce8 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4613      	mov	r3, r2
 8004c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c08:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	0f1b      	lsrs	r3, r3, #28
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c26:	e003      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	37b8      	adds	r7, #184	@ 0xb8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	00f42400 	.word	0x00f42400

08004c48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e28d      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8083 	beq.w	8004d6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c68:	4b94      	ldr	r3, [pc, #592]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 030c 	and.w	r3, r3, #12
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d019      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c74:	4b91      	ldr	r3, [pc, #580]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d106      	bne.n	8004c8e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c80:	4b8e      	ldr	r3, [pc, #568]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d112      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c9a:	4b88      	ldr	r3, [pc, #544]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	4b84      	ldr	r3, [pc, #528]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05b      	beq.n	8004d6c <HAL_RCC_OscConfig+0x124>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d157      	bne.n	8004d6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e25a      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x90>
 8004cca:	4b7c      	ldr	r3, [pc, #496]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a7b      	ldr	r2, [pc, #492]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e01d      	b.n	8004d14 <HAL_RCC_OscConfig+0xcc>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0xb4>
 8004ce2:	4b76      	ldr	r3, [pc, #472]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a75      	ldr	r2, [pc, #468]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b73      	ldr	r3, [pc, #460]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a72      	ldr	r2, [pc, #456]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCC_OscConfig+0xcc>
 8004cfc:	4b6f      	ldr	r3, [pc, #444]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a6e      	ldr	r2, [pc, #440]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b6c      	ldr	r3, [pc, #432]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fd ff36 	bl	8002b8c <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fd ff32 	bl	8002b8c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e21f      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b61      	ldr	r3, [pc, #388]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0xdc>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fd ff22 	bl	8002b8c <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fd ff1e 	bl	8002b8c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e20b      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5e:	4b57      	ldr	r3, [pc, #348]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x104>
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d06f      	beq.n	8004e5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d7a:	4b50      	ldr	r3, [pc, #320]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d017      	beq.n	8004db6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d86:	4b4d      	ldr	r3, [pc, #308]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d105      	bne.n	8004d9e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004d92:	4b4a      	ldr	r3, [pc, #296]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9e:	4b47      	ldr	r3, [pc, #284]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	d11c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b44      	ldr	r3, [pc, #272]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d116      	bne.n	8004de4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db6:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_RCC_OscConfig+0x186>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d001      	beq.n	8004dce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e1d3      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4937      	ldr	r1, [pc, #220]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	e03a      	b.n	8004e5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dec:	4b34      	ldr	r3, [pc, #208]	@ (8004ec0 <HAL_RCC_OscConfig+0x278>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df2:	f7fd fecb 	bl	8002b8c <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fd fec7 	bl	8002b8c <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e1b4      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e18:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4925      	ldr	r1, [pc, #148]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]
 8004e2c:	e015      	b.n	8004e5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <HAL_RCC_OscConfig+0x278>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fd feaa 	bl	8002b8c <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3c:	f7fd fea6 	bl	8002b8c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e193      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d036      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <HAL_RCC_OscConfig+0x27c>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7fd fe8a 	bl	8002b8c <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7c:	f7fd fe86 	bl	8002b8c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e173      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x234>
 8004e9a:	e01b      	b.n	8004ed4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <HAL_RCC_OscConfig+0x27c>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea2:	f7fd fe73 	bl	8002b8c <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	e00e      	b.n	8004ec8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eaa:	f7fd fe6f 	bl	8002b8c <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d907      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e15c      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	42470000 	.word	0x42470000
 8004ec4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec8:	4b8a      	ldr	r3, [pc, #552]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ea      	bne.n	8004eaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8097 	beq.w	8005010 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee6:	4b83      	ldr	r3, [pc, #524]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	4a7e      	ldr	r2, [pc, #504]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f02:	4b7c      	ldr	r3, [pc, #496]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f12:	4b79      	ldr	r3, [pc, #484]	@ (80050f8 <HAL_RCC_OscConfig+0x4b0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d118      	bne.n	8004f50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1e:	4b76      	ldr	r3, [pc, #472]	@ (80050f8 <HAL_RCC_OscConfig+0x4b0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a75      	ldr	r2, [pc, #468]	@ (80050f8 <HAL_RCC_OscConfig+0x4b0>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2a:	f7fd fe2f 	bl	8002b8c <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f32:	f7fd fe2b 	bl	8002b8c <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e118      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f44:	4b6c      	ldr	r3, [pc, #432]	@ (80050f8 <HAL_RCC_OscConfig+0x4b0>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x31e>
 8004f58:	4b66      	ldr	r3, [pc, #408]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5c:	4a65      	ldr	r2, [pc, #404]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f64:	e01c      	b.n	8004fa0 <HAL_RCC_OscConfig+0x358>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x340>
 8004f6e:	4b61      	ldr	r3, [pc, #388]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f72:	4a60      	ldr	r2, [pc, #384]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	4a5d      	ldr	r2, [pc, #372]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCC_OscConfig+0x358>
 8004f88:	4b5a      	ldr	r3, [pc, #360]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	4a59      	ldr	r2, [pc, #356]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f94:	4b57      	ldr	r3, [pc, #348]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	4a56      	ldr	r2, [pc, #344]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004f9a:	f023 0304 	bic.w	r3, r3, #4
 8004f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d015      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa8:	f7fd fdf0 	bl	8002b8c <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7fd fdec 	bl	8002b8c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0d7      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ee      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x368>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fd fdda 	bl	8002b8c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fdc:	f7fd fdd6 	bl	8002b8c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e0c1      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff2:	4b40      	ldr	r3, [pc, #256]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1ee      	bne.n	8004fdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d105      	bne.n	8005010 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005004:	4b3b      	ldr	r3, [pc, #236]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	4a3a      	ldr	r2, [pc, #232]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 800500a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800500e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80ad 	beq.w	8005174 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800501a:	4b36      	ldr	r3, [pc, #216]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b08      	cmp	r3, #8
 8005024:	d060      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d145      	bne.n	80050ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b33      	ldr	r3, [pc, #204]	@ (80050fc <HAL_RCC_OscConfig+0x4b4>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fd fdaa 	bl	8002b8c <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503c:	f7fd fda6 	bl	8002b8c <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e093      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	019b      	lsls	r3, r3, #6
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	3b01      	subs	r3, #1
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	061b      	lsls	r3, r3, #24
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005084:	071b      	lsls	r3, r3, #28
 8005086:	491b      	ldr	r1, [pc, #108]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800508c:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x4b4>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005092:	f7fd fd7b 	bl	8002b8c <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509a:	f7fd fd77 	bl	8002b8c <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e064      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ac:	4b11      	ldr	r3, [pc, #68]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x452>
 80050b8:	e05c      	b.n	8005174 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ba:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <HAL_RCC_OscConfig+0x4b4>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fd fd64 	bl	8002b8c <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fd fd60 	bl	8002b8c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e04d      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <HAL_RCC_OscConfig+0x4ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x480>
 80050e6:	e045      	b.n	8005174 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e040      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40007000 	.word	0x40007000
 80050fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005100:	4b1f      	ldr	r3, [pc, #124]	@ (8005180 <HAL_RCC_OscConfig+0x538>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d030      	beq.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d129      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d122      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005130:	4013      	ands	r3, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005138:	4293      	cmp	r3, r2
 800513a:	d119      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	3b01      	subs	r3, #1
 800514a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d10f      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d107      	bne.n	8005170 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800

08005184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e07b      	b.n	800528e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d108      	bne.n	80051b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051a6:	d009      	beq.n	80051bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	61da      	str	r2, [r3, #28]
 80051ae:	e005      	b.n	80051bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fd fa6c 	bl	80026b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005240:	ea42 0103 	orr.w	r1, r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005248:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	0c1b      	lsrs	r3, r3, #16
 800525a:	f003 0104 	and.w	r1, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	f003 0210 	and.w	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800527c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b088      	sub	sp, #32
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052a6:	f7fd fc71 	bl	8002b8c <HAL_GetTick>
 80052aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d001      	beq.n	80052c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	e12a      	b.n	8005516 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Transmit+0x36>
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e122      	b.n	8005516 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_SPI_Transmit+0x48>
 80052da:	2302      	movs	r3, #2
 80052dc:	e11b      	b.n	8005516 <HAL_SPI_Transmit+0x280>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2203      	movs	r2, #3
 80052ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	88fa      	ldrh	r2, [r7, #6]
 80052fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800532c:	d10f      	bne.n	800534e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800533c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800534c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005358:	2b40      	cmp	r3, #64	@ 0x40
 800535a:	d007      	beq.n	800536c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800536a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005374:	d152      	bne.n	800541c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_SPI_Transmit+0xee>
 800537e:	8b7b      	ldrh	r3, [r7, #26]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d145      	bne.n	8005410 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	881a      	ldrh	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005394:	1c9a      	adds	r2, r3, #2
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053a8:	e032      	b.n	8005410 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d112      	bne.n	80053de <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	881a      	ldrh	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c8:	1c9a      	adds	r2, r3, #2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053dc:	e018      	b.n	8005410 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053de:	f7fd fbd5 	bl	8002b8c <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d803      	bhi.n	80053f6 <HAL_SPI_Transmit+0x160>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d102      	bne.n	80053fc <HAL_SPI_Transmit+0x166>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e082      	b.n	8005516 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1c7      	bne.n	80053aa <HAL_SPI_Transmit+0x114>
 800541a:	e053      	b.n	80054c4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_SPI_Transmit+0x194>
 8005424:	8b7b      	ldrh	r3, [r7, #26]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d147      	bne.n	80054ba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005450:	e033      	b.n	80054ba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b02      	cmp	r3, #2
 800545e:	d113      	bne.n	8005488 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	7812      	ldrb	r2, [r2, #0]
 800546c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005486:	e018      	b.n	80054ba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005488:	f7fd fb80 	bl	8002b8c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d803      	bhi.n	80054a0 <HAL_SPI_Transmit+0x20a>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d102      	bne.n	80054a6 <HAL_SPI_Transmit+0x210>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e02d      	b.n	8005516 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1c6      	bne.n	8005452 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fbd9 	bl	8005c80 <SPI_EndRxTxTransaction>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005514:	2300      	movs	r3, #0
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	3720      	adds	r7, #32
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b088      	sub	sp, #32
 8005522:	af02      	add	r7, sp, #8
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	4613      	mov	r3, r2
 800552c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d001      	beq.n	800553e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	e104      	b.n	8005748 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005546:	d112      	bne.n	800556e <HAL_SPI_Receive+0x50>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10e      	bne.n	800556e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2204      	movs	r2, #4
 8005554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	4613      	mov	r3, r2
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f8f3 	bl	8005750 <HAL_SPI_TransmitReceive>
 800556a:	4603      	mov	r3, r0
 800556c:	e0ec      	b.n	8005748 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800556e:	f7fd fb0d 	bl	8002b8c <HAL_GetTick>
 8005572:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Receive+0x62>
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0e1      	b.n	8005748 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_SPI_Receive+0x74>
 800558e:	2302      	movs	r3, #2
 8005590:	e0da      	b.n	8005748 <HAL_SPI_Receive+0x22a>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2204      	movs	r2, #4
 800559e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e0:	d10f      	bne.n	8005602 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005600:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d007      	beq.n	8005620 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800561e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d170      	bne.n	800570a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005628:	e035      	b.n	8005696 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d115      	bne.n	8005664 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f103 020c 	add.w	r2, r3, #12
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005644:	7812      	ldrb	r2, [r2, #0]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005662:	e018      	b.n	8005696 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005664:	f7fd fa92 	bl	8002b8c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d803      	bhi.n	800567c <HAL_SPI_Receive+0x15e>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d102      	bne.n	8005682 <HAL_SPI_Receive+0x164>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e058      	b.n	8005748 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1c4      	bne.n	800562a <HAL_SPI_Receive+0x10c>
 80056a0:	e038      	b.n	8005714 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d113      	bne.n	80056d8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	b292      	uxth	r2, r2
 80056bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	1c9a      	adds	r2, r3, #2
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056d6:	e018      	b.n	800570a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d8:	f7fd fa58 	bl	8002b8c <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d803      	bhi.n	80056f0 <HAL_SPI_Receive+0x1d2>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d102      	bne.n	80056f6 <HAL_SPI_Receive+0x1d8>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e01e      	b.n	8005748 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1c6      	bne.n	80056a2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa4b 	bl	8005bb4 <SPI_EndRxTransaction>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005746:	2300      	movs	r3, #0
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	@ 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800575e:	2301      	movs	r3, #1
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005762:	f7fd fa13 	bl	8002b8c <HAL_GetTick>
 8005766:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800576e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005776:	887b      	ldrh	r3, [r7, #2]
 8005778:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800577a:	7ffb      	ldrb	r3, [r7, #31]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d00c      	beq.n	800579a <HAL_SPI_TransmitReceive+0x4a>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005786:	d106      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x46>
 8005790:	7ffb      	ldrb	r3, [r7, #31]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d001      	beq.n	800579a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	e17f      	b.n	8005a9a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_SPI_TransmitReceive+0x5c>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_SPI_TransmitReceive+0x5c>
 80057a6:	887b      	ldrh	r3, [r7, #2]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e174      	b.n	8005a9a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_SPI_TransmitReceive+0x6e>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e16d      	b.n	8005a9a <HAL_SPI_TransmitReceive+0x34a>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d003      	beq.n	80057da <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2205      	movs	r2, #5
 80057d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	887a      	ldrh	r2, [r7, #2]
 80057ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	887a      	ldrh	r2, [r7, #2]
 8005802:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581a:	2b40      	cmp	r3, #64	@ 0x40
 800581c:	d007      	beq.n	800582e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800582c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005836:	d17e      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_SPI_TransmitReceive+0xf6>
 8005840:	8afb      	ldrh	r3, [r7, #22]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d16c      	bne.n	8005920 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	1c9a      	adds	r2, r3, #2
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586a:	e059      	b.n	8005920 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b02      	cmp	r3, #2
 8005878:	d11b      	bne.n	80058b2 <HAL_SPI_TransmitReceive+0x162>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d016      	beq.n	80058b2 <HAL_SPI_TransmitReceive+0x162>
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	2b01      	cmp	r3, #1
 8005888:	d113      	bne.n	80058b2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	881a      	ldrh	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d119      	bne.n	80058f4 <HAL_SPI_TransmitReceive+0x1a4>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d014      	beq.n	80058f4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d4:	b292      	uxth	r2, r2
 80058d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	1c9a      	adds	r2, r3, #2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058f0:	2301      	movs	r3, #1
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058f4:	f7fd f94a 	bl	8002b8c <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005900:	429a      	cmp	r2, r3
 8005902:	d80d      	bhi.n	8005920 <HAL_SPI_TransmitReceive+0x1d0>
 8005904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d009      	beq.n	8005920 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e0bc      	b.n	8005a9a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1a0      	bne.n	800586c <HAL_SPI_TransmitReceive+0x11c>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d19b      	bne.n	800586c <HAL_SPI_TransmitReceive+0x11c>
 8005934:	e082      	b.n	8005a3c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_SPI_TransmitReceive+0x1f4>
 800593e:	8afb      	ldrh	r3, [r7, #22]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d171      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	7812      	ldrb	r2, [r2, #0]
 8005950:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800596a:	e05d      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d11c      	bne.n	80059b4 <HAL_SPI_TransmitReceive+0x264>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d017      	beq.n	80059b4 <HAL_SPI_TransmitReceive+0x264>
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	2b01      	cmp	r3, #1
 8005988:	d114      	bne.n	80059b4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330c      	adds	r3, #12
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d119      	bne.n	80059f6 <HAL_SPI_TransmitReceive+0x2a6>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d014      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059f2:	2301      	movs	r3, #1
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059f6:	f7fd f8c9 	bl	8002b8c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d803      	bhi.n	8005a0e <HAL_SPI_TransmitReceive+0x2be>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d102      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x2c4>
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e038      	b.n	8005a9a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d19c      	bne.n	800596c <HAL_SPI_TransmitReceive+0x21c>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d197      	bne.n	800596c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a3c:	6a3a      	ldr	r2, [r7, #32]
 8005a3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f91d 	bl	8005c80 <SPI_EndRxTxTransaction>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e01d      	b.n	8005a9a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a98:	2300      	movs	r3, #0
  }
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3728      	adds	r7, #40	@ 0x28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ab4:	f7fd f86a 	bl	8002b8c <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ac4:	f7fd f862 	bl	8002b8c <HAL_GetTick>
 8005ac8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aca:	4b39      	ldr	r3, [pc, #228]	@ (8005bb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	015b      	lsls	r3, r3, #5
 8005ad0:	0d1b      	lsrs	r3, r3, #20
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ada:	e054      	b.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d050      	beq.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ae4:	f7fd f852 	bl	8002b8c <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d902      	bls.n	8005afa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d13d      	bne.n	8005b76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b12:	d111      	bne.n	8005b38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b1c:	d004      	beq.n	8005b28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b26:	d107      	bne.n	8005b38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b40:	d10f      	bne.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e017      	b.n	8005ba6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	bf0c      	ite	eq
 8005b96:	2301      	moveq	r3, #1
 8005b98:	2300      	movne	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d19b      	bne.n	8005adc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000038 	.word	0x20000038

08005bb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bc8:	d111      	bne.n	8005bee <SPI_EndRxTransaction+0x3a>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bd2:	d004      	beq.n	8005bde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bdc:	d107      	bne.n	8005bee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bf6:	d12a      	bne.n	8005c4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c00:	d012      	beq.n	8005c28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2180      	movs	r1, #128	@ 0x80
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff ff49 	bl	8005aa4 <SPI_WaitFlagStateUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d02d      	beq.n	8005c74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e026      	b.n	8005c76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2101      	movs	r1, #1
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff ff36 	bl	8005aa4 <SPI_WaitFlagStateUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01a      	beq.n	8005c74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e013      	b.n	8005c76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2200      	movs	r2, #0
 8005c56:	2101      	movs	r1, #1
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff ff23 	bl	8005aa4 <SPI_WaitFlagStateUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c68:	f043 0220 	orr.w	r2, r3, #32
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e000      	b.n	8005c76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2201      	movs	r2, #1
 8005c94:	2102      	movs	r1, #2
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff ff04 	bl	8005aa4 <SPI_WaitFlagStateUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca6:	f043 0220 	orr.w	r2, r3, #32
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e032      	b.n	8005d18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d20 <SPI_EndRxTxTransaction+0xa0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d24 <SPI_EndRxTxTransaction+0xa4>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	0d5b      	lsrs	r3, r3, #21
 8005cbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cd0:	d112      	bne.n	8005cf8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2180      	movs	r1, #128	@ 0x80
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff fee1 	bl	8005aa4 <SPI_WaitFlagStateUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d016      	beq.n	8005d16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cec:	f043 0220 	orr.w	r2, r3, #32
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e00f      	b.n	8005d18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0e:	2b80      	cmp	r3, #128	@ 0x80
 8005d10:	d0f2      	beq.n	8005cf8 <SPI_EndRxTxTransaction+0x78>
 8005d12:	e000      	b.n	8005d16 <SPI_EndRxTxTransaction+0x96>
        break;
 8005d14:	bf00      	nop
  }

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000038 	.word	0x20000038
 8005d24:	165e9f81 	.word	0x165e9f81

08005d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e041      	b.n	8005dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fc fcf8 	bl	8002744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f000 fa7e 	bl	8006268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d001      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e04e      	b.n	8005e7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a23      	ldr	r2, [pc, #140]	@ (8005e8c <HAL_TIM_Base_Start_IT+0xc4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d022      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x80>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0a:	d01d      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x80>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d018      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x80>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005e94 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d013      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x80>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1c      	ldr	r2, [pc, #112]	@ (8005e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00e      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x80>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d009      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x80>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a19      	ldr	r2, [pc, #100]	@ (8005ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x80>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a18      	ldr	r2, [pc, #96]	@ (8005ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d111      	bne.n	8005e6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d010      	beq.n	8005e7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6a:	e007      	b.n	8005e7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40010400 	.word	0x40010400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40001800 	.word	0x40001800

08005ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0202 	mvn.w	r2, #2
 8005edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f999 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f98b 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f99c 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0204 	mvn.w	r2, #4
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f973 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f965 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f976 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d020      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0208 	mvn.w	r2, #8
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f94d 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f93f 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f950 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0310 	and.w	r3, r3, #16
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d020      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01b      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0210 	mvn.w	r2, #16
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f927 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f919 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f92a 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0201 	mvn.w	r2, #1
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fc fa58 	bl	80024c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fae4 	bl	8006600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00c      	beq.n	800605c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8fb 	bl	8006252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0220 	mvn.w	r2, #32
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fab6 	bl	80065ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0b4      	b.n	800620e <HAL_TIM_ConfigClockSource+0x186>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060dc:	d03e      	beq.n	800615c <HAL_TIM_ConfigClockSource+0xd4>
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e2:	f200 8087 	bhi.w	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ea:	f000 8086 	beq.w	80061fa <HAL_TIM_ConfigClockSource+0x172>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f2:	d87f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060f4:	2b70      	cmp	r3, #112	@ 0x70
 80060f6:	d01a      	beq.n	800612e <HAL_TIM_ConfigClockSource+0xa6>
 80060f8:	2b70      	cmp	r3, #112	@ 0x70
 80060fa:	d87b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b60      	cmp	r3, #96	@ 0x60
 80060fe:	d050      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x11a>
 8006100:	2b60      	cmp	r3, #96	@ 0x60
 8006102:	d877      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b50      	cmp	r3, #80	@ 0x50
 8006106:	d03c      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0xfa>
 8006108:	2b50      	cmp	r3, #80	@ 0x50
 800610a:	d873      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b40      	cmp	r3, #64	@ 0x40
 800610e:	d058      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x13a>
 8006110:	2b40      	cmp	r3, #64	@ 0x40
 8006112:	d86f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b30      	cmp	r3, #48	@ 0x30
 8006116:	d064      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006118:	2b30      	cmp	r3, #48	@ 0x30
 800611a:	d86b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b20      	cmp	r3, #32
 800611e:	d060      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d867      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05c      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006128:	2b10      	cmp	r3, #16
 800612a:	d05a      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 800612c:	e062      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800613e:	f000 f9b9 	bl	80064b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	609a      	str	r2, [r3, #8]
      break;
 800615a:	e04f      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800616c:	f000 f9a2 	bl	80064b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800617e:	609a      	str	r2, [r3, #8]
      break;
 8006180:	e03c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	461a      	mov	r2, r3
 8006190:	f000 f916 	bl	80063c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2150      	movs	r1, #80	@ 0x50
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f96f 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 80061a0:	e02c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ae:	461a      	mov	r2, r3
 80061b0:	f000 f935 	bl	800641e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2160      	movs	r1, #96	@ 0x60
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f95f 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 80061c0:	e01c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ce:	461a      	mov	r2, r3
 80061d0:	f000 f8f6 	bl	80063c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2140      	movs	r1, #64	@ 0x40
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 f94f 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 80061e0:	e00c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f000 f946 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 80061f2:	e003      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
      break;
 80061f8:	e000      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a46      	ldr	r2, [pc, #280]	@ (8006394 <TIM_Base_SetConfig+0x12c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006286:	d00f      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a43      	ldr	r2, [pc, #268]	@ (8006398 <TIM_Base_SetConfig+0x130>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00b      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a42      	ldr	r2, [pc, #264]	@ (800639c <TIM_Base_SetConfig+0x134>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d007      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a41      	ldr	r2, [pc, #260]	@ (80063a0 <TIM_Base_SetConfig+0x138>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a40      	ldr	r2, [pc, #256]	@ (80063a4 <TIM_Base_SetConfig+0x13c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d108      	bne.n	80062ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a35      	ldr	r2, [pc, #212]	@ (8006394 <TIM_Base_SetConfig+0x12c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d02b      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c8:	d027      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a32      	ldr	r2, [pc, #200]	@ (8006398 <TIM_Base_SetConfig+0x130>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d023      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a31      	ldr	r2, [pc, #196]	@ (800639c <TIM_Base_SetConfig+0x134>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d01f      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a30      	ldr	r2, [pc, #192]	@ (80063a0 <TIM_Base_SetConfig+0x138>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d01b      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2f      	ldr	r2, [pc, #188]	@ (80063a4 <TIM_Base_SetConfig+0x13c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d017      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2e      	ldr	r2, [pc, #184]	@ (80063a8 <TIM_Base_SetConfig+0x140>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2d      	ldr	r2, [pc, #180]	@ (80063ac <TIM_Base_SetConfig+0x144>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00f      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a2c      	ldr	r2, [pc, #176]	@ (80063b0 <TIM_Base_SetConfig+0x148>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00b      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2b      	ldr	r2, [pc, #172]	@ (80063b4 <TIM_Base_SetConfig+0x14c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d007      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a2a      	ldr	r2, [pc, #168]	@ (80063b8 <TIM_Base_SetConfig+0x150>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a29      	ldr	r2, [pc, #164]	@ (80063bc <TIM_Base_SetConfig+0x154>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d108      	bne.n	800632c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a10      	ldr	r2, [pc, #64]	@ (8006394 <TIM_Base_SetConfig+0x12c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_Base_SetConfig+0xf8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a12      	ldr	r2, [pc, #72]	@ (80063a4 <TIM_Base_SetConfig+0x13c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d103      	bne.n	8006368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b01      	cmp	r3, #1
 8006378:	d105      	bne.n	8006386 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f023 0201 	bic.w	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	611a      	str	r2, [r3, #16]
  }
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40010000 	.word	0x40010000
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	40000c00 	.word	0x40000c00
 80063a4:	40010400 	.word	0x40010400
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40014400 	.word	0x40014400
 80063b0:	40014800 	.word	0x40014800
 80063b4:	40001800 	.word	0x40001800
 80063b8:	40001c00 	.word	0x40001c00
 80063bc:	40002000 	.word	0x40002000

080063c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f023 0201 	bic.w	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 030a 	bic.w	r3, r3, #10
 80063fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f023 0210 	bic.w	r2, r3, #16
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	031b      	lsls	r3, r3, #12
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800645a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	f043 0307 	orr.w	r3, r3, #7
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	609a      	str	r2, [r3, #8]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	021a      	lsls	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	bf00      	nop
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006508:	2302      	movs	r3, #2
 800650a:	e05a      	b.n	80065c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a21      	ldr	r2, [pc, #132]	@ (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d022      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006558:	d01d      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1d      	ldr	r2, [pc, #116]	@ (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d018      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1a      	ldr	r2, [pc, #104]	@ (80065dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a18      	ldr	r2, [pc, #96]	@ (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a17      	ldr	r2, [pc, #92]	@ (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a15      	ldr	r2, [pc, #84]	@ (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10c      	bne.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800659c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40010400 	.word	0x40010400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40001800 	.word	0x40001800

080065ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e042      	b.n	80066ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fc f8aa 	bl	8002794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2224      	movs	r2, #36	@ 0x24
 8006644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fdb3 	bl	80071c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800666c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695a      	ldr	r2, [r3, #20]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800667c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800668c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08a      	sub	sp, #40	@ 0x28
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d175      	bne.n	80067c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_UART_Transmit+0x2c>
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e06e      	b.n	80067c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2221      	movs	r2, #33	@ 0x21
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066f2:	f7fc fa4b 	bl	8002b8c <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800670c:	d108      	bne.n	8006720 <HAL_UART_Transmit+0x6c>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	e003      	b.n	8006728 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006724:	2300      	movs	r3, #0
 8006726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006728:	e02e      	b.n	8006788 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2200      	movs	r2, #0
 8006732:	2180      	movs	r1, #128	@ 0x80
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fb15 	bl	8006d64 <UART_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e03a      	b.n	80067c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	3302      	adds	r3, #2
 8006766:	61bb      	str	r3, [r7, #24]
 8006768:	e007      	b.n	800677a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	781a      	ldrb	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	3301      	adds	r3, #1
 8006778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1cb      	bne.n	800672a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2200      	movs	r2, #0
 800679a:	2140      	movs	r1, #64	@ 0x40
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fae1 	bl	8006d64 <UART_WaitOnFlagUntilTimeout>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e006      	b.n	80067c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	4613      	mov	r3, r2
 80067d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d112      	bne.n	800680a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_UART_Receive_IT+0x26>
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e00b      	b.n	800680c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	461a      	mov	r2, r3
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 fb08 	bl	8006e16 <UART_Start_Receive_IT>
 8006806:	4603      	mov	r3, r0
 8006808:	e000      	b.n	800680c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800680a:	2302      	movs	r3, #2
  }
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b0ba      	sub	sp, #232	@ 0xe8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800683a:	2300      	movs	r3, #0
 800683c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10f      	bne.n	800687a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800685a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <HAL_UART_IRQHandler+0x66>
 8006866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fbe8 	bl	8007048 <UART_Receive_IT>
      return;
 8006878:	e25b      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800687a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80de 	beq.w	8006a40 <HAL_UART_IRQHandler+0x22c>
 8006884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d106      	bne.n	800689e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006894:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80d1 	beq.w	8006a40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00b      	beq.n	80068c2 <HAL_UART_IRQHandler+0xae>
 80068aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ba:	f043 0201 	orr.w	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <HAL_UART_IRQHandler+0xd2>
 80068ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068de:	f043 0202 	orr.w	r2, r3, #2
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <HAL_UART_IRQHandler+0xf6>
 80068f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006902:	f043 0204 	orr.w	r2, r3, #4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d011      	beq.n	800693a <HAL_UART_IRQHandler+0x126>
 8006916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	f043 0208 	orr.w	r2, r3, #8
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 81f2 	beq.w	8006d28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_UART_IRQHandler+0x14e>
 8006950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fb73 	bl	8007048 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696c:	2b40      	cmp	r3, #64	@ 0x40
 800696e:	bf0c      	ite	eq
 8006970:	2301      	moveq	r3, #1
 8006972:	2300      	movne	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d103      	bne.n	800698e <HAL_UART_IRQHandler+0x17a>
 8006986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d04f      	beq.n	8006a2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa7b 	bl	8006e8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699e:	2b40      	cmp	r3, #64	@ 0x40
 80069a0:	d141      	bne.n	8006a26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3314      	adds	r3, #20
 80069a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3314      	adds	r3, #20
 80069ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1d9      	bne.n	80069a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d013      	beq.n	8006a1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fa:	4a7e      	ldr	r2, [pc, #504]	@ (8006bf4 <HAL_UART_IRQHandler+0x3e0>)
 80069fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fc fa93 	bl	8002f2e <HAL_DMA_Abort_IT>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d016      	beq.n	8006a3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1c:	e00e      	b.n	8006a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f98a 	bl	8006d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a24:	e00a      	b.n	8006a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f986 	bl	8006d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2c:	e006      	b.n	8006a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f982 	bl	8006d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a3a:	e175      	b.n	8006d28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	bf00      	nop
    return;
 8006a3e:	e173      	b.n	8006d28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	f040 814f 	bne.w	8006ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8148 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8141 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a66:	2300      	movs	r3, #0
 8006a68:	60bb      	str	r3, [r7, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a86:	2b40      	cmp	r3, #64	@ 0x40
 8006a88:	f040 80b6 	bne.w	8006bf8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8145 	beq.w	8006d2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	f080 813e 	bcs.w	8006d2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ab6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac2:	f000 8088 	beq.w	8006bd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	330c      	adds	r3, #12
 8006aee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1d9      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3314      	adds	r3, #20
 8006b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e1      	bne.n	8006b12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3314      	adds	r3, #20
 8006b54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e3      	bne.n	8006b4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba6:	f023 0310 	bic.w	r3, r3, #16
 8006baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e3      	bne.n	8006b94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fc f93c 	bl	8002e4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f8ad 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bf2:	e09b      	b.n	8006d2c <HAL_UART_IRQHandler+0x518>
 8006bf4:	08006f51 	.word	0x08006f51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 808e 	beq.w	8006d30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8089 	beq.w	8006d30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c42:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e3      	bne.n	8006c1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3314      	adds	r3, #20
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	623b      	str	r3, [r7, #32]
   return(result);
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f023 0301 	bic.w	r3, r3, #1
 8006c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3314      	adds	r3, #20
 8006c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e3      	bne.n	8006c56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0310 	bic.w	r3, r3, #16
 8006cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	330c      	adds	r3, #12
 8006cbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006cc0:	61fa      	str	r2, [r7, #28]
 8006cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	69b9      	ldr	r1, [r7, #24]
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e3      	bne.n	8006c9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f833 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ce6:	e023      	b.n	8006d30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d009      	beq.n	8006d08 <HAL_UART_IRQHandler+0x4f4>
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f939 	bl	8006f78 <UART_Transmit_IT>
    return;
 8006d06:	e014      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00e      	beq.n	8006d32 <HAL_UART_IRQHandler+0x51e>
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f979 	bl	8007018 <UART_EndTransmit_IT>
    return;
 8006d26:	e004      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d28:	bf00      	nop
 8006d2a:	e002      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d2c:	bf00      	nop
 8006d2e:	e000      	b.n	8006d32 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d30:	bf00      	nop
  }
}
 8006d32:	37e8      	adds	r7, #232	@ 0xe8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	4613      	mov	r3, r2
 8006d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d74:	e03b      	b.n	8006dee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d037      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d7e:	f7fb ff05 	bl	8002b8c <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	6a3a      	ldr	r2, [r7, #32]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d302      	bcc.n	8006d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e03a      	b.n	8006e0e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d023      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0x8a>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b80      	cmp	r3, #128	@ 0x80
 8006daa:	d020      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0x8a>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b40      	cmp	r3, #64	@ 0x40
 8006db0:	d01d      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d116      	bne.n	8006dee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f857 	bl	8006e8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2208      	movs	r2, #8
 8006de0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e00f      	b.n	8006e0e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4013      	ands	r3, r2
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	bf0c      	ite	eq
 8006dfe:	2301      	moveq	r3, #1
 8006e00:	2300      	movne	r3, #0
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d0b4      	beq.n	8006d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	4613      	mov	r3, r2
 8006e22:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	88fa      	ldrh	r2, [r7, #6]
 8006e2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2222      	movs	r2, #34	@ 0x22
 8006e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d007      	beq.n	8006e5c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e5a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695a      	ldr	r2, [r3, #20]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0220 	orr.w	r2, r2, #32
 8006e7a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b095      	sub	sp, #84	@ 0x54
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	330c      	adds	r3, #12
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	330c      	adds	r3, #12
 8006eb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006eb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e5      	bne.n	8006e92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3314      	adds	r3, #20
 8006ee4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ee6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e5      	bne.n	8006ec6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d119      	bne.n	8006f36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	330c      	adds	r3, #12
 8006f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f023 0310 	bic.w	r3, r3, #16
 8006f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	330c      	adds	r3, #12
 8006f20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f22:	61ba      	str	r2, [r7, #24]
 8006f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	6979      	ldr	r1, [r7, #20]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e5      	bne.n	8006f02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f44:	bf00      	nop
 8006f46:	3754      	adds	r7, #84	@ 0x54
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fee4 	bl	8006d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b21      	cmp	r3, #33	@ 0x21
 8006f8a:	d13e      	bne.n	800700a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f94:	d114      	bne.n	8006fc0 <UART_Transmit_IT+0x48>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d110      	bne.n	8006fc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]
 8006fbe:	e008      	b.n	8006fd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	1c59      	adds	r1, r3, #1
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6211      	str	r1, [r2, #32]
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10f      	bne.n	8007006 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ff4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007004:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	e000      	b.n	800700c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800700a:	2302      	movs	r3, #2
  }
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800702e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fa feb7 	bl	8001dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08c      	sub	sp, #48	@ 0x30
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b22      	cmp	r3, #34	@ 0x22
 800705a:	f040 80ae 	bne.w	80071ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007066:	d117      	bne.n	8007098 <UART_Receive_IT+0x50>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d113      	bne.n	8007098 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007078:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007086:	b29a      	uxth	r2, r3
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007090:	1c9a      	adds	r2, r3, #2
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	629a      	str	r2, [r3, #40]	@ 0x28
 8007096:	e026      	b.n	80070e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070aa:	d007      	beq.n	80070bc <UART_Receive_IT+0x74>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <UART_Receive_IT+0x82>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e008      	b.n	80070dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	4619      	mov	r1, r3
 80070f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d15d      	bne.n	80071b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0220 	bic.w	r2, r2, #32
 8007108:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007118:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695a      	ldr	r2, [r3, #20]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713c:	2b01      	cmp	r3, #1
 800713e:	d135      	bne.n	80071ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	613b      	str	r3, [r7, #16]
   return(result);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f023 0310 	bic.w	r3, r3, #16
 800715c:	627b      	str	r3, [r7, #36]	@ 0x24
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	330c      	adds	r3, #12
 8007164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007166:	623a      	str	r2, [r7, #32]
 8007168:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	69f9      	ldr	r1, [r7, #28]
 800716c:	6a3a      	ldr	r2, [r7, #32]
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	61bb      	str	r3, [r7, #24]
   return(result);
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e5      	bne.n	8007146 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b10      	cmp	r3, #16
 8007186:	d10a      	bne.n	800719e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fdd1 	bl	8006d4c <HAL_UARTEx_RxEventCallback>
 80071aa:	e002      	b.n	80071b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fa fe0d 	bl	8001dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e002      	b.n	80071bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e000      	b.n	80071bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071ba:	2302      	movs	r3, #2
  }
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3730      	adds	r7, #48	@ 0x30
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071c8:	b0c0      	sub	sp, #256	@ 0x100
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e0:	68d9      	ldr	r1, [r3, #12]
 80071e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	ea40 0301 	orr.w	r3, r0, r1
 80071ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	431a      	orrs	r2, r3
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	431a      	orrs	r2, r3
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	4313      	orrs	r3, r2
 800720c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800721c:	f021 010c 	bic.w	r1, r1, #12
 8007220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800722a:	430b      	orrs	r3, r1
 800722c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800722e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800723a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723e:	6999      	ldr	r1, [r3, #24]
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	ea40 0301 	orr.w	r3, r0, r1
 800724a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800724c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	4b8f      	ldr	r3, [pc, #572]	@ (8007490 <UART_SetConfig+0x2cc>)
 8007254:	429a      	cmp	r2, r3
 8007256:	d005      	beq.n	8007264 <UART_SetConfig+0xa0>
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	4b8d      	ldr	r3, [pc, #564]	@ (8007494 <UART_SetConfig+0x2d0>)
 8007260:	429a      	cmp	r2, r3
 8007262:	d104      	bne.n	800726e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007264:	f7fd faac 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8007268:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800726c:	e003      	b.n	8007276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800726e:	f7fd fa93 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8007272:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007280:	f040 810c 	bne.w	800749c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007288:	2200      	movs	r2, #0
 800728a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800728e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007296:	4622      	mov	r2, r4
 8007298:	462b      	mov	r3, r5
 800729a:	1891      	adds	r1, r2, r2
 800729c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800729e:	415b      	adcs	r3, r3
 80072a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072a6:	4621      	mov	r1, r4
 80072a8:	eb12 0801 	adds.w	r8, r2, r1
 80072ac:	4629      	mov	r1, r5
 80072ae:	eb43 0901 	adc.w	r9, r3, r1
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072c6:	4690      	mov	r8, r2
 80072c8:	4699      	mov	r9, r3
 80072ca:	4623      	mov	r3, r4
 80072cc:	eb18 0303 	adds.w	r3, r8, r3
 80072d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072d4:	462b      	mov	r3, r5
 80072d6:	eb49 0303 	adc.w	r3, r9, r3
 80072da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072f2:	460b      	mov	r3, r1
 80072f4:	18db      	adds	r3, r3, r3
 80072f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072f8:	4613      	mov	r3, r2
 80072fa:	eb42 0303 	adc.w	r3, r2, r3
 80072fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007308:	f7f9 fcee 	bl	8000ce8 <__aeabi_uldivmod>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4b61      	ldr	r3, [pc, #388]	@ (8007498 <UART_SetConfig+0x2d4>)
 8007312:	fba3 2302 	umull	r2, r3, r3, r2
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	011c      	lsls	r4, r3, #4
 800731a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800731e:	2200      	movs	r2, #0
 8007320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007324:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800732c:	4642      	mov	r2, r8
 800732e:	464b      	mov	r3, r9
 8007330:	1891      	adds	r1, r2, r2
 8007332:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007334:	415b      	adcs	r3, r3
 8007336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800733c:	4641      	mov	r1, r8
 800733e:	eb12 0a01 	adds.w	sl, r2, r1
 8007342:	4649      	mov	r1, r9
 8007344:	eb43 0b01 	adc.w	fp, r3, r1
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800735c:	4692      	mov	sl, r2
 800735e:	469b      	mov	fp, r3
 8007360:	4643      	mov	r3, r8
 8007362:	eb1a 0303 	adds.w	r3, sl, r3
 8007366:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800736a:	464b      	mov	r3, r9
 800736c:	eb4b 0303 	adc.w	r3, fp, r3
 8007370:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007380:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007388:	460b      	mov	r3, r1
 800738a:	18db      	adds	r3, r3, r3
 800738c:	643b      	str	r3, [r7, #64]	@ 0x40
 800738e:	4613      	mov	r3, r2
 8007390:	eb42 0303 	adc.w	r3, r2, r3
 8007394:	647b      	str	r3, [r7, #68]	@ 0x44
 8007396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800739a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800739e:	f7f9 fca3 	bl	8000ce8 <__aeabi_uldivmod>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4611      	mov	r1, r2
 80073a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007498 <UART_SetConfig+0x2d4>)
 80073aa:	fba3 2301 	umull	r2, r3, r3, r1
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	2264      	movs	r2, #100	@ 0x64
 80073b2:	fb02 f303 	mul.w	r3, r2, r3
 80073b6:	1acb      	subs	r3, r1, r3
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073be:	4b36      	ldr	r3, [pc, #216]	@ (8007498 <UART_SetConfig+0x2d4>)
 80073c0:	fba3 2302 	umull	r2, r3, r3, r2
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80073cc:	441c      	add	r4, r3
 80073ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	1891      	adds	r1, r2, r2
 80073e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073e8:	415b      	adcs	r3, r3
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073f0:	4641      	mov	r1, r8
 80073f2:	1851      	adds	r1, r2, r1
 80073f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80073f6:	4649      	mov	r1, r9
 80073f8:	414b      	adcs	r3, r1
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007408:	4659      	mov	r1, fp
 800740a:	00cb      	lsls	r3, r1, #3
 800740c:	4651      	mov	r1, sl
 800740e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007412:	4651      	mov	r1, sl
 8007414:	00ca      	lsls	r2, r1, #3
 8007416:	4610      	mov	r0, r2
 8007418:	4619      	mov	r1, r3
 800741a:	4603      	mov	r3, r0
 800741c:	4642      	mov	r2, r8
 800741e:	189b      	adds	r3, r3, r2
 8007420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007424:	464b      	mov	r3, r9
 8007426:	460a      	mov	r2, r1
 8007428:	eb42 0303 	adc.w	r3, r2, r3
 800742c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800743c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007444:	460b      	mov	r3, r1
 8007446:	18db      	adds	r3, r3, r3
 8007448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800744a:	4613      	mov	r3, r2
 800744c:	eb42 0303 	adc.w	r3, r2, r3
 8007450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800745a:	f7f9 fc45 	bl	8000ce8 <__aeabi_uldivmod>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4b0d      	ldr	r3, [pc, #52]	@ (8007498 <UART_SetConfig+0x2d4>)
 8007464:	fba3 1302 	umull	r1, r3, r3, r2
 8007468:	095b      	lsrs	r3, r3, #5
 800746a:	2164      	movs	r1, #100	@ 0x64
 800746c:	fb01 f303 	mul.w	r3, r1, r3
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	3332      	adds	r3, #50	@ 0x32
 8007476:	4a08      	ldr	r2, [pc, #32]	@ (8007498 <UART_SetConfig+0x2d4>)
 8007478:	fba2 2303 	umull	r2, r3, r2, r3
 800747c:	095b      	lsrs	r3, r3, #5
 800747e:	f003 0207 	and.w	r2, r3, #7
 8007482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4422      	add	r2, r4
 800748a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800748c:	e106      	b.n	800769c <UART_SetConfig+0x4d8>
 800748e:	bf00      	nop
 8007490:	40011000 	.word	0x40011000
 8007494:	40011400 	.word	0x40011400
 8007498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800749c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074ae:	4642      	mov	r2, r8
 80074b0:	464b      	mov	r3, r9
 80074b2:	1891      	adds	r1, r2, r2
 80074b4:	6239      	str	r1, [r7, #32]
 80074b6:	415b      	adcs	r3, r3
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074be:	4641      	mov	r1, r8
 80074c0:	1854      	adds	r4, r2, r1
 80074c2:	4649      	mov	r1, r9
 80074c4:	eb43 0501 	adc.w	r5, r3, r1
 80074c8:	f04f 0200 	mov.w	r2, #0
 80074cc:	f04f 0300 	mov.w	r3, #0
 80074d0:	00eb      	lsls	r3, r5, #3
 80074d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074d6:	00e2      	lsls	r2, r4, #3
 80074d8:	4614      	mov	r4, r2
 80074da:	461d      	mov	r5, r3
 80074dc:	4643      	mov	r3, r8
 80074de:	18e3      	adds	r3, r4, r3
 80074e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074e4:	464b      	mov	r3, r9
 80074e6:	eb45 0303 	adc.w	r3, r5, r3
 80074ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074fe:	f04f 0200 	mov.w	r2, #0
 8007502:	f04f 0300 	mov.w	r3, #0
 8007506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800750a:	4629      	mov	r1, r5
 800750c:	008b      	lsls	r3, r1, #2
 800750e:	4621      	mov	r1, r4
 8007510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007514:	4621      	mov	r1, r4
 8007516:	008a      	lsls	r2, r1, #2
 8007518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800751c:	f7f9 fbe4 	bl	8000ce8 <__aeabi_uldivmod>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4b60      	ldr	r3, [pc, #384]	@ (80076a8 <UART_SetConfig+0x4e4>)
 8007526:	fba3 2302 	umull	r2, r3, r3, r2
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	011c      	lsls	r4, r3, #4
 800752e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007532:	2200      	movs	r2, #0
 8007534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007538:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800753c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007540:	4642      	mov	r2, r8
 8007542:	464b      	mov	r3, r9
 8007544:	1891      	adds	r1, r2, r2
 8007546:	61b9      	str	r1, [r7, #24]
 8007548:	415b      	adcs	r3, r3
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007550:	4641      	mov	r1, r8
 8007552:	1851      	adds	r1, r2, r1
 8007554:	6139      	str	r1, [r7, #16]
 8007556:	4649      	mov	r1, r9
 8007558:	414b      	adcs	r3, r1
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007568:	4659      	mov	r1, fp
 800756a:	00cb      	lsls	r3, r1, #3
 800756c:	4651      	mov	r1, sl
 800756e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007572:	4651      	mov	r1, sl
 8007574:	00ca      	lsls	r2, r1, #3
 8007576:	4610      	mov	r0, r2
 8007578:	4619      	mov	r1, r3
 800757a:	4603      	mov	r3, r0
 800757c:	4642      	mov	r2, r8
 800757e:	189b      	adds	r3, r3, r2
 8007580:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007584:	464b      	mov	r3, r9
 8007586:	460a      	mov	r2, r1
 8007588:	eb42 0303 	adc.w	r3, r2, r3
 800758c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	67bb      	str	r3, [r7, #120]	@ 0x78
 800759a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075a8:	4649      	mov	r1, r9
 80075aa:	008b      	lsls	r3, r1, #2
 80075ac:	4641      	mov	r1, r8
 80075ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075b2:	4641      	mov	r1, r8
 80075b4:	008a      	lsls	r2, r1, #2
 80075b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075ba:	f7f9 fb95 	bl	8000ce8 <__aeabi_uldivmod>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4611      	mov	r1, r2
 80075c4:	4b38      	ldr	r3, [pc, #224]	@ (80076a8 <UART_SetConfig+0x4e4>)
 80075c6:	fba3 2301 	umull	r2, r3, r3, r1
 80075ca:	095b      	lsrs	r3, r3, #5
 80075cc:	2264      	movs	r2, #100	@ 0x64
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
 80075d2:	1acb      	subs	r3, r1, r3
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	3332      	adds	r3, #50	@ 0x32
 80075d8:	4a33      	ldr	r2, [pc, #204]	@ (80076a8 <UART_SetConfig+0x4e4>)
 80075da:	fba2 2303 	umull	r2, r3, r2, r3
 80075de:	095b      	lsrs	r3, r3, #5
 80075e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075e4:	441c      	add	r4, r3
 80075e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ea:	2200      	movs	r2, #0
 80075ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80075ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80075f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075f4:	4642      	mov	r2, r8
 80075f6:	464b      	mov	r3, r9
 80075f8:	1891      	adds	r1, r2, r2
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	415b      	adcs	r3, r3
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007604:	4641      	mov	r1, r8
 8007606:	1851      	adds	r1, r2, r1
 8007608:	6039      	str	r1, [r7, #0]
 800760a:	4649      	mov	r1, r9
 800760c:	414b      	adcs	r3, r1
 800760e:	607b      	str	r3, [r7, #4]
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800761c:	4659      	mov	r1, fp
 800761e:	00cb      	lsls	r3, r1, #3
 8007620:	4651      	mov	r1, sl
 8007622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007626:	4651      	mov	r1, sl
 8007628:	00ca      	lsls	r2, r1, #3
 800762a:	4610      	mov	r0, r2
 800762c:	4619      	mov	r1, r3
 800762e:	4603      	mov	r3, r0
 8007630:	4642      	mov	r2, r8
 8007632:	189b      	adds	r3, r3, r2
 8007634:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007636:	464b      	mov	r3, r9
 8007638:	460a      	mov	r2, r1
 800763a:	eb42 0303 	adc.w	r3, r2, r3
 800763e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	663b      	str	r3, [r7, #96]	@ 0x60
 800764a:	667a      	str	r2, [r7, #100]	@ 0x64
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007658:	4649      	mov	r1, r9
 800765a:	008b      	lsls	r3, r1, #2
 800765c:	4641      	mov	r1, r8
 800765e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007662:	4641      	mov	r1, r8
 8007664:	008a      	lsls	r2, r1, #2
 8007666:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800766a:	f7f9 fb3d 	bl	8000ce8 <__aeabi_uldivmod>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4b0d      	ldr	r3, [pc, #52]	@ (80076a8 <UART_SetConfig+0x4e4>)
 8007674:	fba3 1302 	umull	r1, r3, r3, r2
 8007678:	095b      	lsrs	r3, r3, #5
 800767a:	2164      	movs	r1, #100	@ 0x64
 800767c:	fb01 f303 	mul.w	r3, r1, r3
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	3332      	adds	r3, #50	@ 0x32
 8007686:	4a08      	ldr	r2, [pc, #32]	@ (80076a8 <UART_SetConfig+0x4e4>)
 8007688:	fba2 2303 	umull	r2, r3, r2, r3
 800768c:	095b      	lsrs	r3, r3, #5
 800768e:	f003 020f 	and.w	r2, r3, #15
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4422      	add	r2, r4
 800769a:	609a      	str	r2, [r3, #8]
}
 800769c:	bf00      	nop
 800769e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076a2:	46bd      	mov	sp, r7
 80076a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a8:	51eb851f 	.word	0x51eb851f

080076ac <sniprintf>:
 80076ac:	b40c      	push	{r2, r3}
 80076ae:	b530      	push	{r4, r5, lr}
 80076b0:	4b17      	ldr	r3, [pc, #92]	@ (8007710 <sniprintf+0x64>)
 80076b2:	1e0c      	subs	r4, r1, #0
 80076b4:	681d      	ldr	r5, [r3, #0]
 80076b6:	b09d      	sub	sp, #116	@ 0x74
 80076b8:	da08      	bge.n	80076cc <sniprintf+0x20>
 80076ba:	238b      	movs	r3, #139	@ 0x8b
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	f04f 30ff 	mov.w	r0, #4294967295
 80076c2:	b01d      	add	sp, #116	@ 0x74
 80076c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076c8:	b002      	add	sp, #8
 80076ca:	4770      	bx	lr
 80076cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80076d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076d4:	bf14      	ite	ne
 80076d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076da:	4623      	moveq	r3, r4
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	9307      	str	r3, [sp, #28]
 80076e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80076e4:	9002      	str	r0, [sp, #8]
 80076e6:	9006      	str	r0, [sp, #24]
 80076e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80076ee:	ab21      	add	r3, sp, #132	@ 0x84
 80076f0:	a902      	add	r1, sp, #8
 80076f2:	4628      	mov	r0, r5
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f000 f88b 	bl	8007810 <_svfiprintf_r>
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	bfbc      	itt	lt
 80076fe:	238b      	movlt	r3, #139	@ 0x8b
 8007700:	602b      	strlt	r3, [r5, #0]
 8007702:	2c00      	cmp	r4, #0
 8007704:	d0dd      	beq.n	80076c2 <sniprintf+0x16>
 8007706:	9b02      	ldr	r3, [sp, #8]
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e7d9      	b.n	80076c2 <sniprintf+0x16>
 800770e:	bf00      	nop
 8007710:	20000050 	.word	0x20000050

08007714 <__ssprint_r>:
 8007714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	6893      	ldr	r3, [r2, #8]
 800771a:	f8d2 b000 	ldr.w	fp, [r2]
 800771e:	9001      	str	r0, [sp, #4]
 8007720:	460c      	mov	r4, r1
 8007722:	4617      	mov	r7, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d157      	bne.n	80077d8 <__ssprint_r+0xc4>
 8007728:	2000      	movs	r0, #0
 800772a:	2300      	movs	r3, #0
 800772c:	607b      	str	r3, [r7, #4]
 800772e:	b003      	add	sp, #12
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	e9db a800 	ldrd	sl, r8, [fp]
 8007738:	f10b 0b08 	add.w	fp, fp, #8
 800773c:	68a6      	ldr	r6, [r4, #8]
 800773e:	6820      	ldr	r0, [r4, #0]
 8007740:	f1b8 0f00 	cmp.w	r8, #0
 8007744:	d0f6      	beq.n	8007734 <__ssprint_r+0x20>
 8007746:	45b0      	cmp	r8, r6
 8007748:	d32e      	bcc.n	80077a8 <__ssprint_r+0x94>
 800774a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800774e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007752:	d029      	beq.n	80077a8 <__ssprint_r+0x94>
 8007754:	6921      	ldr	r1, [r4, #16]
 8007756:	6965      	ldr	r5, [r4, #20]
 8007758:	eba0 0901 	sub.w	r9, r0, r1
 800775c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007764:	f109 0001 	add.w	r0, r9, #1
 8007768:	106d      	asrs	r5, r5, #1
 800776a:	4440      	add	r0, r8
 800776c:	4285      	cmp	r5, r0
 800776e:	bf38      	it	cc
 8007770:	4605      	movcc	r5, r0
 8007772:	0553      	lsls	r3, r2, #21
 8007774:	d534      	bpl.n	80077e0 <__ssprint_r+0xcc>
 8007776:	9801      	ldr	r0, [sp, #4]
 8007778:	4629      	mov	r1, r5
 800777a:	f000 ffdb 	bl	8008734 <_malloc_r>
 800777e:	4606      	mov	r6, r0
 8007780:	2800      	cmp	r0, #0
 8007782:	d038      	beq.n	80077f6 <__ssprint_r+0xe2>
 8007784:	464a      	mov	r2, r9
 8007786:	6921      	ldr	r1, [r4, #16]
 8007788:	f000 fea0 	bl	80084cc <memcpy>
 800778c:	89a2      	ldrh	r2, [r4, #12]
 800778e:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8007792:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007796:	81a2      	strh	r2, [r4, #12]
 8007798:	6126      	str	r6, [r4, #16]
 800779a:	6165      	str	r5, [r4, #20]
 800779c:	444e      	add	r6, r9
 800779e:	eba5 0509 	sub.w	r5, r5, r9
 80077a2:	6026      	str	r6, [r4, #0]
 80077a4:	60a5      	str	r5, [r4, #8]
 80077a6:	4646      	mov	r6, r8
 80077a8:	4546      	cmp	r6, r8
 80077aa:	bf28      	it	cs
 80077ac:	4646      	movcs	r6, r8
 80077ae:	4632      	mov	r2, r6
 80077b0:	4651      	mov	r1, sl
 80077b2:	6820      	ldr	r0, [r4, #0]
 80077b4:	f000 fddd 	bl	8008372 <memmove>
 80077b8:	68a2      	ldr	r2, [r4, #8]
 80077ba:	1b92      	subs	r2, r2, r6
 80077bc:	60a2      	str	r2, [r4, #8]
 80077be:	6822      	ldr	r2, [r4, #0]
 80077c0:	4432      	add	r2, r6
 80077c2:	6022      	str	r2, [r4, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	eba2 0308 	sub.w	r3, r2, r8
 80077ca:	44c2      	add	sl, r8
 80077cc:	60bb      	str	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0aa      	beq.n	8007728 <__ssprint_r+0x14>
 80077d2:	f04f 0800 	mov.w	r8, #0
 80077d6:	e7b1      	b.n	800773c <__ssprint_r+0x28>
 80077d8:	f04f 0a00 	mov.w	sl, #0
 80077dc:	46d0      	mov	r8, sl
 80077de:	e7ad      	b.n	800773c <__ssprint_r+0x28>
 80077e0:	9801      	ldr	r0, [sp, #4]
 80077e2:	462a      	mov	r2, r5
 80077e4:	f001 f9ec 	bl	8008bc0 <_realloc_r>
 80077e8:	4606      	mov	r6, r0
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d1d4      	bne.n	8007798 <__ssprint_r+0x84>
 80077ee:	6921      	ldr	r1, [r4, #16]
 80077f0:	9801      	ldr	r0, [sp, #4]
 80077f2:	f000 fedf 	bl	80085b4 <_free_r>
 80077f6:	9a01      	ldr	r2, [sp, #4]
 80077f8:	230c      	movs	r3, #12
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	2300      	movs	r3, #0
 8007806:	60bb      	str	r3, [r7, #8]
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	e78d      	b.n	800772a <__ssprint_r+0x16>
	...

08007810 <_svfiprintf_r>:
 8007810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	461d      	mov	r5, r3
 8007816:	898b      	ldrh	r3, [r1, #12]
 8007818:	b0bb      	sub	sp, #236	@ 0xec
 800781a:	468b      	mov	fp, r1
 800781c:	0619      	lsls	r1, r3, #24
 800781e:	9001      	str	r0, [sp, #4]
 8007820:	9202      	str	r2, [sp, #8]
 8007822:	d514      	bpl.n	800784e <_svfiprintf_r+0x3e>
 8007824:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007828:	b98b      	cbnz	r3, 800784e <_svfiprintf_r+0x3e>
 800782a:	2140      	movs	r1, #64	@ 0x40
 800782c:	f000 ff82 	bl	8008734 <_malloc_r>
 8007830:	f8cb 0000 	str.w	r0, [fp]
 8007834:	f8cb 0010 	str.w	r0, [fp, #16]
 8007838:	b930      	cbnz	r0, 8007848 <_svfiprintf_r+0x38>
 800783a:	9a01      	ldr	r2, [sp, #4]
 800783c:	230c      	movs	r3, #12
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	f04f 33ff 	mov.w	r3, #4294967295
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	e3df      	b.n	8008008 <_svfiprintf_r+0x7f8>
 8007848:	2340      	movs	r3, #64	@ 0x40
 800784a:	f8cb 3014 	str.w	r3, [fp, #20]
 800784e:	2300      	movs	r3, #0
 8007850:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8007854:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007858:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800785c:	ae11      	add	r6, sp, #68	@ 0x44
 800785e:	960e      	str	r6, [sp, #56]	@ 0x38
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	9b02      	ldr	r3, [sp, #8]
 8007864:	461c      	mov	r4, r3
 8007866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800786a:	b10a      	cbz	r2, 8007870 <_svfiprintf_r+0x60>
 800786c:	2a25      	cmp	r2, #37	@ 0x25
 800786e:	d1f9      	bne.n	8007864 <_svfiprintf_r+0x54>
 8007870:	9a02      	ldr	r2, [sp, #8]
 8007872:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007874:	1aa7      	subs	r7, r4, r2
 8007876:	d00c      	beq.n	8007892 <_svfiprintf_r+0x82>
 8007878:	443b      	add	r3, r7
 800787a:	9310      	str	r3, [sp, #64]	@ 0x40
 800787c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800787e:	3301      	adds	r3, #1
 8007880:	2b07      	cmp	r3, #7
 8007882:	e9c6 2700 	strd	r2, r7, [r6]
 8007886:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007888:	dc76      	bgt.n	8007978 <_svfiprintf_r+0x168>
 800788a:	3608      	adds	r6, #8
 800788c:	9b04      	ldr	r3, [sp, #16]
 800788e:	443b      	add	r3, r7
 8007890:	9304      	str	r3, [sp, #16]
 8007892:	7823      	ldrb	r3, [r4, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 83ce 	beq.w	8008036 <_svfiprintf_r+0x826>
 800789a:	2300      	movs	r3, #0
 800789c:	f04f 32ff 	mov.w	r2, #4294967295
 80078a0:	3401      	adds	r4, #1
 80078a2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80078a6:	9200      	str	r2, [sp, #0]
 80078a8:	9303      	str	r3, [sp, #12]
 80078aa:	4699      	mov	r9, r3
 80078ac:	4622      	mov	r2, r4
 80078ae:	f812 3b01 	ldrb.w	r3, [r2], #1
 80078b2:	9202      	str	r2, [sp, #8]
 80078b4:	f1a3 0220 	sub.w	r2, r3, #32
 80078b8:	2a5a      	cmp	r2, #90	@ 0x5a
 80078ba:	f200 8318 	bhi.w	8007eee <_svfiprintf_r+0x6de>
 80078be:	e8df f012 	tbh	[pc, r2, lsl #1]
 80078c2:	009a      	.short	0x009a
 80078c4:	03160316 	.word	0x03160316
 80078c8:	031600a2 	.word	0x031600a2
 80078cc:	03160316 	.word	0x03160316
 80078d0:	03160082 	.word	0x03160082
 80078d4:	00a50316 	.word	0x00a50316
 80078d8:	031600af 	.word	0x031600af
 80078dc:	00b100ac 	.word	0x00b100ac
 80078e0:	00cc0316 	.word	0x00cc0316
 80078e4:	00cf00cf 	.word	0x00cf00cf
 80078e8:	00cf00cf 	.word	0x00cf00cf
 80078ec:	00cf00cf 	.word	0x00cf00cf
 80078f0:	00cf00cf 	.word	0x00cf00cf
 80078f4:	031600cf 	.word	0x031600cf
 80078f8:	03160316 	.word	0x03160316
 80078fc:	03160316 	.word	0x03160316
 8007900:	03160316 	.word	0x03160316
 8007904:	03160316 	.word	0x03160316
 8007908:	010600f9 	.word	0x010600f9
 800790c:	03160316 	.word	0x03160316
 8007910:	03160316 	.word	0x03160316
 8007914:	03160316 	.word	0x03160316
 8007918:	03160316 	.word	0x03160316
 800791c:	03160316 	.word	0x03160316
 8007920:	03160154 	.word	0x03160154
 8007924:	03160316 	.word	0x03160316
 8007928:	0316019b 	.word	0x0316019b
 800792c:	0316027d 	.word	0x0316027d
 8007930:	029d0316 	.word	0x029d0316
 8007934:	03160316 	.word	0x03160316
 8007938:	03160316 	.word	0x03160316
 800793c:	03160316 	.word	0x03160316
 8007940:	03160316 	.word	0x03160316
 8007944:	03160316 	.word	0x03160316
 8007948:	010800f9 	.word	0x010800f9
 800794c:	03160316 	.word	0x03160316
 8007950:	00df0316 	.word	0x00df0316
 8007954:	00f30108 	.word	0x00f30108
 8007958:	00ec0316 	.word	0x00ec0316
 800795c:	01340316 	.word	0x01340316
 8007960:	018a0156 	.word	0x018a0156
 8007964:	031600f3 	.word	0x031600f3
 8007968:	0098019b 	.word	0x0098019b
 800796c:	0316027f 	.word	0x0316027f
 8007970:	00650316 	.word	0x00650316
 8007974:	00980316 	.word	0x00980316
 8007978:	9801      	ldr	r0, [sp, #4]
 800797a:	aa0e      	add	r2, sp, #56	@ 0x38
 800797c:	4659      	mov	r1, fp
 800797e:	f7ff fec9 	bl	8007714 <__ssprint_r>
 8007982:	2800      	cmp	r0, #0
 8007984:	f040 833b 	bne.w	8007ffe <_svfiprintf_r+0x7ee>
 8007988:	ae11      	add	r6, sp, #68	@ 0x44
 800798a:	e77f      	b.n	800788c <_svfiprintf_r+0x7c>
 800798c:	4a99      	ldr	r2, [pc, #612]	@ (8007bf4 <_svfiprintf_r+0x3e4>)
 800798e:	9205      	str	r2, [sp, #20]
 8007990:	f019 0220 	ands.w	r2, r9, #32
 8007994:	f000 8234 	beq.w	8007e00 <_svfiprintf_r+0x5f0>
 8007998:	3507      	adds	r5, #7
 800799a:	f025 0507 	bic.w	r5, r5, #7
 800799e:	462f      	mov	r7, r5
 80079a0:	686d      	ldr	r5, [r5, #4]
 80079a2:	f857 4b08 	ldr.w	r4, [r7], #8
 80079a6:	f019 0f01 	tst.w	r9, #1
 80079aa:	d009      	beq.n	80079c0 <_svfiprintf_r+0x1b0>
 80079ac:	ea54 0205 	orrs.w	r2, r4, r5
 80079b0:	bf1f      	itttt	ne
 80079b2:	2230      	movne	r2, #48	@ 0x30
 80079b4:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80079b8:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80079bc:	f049 0902 	orrne.w	r9, r9, #2
 80079c0:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 80079c4:	e113      	b.n	8007bee <_svfiprintf_r+0x3de>
 80079c6:	9801      	ldr	r0, [sp, #4]
 80079c8:	f000 fd08 	bl	80083dc <_localeconv_r>
 80079cc:	6843      	ldr	r3, [r0, #4]
 80079ce:	9308      	str	r3, [sp, #32]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7f8 fc7d 	bl	80002d0 <strlen>
 80079d6:	9007      	str	r0, [sp, #28]
 80079d8:	9801      	ldr	r0, [sp, #4]
 80079da:	f000 fcff 	bl	80083dc <_localeconv_r>
 80079de:	6883      	ldr	r3, [r0, #8]
 80079e0:	9306      	str	r3, [sp, #24]
 80079e2:	9b07      	ldr	r3, [sp, #28]
 80079e4:	b12b      	cbz	r3, 80079f2 <_svfiprintf_r+0x1e2>
 80079e6:	9b06      	ldr	r3, [sp, #24]
 80079e8:	b11b      	cbz	r3, 80079f2 <_svfiprintf_r+0x1e2>
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	b10b      	cbz	r3, 80079f2 <_svfiprintf_r+0x1e2>
 80079ee:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 80079f2:	9c02      	ldr	r4, [sp, #8]
 80079f4:	e75a      	b.n	80078ac <_svfiprintf_r+0x9c>
 80079f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f9      	bne.n	80079f2 <_svfiprintf_r+0x1e2>
 80079fe:	2320      	movs	r3, #32
 8007a00:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8007a04:	e7f5      	b.n	80079f2 <_svfiprintf_r+0x1e2>
 8007a06:	f049 0901 	orr.w	r9, r9, #1
 8007a0a:	e7f2      	b.n	80079f2 <_svfiprintf_r+0x1e2>
 8007a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a10:	9303      	str	r3, [sp, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	daed      	bge.n	80079f2 <_svfiprintf_r+0x1e2>
 8007a16:	425b      	negs	r3, r3
 8007a18:	9303      	str	r3, [sp, #12]
 8007a1a:	f049 0904 	orr.w	r9, r9, #4
 8007a1e:	e7e8      	b.n	80079f2 <_svfiprintf_r+0x1e2>
 8007a20:	232b      	movs	r3, #43	@ 0x2b
 8007a22:	e7ed      	b.n	8007a00 <_svfiprintf_r+0x1f0>
 8007a24:	9a02      	ldr	r2, [sp, #8]
 8007a26:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a2c:	d111      	bne.n	8007a52 <_svfiprintf_r+0x242>
 8007a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a32:	9202      	str	r2, [sp, #8]
 8007a34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	e7da      	b.n	80079f2 <_svfiprintf_r+0x1e2>
 8007a3c:	9b00      	ldr	r3, [sp, #0]
 8007a3e:	fb00 1303 	mla	r3, r0, r3, r1
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007a48:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8007a4c:	2909      	cmp	r1, #9
 8007a4e:	d9f5      	bls.n	8007a3c <_svfiprintf_r+0x22c>
 8007a50:	e72f      	b.n	80078b2 <_svfiprintf_r+0xa2>
 8007a52:	2100      	movs	r1, #0
 8007a54:	9100      	str	r1, [sp, #0]
 8007a56:	200a      	movs	r0, #10
 8007a58:	e7f6      	b.n	8007a48 <_svfiprintf_r+0x238>
 8007a5a:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 8007a5e:	e7c8      	b.n	80079f2 <_svfiprintf_r+0x1e2>
 8007a60:	2100      	movs	r1, #0
 8007a62:	9a02      	ldr	r2, [sp, #8]
 8007a64:	9103      	str	r1, [sp, #12]
 8007a66:	200a      	movs	r0, #10
 8007a68:	9903      	ldr	r1, [sp, #12]
 8007a6a:	3b30      	subs	r3, #48	@ 0x30
 8007a6c:	fb00 3301 	mla	r3, r0, r1, r3
 8007a70:	9303      	str	r3, [sp, #12]
 8007a72:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007a76:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8007a7a:	2909      	cmp	r1, #9
 8007a7c:	d9f4      	bls.n	8007a68 <_svfiprintf_r+0x258>
 8007a7e:	e718      	b.n	80078b2 <_svfiprintf_r+0xa2>
 8007a80:	9b02      	ldr	r3, [sp, #8]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b68      	cmp	r3, #104	@ 0x68
 8007a86:	bf01      	itttt	eq
 8007a88:	9b02      	ldreq	r3, [sp, #8]
 8007a8a:	3301      	addeq	r3, #1
 8007a8c:	9302      	streq	r3, [sp, #8]
 8007a8e:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 8007a92:	bf18      	it	ne
 8007a94:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 8007a98:	e7ab      	b.n	80079f2 <_svfiprintf_r+0x1e2>
 8007a9a:	9b02      	ldr	r3, [sp, #8]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b6c      	cmp	r3, #108	@ 0x6c
 8007aa0:	d105      	bne.n	8007aae <_svfiprintf_r+0x29e>
 8007aa2:	9b02      	ldr	r3, [sp, #8]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	f049 0920 	orr.w	r9, r9, #32
 8007aac:	e7a1      	b.n	80079f2 <_svfiprintf_r+0x1e2>
 8007aae:	f049 0910 	orr.w	r9, r9, #16
 8007ab2:	e79e      	b.n	80079f2 <_svfiprintf_r+0x1e2>
 8007ab4:	462f      	mov	r7, r5
 8007ab6:	2400      	movs	r4, #0
 8007ab8:	f857 3b04 	ldr.w	r3, [r7], #4
 8007abc:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8007ac0:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 8007acc:	e0aa      	b.n	8007c24 <_svfiprintf_r+0x414>
 8007ace:	f049 0910 	orr.w	r9, r9, #16
 8007ad2:	f019 0f20 	tst.w	r9, #32
 8007ad6:	d011      	beq.n	8007afc <_svfiprintf_r+0x2ec>
 8007ad8:	3507      	adds	r5, #7
 8007ada:	f025 0507 	bic.w	r5, r5, #7
 8007ade:	462f      	mov	r7, r5
 8007ae0:	686d      	ldr	r5, [r5, #4]
 8007ae2:	f857 4b08 	ldr.w	r4, [r7], #8
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	da06      	bge.n	8007af8 <_svfiprintf_r+0x2e8>
 8007aea:	4264      	negs	r4, r4
 8007aec:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8007af0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8007af4:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8007af8:	2301      	movs	r3, #1
 8007afa:	e048      	b.n	8007b8e <_svfiprintf_r+0x37e>
 8007afc:	462f      	mov	r7, r5
 8007afe:	f019 0f10 	tst.w	r9, #16
 8007b02:	f857 5b04 	ldr.w	r5, [r7], #4
 8007b06:	d002      	beq.n	8007b0e <_svfiprintf_r+0x2fe>
 8007b08:	462c      	mov	r4, r5
 8007b0a:	17ed      	asrs	r5, r5, #31
 8007b0c:	e7eb      	b.n	8007ae6 <_svfiprintf_r+0x2d6>
 8007b0e:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8007b12:	d003      	beq.n	8007b1c <_svfiprintf_r+0x30c>
 8007b14:	b22c      	sxth	r4, r5
 8007b16:	f345 35c0 	sbfx	r5, r5, #15, #1
 8007b1a:	e7e4      	b.n	8007ae6 <_svfiprintf_r+0x2d6>
 8007b1c:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8007b20:	d0f2      	beq.n	8007b08 <_svfiprintf_r+0x2f8>
 8007b22:	b26c      	sxtb	r4, r5
 8007b24:	f345 15c0 	sbfx	r5, r5, #7, #1
 8007b28:	e7dd      	b.n	8007ae6 <_svfiprintf_r+0x2d6>
 8007b2a:	f019 0f20 	tst.w	r9, #32
 8007b2e:	d007      	beq.n	8007b40 <_svfiprintf_r+0x330>
 8007b30:	9a04      	ldr	r2, [sp, #16]
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	9904      	ldr	r1, [sp, #16]
 8007b36:	17d2      	asrs	r2, r2, #31
 8007b38:	e9c3 1200 	strd	r1, r2, [r3]
 8007b3c:	3504      	adds	r5, #4
 8007b3e:	e690      	b.n	8007862 <_svfiprintf_r+0x52>
 8007b40:	f019 0f10 	tst.w	r9, #16
 8007b44:	d003      	beq.n	8007b4e <_svfiprintf_r+0x33e>
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	9a04      	ldr	r2, [sp, #16]
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	e7f6      	b.n	8007b3c <_svfiprintf_r+0x32c>
 8007b4e:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8007b52:	d003      	beq.n	8007b5c <_svfiprintf_r+0x34c>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	9a04      	ldr	r2, [sp, #16]
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	e7ef      	b.n	8007b3c <_svfiprintf_r+0x32c>
 8007b5c:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8007b60:	d0f1      	beq.n	8007b46 <_svfiprintf_r+0x336>
 8007b62:	682b      	ldr	r3, [r5, #0]
 8007b64:	9a04      	ldr	r2, [sp, #16]
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e7e8      	b.n	8007b3c <_svfiprintf_r+0x32c>
 8007b6a:	f049 0910 	orr.w	r9, r9, #16
 8007b6e:	f019 0320 	ands.w	r3, r9, #32
 8007b72:	d01e      	beq.n	8007bb2 <_svfiprintf_r+0x3a2>
 8007b74:	3507      	adds	r5, #7
 8007b76:	f025 0507 	bic.w	r5, r5, #7
 8007b7a:	462f      	mov	r7, r5
 8007b7c:	686d      	ldr	r5, [r5, #4]
 8007b7e:	f857 4b08 	ldr.w	r4, [r7], #8
 8007b82:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8007b86:	2300      	movs	r3, #0
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8007b8e:	9a00      	ldr	r2, [sp, #0]
 8007b90:	3201      	adds	r2, #1
 8007b92:	f000 8259 	beq.w	8008048 <_svfiprintf_r+0x838>
 8007b96:	ea54 0205 	orrs.w	r2, r4, r5
 8007b9a:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 8007b9e:	f040 8258 	bne.w	8008052 <_svfiprintf_r+0x842>
 8007ba2:	9a00      	ldr	r2, [sp, #0]
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	f000 8199 	beq.w	8007edc <_svfiprintf_r+0x6cc>
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	f040 8254 	bne.w	8008058 <_svfiprintf_r+0x848>
 8007bb0:	e13d      	b.n	8007e2e <_svfiprintf_r+0x61e>
 8007bb2:	462f      	mov	r7, r5
 8007bb4:	f019 0510 	ands.w	r5, r9, #16
 8007bb8:	f857 4b04 	ldr.w	r4, [r7], #4
 8007bbc:	d001      	beq.n	8007bc2 <_svfiprintf_r+0x3b2>
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	e7df      	b.n	8007b82 <_svfiprintf_r+0x372>
 8007bc2:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8007bc6:	d001      	beq.n	8007bcc <_svfiprintf_r+0x3bc>
 8007bc8:	b2a4      	uxth	r4, r4
 8007bca:	e7da      	b.n	8007b82 <_svfiprintf_r+0x372>
 8007bcc:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8007bd0:	d0d7      	beq.n	8007b82 <_svfiprintf_r+0x372>
 8007bd2:	b2e4      	uxtb	r4, r4
 8007bd4:	e7f3      	b.n	8007bbe <_svfiprintf_r+0x3ae>
 8007bd6:	462f      	mov	r7, r5
 8007bd8:	f647 0330 	movw	r3, #30768	@ 0x7830
 8007bdc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8007be0:	f857 4b04 	ldr.w	r4, [r7], #4
 8007be4:	4b03      	ldr	r3, [pc, #12]	@ (8007bf4 <_svfiprintf_r+0x3e4>)
 8007be6:	9305      	str	r3, [sp, #20]
 8007be8:	2500      	movs	r5, #0
 8007bea:	f049 0902 	orr.w	r9, r9, #2
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e7ca      	b.n	8007b88 <_svfiprintf_r+0x378>
 8007bf2:	bf00      	nop
 8007bf4:	0800fa85 	.word	0x0800fa85
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	462f      	mov	r7, r5
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	f04f 0500 	mov.w	r5, #0
 8007c02:	f857 8b04 	ldr.w	r8, [r7], #4
 8007c06:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8007c0a:	f000 80d2 	beq.w	8007db2 <_svfiprintf_r+0x5a2>
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4629      	mov	r1, r5
 8007c12:	4640      	mov	r0, r8
 8007c14:	f7f8 fb0c 	bl	8000230 <memchr>
 8007c18:	4604      	mov	r4, r0
 8007c1a:	b118      	cbz	r0, 8007c24 <_svfiprintf_r+0x414>
 8007c1c:	eba0 0308 	sub.w	r3, r0, r8
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	462c      	mov	r4, r5
 8007c24:	9d00      	ldr	r5, [sp, #0]
 8007c26:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007c2a:	42a5      	cmp	r5, r4
 8007c2c:	bfb8      	it	lt
 8007c2e:	4625      	movlt	r5, r4
 8007c30:	b103      	cbz	r3, 8007c34 <_svfiprintf_r+0x424>
 8007c32:	3501      	adds	r5, #1
 8007c34:	f019 0302 	ands.w	r3, r9, #2
 8007c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c3a:	bf18      	it	ne
 8007c3c:	3502      	addne	r5, #2
 8007c3e:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 8007c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c44:	d123      	bne.n	8007c8e <_svfiprintf_r+0x47e>
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	eba3 0a05 	sub.w	sl, r3, r5
 8007c4c:	f1ba 0f00 	cmp.w	sl, #0
 8007c50:	dd1d      	ble.n	8007c8e <_svfiprintf_r+0x47e>
 8007c52:	4bac      	ldr	r3, [pc, #688]	@ (8007f04 <_svfiprintf_r+0x6f4>)
 8007c54:	6033      	str	r3, [r6, #0]
 8007c56:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8007c5a:	f1ba 0f10 	cmp.w	sl, #16
 8007c5e:	f102 0201 	add.w	r2, r2, #1
 8007c62:	f106 0008 	add.w	r0, r6, #8
 8007c66:	f300 8153 	bgt.w	8007f10 <_svfiprintf_r+0x700>
 8007c6a:	eb0c 010a 	add.w	r1, ip, sl
 8007c6e:	2a07      	cmp	r2, #7
 8007c70:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007c74:	f8c6 a004 	str.w	sl, [r6, #4]
 8007c78:	f340 815e 	ble.w	8007f38 <_svfiprintf_r+0x728>
 8007c7c:	9801      	ldr	r0, [sp, #4]
 8007c7e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007c80:	4659      	mov	r1, fp
 8007c82:	f7ff fd47 	bl	8007714 <__ssprint_r>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f040 81b9 	bne.w	8007ffe <_svfiprintf_r+0x7ee>
 8007c8c:	ae11      	add	r6, sp, #68	@ 0x44
 8007c8e:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8007c92:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007c96:	b161      	cbz	r1, 8007cb2 <_svfiprintf_r+0x4a2>
 8007c98:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	6031      	str	r1, [r6, #0]
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	440a      	add	r2, r1
 8007ca4:	2b07      	cmp	r3, #7
 8007ca6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007caa:	6071      	str	r1, [r6, #4]
 8007cac:	f300 8146 	bgt.w	8007f3c <_svfiprintf_r+0x72c>
 8007cb0:	3608      	adds	r6, #8
 8007cb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cb4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007cb8:	b159      	cbz	r1, 8007cd2 <_svfiprintf_r+0x4c2>
 8007cba:	a90d      	add	r1, sp, #52	@ 0x34
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	6031      	str	r1, [r6, #0]
 8007cc0:	2102      	movs	r1, #2
 8007cc2:	440a      	add	r2, r1
 8007cc4:	2b07      	cmp	r3, #7
 8007cc6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007cca:	6071      	str	r1, [r6, #4]
 8007ccc:	f300 813f 	bgt.w	8007f4e <_svfiprintf_r+0x73e>
 8007cd0:	3608      	adds	r6, #8
 8007cd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd4:	2b80      	cmp	r3, #128	@ 0x80
 8007cd6:	d123      	bne.n	8007d20 <_svfiprintf_r+0x510>
 8007cd8:	9b03      	ldr	r3, [sp, #12]
 8007cda:	eba3 0a05 	sub.w	sl, r3, r5
 8007cde:	f1ba 0f00 	cmp.w	sl, #0
 8007ce2:	dd1d      	ble.n	8007d20 <_svfiprintf_r+0x510>
 8007ce4:	4b88      	ldr	r3, [pc, #544]	@ (8007f08 <_svfiprintf_r+0x6f8>)
 8007ce6:	6033      	str	r3, [r6, #0]
 8007ce8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8007cec:	f1ba 0f10 	cmp.w	sl, #16
 8007cf0:	f102 0201 	add.w	r2, r2, #1
 8007cf4:	f106 0008 	add.w	r0, r6, #8
 8007cf8:	f300 8132 	bgt.w	8007f60 <_svfiprintf_r+0x750>
 8007cfc:	eb0c 010a 	add.w	r1, ip, sl
 8007d00:	2a07      	cmp	r2, #7
 8007d02:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007d06:	f8c6 a004 	str.w	sl, [r6, #4]
 8007d0a:	f340 813d 	ble.w	8007f88 <_svfiprintf_r+0x778>
 8007d0e:	9801      	ldr	r0, [sp, #4]
 8007d10:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d12:	4659      	mov	r1, fp
 8007d14:	f7ff fcfe 	bl	8007714 <__ssprint_r>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f040 8170 	bne.w	8007ffe <_svfiprintf_r+0x7ee>
 8007d1e:	ae11      	add	r6, sp, #68	@ 0x44
 8007d20:	9b00      	ldr	r3, [sp, #0]
 8007d22:	1ae4      	subs	r4, r4, r3
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	dd1a      	ble.n	8007d5e <_svfiprintf_r+0x54e>
 8007d28:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8007d2c:	4876      	ldr	r0, [pc, #472]	@ (8007f08 <_svfiprintf_r+0x6f8>)
 8007d2e:	6030      	str	r0, [r6, #0]
 8007d30:	2c10      	cmp	r4, #16
 8007d32:	f103 0301 	add.w	r3, r3, #1
 8007d36:	f106 0108 	add.w	r1, r6, #8
 8007d3a:	f300 8127 	bgt.w	8007f8c <_svfiprintf_r+0x77c>
 8007d3e:	6074      	str	r4, [r6, #4]
 8007d40:	2b07      	cmp	r3, #7
 8007d42:	4414      	add	r4, r2
 8007d44:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8007d48:	f340 8131 	ble.w	8007fae <_svfiprintf_r+0x79e>
 8007d4c:	9801      	ldr	r0, [sp, #4]
 8007d4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d50:	4659      	mov	r1, fp
 8007d52:	f7ff fcdf 	bl	8007714 <__ssprint_r>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f040 8151 	bne.w	8007ffe <_svfiprintf_r+0x7ee>
 8007d5c:	ae11      	add	r6, sp, #68	@ 0x44
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	9a00      	ldr	r2, [sp, #0]
 8007d62:	6073      	str	r3, [r6, #4]
 8007d64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d66:	f8c6 8000 	str.w	r8, [r6]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d70:	3301      	adds	r3, #1
 8007d72:	2b07      	cmp	r3, #7
 8007d74:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d76:	f300 811c 	bgt.w	8007fb2 <_svfiprintf_r+0x7a2>
 8007d7a:	f106 0308 	add.w	r3, r6, #8
 8007d7e:	f019 0f04 	tst.w	r9, #4
 8007d82:	f040 811e 	bne.w	8007fc2 <_svfiprintf_r+0x7b2>
 8007d86:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8007d8a:	42aa      	cmp	r2, r5
 8007d8c:	bfac      	ite	ge
 8007d8e:	189b      	addge	r3, r3, r2
 8007d90:	195b      	addlt	r3, r3, r5
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d96:	b13b      	cbz	r3, 8007da8 <_svfiprintf_r+0x598>
 8007d98:	9801      	ldr	r0, [sp, #4]
 8007d9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d9c:	4659      	mov	r1, fp
 8007d9e:	f7ff fcb9 	bl	8007714 <__ssprint_r>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	f040 812b 	bne.w	8007ffe <_svfiprintf_r+0x7ee>
 8007da8:	2300      	movs	r3, #0
 8007daa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007dac:	463d      	mov	r5, r7
 8007dae:	ae11      	add	r6, sp, #68	@ 0x44
 8007db0:	e557      	b.n	8007862 <_svfiprintf_r+0x52>
 8007db2:	4640      	mov	r0, r8
 8007db4:	f7f8 fa8c 	bl	80002d0 <strlen>
 8007db8:	9000      	str	r0, [sp, #0]
 8007dba:	e732      	b.n	8007c22 <_svfiprintf_r+0x412>
 8007dbc:	f049 0910 	orr.w	r9, r9, #16
 8007dc0:	f019 0320 	ands.w	r3, r9, #32
 8007dc4:	d008      	beq.n	8007dd8 <_svfiprintf_r+0x5c8>
 8007dc6:	3507      	adds	r5, #7
 8007dc8:	f025 0507 	bic.w	r5, r5, #7
 8007dcc:	462f      	mov	r7, r5
 8007dce:	686d      	ldr	r5, [r5, #4]
 8007dd0:	f857 4b08 	ldr.w	r4, [r7], #8
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e6d7      	b.n	8007b88 <_svfiprintf_r+0x378>
 8007dd8:	462f      	mov	r7, r5
 8007dda:	f019 0510 	ands.w	r5, r9, #16
 8007dde:	f857 4b04 	ldr.w	r4, [r7], #4
 8007de2:	d001      	beq.n	8007de8 <_svfiprintf_r+0x5d8>
 8007de4:	461d      	mov	r5, r3
 8007de6:	e7f5      	b.n	8007dd4 <_svfiprintf_r+0x5c4>
 8007de8:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8007dec:	d001      	beq.n	8007df2 <_svfiprintf_r+0x5e2>
 8007dee:	b2a4      	uxth	r4, r4
 8007df0:	e7f0      	b.n	8007dd4 <_svfiprintf_r+0x5c4>
 8007df2:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8007df6:	d0ed      	beq.n	8007dd4 <_svfiprintf_r+0x5c4>
 8007df8:	b2e4      	uxtb	r4, r4
 8007dfa:	e7f3      	b.n	8007de4 <_svfiprintf_r+0x5d4>
 8007dfc:	4a43      	ldr	r2, [pc, #268]	@ (8007f0c <_svfiprintf_r+0x6fc>)
 8007dfe:	e5c6      	b.n	800798e <_svfiprintf_r+0x17e>
 8007e00:	462f      	mov	r7, r5
 8007e02:	f019 0510 	ands.w	r5, r9, #16
 8007e06:	f857 4b04 	ldr.w	r4, [r7], #4
 8007e0a:	d001      	beq.n	8007e10 <_svfiprintf_r+0x600>
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	e5ca      	b.n	80079a6 <_svfiprintf_r+0x196>
 8007e10:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 8007e14:	d001      	beq.n	8007e1a <_svfiprintf_r+0x60a>
 8007e16:	b2a4      	uxth	r4, r4
 8007e18:	e5c5      	b.n	80079a6 <_svfiprintf_r+0x196>
 8007e1a:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8007e1e:	f43f adc2 	beq.w	80079a6 <_svfiprintf_r+0x196>
 8007e22:	b2e4      	uxtb	r4, r4
 8007e24:	e7f2      	b.n	8007e0c <_svfiprintf_r+0x5fc>
 8007e26:	2c0a      	cmp	r4, #10
 8007e28:	f175 0300 	sbcs.w	r3, r5, #0
 8007e2c:	d206      	bcs.n	8007e3c <_svfiprintf_r+0x62c>
 8007e2e:	3430      	adds	r4, #48	@ 0x30
 8007e30:	b2e4      	uxtb	r4, r4
 8007e32:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8007e36:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8007e3a:	e129      	b.n	8008090 <_svfiprintf_r+0x880>
 8007e3c:	ab3a      	add	r3, sp, #232	@ 0xe8
 8007e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e40:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 8007e44:	f04f 0900 	mov.w	r9, #0
 8007e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e4a:	220a      	movs	r2, #10
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f8 ff49 	bl	8000ce8 <__aeabi_uldivmod>
 8007e56:	460b      	mov	r3, r1
 8007e58:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e5a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007e5c:	3230      	adds	r2, #48	@ 0x30
 8007e5e:	f801 2c01 	strb.w	r2, [r1, #-1]
 8007e62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e64:	f101 38ff 	add.w	r8, r1, #4294967295
 8007e68:	f109 0901 	add.w	r9, r9, #1
 8007e6c:	b1e2      	cbz	r2, 8007ea8 <_svfiprintf_r+0x698>
 8007e6e:	9a06      	ldr	r2, [sp, #24]
 8007e70:	7812      	ldrb	r2, [r2, #0]
 8007e72:	454a      	cmp	r2, r9
 8007e74:	d118      	bne.n	8007ea8 <_svfiprintf_r+0x698>
 8007e76:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8007e7a:	d015      	beq.n	8007ea8 <_svfiprintf_r+0x698>
 8007e7c:	2c0a      	cmp	r4, #10
 8007e7e:	f175 0200 	sbcs.w	r2, r5, #0
 8007e82:	d311      	bcc.n	8007ea8 <_svfiprintf_r+0x698>
 8007e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e86:	9b07      	ldr	r3, [sp, #28]
 8007e88:	9908      	ldr	r1, [sp, #32]
 8007e8a:	eba8 0803 	sub.w	r8, r8, r3
 8007e8e:	461a      	mov	r2, r3
 8007e90:	4640      	mov	r0, r8
 8007e92:	f000 fa90 	bl	80083b6 <strncpy>
 8007e96:	9b06      	ldr	r3, [sp, #24]
 8007e98:	785a      	ldrb	r2, [r3, #1]
 8007e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9c:	b172      	cbz	r2, 8007ebc <_svfiprintf_r+0x6ac>
 8007e9e:	9a06      	ldr	r2, [sp, #24]
 8007ea0:	3201      	adds	r2, #1
 8007ea2:	9206      	str	r2, [sp, #24]
 8007ea4:	f04f 0900 	mov.w	r9, #0
 8007ea8:	2c0a      	cmp	r4, #10
 8007eaa:	f175 0500 	sbcs.w	r5, r5, #0
 8007eae:	f0c0 80ef 	bcc.w	8008090 <_svfiprintf_r+0x880>
 8007eb2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007eb4:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8007eb8:	461d      	mov	r5, r3
 8007eba:	e7c6      	b.n	8007e4a <_svfiprintf_r+0x63a>
 8007ebc:	4691      	mov	r9, r2
 8007ebe:	e7f3      	b.n	8007ea8 <_svfiprintf_r+0x698>
 8007ec0:	f004 030f 	and.w	r3, r4, #15
 8007ec4:	9a05      	ldr	r2, [sp, #20]
 8007ec6:	0924      	lsrs	r4, r4, #4
 8007ec8:	5cd3      	ldrb	r3, [r2, r3]
 8007eca:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007ece:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8007ed2:	092d      	lsrs	r5, r5, #4
 8007ed4:	ea54 0305 	orrs.w	r3, r4, r5
 8007ed8:	d1f2      	bne.n	8007ec0 <_svfiprintf_r+0x6b0>
 8007eda:	e0d9      	b.n	8008090 <_svfiprintf_r+0x880>
 8007edc:	b923      	cbnz	r3, 8007ee8 <_svfiprintf_r+0x6d8>
 8007ede:	f019 0f01 	tst.w	r9, #1
 8007ee2:	d001      	beq.n	8007ee8 <_svfiprintf_r+0x6d8>
 8007ee4:	2430      	movs	r4, #48	@ 0x30
 8007ee6:	e7a4      	b.n	8007e32 <_svfiprintf_r+0x622>
 8007ee8:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8007eec:	e0d0      	b.n	8008090 <_svfiprintf_r+0x880>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80a1 	beq.w	8008036 <_svfiprintf_r+0x826>
 8007ef4:	2400      	movs	r4, #0
 8007ef6:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8007efa:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8007efe:	462f      	mov	r7, r5
 8007f00:	e5e0      	b.n	8007ac4 <_svfiprintf_r+0x2b4>
 8007f02:	bf00      	nop
 8007f04:	0800faa6 	.word	0x0800faa6
 8007f08:	0800fa96 	.word	0x0800fa96
 8007f0c:	0800fa74 	.word	0x0800fa74
 8007f10:	2110      	movs	r1, #16
 8007f12:	6071      	str	r1, [r6, #4]
 8007f14:	2a07      	cmp	r2, #7
 8007f16:	4461      	add	r1, ip
 8007f18:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007f1c:	dd08      	ble.n	8007f30 <_svfiprintf_r+0x720>
 8007f1e:	9801      	ldr	r0, [sp, #4]
 8007f20:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f22:	4659      	mov	r1, fp
 8007f24:	f7ff fbf6 	bl	8007714 <__ssprint_r>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d168      	bne.n	8007ffe <_svfiprintf_r+0x7ee>
 8007f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80080a0 <_svfiprintf_r+0x890>)
 8007f2e:	a811      	add	r0, sp, #68	@ 0x44
 8007f30:	f1aa 0a10 	sub.w	sl, sl, #16
 8007f34:	4606      	mov	r6, r0
 8007f36:	e68d      	b.n	8007c54 <_svfiprintf_r+0x444>
 8007f38:	4606      	mov	r6, r0
 8007f3a:	e6a8      	b.n	8007c8e <_svfiprintf_r+0x47e>
 8007f3c:	9801      	ldr	r0, [sp, #4]
 8007f3e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f40:	4659      	mov	r1, fp
 8007f42:	f7ff fbe7 	bl	8007714 <__ssprint_r>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d159      	bne.n	8007ffe <_svfiprintf_r+0x7ee>
 8007f4a:	ae11      	add	r6, sp, #68	@ 0x44
 8007f4c:	e6b1      	b.n	8007cb2 <_svfiprintf_r+0x4a2>
 8007f4e:	9801      	ldr	r0, [sp, #4]
 8007f50:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f52:	4659      	mov	r1, fp
 8007f54:	f7ff fbde 	bl	8007714 <__ssprint_r>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d150      	bne.n	8007ffe <_svfiprintf_r+0x7ee>
 8007f5c:	ae11      	add	r6, sp, #68	@ 0x44
 8007f5e:	e6b8      	b.n	8007cd2 <_svfiprintf_r+0x4c2>
 8007f60:	2110      	movs	r1, #16
 8007f62:	6071      	str	r1, [r6, #4]
 8007f64:	2a07      	cmp	r2, #7
 8007f66:	4461      	add	r1, ip
 8007f68:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8007f6c:	dd08      	ble.n	8007f80 <_svfiprintf_r+0x770>
 8007f6e:	9801      	ldr	r0, [sp, #4]
 8007f70:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f72:	4659      	mov	r1, fp
 8007f74:	f7ff fbce 	bl	8007714 <__ssprint_r>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d140      	bne.n	8007ffe <_svfiprintf_r+0x7ee>
 8007f7c:	4b49      	ldr	r3, [pc, #292]	@ (80080a4 <_svfiprintf_r+0x894>)
 8007f7e:	a811      	add	r0, sp, #68	@ 0x44
 8007f80:	f1aa 0a10 	sub.w	sl, sl, #16
 8007f84:	4606      	mov	r6, r0
 8007f86:	e6ae      	b.n	8007ce6 <_svfiprintf_r+0x4d6>
 8007f88:	4606      	mov	r6, r0
 8007f8a:	e6c9      	b.n	8007d20 <_svfiprintf_r+0x510>
 8007f8c:	2010      	movs	r0, #16
 8007f8e:	4402      	add	r2, r0
 8007f90:	2b07      	cmp	r3, #7
 8007f92:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8007f96:	6070      	str	r0, [r6, #4]
 8007f98:	dd06      	ble.n	8007fa8 <_svfiprintf_r+0x798>
 8007f9a:	9801      	ldr	r0, [sp, #4]
 8007f9c:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f9e:	4659      	mov	r1, fp
 8007fa0:	f7ff fbb8 	bl	8007714 <__ssprint_r>
 8007fa4:	bb58      	cbnz	r0, 8007ffe <_svfiprintf_r+0x7ee>
 8007fa6:	a911      	add	r1, sp, #68	@ 0x44
 8007fa8:	3c10      	subs	r4, #16
 8007faa:	460e      	mov	r6, r1
 8007fac:	e6bc      	b.n	8007d28 <_svfiprintf_r+0x518>
 8007fae:	460e      	mov	r6, r1
 8007fb0:	e6d5      	b.n	8007d5e <_svfiprintf_r+0x54e>
 8007fb2:	9801      	ldr	r0, [sp, #4]
 8007fb4:	aa0e      	add	r2, sp, #56	@ 0x38
 8007fb6:	4659      	mov	r1, fp
 8007fb8:	f7ff fbac 	bl	8007714 <__ssprint_r>
 8007fbc:	b9f8      	cbnz	r0, 8007ffe <_svfiprintf_r+0x7ee>
 8007fbe:	ab11      	add	r3, sp, #68	@ 0x44
 8007fc0:	e6dd      	b.n	8007d7e <_svfiprintf_r+0x56e>
 8007fc2:	9a03      	ldr	r2, [sp, #12]
 8007fc4:	1b54      	subs	r4, r2, r5
 8007fc6:	2c00      	cmp	r4, #0
 8007fc8:	f77f aedd 	ble.w	8007d86 <_svfiprintf_r+0x576>
 8007fcc:	4e34      	ldr	r6, [pc, #208]	@ (80080a0 <_svfiprintf_r+0x890>)
 8007fce:	f04f 0810 	mov.w	r8, #16
 8007fd2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8007fd6:	2c10      	cmp	r4, #16
 8007fd8:	f102 0201 	add.w	r2, r2, #1
 8007fdc:	601e      	str	r6, [r3, #0]
 8007fde:	dc17      	bgt.n	8008010 <_svfiprintf_r+0x800>
 8007fe0:	605c      	str	r4, [r3, #4]
 8007fe2:	2a07      	cmp	r2, #7
 8007fe4:	440c      	add	r4, r1
 8007fe6:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8007fea:	f77f aecc 	ble.w	8007d86 <_svfiprintf_r+0x576>
 8007fee:	9801      	ldr	r0, [sp, #4]
 8007ff0:	aa0e      	add	r2, sp, #56	@ 0x38
 8007ff2:	4659      	mov	r1, fp
 8007ff4:	f7ff fb8e 	bl	8007714 <__ssprint_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	f43f aec4 	beq.w	8007d86 <_svfiprintf_r+0x576>
 8007ffe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008002:	065b      	lsls	r3, r3, #25
 8008004:	f53f ac1c 	bmi.w	8007840 <_svfiprintf_r+0x30>
 8008008:	9804      	ldr	r0, [sp, #16]
 800800a:	b03b      	add	sp, #236	@ 0xec
 800800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008010:	3110      	adds	r1, #16
 8008012:	2a07      	cmp	r2, #7
 8008014:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8008018:	f8c3 8004 	str.w	r8, [r3, #4]
 800801c:	dc02      	bgt.n	8008024 <_svfiprintf_r+0x814>
 800801e:	3308      	adds	r3, #8
 8008020:	3c10      	subs	r4, #16
 8008022:	e7d6      	b.n	8007fd2 <_svfiprintf_r+0x7c2>
 8008024:	9801      	ldr	r0, [sp, #4]
 8008026:	aa0e      	add	r2, sp, #56	@ 0x38
 8008028:	4659      	mov	r1, fp
 800802a:	f7ff fb73 	bl	8007714 <__ssprint_r>
 800802e:	2800      	cmp	r0, #0
 8008030:	d1e5      	bne.n	8007ffe <_svfiprintf_r+0x7ee>
 8008032:	ab11      	add	r3, sp, #68	@ 0x44
 8008034:	e7f4      	b.n	8008020 <_svfiprintf_r+0x810>
 8008036:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0e0      	beq.n	8007ffe <_svfiprintf_r+0x7ee>
 800803c:	9801      	ldr	r0, [sp, #4]
 800803e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008040:	4659      	mov	r1, fp
 8008042:	f7ff fb67 	bl	8007714 <__ssprint_r>
 8008046:	e7da      	b.n	8007ffe <_svfiprintf_r+0x7ee>
 8008048:	ea54 0205 	orrs.w	r2, r4, r5
 800804c:	46ca      	mov	sl, r9
 800804e:	f43f adac 	beq.w	8007baa <_svfiprintf_r+0x39a>
 8008052:	2b01      	cmp	r3, #1
 8008054:	f43f aee7 	beq.w	8007e26 <_svfiprintf_r+0x616>
 8008058:	2b02      	cmp	r3, #2
 800805a:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 800805e:	f43f af2f 	beq.w	8007ec0 <_svfiprintf_r+0x6b0>
 8008062:	f004 0307 	and.w	r3, r4, #7
 8008066:	08e4      	lsrs	r4, r4, #3
 8008068:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800806c:	08ed      	lsrs	r5, r5, #3
 800806e:	3330      	adds	r3, #48	@ 0x30
 8008070:	ea54 0105 	orrs.w	r1, r4, r5
 8008074:	4642      	mov	r2, r8
 8008076:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800807a:	d1f2      	bne.n	8008062 <_svfiprintf_r+0x852>
 800807c:	f01a 0f01 	tst.w	sl, #1
 8008080:	d006      	beq.n	8008090 <_svfiprintf_r+0x880>
 8008082:	2b30      	cmp	r3, #48	@ 0x30
 8008084:	d004      	beq.n	8008090 <_svfiprintf_r+0x880>
 8008086:	2330      	movs	r3, #48	@ 0x30
 8008088:	f808 3c01 	strb.w	r3, [r8, #-1]
 800808c:	f1a2 0802 	sub.w	r8, r2, #2
 8008090:	ab3a      	add	r3, sp, #232	@ 0xe8
 8008092:	eba3 0308 	sub.w	r3, r3, r8
 8008096:	9c00      	ldr	r4, [sp, #0]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	46d1      	mov	r9, sl
 800809c:	e5c2      	b.n	8007c24 <_svfiprintf_r+0x414>
 800809e:	bf00      	nop
 80080a0:	0800faa6 	.word	0x0800faa6
 80080a4:	0800fa96 	.word	0x0800fa96

080080a8 <std>:
 80080a8:	2300      	movs	r3, #0
 80080aa:	b510      	push	{r4, lr}
 80080ac:	4604      	mov	r4, r0
 80080ae:	e9c0 3300 	strd	r3, r3, [r0]
 80080b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080b6:	6083      	str	r3, [r0, #8]
 80080b8:	8181      	strh	r1, [r0, #12]
 80080ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80080bc:	81c2      	strh	r2, [r0, #14]
 80080be:	6183      	str	r3, [r0, #24]
 80080c0:	4619      	mov	r1, r3
 80080c2:	2208      	movs	r2, #8
 80080c4:	305c      	adds	r0, #92	@ 0x5c
 80080c6:	f000 f96e 	bl	80083a6 <memset>
 80080ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008100 <std+0x58>)
 80080cc:	6223      	str	r3, [r4, #32]
 80080ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <std+0x5c>)
 80080d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80080d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <std+0x60>)
 80080d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080d6:	4b0d      	ldr	r3, [pc, #52]	@ (800810c <std+0x64>)
 80080d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080da:	4b0d      	ldr	r3, [pc, #52]	@ (8008110 <std+0x68>)
 80080dc:	61e4      	str	r4, [r4, #28]
 80080de:	429c      	cmp	r4, r3
 80080e0:	d006      	beq.n	80080f0 <std+0x48>
 80080e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080e6:	4294      	cmp	r4, r2
 80080e8:	d002      	beq.n	80080f0 <std+0x48>
 80080ea:	33d0      	adds	r3, #208	@ 0xd0
 80080ec:	429c      	cmp	r4, r3
 80080ee:	d105      	bne.n	80080fc <std+0x54>
 80080f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f8:	f000 b9e4 	b.w	80084c4 <__retarget_lock_init_recursive>
 80080fc:	bd10      	pop	{r4, pc}
 80080fe:	bf00      	nop
 8008100:	080082e9 	.word	0x080082e9
 8008104:	0800830f 	.word	0x0800830f
 8008108:	08008347 	.word	0x08008347
 800810c:	0800836b 	.word	0x0800836b
 8008110:	20000ab0 	.word	0x20000ab0

08008114 <stdio_exit_handler>:
 8008114:	4a02      	ldr	r2, [pc, #8]	@ (8008120 <stdio_exit_handler+0xc>)
 8008116:	4903      	ldr	r1, [pc, #12]	@ (8008124 <stdio_exit_handler+0x10>)
 8008118:	4803      	ldr	r0, [pc, #12]	@ (8008128 <stdio_exit_handler+0x14>)
 800811a:	f000 b869 	b.w	80081f0 <_fwalk_sglue>
 800811e:	bf00      	nop
 8008120:	20000044 	.word	0x20000044
 8008124:	0800b5b1 	.word	0x0800b5b1
 8008128:	20000058 	.word	0x20000058

0800812c <cleanup_stdio>:
 800812c:	6841      	ldr	r1, [r0, #4]
 800812e:	4b0c      	ldr	r3, [pc, #48]	@ (8008160 <cleanup_stdio+0x34>)
 8008130:	4299      	cmp	r1, r3
 8008132:	b510      	push	{r4, lr}
 8008134:	4604      	mov	r4, r0
 8008136:	d001      	beq.n	800813c <cleanup_stdio+0x10>
 8008138:	f003 fa3a 	bl	800b5b0 <_fclose_r>
 800813c:	68a1      	ldr	r1, [r4, #8]
 800813e:	4b09      	ldr	r3, [pc, #36]	@ (8008164 <cleanup_stdio+0x38>)
 8008140:	4299      	cmp	r1, r3
 8008142:	d002      	beq.n	800814a <cleanup_stdio+0x1e>
 8008144:	4620      	mov	r0, r4
 8008146:	f003 fa33 	bl	800b5b0 <_fclose_r>
 800814a:	68e1      	ldr	r1, [r4, #12]
 800814c:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <cleanup_stdio+0x3c>)
 800814e:	4299      	cmp	r1, r3
 8008150:	d004      	beq.n	800815c <cleanup_stdio+0x30>
 8008152:	4620      	mov	r0, r4
 8008154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008158:	f003 ba2a 	b.w	800b5b0 <_fclose_r>
 800815c:	bd10      	pop	{r4, pc}
 800815e:	bf00      	nop
 8008160:	20000ab0 	.word	0x20000ab0
 8008164:	20000b18 	.word	0x20000b18
 8008168:	20000b80 	.word	0x20000b80

0800816c <global_stdio_init.part.0>:
 800816c:	b510      	push	{r4, lr}
 800816e:	4b0b      	ldr	r3, [pc, #44]	@ (800819c <global_stdio_init.part.0+0x30>)
 8008170:	4c0b      	ldr	r4, [pc, #44]	@ (80081a0 <global_stdio_init.part.0+0x34>)
 8008172:	4a0c      	ldr	r2, [pc, #48]	@ (80081a4 <global_stdio_init.part.0+0x38>)
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	4620      	mov	r0, r4
 8008178:	2200      	movs	r2, #0
 800817a:	2104      	movs	r1, #4
 800817c:	f7ff ff94 	bl	80080a8 <std>
 8008180:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008184:	2201      	movs	r2, #1
 8008186:	2109      	movs	r1, #9
 8008188:	f7ff ff8e 	bl	80080a8 <std>
 800818c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008190:	2202      	movs	r2, #2
 8008192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008196:	2112      	movs	r1, #18
 8008198:	f7ff bf86 	b.w	80080a8 <std>
 800819c:	20000be8 	.word	0x20000be8
 80081a0:	20000ab0 	.word	0x20000ab0
 80081a4:	08008115 	.word	0x08008115

080081a8 <__sfp_lock_acquire>:
 80081a8:	4801      	ldr	r0, [pc, #4]	@ (80081b0 <__sfp_lock_acquire+0x8>)
 80081aa:	f000 b98d 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 80081ae:	bf00      	nop
 80081b0:	20000bf2 	.word	0x20000bf2

080081b4 <__sfp_lock_release>:
 80081b4:	4801      	ldr	r0, [pc, #4]	@ (80081bc <__sfp_lock_release+0x8>)
 80081b6:	f000 b988 	b.w	80084ca <__retarget_lock_release_recursive>
 80081ba:	bf00      	nop
 80081bc:	20000bf2 	.word	0x20000bf2

080081c0 <__sinit>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	f7ff fff0 	bl	80081a8 <__sfp_lock_acquire>
 80081c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081ca:	b11b      	cbz	r3, 80081d4 <__sinit+0x14>
 80081cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d0:	f7ff bff0 	b.w	80081b4 <__sfp_lock_release>
 80081d4:	4b04      	ldr	r3, [pc, #16]	@ (80081e8 <__sinit+0x28>)
 80081d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__sinit+0x2c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f5      	bne.n	80081cc <__sinit+0xc>
 80081e0:	f7ff ffc4 	bl	800816c <global_stdio_init.part.0>
 80081e4:	e7f2      	b.n	80081cc <__sinit+0xc>
 80081e6:	bf00      	nop
 80081e8:	0800812d 	.word	0x0800812d
 80081ec:	20000be8 	.word	0x20000be8

080081f0 <_fwalk_sglue>:
 80081f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f4:	4607      	mov	r7, r0
 80081f6:	4688      	mov	r8, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	2600      	movs	r6, #0
 80081fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008200:	f1b9 0901 	subs.w	r9, r9, #1
 8008204:	d505      	bpl.n	8008212 <_fwalk_sglue+0x22>
 8008206:	6824      	ldr	r4, [r4, #0]
 8008208:	2c00      	cmp	r4, #0
 800820a:	d1f7      	bne.n	80081fc <_fwalk_sglue+0xc>
 800820c:	4630      	mov	r0, r6
 800820e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d907      	bls.n	8008228 <_fwalk_sglue+0x38>
 8008218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800821c:	3301      	adds	r3, #1
 800821e:	d003      	beq.n	8008228 <_fwalk_sglue+0x38>
 8008220:	4629      	mov	r1, r5
 8008222:	4638      	mov	r0, r7
 8008224:	47c0      	blx	r8
 8008226:	4306      	orrs	r6, r0
 8008228:	3568      	adds	r5, #104	@ 0x68
 800822a:	e7e9      	b.n	8008200 <_fwalk_sglue+0x10>

0800822c <snprintf>:
 800822c:	b40c      	push	{r2, r3}
 800822e:	b530      	push	{r4, r5, lr}
 8008230:	4b17      	ldr	r3, [pc, #92]	@ (8008290 <snprintf+0x64>)
 8008232:	1e0c      	subs	r4, r1, #0
 8008234:	681d      	ldr	r5, [r3, #0]
 8008236:	b09d      	sub	sp, #116	@ 0x74
 8008238:	da08      	bge.n	800824c <snprintf+0x20>
 800823a:	238b      	movs	r3, #139	@ 0x8b
 800823c:	602b      	str	r3, [r5, #0]
 800823e:	f04f 30ff 	mov.w	r0, #4294967295
 8008242:	b01d      	add	sp, #116	@ 0x74
 8008244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008248:	b002      	add	sp, #8
 800824a:	4770      	bx	lr
 800824c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008250:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008254:	bf14      	ite	ne
 8008256:	f104 33ff 	addne.w	r3, r4, #4294967295
 800825a:	4623      	moveq	r3, r4
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	9307      	str	r3, [sp, #28]
 8008260:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008264:	9002      	str	r0, [sp, #8]
 8008266:	9006      	str	r0, [sp, #24]
 8008268:	f8ad 3016 	strh.w	r3, [sp, #22]
 800826c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800826e:	ab21      	add	r3, sp, #132	@ 0x84
 8008270:	a902      	add	r1, sp, #8
 8008272:	4628      	mov	r0, r5
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	f000 fe4b 	bl	8008f10 <_svfprintf_r>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	bfbc      	itt	lt
 800827e:	238b      	movlt	r3, #139	@ 0x8b
 8008280:	602b      	strlt	r3, [r5, #0]
 8008282:	2c00      	cmp	r4, #0
 8008284:	d0dd      	beq.n	8008242 <snprintf+0x16>
 8008286:	9b02      	ldr	r3, [sp, #8]
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	e7d9      	b.n	8008242 <snprintf+0x16>
 800828e:	bf00      	nop
 8008290:	20000050 	.word	0x20000050

08008294 <sscanf>:
 8008294:	b40e      	push	{r1, r2, r3}
 8008296:	b530      	push	{r4, r5, lr}
 8008298:	b09c      	sub	sp, #112	@ 0x70
 800829a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800829c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80082a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80082a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80082a8:	9002      	str	r0, [sp, #8]
 80082aa:	9006      	str	r0, [sp, #24]
 80082ac:	f7f8 f810 	bl	80002d0 <strlen>
 80082b0:	4b0b      	ldr	r3, [pc, #44]	@ (80082e0 <sscanf+0x4c>)
 80082b2:	9003      	str	r0, [sp, #12]
 80082b4:	9007      	str	r0, [sp, #28]
 80082b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082b8:	480a      	ldr	r0, [pc, #40]	@ (80082e4 <sscanf+0x50>)
 80082ba:	9401      	str	r4, [sp, #4]
 80082bc:	2300      	movs	r3, #0
 80082be:	930e      	str	r3, [sp, #56]	@ 0x38
 80082c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082ca:	462a      	mov	r2, r5
 80082cc:	4623      	mov	r3, r4
 80082ce:	a902      	add	r1, sp, #8
 80082d0:	6800      	ldr	r0, [r0, #0]
 80082d2:	f001 fffb 	bl	800a2cc <__ssvfscanf_r>
 80082d6:	b01c      	add	sp, #112	@ 0x70
 80082d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082dc:	b003      	add	sp, #12
 80082de:	4770      	bx	lr
 80082e0:	0800830b 	.word	0x0800830b
 80082e4:	20000050 	.word	0x20000050

080082e8 <__sread>:
 80082e8:	b510      	push	{r4, lr}
 80082ea:	460c      	mov	r4, r1
 80082ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f0:	f000 f89a 	bl	8008428 <_read_r>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	bfab      	itete	ge
 80082f8:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 80082fa:	89a3      	ldrhlt	r3, [r4, #12]
 80082fc:	181b      	addge	r3, r3, r0
 80082fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008302:	bfac      	ite	ge
 8008304:	6523      	strge	r3, [r4, #80]	@ 0x50
 8008306:	81a3      	strhlt	r3, [r4, #12]
 8008308:	bd10      	pop	{r4, pc}

0800830a <__seofread>:
 800830a:	2000      	movs	r0, #0
 800830c:	4770      	bx	lr

0800830e <__swrite>:
 800830e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008312:	461f      	mov	r7, r3
 8008314:	898b      	ldrh	r3, [r1, #12]
 8008316:	05db      	lsls	r3, r3, #23
 8008318:	4605      	mov	r5, r0
 800831a:	460c      	mov	r4, r1
 800831c:	4616      	mov	r6, r2
 800831e:	d505      	bpl.n	800832c <__swrite+0x1e>
 8008320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008324:	2302      	movs	r3, #2
 8008326:	2200      	movs	r2, #0
 8008328:	f000 f86c 	bl	8008404 <_lseek_r>
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	4632      	mov	r2, r6
 800833a:	463b      	mov	r3, r7
 800833c:	4628      	mov	r0, r5
 800833e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008342:	f000 b883 	b.w	800844c <_write_r>

08008346 <__sseek>:
 8008346:	b510      	push	{r4, lr}
 8008348:	460c      	mov	r4, r1
 800834a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800834e:	f000 f859 	bl	8008404 <_lseek_r>
 8008352:	1c43      	adds	r3, r0, #1
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	bf15      	itete	ne
 8008358:	6520      	strne	r0, [r4, #80]	@ 0x50
 800835a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800835e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008362:	81a3      	strheq	r3, [r4, #12]
 8008364:	bf18      	it	ne
 8008366:	81a3      	strhne	r3, [r4, #12]
 8008368:	bd10      	pop	{r4, pc}

0800836a <__sclose>:
 800836a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836e:	f000 b839 	b.w	80083e4 <_close_r>

08008372 <memmove>:
 8008372:	4288      	cmp	r0, r1
 8008374:	b510      	push	{r4, lr}
 8008376:	eb01 0402 	add.w	r4, r1, r2
 800837a:	d902      	bls.n	8008382 <memmove+0x10>
 800837c:	4284      	cmp	r4, r0
 800837e:	4623      	mov	r3, r4
 8008380:	d807      	bhi.n	8008392 <memmove+0x20>
 8008382:	1e43      	subs	r3, r0, #1
 8008384:	42a1      	cmp	r1, r4
 8008386:	d008      	beq.n	800839a <memmove+0x28>
 8008388:	f811 2b01 	ldrb.w	r2, [r1], #1
 800838c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008390:	e7f8      	b.n	8008384 <memmove+0x12>
 8008392:	4402      	add	r2, r0
 8008394:	4601      	mov	r1, r0
 8008396:	428a      	cmp	r2, r1
 8008398:	d100      	bne.n	800839c <memmove+0x2a>
 800839a:	bd10      	pop	{r4, pc}
 800839c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083a4:	e7f7      	b.n	8008396 <memmove+0x24>

080083a6 <memset>:
 80083a6:	4402      	add	r2, r0
 80083a8:	4603      	mov	r3, r0
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d100      	bne.n	80083b0 <memset+0xa>
 80083ae:	4770      	bx	lr
 80083b0:	f803 1b01 	strb.w	r1, [r3], #1
 80083b4:	e7f9      	b.n	80083aa <memset+0x4>

080083b6 <strncpy>:
 80083b6:	b510      	push	{r4, lr}
 80083b8:	3901      	subs	r1, #1
 80083ba:	4603      	mov	r3, r0
 80083bc:	b132      	cbz	r2, 80083cc <strncpy+0x16>
 80083be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80083c2:	f803 4b01 	strb.w	r4, [r3], #1
 80083c6:	3a01      	subs	r2, #1
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	d1f7      	bne.n	80083bc <strncpy+0x6>
 80083cc:	441a      	add	r2, r3
 80083ce:	2100      	movs	r1, #0
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d100      	bne.n	80083d6 <strncpy+0x20>
 80083d4:	bd10      	pop	{r4, pc}
 80083d6:	f803 1b01 	strb.w	r1, [r3], #1
 80083da:	e7f9      	b.n	80083d0 <strncpy+0x1a>

080083dc <_localeconv_r>:
 80083dc:	4800      	ldr	r0, [pc, #0]	@ (80083e0 <_localeconv_r+0x4>)
 80083de:	4770      	bx	lr
 80083e0:	2000067c 	.word	0x2000067c

080083e4 <_close_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4d06      	ldr	r5, [pc, #24]	@ (8008400 <_close_r+0x1c>)
 80083e8:	2300      	movs	r3, #0
 80083ea:	4604      	mov	r4, r0
 80083ec:	4608      	mov	r0, r1
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	f7fa fac0 	bl	8002974 <_close>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d102      	bne.n	80083fe <_close_r+0x1a>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b103      	cbz	r3, 80083fe <_close_r+0x1a>
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	20000bec 	.word	0x20000bec

08008404 <_lseek_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d07      	ldr	r5, [pc, #28]	@ (8008424 <_lseek_r+0x20>)
 8008408:	4604      	mov	r4, r0
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	2200      	movs	r2, #0
 8008410:	602a      	str	r2, [r5, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	f7fa fad5 	bl	80029c2 <_lseek>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_lseek_r+0x1e>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_lseek_r+0x1e>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	20000bec 	.word	0x20000bec

08008428 <_read_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d07      	ldr	r5, [pc, #28]	@ (8008448 <_read_r+0x20>)
 800842c:	4604      	mov	r4, r0
 800842e:	4608      	mov	r0, r1
 8008430:	4611      	mov	r1, r2
 8008432:	2200      	movs	r2, #0
 8008434:	602a      	str	r2, [r5, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	f7fa fa63 	bl	8002902 <_read>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_read_r+0x1e>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_read_r+0x1e>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	20000bec 	.word	0x20000bec

0800844c <_write_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	@ (800846c <_write_r+0x20>)
 8008450:	4604      	mov	r4, r0
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	2200      	movs	r2, #0
 8008458:	602a      	str	r2, [r5, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f7fa fa6e 	bl	800293c <_write>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_write_r+0x1e>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_write_r+0x1e>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20000bec 	.word	0x20000bec

08008470 <__errno>:
 8008470:	4b01      	ldr	r3, [pc, #4]	@ (8008478 <__errno+0x8>)
 8008472:	6818      	ldr	r0, [r3, #0]
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20000050 	.word	0x20000050

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	4d0d      	ldr	r5, [pc, #52]	@ (80084b4 <__libc_init_array+0x38>)
 8008480:	4c0d      	ldr	r4, [pc, #52]	@ (80084b8 <__libc_init_array+0x3c>)
 8008482:	1b64      	subs	r4, r4, r5
 8008484:	10a4      	asrs	r4, r4, #2
 8008486:	2600      	movs	r6, #0
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	4d0b      	ldr	r5, [pc, #44]	@ (80084bc <__libc_init_array+0x40>)
 800848e:	4c0c      	ldr	r4, [pc, #48]	@ (80084c0 <__libc_init_array+0x44>)
 8008490:	f007 fa70 	bl	800f974 <_init>
 8008494:	1b64      	subs	r4, r4, r5
 8008496:	10a4      	asrs	r4, r4, #2
 8008498:	2600      	movs	r6, #0
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	0800ff00 	.word	0x0800ff00
 80084b8:	0800ff00 	.word	0x0800ff00
 80084bc:	0800ff00 	.word	0x0800ff00
 80084c0:	0800ff0c 	.word	0x0800ff0c

080084c4 <__retarget_lock_init_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_close_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__retarget_lock_acquire_recursive>:
 80084c8:	4770      	bx	lr

080084ca <__retarget_lock_release_recursive>:
 80084ca:	4770      	bx	lr

080084cc <memcpy>:
 80084cc:	440a      	add	r2, r1
 80084ce:	4291      	cmp	r1, r2
 80084d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084d4:	d100      	bne.n	80084d8 <memcpy+0xc>
 80084d6:	4770      	bx	lr
 80084d8:	b510      	push	{r4, lr}
 80084da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e2:	4291      	cmp	r1, r2
 80084e4:	d1f9      	bne.n	80084da <memcpy+0xe>
 80084e6:	bd10      	pop	{r4, pc}

080084e8 <register_fini>:
 80084e8:	4b02      	ldr	r3, [pc, #8]	@ (80084f4 <register_fini+0xc>)
 80084ea:	b113      	cbz	r3, 80084f2 <register_fini+0xa>
 80084ec:	4802      	ldr	r0, [pc, #8]	@ (80084f8 <register_fini+0x10>)
 80084ee:	f000 b805 	b.w	80084fc <atexit>
 80084f2:	4770      	bx	lr
 80084f4:	00000000 	.word	0x00000000
 80084f8:	0800b895 	.word	0x0800b895

080084fc <atexit>:
 80084fc:	2300      	movs	r3, #0
 80084fe:	4601      	mov	r1, r0
 8008500:	461a      	mov	r2, r3
 8008502:	4618      	mov	r0, r3
 8008504:	f003 ba22 	b.w	800b94c <__register_exitproc>

08008508 <_malloc_trim_r>:
 8008508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800850c:	4606      	mov	r6, r0
 800850e:	2008      	movs	r0, #8
 8008510:	4689      	mov	r9, r1
 8008512:	f003 f9d3 	bl	800b8bc <sysconf>
 8008516:	4f24      	ldr	r7, [pc, #144]	@ (80085a8 <_malloc_trim_r+0xa0>)
 8008518:	4680      	mov	r8, r0
 800851a:	4630      	mov	r0, r6
 800851c:	f000 fb44 	bl	8008ba8 <__malloc_lock>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	685d      	ldr	r5, [r3, #4]
 8008524:	f025 0503 	bic.w	r5, r5, #3
 8008528:	f1a5 0411 	sub.w	r4, r5, #17
 800852c:	eba4 0409 	sub.w	r4, r4, r9
 8008530:	4444      	add	r4, r8
 8008532:	fbb4 f4f8 	udiv	r4, r4, r8
 8008536:	3c01      	subs	r4, #1
 8008538:	fb08 f404 	mul.w	r4, r8, r4
 800853c:	45a0      	cmp	r8, r4
 800853e:	dd05      	ble.n	800854c <_malloc_trim_r+0x44>
 8008540:	4630      	mov	r0, r6
 8008542:	f000 fb37 	bl	8008bb4 <__malloc_unlock>
 8008546:	2000      	movs	r0, #0
 8008548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854c:	2100      	movs	r1, #0
 800854e:	4630      	mov	r0, r6
 8008550:	f003 f990 	bl	800b874 <_sbrk_r>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	442b      	add	r3, r5
 8008558:	4298      	cmp	r0, r3
 800855a:	d1f1      	bne.n	8008540 <_malloc_trim_r+0x38>
 800855c:	4261      	negs	r1, r4
 800855e:	4630      	mov	r0, r6
 8008560:	f003 f988 	bl	800b874 <_sbrk_r>
 8008564:	3001      	adds	r0, #1
 8008566:	d110      	bne.n	800858a <_malloc_trim_r+0x82>
 8008568:	2100      	movs	r1, #0
 800856a:	4630      	mov	r0, r6
 800856c:	f003 f982 	bl	800b874 <_sbrk_r>
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	1a83      	subs	r3, r0, r2
 8008574:	2b0f      	cmp	r3, #15
 8008576:	dde3      	ble.n	8008540 <_malloc_trim_r+0x38>
 8008578:	490c      	ldr	r1, [pc, #48]	@ (80085ac <_malloc_trim_r+0xa4>)
 800857a:	6809      	ldr	r1, [r1, #0]
 800857c:	1a40      	subs	r0, r0, r1
 800857e:	490c      	ldr	r1, [pc, #48]	@ (80085b0 <_malloc_trim_r+0xa8>)
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	6008      	str	r0, [r1, #0]
 8008586:	6053      	str	r3, [r2, #4]
 8008588:	e7da      	b.n	8008540 <_malloc_trim_r+0x38>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	4a08      	ldr	r2, [pc, #32]	@ (80085b0 <_malloc_trim_r+0xa8>)
 800858e:	1b2d      	subs	r5, r5, r4
 8008590:	f045 0501 	orr.w	r5, r5, #1
 8008594:	605d      	str	r5, [r3, #4]
 8008596:	6813      	ldr	r3, [r2, #0]
 8008598:	4630      	mov	r0, r6
 800859a:	1b1b      	subs	r3, r3, r4
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	f000 fb09 	bl	8008bb4 <__malloc_unlock>
 80085a2:	2001      	movs	r0, #1
 80085a4:	e7d0      	b.n	8008548 <_malloc_trim_r+0x40>
 80085a6:	bf00      	nop
 80085a8:	20000184 	.word	0x20000184
 80085ac:	2000017c 	.word	0x2000017c
 80085b0:	20000bf8 	.word	0x20000bf8

080085b4 <_free_r>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	4604      	mov	r4, r0
 80085b8:	460f      	mov	r7, r1
 80085ba:	2900      	cmp	r1, #0
 80085bc:	f000 80b1 	beq.w	8008722 <_free_r+0x16e>
 80085c0:	f000 faf2 	bl	8008ba8 <__malloc_lock>
 80085c4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80085c8:	4d56      	ldr	r5, [pc, #344]	@ (8008724 <_free_r+0x170>)
 80085ca:	f022 0001 	bic.w	r0, r2, #1
 80085ce:	f1a7 0308 	sub.w	r3, r7, #8
 80085d2:	eb03 0c00 	add.w	ip, r3, r0
 80085d6:	68a9      	ldr	r1, [r5, #8]
 80085d8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80085dc:	4561      	cmp	r1, ip
 80085de:	f026 0603 	bic.w	r6, r6, #3
 80085e2:	f002 0201 	and.w	r2, r2, #1
 80085e6:	d11b      	bne.n	8008620 <_free_r+0x6c>
 80085e8:	4406      	add	r6, r0
 80085ea:	b93a      	cbnz	r2, 80085fc <_free_r+0x48>
 80085ec:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	4416      	add	r6, r2
 80085f4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80085f8:	60ca      	str	r2, [r1, #12]
 80085fa:	6091      	str	r1, [r2, #8]
 80085fc:	f046 0201 	orr.w	r2, r6, #1
 8008600:	605a      	str	r2, [r3, #4]
 8008602:	60ab      	str	r3, [r5, #8]
 8008604:	4b48      	ldr	r3, [pc, #288]	@ (8008728 <_free_r+0x174>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	42b3      	cmp	r3, r6
 800860a:	d804      	bhi.n	8008616 <_free_r+0x62>
 800860c:	4b47      	ldr	r3, [pc, #284]	@ (800872c <_free_r+0x178>)
 800860e:	4620      	mov	r0, r4
 8008610:	6819      	ldr	r1, [r3, #0]
 8008612:	f7ff ff79 	bl	8008508 <_malloc_trim_r>
 8008616:	4620      	mov	r0, r4
 8008618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800861c:	f000 baca 	b.w	8008bb4 <__malloc_unlock>
 8008620:	f8cc 6004 	str.w	r6, [ip, #4]
 8008624:	2a00      	cmp	r2, #0
 8008626:	d138      	bne.n	800869a <_free_r+0xe6>
 8008628:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800862c:	1a5b      	subs	r3, r3, r1
 800862e:	4408      	add	r0, r1
 8008630:	6899      	ldr	r1, [r3, #8]
 8008632:	f105 0708 	add.w	r7, r5, #8
 8008636:	42b9      	cmp	r1, r7
 8008638:	d031      	beq.n	800869e <_free_r+0xea>
 800863a:	68df      	ldr	r7, [r3, #12]
 800863c:	60cf      	str	r7, [r1, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	eb0c 0106 	add.w	r1, ip, r6
 8008644:	6849      	ldr	r1, [r1, #4]
 8008646:	07c9      	lsls	r1, r1, #31
 8008648:	d40b      	bmi.n	8008662 <_free_r+0xae>
 800864a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800864e:	4430      	add	r0, r6
 8008650:	bb3a      	cbnz	r2, 80086a2 <_free_r+0xee>
 8008652:	4e37      	ldr	r6, [pc, #220]	@ (8008730 <_free_r+0x17c>)
 8008654:	42b1      	cmp	r1, r6
 8008656:	d124      	bne.n	80086a2 <_free_r+0xee>
 8008658:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800865c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008660:	2201      	movs	r2, #1
 8008662:	f040 0101 	orr.w	r1, r0, #1
 8008666:	6059      	str	r1, [r3, #4]
 8008668:	5018      	str	r0, [r3, r0]
 800866a:	2a00      	cmp	r2, #0
 800866c:	d1d3      	bne.n	8008616 <_free_r+0x62>
 800866e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8008672:	d21b      	bcs.n	80086ac <_free_r+0xf8>
 8008674:	08c2      	lsrs	r2, r0, #3
 8008676:	2101      	movs	r1, #1
 8008678:	0940      	lsrs	r0, r0, #5
 800867a:	4081      	lsls	r1, r0
 800867c:	6868      	ldr	r0, [r5, #4]
 800867e:	3201      	adds	r2, #1
 8008680:	4301      	orrs	r1, r0
 8008682:	6069      	str	r1, [r5, #4]
 8008684:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8008688:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800868c:	3908      	subs	r1, #8
 800868e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008692:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8008696:	60c3      	str	r3, [r0, #12]
 8008698:	e7bd      	b.n	8008616 <_free_r+0x62>
 800869a:	2200      	movs	r2, #0
 800869c:	e7d0      	b.n	8008640 <_free_r+0x8c>
 800869e:	2201      	movs	r2, #1
 80086a0:	e7ce      	b.n	8008640 <_free_r+0x8c>
 80086a2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80086a6:	60ce      	str	r6, [r1, #12]
 80086a8:	60b1      	str	r1, [r6, #8]
 80086aa:	e7da      	b.n	8008662 <_free_r+0xae>
 80086ac:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 80086b0:	ea4f 2250 	mov.w	r2, r0, lsr #9
 80086b4:	d214      	bcs.n	80086e0 <_free_r+0x12c>
 80086b6:	0982      	lsrs	r2, r0, #6
 80086b8:	3238      	adds	r2, #56	@ 0x38
 80086ba:	1c51      	adds	r1, r2, #1
 80086bc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80086c0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80086c4:	428e      	cmp	r6, r1
 80086c6:	d125      	bne.n	8008714 <_free_r+0x160>
 80086c8:	2001      	movs	r0, #1
 80086ca:	1092      	asrs	r2, r2, #2
 80086cc:	fa00 f202 	lsl.w	r2, r0, r2
 80086d0:	6868      	ldr	r0, [r5, #4]
 80086d2:	4302      	orrs	r2, r0
 80086d4:	606a      	str	r2, [r5, #4]
 80086d6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80086da:	60b3      	str	r3, [r6, #8]
 80086dc:	60cb      	str	r3, [r1, #12]
 80086de:	e79a      	b.n	8008616 <_free_r+0x62>
 80086e0:	2a14      	cmp	r2, #20
 80086e2:	d801      	bhi.n	80086e8 <_free_r+0x134>
 80086e4:	325b      	adds	r2, #91	@ 0x5b
 80086e6:	e7e8      	b.n	80086ba <_free_r+0x106>
 80086e8:	2a54      	cmp	r2, #84	@ 0x54
 80086ea:	d802      	bhi.n	80086f2 <_free_r+0x13e>
 80086ec:	0b02      	lsrs	r2, r0, #12
 80086ee:	326e      	adds	r2, #110	@ 0x6e
 80086f0:	e7e3      	b.n	80086ba <_free_r+0x106>
 80086f2:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80086f6:	d802      	bhi.n	80086fe <_free_r+0x14a>
 80086f8:	0bc2      	lsrs	r2, r0, #15
 80086fa:	3277      	adds	r2, #119	@ 0x77
 80086fc:	e7dd      	b.n	80086ba <_free_r+0x106>
 80086fe:	f240 5154 	movw	r1, #1364	@ 0x554
 8008702:	428a      	cmp	r2, r1
 8008704:	bf9a      	itte	ls
 8008706:	0c82      	lsrls	r2, r0, #18
 8008708:	327c      	addls	r2, #124	@ 0x7c
 800870a:	227e      	movhi	r2, #126	@ 0x7e
 800870c:	e7d5      	b.n	80086ba <_free_r+0x106>
 800870e:	6889      	ldr	r1, [r1, #8]
 8008710:	428e      	cmp	r6, r1
 8008712:	d004      	beq.n	800871e <_free_r+0x16a>
 8008714:	684a      	ldr	r2, [r1, #4]
 8008716:	f022 0203 	bic.w	r2, r2, #3
 800871a:	4282      	cmp	r2, r0
 800871c:	d8f7      	bhi.n	800870e <_free_r+0x15a>
 800871e:	68ce      	ldr	r6, [r1, #12]
 8008720:	e7d9      	b.n	80086d6 <_free_r+0x122>
 8008722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008724:	20000184 	.word	0x20000184
 8008728:	20000180 	.word	0x20000180
 800872c:	20000c28 	.word	0x20000c28
 8008730:	2000018c 	.word	0x2000018c

08008734 <_malloc_r>:
 8008734:	f101 030b 	add.w	r3, r1, #11
 8008738:	2b16      	cmp	r3, #22
 800873a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873e:	4605      	mov	r5, r0
 8008740:	d906      	bls.n	8008750 <_malloc_r+0x1c>
 8008742:	f033 0707 	bics.w	r7, r3, #7
 8008746:	d504      	bpl.n	8008752 <_malloc_r+0x1e>
 8008748:	230c      	movs	r3, #12
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	2400      	movs	r4, #0
 800874e:	e1a3      	b.n	8008a98 <_malloc_r+0x364>
 8008750:	2710      	movs	r7, #16
 8008752:	42b9      	cmp	r1, r7
 8008754:	d8f8      	bhi.n	8008748 <_malloc_r+0x14>
 8008756:	4628      	mov	r0, r5
 8008758:	f000 fa26 	bl	8008ba8 <__malloc_lock>
 800875c:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8008760:	4eaf      	ldr	r6, [pc, #700]	@ (8008a20 <_malloc_r+0x2ec>)
 8008762:	d237      	bcs.n	80087d4 <_malloc_r+0xa0>
 8008764:	f107 0208 	add.w	r2, r7, #8
 8008768:	4432      	add	r2, r6
 800876a:	f1a2 0108 	sub.w	r1, r2, #8
 800876e:	6854      	ldr	r4, [r2, #4]
 8008770:	428c      	cmp	r4, r1
 8008772:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8008776:	d102      	bne.n	800877e <_malloc_r+0x4a>
 8008778:	68d4      	ldr	r4, [r2, #12]
 800877a:	42a2      	cmp	r2, r4
 800877c:	d010      	beq.n	80087a0 <_malloc_r+0x6c>
 800877e:	6863      	ldr	r3, [r4, #4]
 8008780:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008784:	f023 0303 	bic.w	r3, r3, #3
 8008788:	60ca      	str	r2, [r1, #12]
 800878a:	4423      	add	r3, r4
 800878c:	6091      	str	r1, [r2, #8]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	f042 0201 	orr.w	r2, r2, #1
 8008794:	605a      	str	r2, [r3, #4]
 8008796:	4628      	mov	r0, r5
 8008798:	f000 fa0c 	bl	8008bb4 <__malloc_unlock>
 800879c:	3408      	adds	r4, #8
 800879e:	e17b      	b.n	8008a98 <_malloc_r+0x364>
 80087a0:	3302      	adds	r3, #2
 80087a2:	6934      	ldr	r4, [r6, #16]
 80087a4:	499f      	ldr	r1, [pc, #636]	@ (8008a24 <_malloc_r+0x2f0>)
 80087a6:	428c      	cmp	r4, r1
 80087a8:	d077      	beq.n	800889a <_malloc_r+0x166>
 80087aa:	6862      	ldr	r2, [r4, #4]
 80087ac:	f022 0c03 	bic.w	ip, r2, #3
 80087b0:	ebac 0007 	sub.w	r0, ip, r7
 80087b4:	280f      	cmp	r0, #15
 80087b6:	dd48      	ble.n	800884a <_malloc_r+0x116>
 80087b8:	19e2      	adds	r2, r4, r7
 80087ba:	f040 0301 	orr.w	r3, r0, #1
 80087be:	f047 0701 	orr.w	r7, r7, #1
 80087c2:	6067      	str	r7, [r4, #4]
 80087c4:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80087c8:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80087cc:	6053      	str	r3, [r2, #4]
 80087ce:	f844 000c 	str.w	r0, [r4, ip]
 80087d2:	e7e0      	b.n	8008796 <_malloc_r+0x62>
 80087d4:	0a7b      	lsrs	r3, r7, #9
 80087d6:	d02a      	beq.n	800882e <_malloc_r+0xfa>
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d812      	bhi.n	8008802 <_malloc_r+0xce>
 80087dc:	09bb      	lsrs	r3, r7, #6
 80087de:	3338      	adds	r3, #56	@ 0x38
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80087e6:	f1a2 0c08 	sub.w	ip, r2, #8
 80087ea:	6854      	ldr	r4, [r2, #4]
 80087ec:	4564      	cmp	r4, ip
 80087ee:	d006      	beq.n	80087fe <_malloc_r+0xca>
 80087f0:	6862      	ldr	r2, [r4, #4]
 80087f2:	f022 0203 	bic.w	r2, r2, #3
 80087f6:	1bd0      	subs	r0, r2, r7
 80087f8:	280f      	cmp	r0, #15
 80087fa:	dd1c      	ble.n	8008836 <_malloc_r+0x102>
 80087fc:	3b01      	subs	r3, #1
 80087fe:	3301      	adds	r3, #1
 8008800:	e7cf      	b.n	80087a2 <_malloc_r+0x6e>
 8008802:	2b14      	cmp	r3, #20
 8008804:	d801      	bhi.n	800880a <_malloc_r+0xd6>
 8008806:	335b      	adds	r3, #91	@ 0x5b
 8008808:	e7ea      	b.n	80087e0 <_malloc_r+0xac>
 800880a:	2b54      	cmp	r3, #84	@ 0x54
 800880c:	d802      	bhi.n	8008814 <_malloc_r+0xe0>
 800880e:	0b3b      	lsrs	r3, r7, #12
 8008810:	336e      	adds	r3, #110	@ 0x6e
 8008812:	e7e5      	b.n	80087e0 <_malloc_r+0xac>
 8008814:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8008818:	d802      	bhi.n	8008820 <_malloc_r+0xec>
 800881a:	0bfb      	lsrs	r3, r7, #15
 800881c:	3377      	adds	r3, #119	@ 0x77
 800881e:	e7df      	b.n	80087e0 <_malloc_r+0xac>
 8008820:	f240 5254 	movw	r2, #1364	@ 0x554
 8008824:	4293      	cmp	r3, r2
 8008826:	d804      	bhi.n	8008832 <_malloc_r+0xfe>
 8008828:	0cbb      	lsrs	r3, r7, #18
 800882a:	337c      	adds	r3, #124	@ 0x7c
 800882c:	e7d8      	b.n	80087e0 <_malloc_r+0xac>
 800882e:	233f      	movs	r3, #63	@ 0x3f
 8008830:	e7d6      	b.n	80087e0 <_malloc_r+0xac>
 8008832:	237e      	movs	r3, #126	@ 0x7e
 8008834:	e7d4      	b.n	80087e0 <_malloc_r+0xac>
 8008836:	2800      	cmp	r0, #0
 8008838:	68e1      	ldr	r1, [r4, #12]
 800883a:	db04      	blt.n	8008846 <_malloc_r+0x112>
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	60d9      	str	r1, [r3, #12]
 8008840:	608b      	str	r3, [r1, #8]
 8008842:	18a3      	adds	r3, r4, r2
 8008844:	e7a3      	b.n	800878e <_malloc_r+0x5a>
 8008846:	460c      	mov	r4, r1
 8008848:	e7d0      	b.n	80087ec <_malloc_r+0xb8>
 800884a:	2800      	cmp	r0, #0
 800884c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8008850:	db07      	blt.n	8008862 <_malloc_r+0x12e>
 8008852:	44a4      	add	ip, r4
 8008854:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008858:	f043 0301 	orr.w	r3, r3, #1
 800885c:	f8cc 3004 	str.w	r3, [ip, #4]
 8008860:	e799      	b.n	8008796 <_malloc_r+0x62>
 8008862:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8008866:	6870      	ldr	r0, [r6, #4]
 8008868:	f080 8095 	bcs.w	8008996 <_malloc_r+0x262>
 800886c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8008870:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8008874:	f04f 0c01 	mov.w	ip, #1
 8008878:	3201      	adds	r2, #1
 800887a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800887e:	ea4c 0000 	orr.w	r0, ip, r0
 8008882:	6070      	str	r0, [r6, #4]
 8008884:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8008888:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800888c:	3808      	subs	r0, #8
 800888e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8008892:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8008896:	f8cc 400c 	str.w	r4, [ip, #12]
 800889a:	1098      	asrs	r0, r3, #2
 800889c:	2201      	movs	r2, #1
 800889e:	4082      	lsls	r2, r0
 80088a0:	6870      	ldr	r0, [r6, #4]
 80088a2:	4290      	cmp	r0, r2
 80088a4:	d326      	bcc.n	80088f4 <_malloc_r+0x1c0>
 80088a6:	4210      	tst	r0, r2
 80088a8:	d106      	bne.n	80088b8 <_malloc_r+0x184>
 80088aa:	f023 0303 	bic.w	r3, r3, #3
 80088ae:	0052      	lsls	r2, r2, #1
 80088b0:	4210      	tst	r0, r2
 80088b2:	f103 0304 	add.w	r3, r3, #4
 80088b6:	d0fa      	beq.n	80088ae <_malloc_r+0x17a>
 80088b8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80088bc:	46c1      	mov	r9, r8
 80088be:	469e      	mov	lr, r3
 80088c0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80088c4:	454c      	cmp	r4, r9
 80088c6:	f040 80b9 	bne.w	8008a3c <_malloc_r+0x308>
 80088ca:	f10e 0e01 	add.w	lr, lr, #1
 80088ce:	f01e 0f03 	tst.w	lr, #3
 80088d2:	f109 0908 	add.w	r9, r9, #8
 80088d6:	d1f3      	bne.n	80088c0 <_malloc_r+0x18c>
 80088d8:	0798      	lsls	r0, r3, #30
 80088da:	f040 80e3 	bne.w	8008aa4 <_malloc_r+0x370>
 80088de:	6873      	ldr	r3, [r6, #4]
 80088e0:	ea23 0302 	bic.w	r3, r3, r2
 80088e4:	6073      	str	r3, [r6, #4]
 80088e6:	6870      	ldr	r0, [r6, #4]
 80088e8:	0052      	lsls	r2, r2, #1
 80088ea:	4290      	cmp	r0, r2
 80088ec:	d302      	bcc.n	80088f4 <_malloc_r+0x1c0>
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	f040 80e5 	bne.w	8008abe <_malloc_r+0x38a>
 80088f4:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80088f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80088fc:	f023 0903 	bic.w	r9, r3, #3
 8008900:	45b9      	cmp	r9, r7
 8008902:	d304      	bcc.n	800890e <_malloc_r+0x1da>
 8008904:	eba9 0207 	sub.w	r2, r9, r7
 8008908:	2a0f      	cmp	r2, #15
 800890a:	f300 8141 	bgt.w	8008b90 <_malloc_r+0x45c>
 800890e:	4b46      	ldr	r3, [pc, #280]	@ (8008a28 <_malloc_r+0x2f4>)
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	3110      	adds	r1, #16
 8008914:	4439      	add	r1, r7
 8008916:	2008      	movs	r0, #8
 8008918:	9101      	str	r1, [sp, #4]
 800891a:	f002 ffcf 	bl	800b8bc <sysconf>
 800891e:	4a43      	ldr	r2, [pc, #268]	@ (8008a2c <_malloc_r+0x2f8>)
 8008920:	9901      	ldr	r1, [sp, #4]
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	3301      	adds	r3, #1
 8008926:	bf1f      	itttt	ne
 8008928:	f101 31ff 	addne.w	r1, r1, #4294967295
 800892c:	1809      	addne	r1, r1, r0
 800892e:	4243      	negne	r3, r0
 8008930:	4019      	andne	r1, r3
 8008932:	4680      	mov	r8, r0
 8008934:	4628      	mov	r0, r5
 8008936:	9101      	str	r1, [sp, #4]
 8008938:	f002 ff9c 	bl	800b874 <_sbrk_r>
 800893c:	1c42      	adds	r2, r0, #1
 800893e:	eb0a 0b09 	add.w	fp, sl, r9
 8008942:	4604      	mov	r4, r0
 8008944:	f000 80f7 	beq.w	8008b36 <_malloc_r+0x402>
 8008948:	4583      	cmp	fp, r0
 800894a:	9901      	ldr	r1, [sp, #4]
 800894c:	4a37      	ldr	r2, [pc, #220]	@ (8008a2c <_malloc_r+0x2f8>)
 800894e:	d902      	bls.n	8008956 <_malloc_r+0x222>
 8008950:	45b2      	cmp	sl, r6
 8008952:	f040 80f0 	bne.w	8008b36 <_malloc_r+0x402>
 8008956:	4b36      	ldr	r3, [pc, #216]	@ (8008a30 <_malloc_r+0x2fc>)
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	45a3      	cmp	fp, r4
 800895c:	eb00 0e01 	add.w	lr, r0, r1
 8008960:	f8c3 e000 	str.w	lr, [r3]
 8008964:	f108 3cff 	add.w	ip, r8, #4294967295
 8008968:	f040 80ab 	bne.w	8008ac2 <_malloc_r+0x38e>
 800896c:	ea1b 0f0c 	tst.w	fp, ip
 8008970:	f040 80a7 	bne.w	8008ac2 <_malloc_r+0x38e>
 8008974:	68b2      	ldr	r2, [r6, #8]
 8008976:	4449      	add	r1, r9
 8008978:	f041 0101 	orr.w	r1, r1, #1
 800897c:	6051      	str	r1, [r2, #4]
 800897e:	4a2d      	ldr	r2, [pc, #180]	@ (8008a34 <_malloc_r+0x300>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6811      	ldr	r1, [r2, #0]
 8008984:	428b      	cmp	r3, r1
 8008986:	bf88      	it	hi
 8008988:	6013      	strhi	r3, [r2, #0]
 800898a:	4a2b      	ldr	r2, [pc, #172]	@ (8008a38 <_malloc_r+0x304>)
 800898c:	6811      	ldr	r1, [r2, #0]
 800898e:	428b      	cmp	r3, r1
 8008990:	bf88      	it	hi
 8008992:	6013      	strhi	r3, [r2, #0]
 8008994:	e0cf      	b.n	8008b36 <_malloc_r+0x402>
 8008996:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800899a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800899e:	d218      	bcs.n	80089d2 <_malloc_r+0x29e>
 80089a0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80089a4:	3238      	adds	r2, #56	@ 0x38
 80089a6:	f102 0e01 	add.w	lr, r2, #1
 80089aa:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80089ae:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80089b2:	45f0      	cmp	r8, lr
 80089b4:	d12b      	bne.n	8008a0e <_malloc_r+0x2da>
 80089b6:	1092      	asrs	r2, r2, #2
 80089b8:	f04f 0c01 	mov.w	ip, #1
 80089bc:	fa0c f202 	lsl.w	r2, ip, r2
 80089c0:	4302      	orrs	r2, r0
 80089c2:	6072      	str	r2, [r6, #4]
 80089c4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80089c8:	f8c8 4008 	str.w	r4, [r8, #8]
 80089cc:	f8ce 400c 	str.w	r4, [lr, #12]
 80089d0:	e763      	b.n	800889a <_malloc_r+0x166>
 80089d2:	2a14      	cmp	r2, #20
 80089d4:	d801      	bhi.n	80089da <_malloc_r+0x2a6>
 80089d6:	325b      	adds	r2, #91	@ 0x5b
 80089d8:	e7e5      	b.n	80089a6 <_malloc_r+0x272>
 80089da:	2a54      	cmp	r2, #84	@ 0x54
 80089dc:	d803      	bhi.n	80089e6 <_malloc_r+0x2b2>
 80089de:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80089e2:	326e      	adds	r2, #110	@ 0x6e
 80089e4:	e7df      	b.n	80089a6 <_malloc_r+0x272>
 80089e6:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80089ea:	d803      	bhi.n	80089f4 <_malloc_r+0x2c0>
 80089ec:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80089f0:	3277      	adds	r2, #119	@ 0x77
 80089f2:	e7d8      	b.n	80089a6 <_malloc_r+0x272>
 80089f4:	f240 5e54 	movw	lr, #1364	@ 0x554
 80089f8:	4572      	cmp	r2, lr
 80089fa:	bf9a      	itte	ls
 80089fc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8008a00:	327c      	addls	r2, #124	@ 0x7c
 8008a02:	227e      	movhi	r2, #126	@ 0x7e
 8008a04:	e7cf      	b.n	80089a6 <_malloc_r+0x272>
 8008a06:	f8de e008 	ldr.w	lr, [lr, #8]
 8008a0a:	45f0      	cmp	r8, lr
 8008a0c:	d005      	beq.n	8008a1a <_malloc_r+0x2e6>
 8008a0e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008a12:	f022 0203 	bic.w	r2, r2, #3
 8008a16:	4562      	cmp	r2, ip
 8008a18:	d8f5      	bhi.n	8008a06 <_malloc_r+0x2d2>
 8008a1a:	f8de 800c 	ldr.w	r8, [lr, #12]
 8008a1e:	e7d1      	b.n	80089c4 <_malloc_r+0x290>
 8008a20:	20000184 	.word	0x20000184
 8008a24:	2000018c 	.word	0x2000018c
 8008a28:	20000c28 	.word	0x20000c28
 8008a2c:	2000017c 	.word	0x2000017c
 8008a30:	20000bf8 	.word	0x20000bf8
 8008a34:	20000c24 	.word	0x20000c24
 8008a38:	20000c20 	.word	0x20000c20
 8008a3c:	6860      	ldr	r0, [r4, #4]
 8008a3e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008a42:	f020 0003 	bic.w	r0, r0, #3
 8008a46:	eba0 0a07 	sub.w	sl, r0, r7
 8008a4a:	f1ba 0f0f 	cmp.w	sl, #15
 8008a4e:	dd12      	ble.n	8008a76 <_malloc_r+0x342>
 8008a50:	68a3      	ldr	r3, [r4, #8]
 8008a52:	19e2      	adds	r2, r4, r7
 8008a54:	f047 0701 	orr.w	r7, r7, #1
 8008a58:	6067      	str	r7, [r4, #4]
 8008a5a:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008a5e:	f8cc 3008 	str.w	r3, [ip, #8]
 8008a62:	f04a 0301 	orr.w	r3, sl, #1
 8008a66:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8008a6a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8008a6e:	6053      	str	r3, [r2, #4]
 8008a70:	f844 a000 	str.w	sl, [r4, r0]
 8008a74:	e68f      	b.n	8008796 <_malloc_r+0x62>
 8008a76:	f1ba 0f00 	cmp.w	sl, #0
 8008a7a:	db11      	blt.n	8008aa0 <_malloc_r+0x36c>
 8008a7c:	4420      	add	r0, r4
 8008a7e:	6843      	ldr	r3, [r0, #4]
 8008a80:	f043 0301 	orr.w	r3, r3, #1
 8008a84:	6043      	str	r3, [r0, #4]
 8008a86:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008a90:	f8cc 3008 	str.w	r3, [ip, #8]
 8008a94:	f000 f88e 	bl	8008bb4 <__malloc_unlock>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	b003      	add	sp, #12
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa0:	4664      	mov	r4, ip
 8008aa2:	e70f      	b.n	80088c4 <_malloc_r+0x190>
 8008aa4:	f858 0908 	ldr.w	r0, [r8], #-8
 8008aa8:	4540      	cmp	r0, r8
 8008aaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8008aae:	f43f af13 	beq.w	80088d8 <_malloc_r+0x1a4>
 8008ab2:	e718      	b.n	80088e6 <_malloc_r+0x1b2>
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	0052      	lsls	r2, r2, #1
 8008ab8:	4210      	tst	r0, r2
 8008aba:	d0fb      	beq.n	8008ab4 <_malloc_r+0x380>
 8008abc:	e6fc      	b.n	80088b8 <_malloc_r+0x184>
 8008abe:	4673      	mov	r3, lr
 8008ac0:	e7fa      	b.n	8008ab8 <_malloc_r+0x384>
 8008ac2:	6810      	ldr	r0, [r2, #0]
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	bf1b      	ittet	ne
 8008ac8:	eba4 0b0b 	subne.w	fp, r4, fp
 8008acc:	eb0b 020e 	addne.w	r2, fp, lr
 8008ad0:	6014      	streq	r4, [r2, #0]
 8008ad2:	601a      	strne	r2, [r3, #0]
 8008ad4:	f014 0b07 	ands.w	fp, r4, #7
 8008ad8:	bf1a      	itte	ne
 8008ada:	f1cb 0008 	rsbne	r0, fp, #8
 8008ade:	1824      	addne	r4, r4, r0
 8008ae0:	4658      	moveq	r0, fp
 8008ae2:	1862      	adds	r2, r4, r1
 8008ae4:	ea02 010c 	and.w	r1, r2, ip
 8008ae8:	4480      	add	r8, r0
 8008aea:	eba8 0801 	sub.w	r8, r8, r1
 8008aee:	ea08 080c 	and.w	r8, r8, ip
 8008af2:	4641      	mov	r1, r8
 8008af4:	4628      	mov	r0, r5
 8008af6:	9201      	str	r2, [sp, #4]
 8008af8:	f002 febc 	bl	800b874 <_sbrk_r>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	9a01      	ldr	r2, [sp, #4]
 8008b00:	4b28      	ldr	r3, [pc, #160]	@ (8008ba4 <_malloc_r+0x470>)
 8008b02:	d107      	bne.n	8008b14 <_malloc_r+0x3e0>
 8008b04:	f1bb 0f00 	cmp.w	fp, #0
 8008b08:	d023      	beq.n	8008b52 <_malloc_r+0x41e>
 8008b0a:	f1ab 0008 	sub.w	r0, fp, #8
 8008b0e:	4410      	add	r0, r2
 8008b10:	f04f 0800 	mov.w	r8, #0
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	60b4      	str	r4, [r6, #8]
 8008b18:	1b00      	subs	r0, r0, r4
 8008b1a:	4440      	add	r0, r8
 8008b1c:	4442      	add	r2, r8
 8008b1e:	f040 0001 	orr.w	r0, r0, #1
 8008b22:	45b2      	cmp	sl, r6
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	6060      	str	r0, [r4, #4]
 8008b28:	f43f af29 	beq.w	800897e <_malloc_r+0x24a>
 8008b2c:	f1b9 0f0f 	cmp.w	r9, #15
 8008b30:	d812      	bhi.n	8008b58 <_malloc_r+0x424>
 8008b32:	2301      	movs	r3, #1
 8008b34:	6063      	str	r3, [r4, #4]
 8008b36:	68b3      	ldr	r3, [r6, #8]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	42bb      	cmp	r3, r7
 8008b40:	eba3 0207 	sub.w	r2, r3, r7
 8008b44:	d301      	bcc.n	8008b4a <_malloc_r+0x416>
 8008b46:	2a0f      	cmp	r2, #15
 8008b48:	dc22      	bgt.n	8008b90 <_malloc_r+0x45c>
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 f832 	bl	8008bb4 <__malloc_unlock>
 8008b50:	e5fc      	b.n	800874c <_malloc_r+0x18>
 8008b52:	4610      	mov	r0, r2
 8008b54:	46d8      	mov	r8, fp
 8008b56:	e7dd      	b.n	8008b14 <_malloc_r+0x3e0>
 8008b58:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008b5c:	f1a9 090c 	sub.w	r9, r9, #12
 8008b60:	f029 0907 	bic.w	r9, r9, #7
 8008b64:	f002 0201 	and.w	r2, r2, #1
 8008b68:	ea42 0209 	orr.w	r2, r2, r9
 8008b6c:	f8ca 2004 	str.w	r2, [sl, #4]
 8008b70:	2105      	movs	r1, #5
 8008b72:	eb0a 0209 	add.w	r2, sl, r9
 8008b76:	f1b9 0f0f 	cmp.w	r9, #15
 8008b7a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8008b7e:	f67f aefe 	bls.w	800897e <_malloc_r+0x24a>
 8008b82:	f10a 0108 	add.w	r1, sl, #8
 8008b86:	4628      	mov	r0, r5
 8008b88:	f7ff fd14 	bl	80085b4 <_free_r>
 8008b8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <_malloc_r+0x470>)
 8008b8e:	e6f6      	b.n	800897e <_malloc_r+0x24a>
 8008b90:	68b4      	ldr	r4, [r6, #8]
 8008b92:	f047 0301 	orr.w	r3, r7, #1
 8008b96:	4427      	add	r7, r4
 8008b98:	f042 0201 	orr.w	r2, r2, #1
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	60b7      	str	r7, [r6, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	e5f8      	b.n	8008796 <_malloc_r+0x62>
 8008ba4:	20000bf8 	.word	0x20000bf8

08008ba8 <__malloc_lock>:
 8008ba8:	4801      	ldr	r0, [pc, #4]	@ (8008bb0 <__malloc_lock+0x8>)
 8008baa:	f7ff bc8d 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 8008bae:	bf00      	nop
 8008bb0:	20000bf0 	.word	0x20000bf0

08008bb4 <__malloc_unlock>:
 8008bb4:	4801      	ldr	r0, [pc, #4]	@ (8008bbc <__malloc_unlock+0x8>)
 8008bb6:	f7ff bc88 	b.w	80084ca <__retarget_lock_release_recursive>
 8008bba:	bf00      	nop
 8008bbc:	20000bf0 	.word	0x20000bf0

08008bc0 <_realloc_r>:
 8008bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	4693      	mov	fp, r2
 8008bc8:	460c      	mov	r4, r1
 8008bca:	b929      	cbnz	r1, 8008bd8 <_realloc_r+0x18>
 8008bcc:	4611      	mov	r1, r2
 8008bce:	b003      	add	sp, #12
 8008bd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	f7ff bdae 	b.w	8008734 <_malloc_r>
 8008bd8:	f7ff ffe6 	bl	8008ba8 <__malloc_lock>
 8008bdc:	f10b 080b 	add.w	r8, fp, #11
 8008be0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008be4:	f1b8 0f16 	cmp.w	r8, #22
 8008be8:	f1a4 0908 	sub.w	r9, r4, #8
 8008bec:	f025 0603 	bic.w	r6, r5, #3
 8008bf0:	d908      	bls.n	8008c04 <_realloc_r+0x44>
 8008bf2:	f038 0807 	bics.w	r8, r8, #7
 8008bf6:	d507      	bpl.n	8008c08 <_realloc_r+0x48>
 8008bf8:	230c      	movs	r3, #12
 8008bfa:	f8ca 3000 	str.w	r3, [sl]
 8008bfe:	f04f 0b00 	mov.w	fp, #0
 8008c02:	e032      	b.n	8008c6a <_realloc_r+0xaa>
 8008c04:	f04f 0810 	mov.w	r8, #16
 8008c08:	45c3      	cmp	fp, r8
 8008c0a:	d8f5      	bhi.n	8008bf8 <_realloc_r+0x38>
 8008c0c:	4546      	cmp	r6, r8
 8008c0e:	f280 8174 	bge.w	8008efa <_realloc_r+0x33a>
 8008c12:	4b9e      	ldr	r3, [pc, #632]	@ (8008e8c <_realloc_r+0x2cc>)
 8008c14:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8008c18:	eb09 0106 	add.w	r1, r9, r6
 8008c1c:	458c      	cmp	ip, r1
 8008c1e:	6848      	ldr	r0, [r1, #4]
 8008c20:	d005      	beq.n	8008c2e <_realloc_r+0x6e>
 8008c22:	f020 0201 	bic.w	r2, r0, #1
 8008c26:	440a      	add	r2, r1
 8008c28:	6852      	ldr	r2, [r2, #4]
 8008c2a:	07d7      	lsls	r7, r2, #31
 8008c2c:	d449      	bmi.n	8008cc2 <_realloc_r+0x102>
 8008c2e:	f020 0003 	bic.w	r0, r0, #3
 8008c32:	458c      	cmp	ip, r1
 8008c34:	eb06 0700 	add.w	r7, r6, r0
 8008c38:	d11b      	bne.n	8008c72 <_realloc_r+0xb2>
 8008c3a:	f108 0210 	add.w	r2, r8, #16
 8008c3e:	42ba      	cmp	r2, r7
 8008c40:	dc41      	bgt.n	8008cc6 <_realloc_r+0x106>
 8008c42:	eb09 0208 	add.w	r2, r9, r8
 8008c46:	eba7 0708 	sub.w	r7, r7, r8
 8008c4a:	f047 0701 	orr.w	r7, r7, #1
 8008c4e:	609a      	str	r2, [r3, #8]
 8008c50:	6057      	str	r7, [r2, #4]
 8008c52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	ea43 0308 	orr.w	r3, r3, r8
 8008c5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c62:	4650      	mov	r0, sl
 8008c64:	f7ff ffa6 	bl	8008bb4 <__malloc_unlock>
 8008c68:	46a3      	mov	fp, r4
 8008c6a:	4658      	mov	r0, fp
 8008c6c:	b003      	add	sp, #12
 8008c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c72:	45b8      	cmp	r8, r7
 8008c74:	dc27      	bgt.n	8008cc6 <_realloc_r+0x106>
 8008c76:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8008c7a:	60d3      	str	r3, [r2, #12]
 8008c7c:	609a      	str	r2, [r3, #8]
 8008c7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c82:	eba7 0008 	sub.w	r0, r7, r8
 8008c86:	280f      	cmp	r0, #15
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	eb09 0207 	add.w	r2, r9, r7
 8008c90:	f240 8135 	bls.w	8008efe <_realloc_r+0x33e>
 8008c94:	eb09 0108 	add.w	r1, r9, r8
 8008c98:	ea48 0303 	orr.w	r3, r8, r3
 8008c9c:	f040 0001 	orr.w	r0, r0, #1
 8008ca0:	f8c9 3004 	str.w	r3, [r9, #4]
 8008ca4:	6048      	str	r0, [r1, #4]
 8008ca6:	6853      	ldr	r3, [r2, #4]
 8008ca8:	f043 0301 	orr.w	r3, r3, #1
 8008cac:	6053      	str	r3, [r2, #4]
 8008cae:	3108      	adds	r1, #8
 8008cb0:	4650      	mov	r0, sl
 8008cb2:	f7ff fc7f 	bl	80085b4 <_free_r>
 8008cb6:	4650      	mov	r0, sl
 8008cb8:	f7ff ff7c 	bl	8008bb4 <__malloc_unlock>
 8008cbc:	f109 0b08 	add.w	fp, r9, #8
 8008cc0:	e7d3      	b.n	8008c6a <_realloc_r+0xaa>
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	07ea      	lsls	r2, r5, #31
 8008cc8:	f100 80c7 	bmi.w	8008e5a <_realloc_r+0x29a>
 8008ccc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008cd0:	eba9 0505 	sub.w	r5, r9, r5
 8008cd4:	686a      	ldr	r2, [r5, #4]
 8008cd6:	f022 0203 	bic.w	r2, r2, #3
 8008cda:	4432      	add	r2, r6
 8008cdc:	9201      	str	r2, [sp, #4]
 8008cde:	2900      	cmp	r1, #0
 8008ce0:	f000 8086 	beq.w	8008df0 <_realloc_r+0x230>
 8008ce4:	458c      	cmp	ip, r1
 8008ce6:	eb00 0702 	add.w	r7, r0, r2
 8008cea:	d149      	bne.n	8008d80 <_realloc_r+0x1c0>
 8008cec:	f108 0210 	add.w	r2, r8, #16
 8008cf0:	42ba      	cmp	r2, r7
 8008cf2:	dc7d      	bgt.n	8008df0 <_realloc_r+0x230>
 8008cf4:	46ab      	mov	fp, r5
 8008cf6:	68ea      	ldr	r2, [r5, #12]
 8008cf8:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8008cfc:	60ca      	str	r2, [r1, #12]
 8008cfe:	6091      	str	r1, [r2, #8]
 8008d00:	1f32      	subs	r2, r6, #4
 8008d02:	2a24      	cmp	r2, #36	@ 0x24
 8008d04:	d836      	bhi.n	8008d74 <_realloc_r+0x1b4>
 8008d06:	2a13      	cmp	r2, #19
 8008d08:	d932      	bls.n	8008d70 <_realloc_r+0x1b0>
 8008d0a:	6821      	ldr	r1, [r4, #0]
 8008d0c:	60a9      	str	r1, [r5, #8]
 8008d0e:	6861      	ldr	r1, [r4, #4]
 8008d10:	60e9      	str	r1, [r5, #12]
 8008d12:	2a1b      	cmp	r2, #27
 8008d14:	d81a      	bhi.n	8008d4c <_realloc_r+0x18c>
 8008d16:	3408      	adds	r4, #8
 8008d18:	f105 0210 	add.w	r2, r5, #16
 8008d1c:	6821      	ldr	r1, [r4, #0]
 8008d1e:	6011      	str	r1, [r2, #0]
 8008d20:	6861      	ldr	r1, [r4, #4]
 8008d22:	6051      	str	r1, [r2, #4]
 8008d24:	68a1      	ldr	r1, [r4, #8]
 8008d26:	6091      	str	r1, [r2, #8]
 8008d28:	eb05 0208 	add.w	r2, r5, r8
 8008d2c:	eba7 0708 	sub.w	r7, r7, r8
 8008d30:	f047 0701 	orr.w	r7, r7, #1
 8008d34:	609a      	str	r2, [r3, #8]
 8008d36:	6057      	str	r7, [r2, #4]
 8008d38:	686b      	ldr	r3, [r5, #4]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	ea43 0308 	orr.w	r3, r3, r8
 8008d42:	606b      	str	r3, [r5, #4]
 8008d44:	4650      	mov	r0, sl
 8008d46:	f7ff ff35 	bl	8008bb4 <__malloc_unlock>
 8008d4a:	e78e      	b.n	8008c6a <_realloc_r+0xaa>
 8008d4c:	68a1      	ldr	r1, [r4, #8]
 8008d4e:	6129      	str	r1, [r5, #16]
 8008d50:	68e1      	ldr	r1, [r4, #12]
 8008d52:	6169      	str	r1, [r5, #20]
 8008d54:	2a24      	cmp	r2, #36	@ 0x24
 8008d56:	bf01      	itttt	eq
 8008d58:	6922      	ldreq	r2, [r4, #16]
 8008d5a:	61aa      	streq	r2, [r5, #24]
 8008d5c:	6961      	ldreq	r1, [r4, #20]
 8008d5e:	61e9      	streq	r1, [r5, #28]
 8008d60:	bf19      	ittee	ne
 8008d62:	3410      	addne	r4, #16
 8008d64:	f105 0218 	addne.w	r2, r5, #24
 8008d68:	f105 0220 	addeq.w	r2, r5, #32
 8008d6c:	3418      	addeq	r4, #24
 8008d6e:	e7d5      	b.n	8008d1c <_realloc_r+0x15c>
 8008d70:	465a      	mov	r2, fp
 8008d72:	e7d3      	b.n	8008d1c <_realloc_r+0x15c>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4658      	mov	r0, fp
 8008d78:	f7ff fafb 	bl	8008372 <memmove>
 8008d7c:	4b43      	ldr	r3, [pc, #268]	@ (8008e8c <_realloc_r+0x2cc>)
 8008d7e:	e7d3      	b.n	8008d28 <_realloc_r+0x168>
 8008d80:	45b8      	cmp	r8, r7
 8008d82:	dc35      	bgt.n	8008df0 <_realloc_r+0x230>
 8008d84:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8008d88:	4628      	mov	r0, r5
 8008d8a:	60d3      	str	r3, [r2, #12]
 8008d8c:	609a      	str	r2, [r3, #8]
 8008d8e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008d92:	68eb      	ldr	r3, [r5, #12]
 8008d94:	60d3      	str	r3, [r2, #12]
 8008d96:	609a      	str	r2, [r3, #8]
 8008d98:	1f32      	subs	r2, r6, #4
 8008d9a:	2a24      	cmp	r2, #36	@ 0x24
 8008d9c:	d824      	bhi.n	8008de8 <_realloc_r+0x228>
 8008d9e:	2a13      	cmp	r2, #19
 8008da0:	d908      	bls.n	8008db4 <_realloc_r+0x1f4>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	60ab      	str	r3, [r5, #8]
 8008da6:	6863      	ldr	r3, [r4, #4]
 8008da8:	60eb      	str	r3, [r5, #12]
 8008daa:	2a1b      	cmp	r2, #27
 8008dac:	d80a      	bhi.n	8008dc4 <_realloc_r+0x204>
 8008dae:	3408      	adds	r4, #8
 8008db0:	f105 0010 	add.w	r0, r5, #16
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	6003      	str	r3, [r0, #0]
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	6043      	str	r3, [r0, #4]
 8008dbc:	68a3      	ldr	r3, [r4, #8]
 8008dbe:	6083      	str	r3, [r0, #8]
 8008dc0:	46a9      	mov	r9, r5
 8008dc2:	e75c      	b.n	8008c7e <_realloc_r+0xbe>
 8008dc4:	68a3      	ldr	r3, [r4, #8]
 8008dc6:	612b      	str	r3, [r5, #16]
 8008dc8:	68e3      	ldr	r3, [r4, #12]
 8008dca:	616b      	str	r3, [r5, #20]
 8008dcc:	2a24      	cmp	r2, #36	@ 0x24
 8008dce:	bf01      	itttt	eq
 8008dd0:	6923      	ldreq	r3, [r4, #16]
 8008dd2:	61ab      	streq	r3, [r5, #24]
 8008dd4:	6963      	ldreq	r3, [r4, #20]
 8008dd6:	61eb      	streq	r3, [r5, #28]
 8008dd8:	bf19      	ittee	ne
 8008dda:	3410      	addne	r4, #16
 8008ddc:	f105 0018 	addne.w	r0, r5, #24
 8008de0:	f105 0020 	addeq.w	r0, r5, #32
 8008de4:	3418      	addeq	r4, #24
 8008de6:	e7e5      	b.n	8008db4 <_realloc_r+0x1f4>
 8008de8:	4621      	mov	r1, r4
 8008dea:	f7ff fac2 	bl	8008372 <memmove>
 8008dee:	e7e7      	b.n	8008dc0 <_realloc_r+0x200>
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	4598      	cmp	r8, r3
 8008df4:	dc31      	bgt.n	8008e5a <_realloc_r+0x29a>
 8008df6:	4628      	mov	r0, r5
 8008df8:	68eb      	ldr	r3, [r5, #12]
 8008dfa:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008dfe:	60d3      	str	r3, [r2, #12]
 8008e00:	609a      	str	r2, [r3, #8]
 8008e02:	1f32      	subs	r2, r6, #4
 8008e04:	2a24      	cmp	r2, #36	@ 0x24
 8008e06:	d824      	bhi.n	8008e52 <_realloc_r+0x292>
 8008e08:	2a13      	cmp	r2, #19
 8008e0a:	d908      	bls.n	8008e1e <_realloc_r+0x25e>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	60ab      	str	r3, [r5, #8]
 8008e10:	6863      	ldr	r3, [r4, #4]
 8008e12:	60eb      	str	r3, [r5, #12]
 8008e14:	2a1b      	cmp	r2, #27
 8008e16:	d80a      	bhi.n	8008e2e <_realloc_r+0x26e>
 8008e18:	3408      	adds	r4, #8
 8008e1a:	f105 0010 	add.w	r0, r5, #16
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	6863      	ldr	r3, [r4, #4]
 8008e24:	6043      	str	r3, [r0, #4]
 8008e26:	68a3      	ldr	r3, [r4, #8]
 8008e28:	6083      	str	r3, [r0, #8]
 8008e2a:	9f01      	ldr	r7, [sp, #4]
 8008e2c:	e7c8      	b.n	8008dc0 <_realloc_r+0x200>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	612b      	str	r3, [r5, #16]
 8008e32:	68e3      	ldr	r3, [r4, #12]
 8008e34:	616b      	str	r3, [r5, #20]
 8008e36:	2a24      	cmp	r2, #36	@ 0x24
 8008e38:	bf01      	itttt	eq
 8008e3a:	6923      	ldreq	r3, [r4, #16]
 8008e3c:	61ab      	streq	r3, [r5, #24]
 8008e3e:	6963      	ldreq	r3, [r4, #20]
 8008e40:	61eb      	streq	r3, [r5, #28]
 8008e42:	bf19      	ittee	ne
 8008e44:	3410      	addne	r4, #16
 8008e46:	f105 0018 	addne.w	r0, r5, #24
 8008e4a:	f105 0020 	addeq.w	r0, r5, #32
 8008e4e:	3418      	addeq	r4, #24
 8008e50:	e7e5      	b.n	8008e1e <_realloc_r+0x25e>
 8008e52:	4621      	mov	r1, r4
 8008e54:	f7ff fa8d 	bl	8008372 <memmove>
 8008e58:	e7e7      	b.n	8008e2a <_realloc_r+0x26a>
 8008e5a:	4659      	mov	r1, fp
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	f7ff fc69 	bl	8008734 <_malloc_r>
 8008e62:	4683      	mov	fp, r0
 8008e64:	b918      	cbnz	r0, 8008e6e <_realloc_r+0x2ae>
 8008e66:	4650      	mov	r0, sl
 8008e68:	f7ff fea4 	bl	8008bb4 <__malloc_unlock>
 8008e6c:	e6c7      	b.n	8008bfe <_realloc_r+0x3e>
 8008e6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008e72:	f023 0301 	bic.w	r3, r3, #1
 8008e76:	444b      	add	r3, r9
 8008e78:	f1a0 0208 	sub.w	r2, r0, #8
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d107      	bne.n	8008e90 <_realloc_r+0x2d0>
 8008e80:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8008e84:	f027 0703 	bic.w	r7, r7, #3
 8008e88:	4437      	add	r7, r6
 8008e8a:	e6f8      	b.n	8008c7e <_realloc_r+0xbe>
 8008e8c:	20000184 	.word	0x20000184
 8008e90:	1f32      	subs	r2, r6, #4
 8008e92:	2a24      	cmp	r2, #36	@ 0x24
 8008e94:	d82d      	bhi.n	8008ef2 <_realloc_r+0x332>
 8008e96:	2a13      	cmp	r2, #19
 8008e98:	d928      	bls.n	8008eec <_realloc_r+0x32c>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	6003      	str	r3, [r0, #0]
 8008e9e:	6863      	ldr	r3, [r4, #4]
 8008ea0:	6043      	str	r3, [r0, #4]
 8008ea2:	2a1b      	cmp	r2, #27
 8008ea4:	d80e      	bhi.n	8008ec4 <_realloc_r+0x304>
 8008ea6:	f104 0208 	add.w	r2, r4, #8
 8008eaa:	f100 0308 	add.w	r3, r0, #8
 8008eae:	6811      	ldr	r1, [r2, #0]
 8008eb0:	6019      	str	r1, [r3, #0]
 8008eb2:	6851      	ldr	r1, [r2, #4]
 8008eb4:	6059      	str	r1, [r3, #4]
 8008eb6:	6892      	ldr	r2, [r2, #8]
 8008eb8:	609a      	str	r2, [r3, #8]
 8008eba:	4621      	mov	r1, r4
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	f7ff fb79 	bl	80085b4 <_free_r>
 8008ec2:	e73f      	b.n	8008d44 <_realloc_r+0x184>
 8008ec4:	68a3      	ldr	r3, [r4, #8]
 8008ec6:	6083      	str	r3, [r0, #8]
 8008ec8:	68e3      	ldr	r3, [r4, #12]
 8008eca:	60c3      	str	r3, [r0, #12]
 8008ecc:	2a24      	cmp	r2, #36	@ 0x24
 8008ece:	bf01      	itttt	eq
 8008ed0:	6923      	ldreq	r3, [r4, #16]
 8008ed2:	6103      	streq	r3, [r0, #16]
 8008ed4:	6961      	ldreq	r1, [r4, #20]
 8008ed6:	6141      	streq	r1, [r0, #20]
 8008ed8:	bf19      	ittee	ne
 8008eda:	f104 0210 	addne.w	r2, r4, #16
 8008ede:	f100 0310 	addne.w	r3, r0, #16
 8008ee2:	f104 0218 	addeq.w	r2, r4, #24
 8008ee6:	f100 0318 	addeq.w	r3, r0, #24
 8008eea:	e7e0      	b.n	8008eae <_realloc_r+0x2ee>
 8008eec:	4603      	mov	r3, r0
 8008eee:	4622      	mov	r2, r4
 8008ef0:	e7dd      	b.n	8008eae <_realloc_r+0x2ee>
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f7ff fa3d 	bl	8008372 <memmove>
 8008ef8:	e7df      	b.n	8008eba <_realloc_r+0x2fa>
 8008efa:	4637      	mov	r7, r6
 8008efc:	e6bf      	b.n	8008c7e <_realloc_r+0xbe>
 8008efe:	431f      	orrs	r7, r3
 8008f00:	f8c9 7004 	str.w	r7, [r9, #4]
 8008f04:	6853      	ldr	r3, [r2, #4]
 8008f06:	f043 0301 	orr.w	r3, r3, #1
 8008f0a:	6053      	str	r3, [r2, #4]
 8008f0c:	e6d3      	b.n	8008cb6 <_realloc_r+0xf6>
 8008f0e:	bf00      	nop

08008f10 <_svfprintf_r>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	b0d3      	sub	sp, #332	@ 0x14c
 8008f16:	468b      	mov	fp, r1
 8008f18:	4691      	mov	r9, r2
 8008f1a:	461e      	mov	r6, r3
 8008f1c:	9003      	str	r0, [sp, #12]
 8008f1e:	f7ff fa5d 	bl	80083dc <_localeconv_r>
 8008f22:	6803      	ldr	r3, [r0, #0]
 8008f24:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f7 f9d2 	bl	80002d0 <strlen>
 8008f2c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008f30:	900d      	str	r0, [sp, #52]	@ 0x34
 8008f32:	061b      	lsls	r3, r3, #24
 8008f34:	d515      	bpl.n	8008f62 <_svfprintf_r+0x52>
 8008f36:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008f3a:	b993      	cbnz	r3, 8008f62 <_svfprintf_r+0x52>
 8008f3c:	9803      	ldr	r0, [sp, #12]
 8008f3e:	2140      	movs	r1, #64	@ 0x40
 8008f40:	f7ff fbf8 	bl	8008734 <_malloc_r>
 8008f44:	f8cb 0000 	str.w	r0, [fp]
 8008f48:	f8cb 0010 	str.w	r0, [fp, #16]
 8008f4c:	b930      	cbnz	r0, 8008f5c <_svfprintf_r+0x4c>
 8008f4e:	9a03      	ldr	r2, [sp, #12]
 8008f50:	230c      	movs	r3, #12
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	f04f 33ff 	mov.w	r3, #4294967295
 8008f58:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f5a:	e1f7      	b.n	800934c <_svfprintf_r+0x43c>
 8008f5c:	2340      	movs	r3, #64	@ 0x40
 8008f5e:	f8cb 3014 	str.w	r3, [fp, #20]
 8008f62:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 80091b0 <_svfprintf_r+0x2a0>
 8008f66:	2300      	movs	r3, #0
 8008f68:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8008f6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008f70:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8008f74:	ac29      	add	r4, sp, #164	@ 0xa4
 8008f76:	9426      	str	r4, [sp, #152]	@ 0x98
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f7c:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f7e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008f80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f82:	464b      	mov	r3, r9
 8008f84:	461d      	mov	r5, r3
 8008f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f8a:	b10a      	cbz	r2, 8008f90 <_svfprintf_r+0x80>
 8008f8c:	2a25      	cmp	r2, #37	@ 0x25
 8008f8e:	d1f9      	bne.n	8008f84 <_svfprintf_r+0x74>
 8008f90:	ebb5 0709 	subs.w	r7, r5, r9
 8008f94:	d00d      	beq.n	8008fb2 <_svfprintf_r+0xa2>
 8008f96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8008f98:	443b      	add	r3, r7
 8008f9a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8008f9c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	2b07      	cmp	r3, #7
 8008fa2:	e9c4 9700 	strd	r9, r7, [r4]
 8008fa6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8008fa8:	dc75      	bgt.n	8009096 <_svfprintf_r+0x186>
 8008faa:	3408      	adds	r4, #8
 8008fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fae:	443b      	add	r3, r7
 8008fb0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fb2:	782b      	ldrb	r3, [r5, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f001 8148 	beq.w	800a24a <_svfprintf_r+0x133a>
 8008fba:	2200      	movs	r2, #0
 8008fbc:	1c6b      	adds	r3, r5, #1
 8008fbe:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8008fc2:	f04f 38ff 	mov.w	r8, #4294967295
 8008fc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fc8:	4615      	mov	r5, r2
 8008fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fce:	9206      	str	r2, [sp, #24]
 8008fd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fd2:	9b06      	ldr	r3, [sp, #24]
 8008fd4:	3b20      	subs	r3, #32
 8008fd6:	2b5a      	cmp	r3, #90	@ 0x5a
 8008fd8:	f200 85a4 	bhi.w	8009b24 <_svfprintf_r+0xc14>
 8008fdc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fe0:	05a2009d 	.word	0x05a2009d
 8008fe4:	00a505a2 	.word	0x00a505a2
 8008fe8:	05a205a2 	.word	0x05a205a2
 8008fec:	008505a2 	.word	0x008505a2
 8008ff0:	05a205a2 	.word	0x05a205a2
 8008ff4:	00b200a8 	.word	0x00b200a8
 8008ff8:	00af05a2 	.word	0x00af05a2
 8008ffc:	05a200b4 	.word	0x05a200b4
 8009000:	00d100ce 	.word	0x00d100ce
 8009004:	00d100d1 	.word	0x00d100d1
 8009008:	00d100d1 	.word	0x00d100d1
 800900c:	00d100d1 	.word	0x00d100d1
 8009010:	00d100d1 	.word	0x00d100d1
 8009014:	05a205a2 	.word	0x05a205a2
 8009018:	05a205a2 	.word	0x05a205a2
 800901c:	05a205a2 	.word	0x05a205a2
 8009020:	014705a2 	.word	0x014705a2
 8009024:	010805a2 	.word	0x010805a2
 8009028:	0147011b 	.word	0x0147011b
 800902c:	01470147 	.word	0x01470147
 8009030:	05a205a2 	.word	0x05a205a2
 8009034:	05a205a2 	.word	0x05a205a2
 8009038:	05a200e2 	.word	0x05a200e2
 800903c:	049d05a2 	.word	0x049d05a2
 8009040:	05a205a2 	.word	0x05a205a2
 8009044:	04e705a2 	.word	0x04e705a2
 8009048:	050805a2 	.word	0x050805a2
 800904c:	05a205a2 	.word	0x05a205a2
 8009050:	05a2052a 	.word	0x05a2052a
 8009054:	05a205a2 	.word	0x05a205a2
 8009058:	05a205a2 	.word	0x05a205a2
 800905c:	05a205a2 	.word	0x05a205a2
 8009060:	014705a2 	.word	0x014705a2
 8009064:	010805a2 	.word	0x010805a2
 8009068:	0147011d 	.word	0x0147011d
 800906c:	01470147 	.word	0x01470147
 8009070:	011d00ee 	.word	0x011d00ee
 8009074:	05a20102 	.word	0x05a20102
 8009078:	05a200fb 	.word	0x05a200fb
 800907c:	049f047e 	.word	0x049f047e
 8009080:	010204d6 	.word	0x010204d6
 8009084:	04e705a2 	.word	0x04e705a2
 8009088:	050a009b 	.word	0x050a009b
 800908c:	05a205a2 	.word	0x05a205a2
 8009090:	05a20065 	.word	0x05a20065
 8009094:	009b      	.short	0x009b
 8009096:	9803      	ldr	r0, [sp, #12]
 8009098:	aa26      	add	r2, sp, #152	@ 0x98
 800909a:	4659      	mov	r1, fp
 800909c:	f7fe fb3a 	bl	8007714 <__ssprint_r>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	f040 814e 	bne.w	8009342 <_svfprintf_r+0x432>
 80090a6:	ac29      	add	r4, sp, #164	@ 0xa4
 80090a8:	e780      	b.n	8008fac <_svfprintf_r+0x9c>
 80090aa:	4b43      	ldr	r3, [pc, #268]	@ (80091b8 <_svfprintf_r+0x2a8>)
 80090ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80090ae:	f015 0320 	ands.w	r3, r5, #32
 80090b2:	f000 84c2 	beq.w	8009a3a <_svfprintf_r+0xb2a>
 80090b6:	3607      	adds	r6, #7
 80090b8:	f026 0307 	bic.w	r3, r6, #7
 80090bc:	461a      	mov	r2, r3
 80090be:	685f      	ldr	r7, [r3, #4]
 80090c0:	f852 6b08 	ldr.w	r6, [r2], #8
 80090c4:	9207      	str	r2, [sp, #28]
 80090c6:	07eb      	lsls	r3, r5, #31
 80090c8:	d50a      	bpl.n	80090e0 <_svfprintf_r+0x1d0>
 80090ca:	ea56 0307 	orrs.w	r3, r6, r7
 80090ce:	d007      	beq.n	80090e0 <_svfprintf_r+0x1d0>
 80090d0:	2330      	movs	r3, #48	@ 0x30
 80090d2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80090dc:	f045 0502 	orr.w	r5, r5, #2
 80090e0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80090e4:	2302      	movs	r3, #2
 80090e6:	f000 bc28 	b.w	800993a <_svfprintf_r+0xa2a>
 80090ea:	9803      	ldr	r0, [sp, #12]
 80090ec:	f7ff f976 	bl	80083dc <_localeconv_r>
 80090f0:	6843      	ldr	r3, [r0, #4]
 80090f2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7f7 f8eb 	bl	80002d0 <strlen>
 80090fa:	9012      	str	r0, [sp, #72]	@ 0x48
 80090fc:	9803      	ldr	r0, [sp, #12]
 80090fe:	f7ff f96d 	bl	80083dc <_localeconv_r>
 8009102:	6883      	ldr	r3, [r0, #8]
 8009104:	9309      	str	r3, [sp, #36]	@ 0x24
 8009106:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009108:	b12b      	cbz	r3, 8009116 <_svfprintf_r+0x206>
 800910a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910c:	b11b      	cbz	r3, 8009116 <_svfprintf_r+0x206>
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	b10b      	cbz	r3, 8009116 <_svfprintf_r+0x206>
 8009112:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8009116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009118:	e757      	b.n	8008fca <_svfprintf_r+0xba>
 800911a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1f9      	bne.n	8009116 <_svfprintf_r+0x206>
 8009122:	2320      	movs	r3, #32
 8009124:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009128:	e7f5      	b.n	8009116 <_svfprintf_r+0x206>
 800912a:	f045 0501 	orr.w	r5, r5, #1
 800912e:	e7f2      	b.n	8009116 <_svfprintf_r+0x206>
 8009130:	f856 3b04 	ldr.w	r3, [r6], #4
 8009134:	930e      	str	r3, [sp, #56]	@ 0x38
 8009136:	2b00      	cmp	r3, #0
 8009138:	daed      	bge.n	8009116 <_svfprintf_r+0x206>
 800913a:	425b      	negs	r3, r3
 800913c:	930e      	str	r3, [sp, #56]	@ 0x38
 800913e:	f045 0504 	orr.w	r5, r5, #4
 8009142:	e7e8      	b.n	8009116 <_svfprintf_r+0x206>
 8009144:	232b      	movs	r3, #43	@ 0x2b
 8009146:	e7ed      	b.n	8009124 <_svfprintf_r+0x214>
 8009148:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800914a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800914e:	9206      	str	r2, [sp, #24]
 8009150:	2a2a      	cmp	r2, #42	@ 0x2a
 8009152:	d10f      	bne.n	8009174 <_svfprintf_r+0x264>
 8009154:	f856 2b04 	ldr.w	r2, [r6], #4
 8009158:	930c      	str	r3, [sp, #48]	@ 0x30
 800915a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800915e:	e7da      	b.n	8009116 <_svfprintf_r+0x206>
 8009160:	fb01 2808 	mla	r8, r1, r8, r2
 8009164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009168:	9206      	str	r2, [sp, #24]
 800916a:	9a06      	ldr	r2, [sp, #24]
 800916c:	3a30      	subs	r2, #48	@ 0x30
 800916e:	2a09      	cmp	r2, #9
 8009170:	d9f6      	bls.n	8009160 <_svfprintf_r+0x250>
 8009172:	e72d      	b.n	8008fd0 <_svfprintf_r+0xc0>
 8009174:	f04f 0800 	mov.w	r8, #0
 8009178:	210a      	movs	r1, #10
 800917a:	e7f6      	b.n	800916a <_svfprintf_r+0x25a>
 800917c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8009180:	e7c9      	b.n	8009116 <_svfprintf_r+0x206>
 8009182:	2200      	movs	r2, #0
 8009184:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009186:	920e      	str	r2, [sp, #56]	@ 0x38
 8009188:	210a      	movs	r1, #10
 800918a:	9a06      	ldr	r2, [sp, #24]
 800918c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800918e:	3a30      	subs	r2, #48	@ 0x30
 8009190:	fb01 2200 	mla	r2, r1, r0, r2
 8009194:	920e      	str	r2, [sp, #56]	@ 0x38
 8009196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800919a:	9206      	str	r2, [sp, #24]
 800919c:	3a30      	subs	r2, #48	@ 0x30
 800919e:	2a09      	cmp	r2, #9
 80091a0:	d9f3      	bls.n	800918a <_svfprintf_r+0x27a>
 80091a2:	e715      	b.n	8008fd0 <_svfprintf_r+0xc0>
 80091a4:	f045 0508 	orr.w	r5, r5, #8
 80091a8:	e7b5      	b.n	8009116 <_svfprintf_r+0x206>
 80091aa:	bf00      	nop
 80091ac:	f3af 8000 	nop.w
	...
 80091b8:	0800fa85 	.word	0x0800fa85
 80091bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b68      	cmp	r3, #104	@ 0x68
 80091c2:	bf01      	itttt	eq
 80091c4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 80091c6:	3301      	addeq	r3, #1
 80091c8:	930c      	streq	r3, [sp, #48]	@ 0x30
 80091ca:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 80091ce:	bf18      	it	ne
 80091d0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80091d4:	e79f      	b.n	8009116 <_svfprintf_r+0x206>
 80091d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b6c      	cmp	r3, #108	@ 0x6c
 80091dc:	d105      	bne.n	80091ea <_svfprintf_r+0x2da>
 80091de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091e0:	3301      	adds	r3, #1
 80091e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80091e4:	f045 0520 	orr.w	r5, r5, #32
 80091e8:	e795      	b.n	8009116 <_svfprintf_r+0x206>
 80091ea:	f045 0510 	orr.w	r5, r5, #16
 80091ee:	e792      	b.n	8009116 <_svfprintf_r+0x206>
 80091f0:	4632      	mov	r2, r6
 80091f2:	f852 3b04 	ldr.w	r3, [r2], #4
 80091f6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80091fa:	2300      	movs	r3, #0
 80091fc:	9207      	str	r2, [sp, #28]
 80091fe:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009202:	469a      	mov	sl, r3
 8009204:	f04f 0801 	mov.w	r8, #1
 8009208:	9310      	str	r3, [sp, #64]	@ 0x40
 800920a:	461f      	mov	r7, r3
 800920c:	9308      	str	r3, [sp, #32]
 800920e:	461e      	mov	r6, r3
 8009210:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8009214:	e1d2      	b.n	80095bc <_svfprintf_r+0x6ac>
 8009216:	f045 0510 	orr.w	r5, r5, #16
 800921a:	06af      	lsls	r7, r5, #26
 800921c:	d512      	bpl.n	8009244 <_svfprintf_r+0x334>
 800921e:	3607      	adds	r6, #7
 8009220:	f026 0307 	bic.w	r3, r6, #7
 8009224:	461a      	mov	r2, r3
 8009226:	685f      	ldr	r7, [r3, #4]
 8009228:	f852 6b08 	ldr.w	r6, [r2], #8
 800922c:	9207      	str	r2, [sp, #28]
 800922e:	2f00      	cmp	r7, #0
 8009230:	da06      	bge.n	8009240 <_svfprintf_r+0x330>
 8009232:	4276      	negs	r6, r6
 8009234:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8009238:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800923c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009240:	2301      	movs	r3, #1
 8009242:	e37d      	b.n	8009940 <_svfprintf_r+0xa30>
 8009244:	4633      	mov	r3, r6
 8009246:	06ee      	lsls	r6, r5, #27
 8009248:	f853 7b04 	ldr.w	r7, [r3], #4
 800924c:	9307      	str	r3, [sp, #28]
 800924e:	d502      	bpl.n	8009256 <_svfprintf_r+0x346>
 8009250:	463e      	mov	r6, r7
 8009252:	17ff      	asrs	r7, r7, #31
 8009254:	e7eb      	b.n	800922e <_svfprintf_r+0x31e>
 8009256:	0668      	lsls	r0, r5, #25
 8009258:	d503      	bpl.n	8009262 <_svfprintf_r+0x352>
 800925a:	b23e      	sxth	r6, r7
 800925c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8009260:	e7e5      	b.n	800922e <_svfprintf_r+0x31e>
 8009262:	05a9      	lsls	r1, r5, #22
 8009264:	d5f4      	bpl.n	8009250 <_svfprintf_r+0x340>
 8009266:	b27e      	sxtb	r6, r7
 8009268:	f347 17c0 	sbfx	r7, r7, #7, #1
 800926c:	e7df      	b.n	800922e <_svfprintf_r+0x31e>
 800926e:	3607      	adds	r6, #7
 8009270:	f026 0307 	bic.w	r3, r6, #7
 8009274:	ecb3 7b02 	vldmia	r3!, {d7}
 8009278:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800927c:	9307      	str	r3, [sp, #28]
 800927e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009280:	931a      	str	r3, [sp, #104]	@ 0x68
 8009282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009288:	931b      	str	r3, [sp, #108]	@ 0x6c
 800928a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800928e:	4b81      	ldr	r3, [pc, #516]	@ (8009494 <_svfprintf_r+0x584>)
 8009290:	f04f 32ff 	mov.w	r2, #4294967295
 8009294:	f7f7 fc7a 	bl	8000b8c <__aeabi_dcmpun>
 8009298:	bb10      	cbnz	r0, 80092e0 <_svfprintf_r+0x3d0>
 800929a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800929e:	4b7d      	ldr	r3, [pc, #500]	@ (8009494 <_svfprintf_r+0x584>)
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	f7f7 fc54 	bl	8000b50 <__aeabi_dcmple>
 80092a8:	b9d0      	cbnz	r0, 80092e0 <_svfprintf_r+0x3d0>
 80092aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092ae:	2200      	movs	r2, #0
 80092b0:	2300      	movs	r3, #0
 80092b2:	f7f7 fc43 	bl	8000b3c <__aeabi_dcmplt>
 80092b6:	b110      	cbz	r0, 80092be <_svfprintf_r+0x3ae>
 80092b8:	232d      	movs	r3, #45	@ 0x2d
 80092ba:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80092be:	4a76      	ldr	r2, [pc, #472]	@ (8009498 <_svfprintf_r+0x588>)
 80092c0:	4b76      	ldr	r3, [pc, #472]	@ (800949c <_svfprintf_r+0x58c>)
 80092c2:	9906      	ldr	r1, [sp, #24]
 80092c4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80092c8:	2947      	cmp	r1, #71	@ 0x47
 80092ca:	bfd4      	ite	le
 80092cc:	4691      	movle	r9, r2
 80092ce:	4699      	movgt	r9, r3
 80092d0:	f04f 0a00 	mov.w	sl, #0
 80092d4:	f04f 0803 	mov.w	r8, #3
 80092d8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80092dc:	f000 bfec 	b.w	800a2b8 <_svfprintf_r+0x13a8>
 80092e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80092e4:	4610      	mov	r0, r2
 80092e6:	4619      	mov	r1, r3
 80092e8:	f7f7 fc50 	bl	8000b8c <__aeabi_dcmpun>
 80092ec:	4682      	mov	sl, r0
 80092ee:	b140      	cbz	r0, 8009302 <_svfprintf_r+0x3f2>
 80092f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092f2:	4a6b      	ldr	r2, [pc, #428]	@ (80094a0 <_svfprintf_r+0x590>)
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfbc      	itt	lt
 80092f8:	232d      	movlt	r3, #45	@ 0x2d
 80092fa:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80092fe:	4b69      	ldr	r3, [pc, #420]	@ (80094a4 <_svfprintf_r+0x594>)
 8009300:	e7df      	b.n	80092c2 <_svfprintf_r+0x3b2>
 8009302:	9b06      	ldr	r3, [sp, #24]
 8009304:	2b61      	cmp	r3, #97	@ 0x61
 8009306:	d025      	beq.n	8009354 <_svfprintf_r+0x444>
 8009308:	2b41      	cmp	r3, #65	@ 0x41
 800930a:	d125      	bne.n	8009358 <_svfprintf_r+0x448>
 800930c:	2358      	movs	r3, #88	@ 0x58
 800930e:	2230      	movs	r2, #48	@ 0x30
 8009310:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8009314:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8009318:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800931c:	f045 0502 	orr.w	r5, r5, #2
 8009320:	f340 80a5 	ble.w	800946e <_svfprintf_r+0x55e>
 8009324:	9803      	ldr	r0, [sp, #12]
 8009326:	f108 0101 	add.w	r1, r8, #1
 800932a:	f7ff fa03 	bl	8008734 <_malloc_r>
 800932e:	4681      	mov	r9, r0
 8009330:	2800      	cmp	r0, #0
 8009332:	f040 80a1 	bne.w	8009478 <_svfprintf_r+0x568>
 8009336:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800933a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800933e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8009342:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009346:	065b      	lsls	r3, r3, #25
 8009348:	f53f ae04 	bmi.w	8008f54 <_svfprintf_r+0x44>
 800934c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800934e:	b053      	add	sp, #332	@ 0x14c
 8009350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009354:	2378      	movs	r3, #120	@ 0x78
 8009356:	e7da      	b.n	800930e <_svfprintf_r+0x3fe>
 8009358:	f1b8 3fff 	cmp.w	r8, #4294967295
 800935c:	f000 808e 	beq.w	800947c <_svfprintf_r+0x56c>
 8009360:	9b06      	ldr	r3, [sp, #24]
 8009362:	f023 0320 	bic.w	r3, r3, #32
 8009366:	2b47      	cmp	r3, #71	@ 0x47
 8009368:	d105      	bne.n	8009376 <_svfprintf_r+0x466>
 800936a:	f1b8 0f00 	cmp.w	r8, #0
 800936e:	d102      	bne.n	8009376 <_svfprintf_r+0x466>
 8009370:	46c2      	mov	sl, r8
 8009372:	f04f 0801 	mov.w	r8, #1
 8009376:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800937a:	9311      	str	r3, [sp, #68]	@ 0x44
 800937c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800937e:	2b00      	cmp	r3, #0
 8009380:	da7f      	bge.n	8009482 <_svfprintf_r+0x572>
 8009382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009384:	9314      	str	r3, [sp, #80]	@ 0x50
 8009386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009388:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800938c:	9315      	str	r3, [sp, #84]	@ 0x54
 800938e:	232d      	movs	r3, #45	@ 0x2d
 8009390:	931c      	str	r3, [sp, #112]	@ 0x70
 8009392:	9b06      	ldr	r3, [sp, #24]
 8009394:	f023 0320 	bic.w	r3, r3, #32
 8009398:	2b41      	cmp	r3, #65	@ 0x41
 800939a:	9308      	str	r3, [sp, #32]
 800939c:	f040 81e6 	bne.w	800976c <_svfprintf_r+0x85c>
 80093a0:	a820      	add	r0, sp, #128	@ 0x80
 80093a2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80093a6:	f002 fa9b 	bl	800b8e0 <frexp>
 80093aa:	2200      	movs	r2, #0
 80093ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80093b0:	ec51 0b10 	vmov	r0, r1, d0
 80093b4:	f7f7 f950 	bl	8000658 <__aeabi_dmul>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093c0:	2200      	movs	r2, #0
 80093c2:	2300      	movs	r3, #0
 80093c4:	f7f7 fbb0 	bl	8000b28 <__aeabi_dcmpeq>
 80093c8:	b108      	cbz	r0, 80093ce <_svfprintf_r+0x4be>
 80093ca:	2301      	movs	r3, #1
 80093cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80093ce:	4a36      	ldr	r2, [pc, #216]	@ (80094a8 <_svfprintf_r+0x598>)
 80093d0:	4b36      	ldr	r3, [pc, #216]	@ (80094ac <_svfprintf_r+0x59c>)
 80093d2:	9906      	ldr	r1, [sp, #24]
 80093d4:	2961      	cmp	r1, #97	@ 0x61
 80093d6:	bf18      	it	ne
 80093d8:	461a      	movne	r2, r3
 80093da:	9210      	str	r2, [sp, #64]	@ 0x40
 80093dc:	f108 37ff 	add.w	r7, r8, #4294967295
 80093e0:	464e      	mov	r6, r9
 80093e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093e6:	4b32      	ldr	r3, [pc, #200]	@ (80094b0 <_svfprintf_r+0x5a0>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	f7f7 f935 	bl	8000658 <__aeabi_dmul>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093f6:	f7f7 fbdf 	bl	8000bb8 <__aeabi_d2iz>
 80093fa:	9013      	str	r0, [sp, #76]	@ 0x4c
 80093fc:	f7f7 f8c2 	bl	8000584 <__aeabi_i2d>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009408:	f7f6 ff6e 	bl	80002e8 <__aeabi_dsub>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009414:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009416:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009418:	5c9b      	ldrb	r3, [r3, r2]
 800941a:	f806 3b01 	strb.w	r3, [r6], #1
 800941e:	1c7a      	adds	r2, r7, #1
 8009420:	d006      	beq.n	8009430 <_svfprintf_r+0x520>
 8009422:	1e7b      	subs	r3, r7, #1
 8009424:	931d      	str	r3, [sp, #116]	@ 0x74
 8009426:	2200      	movs	r2, #0
 8009428:	2300      	movs	r3, #0
 800942a:	f7f7 fb7d 	bl	8000b28 <__aeabi_dcmpeq>
 800942e:	b370      	cbz	r0, 800948e <_svfprintf_r+0x57e>
 8009430:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009434:	4b1f      	ldr	r3, [pc, #124]	@ (80094b4 <_svfprintf_r+0x5a4>)
 8009436:	2200      	movs	r2, #0
 8009438:	f7f7 fb9e 	bl	8000b78 <__aeabi_dcmpgt>
 800943c:	2800      	cmp	r0, #0
 800943e:	d13b      	bne.n	80094b8 <_svfprintf_r+0x5a8>
 8009440:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009444:	4b1b      	ldr	r3, [pc, #108]	@ (80094b4 <_svfprintf_r+0x5a4>)
 8009446:	2200      	movs	r2, #0
 8009448:	f7f7 fb6e 	bl	8000b28 <__aeabi_dcmpeq>
 800944c:	b110      	cbz	r0, 8009454 <_svfprintf_r+0x544>
 800944e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009450:	07db      	lsls	r3, r3, #31
 8009452:	d431      	bmi.n	80094b8 <_svfprintf_r+0x5a8>
 8009454:	4633      	mov	r3, r6
 8009456:	19f1      	adds	r1, r6, r7
 8009458:	2030      	movs	r0, #48	@ 0x30
 800945a:	1aca      	subs	r2, r1, r3
 800945c:	2a00      	cmp	r2, #0
 800945e:	f280 8182 	bge.w	8009766 <_svfprintf_r+0x856>
 8009462:	1c7b      	adds	r3, r7, #1
 8009464:	3701      	adds	r7, #1
 8009466:	bfb8      	it	lt
 8009468:	2300      	movlt	r3, #0
 800946a:	441e      	add	r6, r3
 800946c:	e038      	b.n	80094e0 <_svfprintf_r+0x5d0>
 800946e:	f04f 0a00 	mov.w	sl, #0
 8009472:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8009476:	e77e      	b.n	8009376 <_svfprintf_r+0x466>
 8009478:	4682      	mov	sl, r0
 800947a:	e77c      	b.n	8009376 <_svfprintf_r+0x466>
 800947c:	f04f 0806 	mov.w	r8, #6
 8009480:	e779      	b.n	8009376 <_svfprintf_r+0x466>
 8009482:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8009486:	2300      	movs	r3, #0
 8009488:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800948c:	e780      	b.n	8009390 <_svfprintf_r+0x480>
 800948e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8009490:	e7a7      	b.n	80093e2 <_svfprintf_r+0x4d2>
 8009492:	bf00      	nop
 8009494:	7fefffff 	.word	0x7fefffff
 8009498:	0800fab6 	.word	0x0800fab6
 800949c:	0800faba 	.word	0x0800faba
 80094a0:	0800fabe 	.word	0x0800fabe
 80094a4:	0800fac2 	.word	0x0800fac2
 80094a8:	0800fa85 	.word	0x0800fa85
 80094ac:	0800fa74 	.word	0x0800fa74
 80094b0:	40300000 	.word	0x40300000
 80094b4:	3fe00000 	.word	0x3fe00000
 80094b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094ba:	9624      	str	r6, [sp, #144]	@ 0x90
 80094bc:	7bd9      	ldrb	r1, [r3, #15]
 80094be:	2030      	movs	r0, #48	@ 0x30
 80094c0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094c2:	1e53      	subs	r3, r2, #1
 80094c4:	9324      	str	r3, [sp, #144]	@ 0x90
 80094c6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80094ca:	428b      	cmp	r3, r1
 80094cc:	f000 8148 	beq.w	8009760 <_svfprintf_r+0x850>
 80094d0:	2b39      	cmp	r3, #57	@ 0x39
 80094d2:	bf0b      	itete	eq
 80094d4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80094d6:	3301      	addne	r3, #1
 80094d8:	7a9b      	ldrbeq	r3, [r3, #10]
 80094da:	b2db      	uxtbne	r3, r3
 80094dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80094e0:	eba6 0309 	sub.w	r3, r6, r9
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	9b08      	ldr	r3, [sp, #32]
 80094e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80094ea:	2b47      	cmp	r3, #71	@ 0x47
 80094ec:	f040 8187 	bne.w	80097fe <_svfprintf_r+0x8ee>
 80094f0:	1cf1      	adds	r1, r6, #3
 80094f2:	db02      	blt.n	80094fa <_svfprintf_r+0x5ea>
 80094f4:	4546      	cmp	r6, r8
 80094f6:	f340 81a5 	ble.w	8009844 <_svfprintf_r+0x934>
 80094fa:	9b06      	ldr	r3, [sp, #24]
 80094fc:	3b02      	subs	r3, #2
 80094fe:	9306      	str	r3, [sp, #24]
 8009500:	9906      	ldr	r1, [sp, #24]
 8009502:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8009506:	f021 0120 	bic.w	r1, r1, #32
 800950a:	2941      	cmp	r1, #65	@ 0x41
 800950c:	bf08      	it	eq
 800950e:	320f      	addeq	r2, #15
 8009510:	f106 33ff 	add.w	r3, r6, #4294967295
 8009514:	bf06      	itte	eq
 8009516:	b2d2      	uxtbeq	r2, r2
 8009518:	2101      	moveq	r1, #1
 800951a:	2100      	movne	r1, #0
 800951c:	2b00      	cmp	r3, #0
 800951e:	9320      	str	r3, [sp, #128]	@ 0x80
 8009520:	bfb8      	it	lt
 8009522:	f1c6 0301 	rsblt	r3, r6, #1
 8009526:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800952a:	bfb4      	ite	lt
 800952c:	222d      	movlt	r2, #45	@ 0x2d
 800952e:	222b      	movge	r2, #43	@ 0x2b
 8009530:	2b09      	cmp	r3, #9
 8009532:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8009536:	f340 8178 	ble.w	800982a <_svfprintf_r+0x91a>
 800953a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800953e:	270a      	movs	r7, #10
 8009540:	4602      	mov	r2, r0
 8009542:	fbb3 f6f7 	udiv	r6, r3, r7
 8009546:	fb07 3116 	mls	r1, r7, r6, r3
 800954a:	3130      	adds	r1, #48	@ 0x30
 800954c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009550:	4619      	mov	r1, r3
 8009552:	2963      	cmp	r1, #99	@ 0x63
 8009554:	f100 30ff 	add.w	r0, r0, #4294967295
 8009558:	4633      	mov	r3, r6
 800955a:	dcf1      	bgt.n	8009540 <_svfprintf_r+0x630>
 800955c:	3330      	adds	r3, #48	@ 0x30
 800955e:	1e91      	subs	r1, r2, #2
 8009560:	f800 3c01 	strb.w	r3, [r0, #-1]
 8009564:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8009568:	460b      	mov	r3, r1
 800956a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800956e:	4283      	cmp	r3, r0
 8009570:	f0c0 8156 	bcc.w	8009820 <_svfprintf_r+0x910>
 8009574:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8009578:	1a9b      	subs	r3, r3, r2
 800957a:	4281      	cmp	r1, r0
 800957c:	bf88      	it	hi
 800957e:	2300      	movhi	r3, #0
 8009580:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8009584:	441a      	add	r2, r3
 8009586:	ab22      	add	r3, sp, #136	@ 0x88
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	9a04      	ldr	r2, [sp, #16]
 800958c:	9318      	str	r3, [sp, #96]	@ 0x60
 800958e:	2a01      	cmp	r2, #1
 8009590:	eb03 0802 	add.w	r8, r3, r2
 8009594:	dc01      	bgt.n	800959a <_svfprintf_r+0x68a>
 8009596:	07ea      	lsls	r2, r5, #31
 8009598:	d501      	bpl.n	800959e <_svfprintf_r+0x68e>
 800959a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800959c:	4498      	add	r8, r3
 800959e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80095a2:	2700      	movs	r7, #0
 80095a4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80095a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80095aa:	9708      	str	r7, [sp, #32]
 80095ac:	463e      	mov	r6, r7
 80095ae:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f040 818f 	bne.w	80098d4 <_svfprintf_r+0x9c4>
 80095b6:	2300      	movs	r3, #0
 80095b8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80095ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80095bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095be:	4543      	cmp	r3, r8
 80095c0:	bfb8      	it	lt
 80095c2:	4643      	movlt	r3, r8
 80095c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80095c6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80095ca:	b113      	cbz	r3, 80095d2 <_svfprintf_r+0x6c2>
 80095cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095ce:	3301      	adds	r3, #1
 80095d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80095d2:	f015 0302 	ands.w	r3, r5, #2
 80095d6:	931c      	str	r3, [sp, #112]	@ 0x70
 80095d8:	bf1e      	ittt	ne
 80095da:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80095dc:	3302      	addne	r3, #2
 80095de:	9311      	strne	r3, [sp, #68]	@ 0x44
 80095e0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80095e4:	931d      	str	r3, [sp, #116]	@ 0x74
 80095e6:	d122      	bne.n	800962e <_svfprintf_r+0x71e>
 80095e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80095ec:	1a9b      	subs	r3, r3, r2
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095f2:	dd1c      	ble.n	800962e <_svfprintf_r+0x71e>
 80095f4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80095f6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80095fa:	2810      	cmp	r0, #16
 80095fc:	489e      	ldr	r0, [pc, #632]	@ (8009878 <_svfprintf_r+0x968>)
 80095fe:	6020      	str	r0, [r4, #0]
 8009600:	f102 0201 	add.w	r2, r2, #1
 8009604:	f104 0108 	add.w	r1, r4, #8
 8009608:	f300 8298 	bgt.w	8009b3c <_svfprintf_r+0xc2c>
 800960c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800960e:	6060      	str	r0, [r4, #4]
 8009610:	4403      	add	r3, r0
 8009612:	2a07      	cmp	r2, #7
 8009614:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009618:	f340 82a5 	ble.w	8009b66 <_svfprintf_r+0xc56>
 800961c:	9803      	ldr	r0, [sp, #12]
 800961e:	aa26      	add	r2, sp, #152	@ 0x98
 8009620:	4659      	mov	r1, fp
 8009622:	f7fe f877 	bl	8007714 <__ssprint_r>
 8009626:	2800      	cmp	r0, #0
 8009628:	f040 85ed 	bne.w	800a206 <_svfprintf_r+0x12f6>
 800962c:	ac29      	add	r4, sp, #164	@ 0xa4
 800962e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8009632:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009634:	b16a      	cbz	r2, 8009652 <_svfprintf_r+0x742>
 8009636:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800963a:	6022      	str	r2, [r4, #0]
 800963c:	2201      	movs	r2, #1
 800963e:	4413      	add	r3, r2
 8009640:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009642:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009644:	6062      	str	r2, [r4, #4]
 8009646:	4413      	add	r3, r2
 8009648:	2b07      	cmp	r3, #7
 800964a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800964c:	f300 828d 	bgt.w	8009b6a <_svfprintf_r+0xc5a>
 8009650:	3408      	adds	r4, #8
 8009652:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009654:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009656:	b162      	cbz	r2, 8009672 <_svfprintf_r+0x762>
 8009658:	aa1f      	add	r2, sp, #124	@ 0x7c
 800965a:	6022      	str	r2, [r4, #0]
 800965c:	2202      	movs	r2, #2
 800965e:	4413      	add	r3, r2
 8009660:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009662:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009664:	6062      	str	r2, [r4, #4]
 8009666:	3301      	adds	r3, #1
 8009668:	2b07      	cmp	r3, #7
 800966a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800966c:	f300 8287 	bgt.w	8009b7e <_svfprintf_r+0xc6e>
 8009670:	3408      	adds	r4, #8
 8009672:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009674:	2b80      	cmp	r3, #128	@ 0x80
 8009676:	d122      	bne.n	80096be <_svfprintf_r+0x7ae>
 8009678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800967a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	2b00      	cmp	r3, #0
 8009680:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009682:	dd1c      	ble.n	80096be <_svfprintf_r+0x7ae>
 8009684:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8009686:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800968a:	2810      	cmp	r0, #16
 800968c:	487b      	ldr	r0, [pc, #492]	@ (800987c <_svfprintf_r+0x96c>)
 800968e:	6020      	str	r0, [r4, #0]
 8009690:	f102 0201 	add.w	r2, r2, #1
 8009694:	f104 0108 	add.w	r1, r4, #8
 8009698:	f300 827b 	bgt.w	8009b92 <_svfprintf_r+0xc82>
 800969c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800969e:	6060      	str	r0, [r4, #4]
 80096a0:	4403      	add	r3, r0
 80096a2:	2a07      	cmp	r2, #7
 80096a4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80096a8:	f340 8288 	ble.w	8009bbc <_svfprintf_r+0xcac>
 80096ac:	9803      	ldr	r0, [sp, #12]
 80096ae:	aa26      	add	r2, sp, #152	@ 0x98
 80096b0:	4659      	mov	r1, fp
 80096b2:	f7fe f82f 	bl	8007714 <__ssprint_r>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f040 85a5 	bne.w	800a206 <_svfprintf_r+0x12f6>
 80096bc:	ac29      	add	r4, sp, #164	@ 0xa4
 80096be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096c0:	eba3 0308 	sub.w	r3, r3, r8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80096c8:	dd1c      	ble.n	8009704 <_svfprintf_r+0x7f4>
 80096ca:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80096cc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80096d0:	2810      	cmp	r0, #16
 80096d2:	486a      	ldr	r0, [pc, #424]	@ (800987c <_svfprintf_r+0x96c>)
 80096d4:	6020      	str	r0, [r4, #0]
 80096d6:	f102 0201 	add.w	r2, r2, #1
 80096da:	f104 0108 	add.w	r1, r4, #8
 80096de:	f300 826f 	bgt.w	8009bc0 <_svfprintf_r+0xcb0>
 80096e2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80096e4:	6060      	str	r0, [r4, #4]
 80096e6:	4403      	add	r3, r0
 80096e8:	2a07      	cmp	r2, #7
 80096ea:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80096ee:	f340 827c 	ble.w	8009bea <_svfprintf_r+0xcda>
 80096f2:	9803      	ldr	r0, [sp, #12]
 80096f4:	aa26      	add	r2, sp, #152	@ 0x98
 80096f6:	4659      	mov	r1, fp
 80096f8:	f7fe f80c 	bl	8007714 <__ssprint_r>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f040 8582 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009702:	ac29      	add	r4, sp, #164	@ 0xa4
 8009704:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009706:	9310      	str	r3, [sp, #64]	@ 0x40
 8009708:	05ea      	lsls	r2, r5, #23
 800970a:	f100 8275 	bmi.w	8009bf8 <_svfprintf_r+0xce8>
 800970e:	4443      	add	r3, r8
 8009710:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009712:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009714:	3301      	adds	r3, #1
 8009716:	2b07      	cmp	r3, #7
 8009718:	e9c4 9800 	strd	r9, r8, [r4]
 800971c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800971e:	f300 82b1 	bgt.w	8009c84 <_svfprintf_r+0xd74>
 8009722:	3408      	adds	r4, #8
 8009724:	076a      	lsls	r2, r5, #29
 8009726:	f100 8550 	bmi.w	800a1ca <_svfprintf_r+0x12ba>
 800972a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800972e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009730:	428a      	cmp	r2, r1
 8009732:	bfac      	ite	ge
 8009734:	189b      	addge	r3, r3, r2
 8009736:	185b      	addlt	r3, r3, r1
 8009738:	930f      	str	r3, [sp, #60]	@ 0x3c
 800973a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800973c:	b13b      	cbz	r3, 800974e <_svfprintf_r+0x83e>
 800973e:	9803      	ldr	r0, [sp, #12]
 8009740:	aa26      	add	r2, sp, #152	@ 0x98
 8009742:	4659      	mov	r1, fp
 8009744:	f7fd ffe6 	bl	8007714 <__ssprint_r>
 8009748:	2800      	cmp	r0, #0
 800974a:	f040 855c 	bne.w	800a206 <_svfprintf_r+0x12f6>
 800974e:	2300      	movs	r3, #0
 8009750:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009752:	f1ba 0f00 	cmp.w	sl, #0
 8009756:	f040 8572 	bne.w	800a23e <_svfprintf_r+0x132e>
 800975a:	9e07      	ldr	r6, [sp, #28]
 800975c:	ac29      	add	r4, sp, #164	@ 0xa4
 800975e:	e0c6      	b.n	80098ee <_svfprintf_r+0x9de>
 8009760:	f802 0c01 	strb.w	r0, [r2, #-1]
 8009764:	e6ac      	b.n	80094c0 <_svfprintf_r+0x5b0>
 8009766:	f803 0b01 	strb.w	r0, [r3], #1
 800976a:	e676      	b.n	800945a <_svfprintf_r+0x54a>
 800976c:	9b08      	ldr	r3, [sp, #32]
 800976e:	2b46      	cmp	r3, #70	@ 0x46
 8009770:	d005      	beq.n	800977e <_svfprintf_r+0x86e>
 8009772:	2b45      	cmp	r3, #69	@ 0x45
 8009774:	d11a      	bne.n	80097ac <_svfprintf_r+0x89c>
 8009776:	f108 0601 	add.w	r6, r8, #1
 800977a:	2102      	movs	r1, #2
 800977c:	e001      	b.n	8009782 <_svfprintf_r+0x872>
 800977e:	4646      	mov	r6, r8
 8009780:	2103      	movs	r1, #3
 8009782:	ab24      	add	r3, sp, #144	@ 0x90
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	ab21      	add	r3, sp, #132	@ 0x84
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800978e:	ab20      	add	r3, sp, #128	@ 0x80
 8009790:	9803      	ldr	r0, [sp, #12]
 8009792:	4632      	mov	r2, r6
 8009794:	f002 f9a4 	bl	800bae0 <_dtoa_r>
 8009798:	9b08      	ldr	r3, [sp, #32]
 800979a:	2b47      	cmp	r3, #71	@ 0x47
 800979c:	4681      	mov	r9, r0
 800979e:	d119      	bne.n	80097d4 <_svfprintf_r+0x8c4>
 80097a0:	07e8      	lsls	r0, r5, #31
 80097a2:	d405      	bmi.n	80097b0 <_svfprintf_r+0x8a0>
 80097a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80097a6:	eba3 0309 	sub.w	r3, r3, r9
 80097aa:	e69b      	b.n	80094e4 <_svfprintf_r+0x5d4>
 80097ac:	4646      	mov	r6, r8
 80097ae:	e7e4      	b.n	800977a <_svfprintf_r+0x86a>
 80097b0:	eb09 0706 	add.w	r7, r9, r6
 80097b4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80097b8:	2200      	movs	r2, #0
 80097ba:	2300      	movs	r3, #0
 80097bc:	f7f7 f9b4 	bl	8000b28 <__aeabi_dcmpeq>
 80097c0:	b100      	cbz	r0, 80097c4 <_svfprintf_r+0x8b4>
 80097c2:	9724      	str	r7, [sp, #144]	@ 0x90
 80097c4:	2230      	movs	r2, #48	@ 0x30
 80097c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80097c8:	429f      	cmp	r7, r3
 80097ca:	d9eb      	bls.n	80097a4 <_svfprintf_r+0x894>
 80097cc:	1c59      	adds	r1, r3, #1
 80097ce:	9124      	str	r1, [sp, #144]	@ 0x90
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	e7f8      	b.n	80097c6 <_svfprintf_r+0x8b6>
 80097d4:	9b08      	ldr	r3, [sp, #32]
 80097d6:	2b46      	cmp	r3, #70	@ 0x46
 80097d8:	eb00 0706 	add.w	r7, r0, r6
 80097dc:	d1ea      	bne.n	80097b4 <_svfprintf_r+0x8a4>
 80097de:	7803      	ldrb	r3, [r0, #0]
 80097e0:	2b30      	cmp	r3, #48	@ 0x30
 80097e2:	d109      	bne.n	80097f8 <_svfprintf_r+0x8e8>
 80097e4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80097e8:	2200      	movs	r2, #0
 80097ea:	2300      	movs	r3, #0
 80097ec:	f7f7 f99c 	bl	8000b28 <__aeabi_dcmpeq>
 80097f0:	b910      	cbnz	r0, 80097f8 <_svfprintf_r+0x8e8>
 80097f2:	f1c6 0601 	rsb	r6, r6, #1
 80097f6:	9620      	str	r6, [sp, #128]	@ 0x80
 80097f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80097fa:	441f      	add	r7, r3
 80097fc:	e7da      	b.n	80097b4 <_svfprintf_r+0x8a4>
 80097fe:	9b08      	ldr	r3, [sp, #32]
 8009800:	2b46      	cmp	r3, #70	@ 0x46
 8009802:	f47f ae7d 	bne.w	8009500 <_svfprintf_r+0x5f0>
 8009806:	f005 0301 	and.w	r3, r5, #1
 800980a:	2e00      	cmp	r6, #0
 800980c:	ea43 0308 	orr.w	r3, r3, r8
 8009810:	dd25      	ble.n	800985e <_svfprintf_r+0x94e>
 8009812:	b37b      	cbz	r3, 8009874 <_svfprintf_r+0x964>
 8009814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009816:	18f3      	adds	r3, r6, r3
 8009818:	4498      	add	r8, r3
 800981a:	2366      	movs	r3, #102	@ 0x66
 800981c:	9306      	str	r3, [sp, #24]
 800981e:	e033      	b.n	8009888 <_svfprintf_r+0x978>
 8009820:	f813 7b01 	ldrb.w	r7, [r3], #1
 8009824:	f806 7f01 	strb.w	r7, [r6, #1]!
 8009828:	e6a1      	b.n	800956e <_svfprintf_r+0x65e>
 800982a:	b941      	cbnz	r1, 800983e <_svfprintf_r+0x92e>
 800982c:	2230      	movs	r2, #48	@ 0x30
 800982e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8009832:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8009836:	3330      	adds	r3, #48	@ 0x30
 8009838:	f802 3b01 	strb.w	r3, [r2], #1
 800983c:	e6a3      	b.n	8009586 <_svfprintf_r+0x676>
 800983e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8009842:	e7f8      	b.n	8009836 <_svfprintf_r+0x926>
 8009844:	9b04      	ldr	r3, [sp, #16]
 8009846:	429e      	cmp	r6, r3
 8009848:	da0d      	bge.n	8009866 <_svfprintf_r+0x956>
 800984a:	9b04      	ldr	r3, [sp, #16]
 800984c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800984e:	2e00      	cmp	r6, #0
 8009850:	eb03 0802 	add.w	r8, r3, r2
 8009854:	dc0c      	bgt.n	8009870 <_svfprintf_r+0x960>
 8009856:	f1c6 0301 	rsb	r3, r6, #1
 800985a:	4498      	add	r8, r3
 800985c:	e008      	b.n	8009870 <_svfprintf_r+0x960>
 800985e:	b17b      	cbz	r3, 8009880 <_svfprintf_r+0x970>
 8009860:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009862:	3301      	adds	r3, #1
 8009864:	e7d8      	b.n	8009818 <_svfprintf_r+0x908>
 8009866:	07eb      	lsls	r3, r5, #31
 8009868:	d521      	bpl.n	80098ae <_svfprintf_r+0x99e>
 800986a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800986c:	eb06 0803 	add.w	r8, r6, r3
 8009870:	2367      	movs	r3, #103	@ 0x67
 8009872:	e7d3      	b.n	800981c <_svfprintf_r+0x90c>
 8009874:	46b0      	mov	r8, r6
 8009876:	e7d0      	b.n	800981a <_svfprintf_r+0x90a>
 8009878:	0800fad8 	.word	0x0800fad8
 800987c:	0800fac8 	.word	0x0800fac8
 8009880:	2366      	movs	r3, #102	@ 0x66
 8009882:	9306      	str	r3, [sp, #24]
 8009884:	f04f 0801 	mov.w	r8, #1
 8009888:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800988c:	9308      	str	r3, [sp, #32]
 800988e:	d01f      	beq.n	80098d0 <_svfprintf_r+0x9c0>
 8009890:	2700      	movs	r7, #0
 8009892:	2e00      	cmp	r6, #0
 8009894:	9708      	str	r7, [sp, #32]
 8009896:	f77f ae8a 	ble.w	80095ae <_svfprintf_r+0x69e>
 800989a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2bff      	cmp	r3, #255	@ 0xff
 80098a0:	d107      	bne.n	80098b2 <_svfprintf_r+0x9a2>
 80098a2:	9b08      	ldr	r3, [sp, #32]
 80098a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80098a6:	443b      	add	r3, r7
 80098a8:	fb02 8803 	mla	r8, r2, r3, r8
 80098ac:	e67f      	b.n	80095ae <_svfprintf_r+0x69e>
 80098ae:	46b0      	mov	r8, r6
 80098b0:	e7de      	b.n	8009870 <_svfprintf_r+0x960>
 80098b2:	42b3      	cmp	r3, r6
 80098b4:	daf5      	bge.n	80098a2 <_svfprintf_r+0x992>
 80098b6:	1af6      	subs	r6, r6, r3
 80098b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ba:	785b      	ldrb	r3, [r3, #1]
 80098bc:	b133      	cbz	r3, 80098cc <_svfprintf_r+0x9bc>
 80098be:	9b08      	ldr	r3, [sp, #32]
 80098c0:	3301      	adds	r3, #1
 80098c2:	9308      	str	r3, [sp, #32]
 80098c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c6:	3301      	adds	r3, #1
 80098c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ca:	e7e6      	b.n	800989a <_svfprintf_r+0x98a>
 80098cc:	3701      	adds	r7, #1
 80098ce:	e7e4      	b.n	800989a <_svfprintf_r+0x98a>
 80098d0:	9f08      	ldr	r7, [sp, #32]
 80098d2:	e66c      	b.n	80095ae <_svfprintf_r+0x69e>
 80098d4:	232d      	movs	r3, #45	@ 0x2d
 80098d6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80098da:	e66c      	b.n	80095b6 <_svfprintf_r+0x6a6>
 80098dc:	06af      	lsls	r7, r5, #26
 80098de:	d50a      	bpl.n	80098f6 <_svfprintf_r+0x9e6>
 80098e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098e2:	6833      	ldr	r3, [r6, #0]
 80098e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098e6:	17d2      	asrs	r2, r2, #31
 80098e8:	e9c3 1200 	strd	r1, r2, [r3]
 80098ec:	3604      	adds	r6, #4
 80098ee:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80098f2:	f7ff bb46 	b.w	8008f82 <_svfprintf_r+0x72>
 80098f6:	06e8      	lsls	r0, r5, #27
 80098f8:	d503      	bpl.n	8009902 <_svfprintf_r+0x9f2>
 80098fa:	6833      	ldr	r3, [r6, #0]
 80098fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	e7f4      	b.n	80098ec <_svfprintf_r+0x9dc>
 8009902:	0669      	lsls	r1, r5, #25
 8009904:	d503      	bpl.n	800990e <_svfprintf_r+0x9fe>
 8009906:	6833      	ldr	r3, [r6, #0]
 8009908:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800990a:	801a      	strh	r2, [r3, #0]
 800990c:	e7ee      	b.n	80098ec <_svfprintf_r+0x9dc>
 800990e:	05aa      	lsls	r2, r5, #22
 8009910:	d5f3      	bpl.n	80098fa <_svfprintf_r+0x9ea>
 8009912:	6833      	ldr	r3, [r6, #0]
 8009914:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009916:	701a      	strb	r2, [r3, #0]
 8009918:	e7e8      	b.n	80098ec <_svfprintf_r+0x9dc>
 800991a:	f045 0510 	orr.w	r5, r5, #16
 800991e:	f015 0320 	ands.w	r3, r5, #32
 8009922:	d020      	beq.n	8009966 <_svfprintf_r+0xa56>
 8009924:	3607      	adds	r6, #7
 8009926:	f026 0307 	bic.w	r3, r6, #7
 800992a:	461a      	mov	r2, r3
 800992c:	685f      	ldr	r7, [r3, #4]
 800992e:	f852 6b08 	ldr.w	r6, [r2], #8
 8009932:	9207      	str	r2, [sp, #28]
 8009934:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8009938:	2300      	movs	r3, #0
 800993a:	2200      	movs	r2, #0
 800993c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8009940:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009944:	f000 848c 	beq.w	800a260 <_svfprintf_r+0x1350>
 8009948:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800994c:	9208      	str	r2, [sp, #32]
 800994e:	ea56 0207 	orrs.w	r2, r6, r7
 8009952:	f040 848a 	bne.w	800a26a <_svfprintf_r+0x135a>
 8009956:	f1b8 0f00 	cmp.w	r8, #0
 800995a:	f000 80db 	beq.w	8009b14 <_svfprintf_r+0xc04>
 800995e:	2b01      	cmp	r3, #1
 8009960:	f040 8486 	bne.w	800a270 <_svfprintf_r+0x1360>
 8009964:	e083      	b.n	8009a6e <_svfprintf_r+0xb5e>
 8009966:	4632      	mov	r2, r6
 8009968:	f015 0710 	ands.w	r7, r5, #16
 800996c:	f852 6b04 	ldr.w	r6, [r2], #4
 8009970:	9207      	str	r2, [sp, #28]
 8009972:	d001      	beq.n	8009978 <_svfprintf_r+0xa68>
 8009974:	461f      	mov	r7, r3
 8009976:	e7dd      	b.n	8009934 <_svfprintf_r+0xa24>
 8009978:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800997c:	d001      	beq.n	8009982 <_svfprintf_r+0xa72>
 800997e:	b2b6      	uxth	r6, r6
 8009980:	e7d8      	b.n	8009934 <_svfprintf_r+0xa24>
 8009982:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8009986:	d0d5      	beq.n	8009934 <_svfprintf_r+0xa24>
 8009988:	b2f6      	uxtb	r6, r6
 800998a:	e7f3      	b.n	8009974 <_svfprintf_r+0xa64>
 800998c:	4633      	mov	r3, r6
 800998e:	2278      	movs	r2, #120	@ 0x78
 8009990:	f853 6b04 	ldr.w	r6, [r3], #4
 8009994:	9307      	str	r3, [sp, #28]
 8009996:	f647 0330 	movw	r3, #30768	@ 0x7830
 800999a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800999e:	4b94      	ldr	r3, [pc, #592]	@ (8009bf0 <_svfprintf_r+0xce0>)
 80099a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80099a2:	2700      	movs	r7, #0
 80099a4:	f045 0502 	orr.w	r5, r5, #2
 80099a8:	2302      	movs	r3, #2
 80099aa:	9206      	str	r2, [sp, #24]
 80099ac:	e7c5      	b.n	800993a <_svfprintf_r+0xa2a>
 80099ae:	4633      	mov	r3, r6
 80099b0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80099b4:	f853 9b04 	ldr.w	r9, [r3], #4
 80099b8:	9307      	str	r3, [sp, #28]
 80099ba:	f04f 0600 	mov.w	r6, #0
 80099be:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 80099c2:	d00f      	beq.n	80099e4 <_svfprintf_r+0xad4>
 80099c4:	4642      	mov	r2, r8
 80099c6:	4631      	mov	r1, r6
 80099c8:	4648      	mov	r0, r9
 80099ca:	f7f6 fc31 	bl	8000230 <memchr>
 80099ce:	4682      	mov	sl, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f43f ac81 	beq.w	80092d8 <_svfprintf_r+0x3c8>
 80099d6:	eba0 0809 	sub.w	r8, r0, r9
 80099da:	46b2      	mov	sl, r6
 80099dc:	9610      	str	r6, [sp, #64]	@ 0x40
 80099de:	4637      	mov	r7, r6
 80099e0:	9608      	str	r6, [sp, #32]
 80099e2:	e5eb      	b.n	80095bc <_svfprintf_r+0x6ac>
 80099e4:	4648      	mov	r0, r9
 80099e6:	f7f6 fc73 	bl	80002d0 <strlen>
 80099ea:	46b2      	mov	sl, r6
 80099ec:	4680      	mov	r8, r0
 80099ee:	e473      	b.n	80092d8 <_svfprintf_r+0x3c8>
 80099f0:	f045 0510 	orr.w	r5, r5, #16
 80099f4:	f015 0320 	ands.w	r3, r5, #32
 80099f8:	d009      	beq.n	8009a0e <_svfprintf_r+0xafe>
 80099fa:	3607      	adds	r6, #7
 80099fc:	f026 0307 	bic.w	r3, r6, #7
 8009a00:	461a      	mov	r2, r3
 8009a02:	685f      	ldr	r7, [r3, #4]
 8009a04:	f852 6b08 	ldr.w	r6, [r2], #8
 8009a08:	9207      	str	r2, [sp, #28]
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e795      	b.n	800993a <_svfprintf_r+0xa2a>
 8009a0e:	4632      	mov	r2, r6
 8009a10:	f015 0710 	ands.w	r7, r5, #16
 8009a14:	f852 6b04 	ldr.w	r6, [r2], #4
 8009a18:	9207      	str	r2, [sp, #28]
 8009a1a:	d001      	beq.n	8009a20 <_svfprintf_r+0xb10>
 8009a1c:	461f      	mov	r7, r3
 8009a1e:	e7f4      	b.n	8009a0a <_svfprintf_r+0xafa>
 8009a20:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8009a24:	d001      	beq.n	8009a2a <_svfprintf_r+0xb1a>
 8009a26:	b2b6      	uxth	r6, r6
 8009a28:	e7ef      	b.n	8009a0a <_svfprintf_r+0xafa>
 8009a2a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8009a2e:	d0ec      	beq.n	8009a0a <_svfprintf_r+0xafa>
 8009a30:	b2f6      	uxtb	r6, r6
 8009a32:	e7f3      	b.n	8009a1c <_svfprintf_r+0xb0c>
 8009a34:	4b6f      	ldr	r3, [pc, #444]	@ (8009bf4 <_svfprintf_r+0xce4>)
 8009a36:	f7ff bb39 	b.w	80090ac <_svfprintf_r+0x19c>
 8009a3a:	4632      	mov	r2, r6
 8009a3c:	f015 0710 	ands.w	r7, r5, #16
 8009a40:	f852 6b04 	ldr.w	r6, [r2], #4
 8009a44:	9207      	str	r2, [sp, #28]
 8009a46:	d002      	beq.n	8009a4e <_svfprintf_r+0xb3e>
 8009a48:	461f      	mov	r7, r3
 8009a4a:	f7ff bb3c 	b.w	80090c6 <_svfprintf_r+0x1b6>
 8009a4e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8009a52:	d002      	beq.n	8009a5a <_svfprintf_r+0xb4a>
 8009a54:	b2b6      	uxth	r6, r6
 8009a56:	f7ff bb36 	b.w	80090c6 <_svfprintf_r+0x1b6>
 8009a5a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8009a5e:	f43f ab32 	beq.w	80090c6 <_svfprintf_r+0x1b6>
 8009a62:	b2f6      	uxtb	r6, r6
 8009a64:	e7f0      	b.n	8009a48 <_svfprintf_r+0xb38>
 8009a66:	2e0a      	cmp	r6, #10
 8009a68:	f177 0300 	sbcs.w	r3, r7, #0
 8009a6c:	d207      	bcs.n	8009a7e <_svfprintf_r+0xb6e>
 8009a6e:	3630      	adds	r6, #48	@ 0x30
 8009a70:	b2f6      	uxtb	r6, r6
 8009a72:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8009a76:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8009a7a:	f000 bc15 	b.w	800a2a8 <_svfprintf_r+0x1398>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	9b08      	ldr	r3, [sp, #32]
 8009a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a88:	ad52      	add	r5, sp, #328	@ 0x148
 8009a8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	2300      	movs	r3, #0
 8009a90:	4630      	mov	r0, r6
 8009a92:	4639      	mov	r1, r7
 8009a94:	f7f7 f928 	bl	8000ce8 <__aeabi_uldivmod>
 8009a98:	9b04      	ldr	r3, [sp, #16]
 8009a9a:	9011      	str	r0, [sp, #68]	@ 0x44
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009aa2:	3230      	adds	r2, #48	@ 0x30
 8009aa4:	468a      	mov	sl, r1
 8009aa6:	f105 39ff 	add.w	r9, r5, #4294967295
 8009aaa:	f805 2c01 	strb.w	r2, [r5, #-1]
 8009aae:	b1d3      	cbz	r3, 8009ae6 <_svfprintf_r+0xbd6>
 8009ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab2:	9a04      	ldr	r2, [sp, #16]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d115      	bne.n	8009ae6 <_svfprintf_r+0xbd6>
 8009aba:	2aff      	cmp	r2, #255	@ 0xff
 8009abc:	d013      	beq.n	8009ae6 <_svfprintf_r+0xbd6>
 8009abe:	2e0a      	cmp	r6, #10
 8009ac0:	f177 0300 	sbcs.w	r3, r7, #0
 8009ac4:	d30f      	bcc.n	8009ae6 <_svfprintf_r+0xbd6>
 8009ac6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ac8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009aca:	eba9 0903 	sub.w	r9, r9, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	f7fe fc70 	bl	80083b6 <strncpy>
 8009ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad8:	785b      	ldrb	r3, [r3, #1]
 8009ada:	b11b      	cbz	r3, 8009ae4 <_svfprintf_r+0xbd4>
 8009adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ade:	3301      	adds	r3, #1
 8009ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	2e0a      	cmp	r6, #10
 8009ae8:	f177 0700 	sbcs.w	r7, r7, #0
 8009aec:	f0c0 83dc 	bcc.w	800a2a8 <_svfprintf_r+0x1398>
 8009af0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009af2:	4657      	mov	r7, sl
 8009af4:	464d      	mov	r5, r9
 8009af6:	e7c9      	b.n	8009a8c <_svfprintf_r+0xb7c>
 8009af8:	f006 030f 	and.w	r3, r6, #15
 8009afc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009afe:	0936      	lsrs	r6, r6, #4
 8009b00:	5cd3      	ldrb	r3, [r2, r3]
 8009b02:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8009b06:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8009b0a:	093f      	lsrs	r7, r7, #4
 8009b0c:	ea56 0307 	orrs.w	r3, r6, r7
 8009b10:	d1f2      	bne.n	8009af8 <_svfprintf_r+0xbe8>
 8009b12:	e3c9      	b.n	800a2a8 <_svfprintf_r+0x1398>
 8009b14:	b91b      	cbnz	r3, 8009b1e <_svfprintf_r+0xc0e>
 8009b16:	07e9      	lsls	r1, r5, #31
 8009b18:	d501      	bpl.n	8009b1e <_svfprintf_r+0xc0e>
 8009b1a:	2630      	movs	r6, #48	@ 0x30
 8009b1c:	e7a9      	b.n	8009a72 <_svfprintf_r+0xb62>
 8009b1e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8009b22:	e3c1      	b.n	800a2a8 <_svfprintf_r+0x1398>
 8009b24:	9b06      	ldr	r3, [sp, #24]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 838f 	beq.w	800a24a <_svfprintf_r+0x133a>
 8009b2c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8009b30:	2300      	movs	r3, #0
 8009b32:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009b36:	9607      	str	r6, [sp, #28]
 8009b38:	f7ff bb63 	b.w	8009202 <_svfprintf_r+0x2f2>
 8009b3c:	2010      	movs	r0, #16
 8009b3e:	4403      	add	r3, r0
 8009b40:	2a07      	cmp	r2, #7
 8009b42:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009b46:	6060      	str	r0, [r4, #4]
 8009b48:	dd08      	ble.n	8009b5c <_svfprintf_r+0xc4c>
 8009b4a:	9803      	ldr	r0, [sp, #12]
 8009b4c:	aa26      	add	r2, sp, #152	@ 0x98
 8009b4e:	4659      	mov	r1, fp
 8009b50:	f7fd fde0 	bl	8007714 <__ssprint_r>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	f040 8356 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009b5a:	a929      	add	r1, sp, #164	@ 0xa4
 8009b5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b5e:	3b10      	subs	r3, #16
 8009b60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b62:	460c      	mov	r4, r1
 8009b64:	e546      	b.n	80095f4 <_svfprintf_r+0x6e4>
 8009b66:	460c      	mov	r4, r1
 8009b68:	e561      	b.n	800962e <_svfprintf_r+0x71e>
 8009b6a:	9803      	ldr	r0, [sp, #12]
 8009b6c:	aa26      	add	r2, sp, #152	@ 0x98
 8009b6e:	4659      	mov	r1, fp
 8009b70:	f7fd fdd0 	bl	8007714 <__ssprint_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	f040 8346 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009b7a:	ac29      	add	r4, sp, #164	@ 0xa4
 8009b7c:	e569      	b.n	8009652 <_svfprintf_r+0x742>
 8009b7e:	9803      	ldr	r0, [sp, #12]
 8009b80:	aa26      	add	r2, sp, #152	@ 0x98
 8009b82:	4659      	mov	r1, fp
 8009b84:	f7fd fdc6 	bl	8007714 <__ssprint_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	f040 833c 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009b8e:	ac29      	add	r4, sp, #164	@ 0xa4
 8009b90:	e56f      	b.n	8009672 <_svfprintf_r+0x762>
 8009b92:	2010      	movs	r0, #16
 8009b94:	4403      	add	r3, r0
 8009b96:	2a07      	cmp	r2, #7
 8009b98:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009b9c:	6060      	str	r0, [r4, #4]
 8009b9e:	dd08      	ble.n	8009bb2 <_svfprintf_r+0xca2>
 8009ba0:	9803      	ldr	r0, [sp, #12]
 8009ba2:	aa26      	add	r2, sp, #152	@ 0x98
 8009ba4:	4659      	mov	r1, fp
 8009ba6:	f7fd fdb5 	bl	8007714 <__ssprint_r>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	f040 832b 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009bb0:	a929      	add	r1, sp, #164	@ 0xa4
 8009bb2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bb4:	3b10      	subs	r3, #16
 8009bb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bb8:	460c      	mov	r4, r1
 8009bba:	e563      	b.n	8009684 <_svfprintf_r+0x774>
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	e57e      	b.n	80096be <_svfprintf_r+0x7ae>
 8009bc0:	2010      	movs	r0, #16
 8009bc2:	4403      	add	r3, r0
 8009bc4:	2a07      	cmp	r2, #7
 8009bc6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009bca:	6060      	str	r0, [r4, #4]
 8009bcc:	dd08      	ble.n	8009be0 <_svfprintf_r+0xcd0>
 8009bce:	9803      	ldr	r0, [sp, #12]
 8009bd0:	aa26      	add	r2, sp, #152	@ 0x98
 8009bd2:	4659      	mov	r1, fp
 8009bd4:	f7fd fd9e 	bl	8007714 <__ssprint_r>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	f040 8314 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009bde:	a929      	add	r1, sp, #164	@ 0xa4
 8009be0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009be2:	3b10      	subs	r3, #16
 8009be4:	9310      	str	r3, [sp, #64]	@ 0x40
 8009be6:	460c      	mov	r4, r1
 8009be8:	e56f      	b.n	80096ca <_svfprintf_r+0x7ba>
 8009bea:	460c      	mov	r4, r1
 8009bec:	e58a      	b.n	8009704 <_svfprintf_r+0x7f4>
 8009bee:	bf00      	nop
 8009bf0:	0800fa85 	.word	0x0800fa85
 8009bf4:	0800fa74 	.word	0x0800fa74
 8009bf8:	9b06      	ldr	r3, [sp, #24]
 8009bfa:	2b65      	cmp	r3, #101	@ 0x65
 8009bfc:	f340 8246 	ble.w	800a08c <_svfprintf_r+0x117c>
 8009c00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	f7f6 ff8e 	bl	8000b28 <__aeabi_dcmpeq>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d06a      	beq.n	8009ce6 <_svfprintf_r+0xdd6>
 8009c10:	4b73      	ldr	r3, [pc, #460]	@ (8009de0 <_svfprintf_r+0xed0>)
 8009c12:	6023      	str	r3, [r4, #0]
 8009c14:	2301      	movs	r3, #1
 8009c16:	6063      	str	r3, [r4, #4]
 8009c18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009c1e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009c20:	3301      	adds	r3, #1
 8009c22:	2b07      	cmp	r3, #7
 8009c24:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009c26:	dc37      	bgt.n	8009c98 <_svfprintf_r+0xd88>
 8009c28:	3408      	adds	r4, #8
 8009c2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c2c:	9a04      	ldr	r2, [sp, #16]
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	db02      	blt.n	8009c38 <_svfprintf_r+0xd28>
 8009c32:	07ef      	lsls	r7, r5, #31
 8009c34:	f57f ad76 	bpl.w	8009724 <_svfprintf_r+0x814>
 8009c38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c3a:	6023      	str	r3, [r4, #0]
 8009c3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c40:	6063      	str	r3, [r4, #4]
 8009c42:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009c44:	4413      	add	r3, r2
 8009c46:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009c48:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	2b07      	cmp	r3, #7
 8009c4e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009c50:	dc2c      	bgt.n	8009cac <_svfprintf_r+0xd9c>
 8009c52:	3408      	adds	r4, #8
 8009c54:	9b04      	ldr	r3, [sp, #16]
 8009c56:	1e5e      	subs	r6, r3, #1
 8009c58:	2e00      	cmp	r6, #0
 8009c5a:	f77f ad63 	ble.w	8009724 <_svfprintf_r+0x814>
 8009c5e:	4f61      	ldr	r7, [pc, #388]	@ (8009de4 <_svfprintf_r+0xed4>)
 8009c60:	f04f 0810 	mov.w	r8, #16
 8009c64:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8009c68:	2e10      	cmp	r6, #16
 8009c6a:	f103 0301 	add.w	r3, r3, #1
 8009c6e:	f104 0108 	add.w	r1, r4, #8
 8009c72:	6027      	str	r7, [r4, #0]
 8009c74:	dc24      	bgt.n	8009cc0 <_svfprintf_r+0xdb0>
 8009c76:	6066      	str	r6, [r4, #4]
 8009c78:	2b07      	cmp	r3, #7
 8009c7a:	4416      	add	r6, r2
 8009c7c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8009c80:	f340 82a0 	ble.w	800a1c4 <_svfprintf_r+0x12b4>
 8009c84:	9803      	ldr	r0, [sp, #12]
 8009c86:	aa26      	add	r2, sp, #152	@ 0x98
 8009c88:	4659      	mov	r1, fp
 8009c8a:	f7fd fd43 	bl	8007714 <__ssprint_r>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f040 82b9 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009c94:	ac29      	add	r4, sp, #164	@ 0xa4
 8009c96:	e545      	b.n	8009724 <_svfprintf_r+0x814>
 8009c98:	9803      	ldr	r0, [sp, #12]
 8009c9a:	aa26      	add	r2, sp, #152	@ 0x98
 8009c9c:	4659      	mov	r1, fp
 8009c9e:	f7fd fd39 	bl	8007714 <__ssprint_r>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f040 82af 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009ca8:	ac29      	add	r4, sp, #164	@ 0xa4
 8009caa:	e7be      	b.n	8009c2a <_svfprintf_r+0xd1a>
 8009cac:	9803      	ldr	r0, [sp, #12]
 8009cae:	aa26      	add	r2, sp, #152	@ 0x98
 8009cb0:	4659      	mov	r1, fp
 8009cb2:	f7fd fd2f 	bl	8007714 <__ssprint_r>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f040 82a5 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009cbc:	ac29      	add	r4, sp, #164	@ 0xa4
 8009cbe:	e7c9      	b.n	8009c54 <_svfprintf_r+0xd44>
 8009cc0:	3210      	adds	r2, #16
 8009cc2:	2b07      	cmp	r3, #7
 8009cc4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8009cc8:	f8c4 8004 	str.w	r8, [r4, #4]
 8009ccc:	dd08      	ble.n	8009ce0 <_svfprintf_r+0xdd0>
 8009cce:	9803      	ldr	r0, [sp, #12]
 8009cd0:	aa26      	add	r2, sp, #152	@ 0x98
 8009cd2:	4659      	mov	r1, fp
 8009cd4:	f7fd fd1e 	bl	8007714 <__ssprint_r>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	f040 8294 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009cde:	a929      	add	r1, sp, #164	@ 0xa4
 8009ce0:	3e10      	subs	r6, #16
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	e7be      	b.n	8009c64 <_svfprintf_r+0xd54>
 8009ce6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dc7d      	bgt.n	8009de8 <_svfprintf_r+0xed8>
 8009cec:	4b3c      	ldr	r3, [pc, #240]	@ (8009de0 <_svfprintf_r+0xed0>)
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	6063      	str	r3, [r4, #4]
 8009cf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009cfa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	2b07      	cmp	r3, #7
 8009d00:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009d02:	dc46      	bgt.n	8009d92 <_svfprintf_r+0xe82>
 8009d04:	3408      	adds	r4, #8
 8009d06:	9904      	ldr	r1, [sp, #16]
 8009d08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d0a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8009d0c:	430b      	orrs	r3, r1
 8009d0e:	f005 0101 	and.w	r1, r5, #1
 8009d12:	430b      	orrs	r3, r1
 8009d14:	f43f ad06 	beq.w	8009724 <_svfprintf_r+0x814>
 8009d18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d1a:	6023      	str	r3, [r4, #0]
 8009d1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d1e:	6063      	str	r3, [r4, #4]
 8009d20:	441a      	add	r2, r3
 8009d22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009d24:	9228      	str	r2, [sp, #160]	@ 0xa0
 8009d26:	3301      	adds	r3, #1
 8009d28:	2b07      	cmp	r3, #7
 8009d2a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009d2c:	dc3b      	bgt.n	8009da6 <_svfprintf_r+0xe96>
 8009d2e:	f104 0308 	add.w	r3, r4, #8
 8009d32:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009d34:	2e00      	cmp	r6, #0
 8009d36:	da1b      	bge.n	8009d70 <_svfprintf_r+0xe60>
 8009d38:	4f2a      	ldr	r7, [pc, #168]	@ (8009de4 <_svfprintf_r+0xed4>)
 8009d3a:	4276      	negs	r6, r6
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	2410      	movs	r4, #16
 8009d40:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8009d44:	2e10      	cmp	r6, #16
 8009d46:	f101 0101 	add.w	r1, r1, #1
 8009d4a:	f103 0308 	add.w	r3, r3, #8
 8009d4e:	6017      	str	r7, [r2, #0]
 8009d50:	dc33      	bgt.n	8009dba <_svfprintf_r+0xeaa>
 8009d52:	6056      	str	r6, [r2, #4]
 8009d54:	2907      	cmp	r1, #7
 8009d56:	4406      	add	r6, r0
 8009d58:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8009d5c:	dd08      	ble.n	8009d70 <_svfprintf_r+0xe60>
 8009d5e:	9803      	ldr	r0, [sp, #12]
 8009d60:	aa26      	add	r2, sp, #152	@ 0x98
 8009d62:	4659      	mov	r1, fp
 8009d64:	f7fd fcd6 	bl	8007714 <__ssprint_r>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f040 824c 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009d6e:	ab29      	add	r3, sp, #164	@ 0xa4
 8009d70:	9a04      	ldr	r2, [sp, #16]
 8009d72:	9904      	ldr	r1, [sp, #16]
 8009d74:	605a      	str	r2, [r3, #4]
 8009d76:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8009d78:	f8c3 9000 	str.w	r9, [r3]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8009d80:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8009d82:	3201      	adds	r2, #1
 8009d84:	2a07      	cmp	r2, #7
 8009d86:	9227      	str	r2, [sp, #156]	@ 0x9c
 8009d88:	f73f af7c 	bgt.w	8009c84 <_svfprintf_r+0xd74>
 8009d8c:	f103 0408 	add.w	r4, r3, #8
 8009d90:	e4c8      	b.n	8009724 <_svfprintf_r+0x814>
 8009d92:	9803      	ldr	r0, [sp, #12]
 8009d94:	aa26      	add	r2, sp, #152	@ 0x98
 8009d96:	4659      	mov	r1, fp
 8009d98:	f7fd fcbc 	bl	8007714 <__ssprint_r>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f040 8232 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009da2:	ac29      	add	r4, sp, #164	@ 0xa4
 8009da4:	e7af      	b.n	8009d06 <_svfprintf_r+0xdf6>
 8009da6:	9803      	ldr	r0, [sp, #12]
 8009da8:	aa26      	add	r2, sp, #152	@ 0x98
 8009daa:	4659      	mov	r1, fp
 8009dac:	f7fd fcb2 	bl	8007714 <__ssprint_r>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	f040 8228 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009db6:	ab29      	add	r3, sp, #164	@ 0xa4
 8009db8:	e7bb      	b.n	8009d32 <_svfprintf_r+0xe22>
 8009dba:	3010      	adds	r0, #16
 8009dbc:	2907      	cmp	r1, #7
 8009dbe:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8009dc2:	6054      	str	r4, [r2, #4]
 8009dc4:	dd08      	ble.n	8009dd8 <_svfprintf_r+0xec8>
 8009dc6:	9803      	ldr	r0, [sp, #12]
 8009dc8:	aa26      	add	r2, sp, #152	@ 0x98
 8009dca:	4659      	mov	r1, fp
 8009dcc:	f7fd fca2 	bl	8007714 <__ssprint_r>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f040 8218 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009dd6:	ab29      	add	r3, sp, #164	@ 0xa4
 8009dd8:	3e10      	subs	r6, #16
 8009dda:	461a      	mov	r2, r3
 8009ddc:	e7b0      	b.n	8009d40 <_svfprintf_r+0xe30>
 8009dde:	bf00      	nop
 8009de0:	0800fac6 	.word	0x0800fac6
 8009de4:	0800fac8 	.word	0x0800fac8
 8009de8:	9b04      	ldr	r3, [sp, #16]
 8009dea:	444b      	add	r3, r9
 8009dec:	9306      	str	r3, [sp, #24]
 8009dee:	9b04      	ldr	r3, [sp, #16]
 8009df0:	42b3      	cmp	r3, r6
 8009df2:	bfa8      	it	ge
 8009df4:	4633      	movge	r3, r6
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	4698      	mov	r8, r3
 8009dfa:	dd0b      	ble.n	8009e14 <_svfprintf_r+0xf04>
 8009dfc:	e9c4 9300 	strd	r9, r3, [r4]
 8009e00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e02:	4443      	add	r3, r8
 8009e04:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009e06:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009e08:	3301      	adds	r3, #1
 8009e0a:	2b07      	cmp	r3, #7
 8009e0c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009e0e:	f300 8089 	bgt.w	8009f24 <_svfprintf_r+0x1014>
 8009e12:	3408      	adds	r4, #8
 8009e14:	4643      	mov	r3, r8
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	bfac      	ite	ge
 8009e1a:	eba6 0808 	subge.w	r8, r6, r8
 8009e1e:	46b0      	movlt	r8, r6
 8009e20:	f1b8 0f00 	cmp.w	r8, #0
 8009e24:	dd1b      	ble.n	8009e5e <_svfprintf_r+0xf4e>
 8009e26:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8009e2a:	4897      	ldr	r0, [pc, #604]	@ (800a088 <_svfprintf_r+0x1178>)
 8009e2c:	6020      	str	r0, [r4, #0]
 8009e2e:	f1b8 0f10 	cmp.w	r8, #16
 8009e32:	f102 0201 	add.w	r2, r2, #1
 8009e36:	f104 0108 	add.w	r1, r4, #8
 8009e3a:	dc7d      	bgt.n	8009f38 <_svfprintf_r+0x1028>
 8009e3c:	4443      	add	r3, r8
 8009e3e:	2a07      	cmp	r2, #7
 8009e40:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009e44:	f8c4 8004 	str.w	r8, [r4, #4]
 8009e48:	f340 808a 	ble.w	8009f60 <_svfprintf_r+0x1050>
 8009e4c:	9803      	ldr	r0, [sp, #12]
 8009e4e:	aa26      	add	r2, sp, #152	@ 0x98
 8009e50:	4659      	mov	r1, fp
 8009e52:	f7fd fc5f 	bl	8007714 <__ssprint_r>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f040 81d5 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009e5c:	ac29      	add	r4, sp, #164	@ 0xa4
 8009e5e:	eb09 0806 	add.w	r8, r9, r6
 8009e62:	056e      	lsls	r6, r5, #21
 8009e64:	d508      	bpl.n	8009e78 <_svfprintf_r+0xf68>
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d17b      	bne.n	8009f64 <_svfprintf_r+0x1054>
 8009e6c:	2f00      	cmp	r7, #0
 8009e6e:	d17b      	bne.n	8009f68 <_svfprintf_r+0x1058>
 8009e70:	9b06      	ldr	r3, [sp, #24]
 8009e72:	4598      	cmp	r8, r3
 8009e74:	bf28      	it	cs
 8009e76:	4698      	movcs	r8, r3
 8009e78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e7a:	9a04      	ldr	r2, [sp, #16]
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	db01      	blt.n	8009e84 <_svfprintf_r+0xf74>
 8009e80:	07e8      	lsls	r0, r5, #31
 8009e82:	d50e      	bpl.n	8009ea2 <_svfprintf_r+0xf92>
 8009e84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e8c:	6063      	str	r3, [r4, #4]
 8009e8e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009e90:	4413      	add	r3, r2
 8009e92:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009e94:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009e96:	3301      	adds	r3, #1
 8009e98:	2b07      	cmp	r3, #7
 8009e9a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009e9c:	f300 80df 	bgt.w	800a05e <_svfprintf_r+0x114e>
 8009ea0:	3408      	adds	r4, #8
 8009ea2:	9b04      	ldr	r3, [sp, #16]
 8009ea4:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8009ea6:	1bdf      	subs	r7, r3, r7
 8009ea8:	9b06      	ldr	r3, [sp, #24]
 8009eaa:	eba3 0308 	sub.w	r3, r3, r8
 8009eae:	429f      	cmp	r7, r3
 8009eb0:	bfa8      	it	ge
 8009eb2:	461f      	movge	r7, r3
 8009eb4:	2f00      	cmp	r7, #0
 8009eb6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009eb8:	dd0a      	ble.n	8009ed0 <_svfprintf_r+0xfc0>
 8009eba:	443b      	add	r3, r7
 8009ebc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009ebe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	2b07      	cmp	r3, #7
 8009ec4:	e9c4 8700 	strd	r8, r7, [r4]
 8009ec8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009eca:	f300 80d2 	bgt.w	800a072 <_svfprintf_r+0x1162>
 8009ece:	3408      	adds	r4, #8
 8009ed0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009ed2:	9b04      	ldr	r3, [sp, #16]
 8009ed4:	2f00      	cmp	r7, #0
 8009ed6:	eba3 0606 	sub.w	r6, r3, r6
 8009eda:	bfa8      	it	ge
 8009edc:	1bf6      	subge	r6, r6, r7
 8009ede:	2e00      	cmp	r6, #0
 8009ee0:	f77f ac20 	ble.w	8009724 <_svfprintf_r+0x814>
 8009ee4:	4f68      	ldr	r7, [pc, #416]	@ (800a088 <_svfprintf_r+0x1178>)
 8009ee6:	f04f 0810 	mov.w	r8, #16
 8009eea:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8009eee:	2e10      	cmp	r6, #16
 8009ef0:	f103 0301 	add.w	r3, r3, #1
 8009ef4:	f104 0108 	add.w	r1, r4, #8
 8009ef8:	6027      	str	r7, [r4, #0]
 8009efa:	f77f aebc 	ble.w	8009c76 <_svfprintf_r+0xd66>
 8009efe:	3210      	adds	r2, #16
 8009f00:	2b07      	cmp	r3, #7
 8009f02:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8009f06:	f8c4 8004 	str.w	r8, [r4, #4]
 8009f0a:	dd08      	ble.n	8009f1e <_svfprintf_r+0x100e>
 8009f0c:	9803      	ldr	r0, [sp, #12]
 8009f0e:	aa26      	add	r2, sp, #152	@ 0x98
 8009f10:	4659      	mov	r1, fp
 8009f12:	f7fd fbff 	bl	8007714 <__ssprint_r>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	f040 8175 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009f1c:	a929      	add	r1, sp, #164	@ 0xa4
 8009f1e:	3e10      	subs	r6, #16
 8009f20:	460c      	mov	r4, r1
 8009f22:	e7e2      	b.n	8009eea <_svfprintf_r+0xfda>
 8009f24:	9803      	ldr	r0, [sp, #12]
 8009f26:	aa26      	add	r2, sp, #152	@ 0x98
 8009f28:	4659      	mov	r1, fp
 8009f2a:	f7fd fbf3 	bl	8007714 <__ssprint_r>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f040 8169 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009f34:	ac29      	add	r4, sp, #164	@ 0xa4
 8009f36:	e76d      	b.n	8009e14 <_svfprintf_r+0xf04>
 8009f38:	2010      	movs	r0, #16
 8009f3a:	4403      	add	r3, r0
 8009f3c:	2a07      	cmp	r2, #7
 8009f3e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009f42:	6060      	str	r0, [r4, #4]
 8009f44:	dd08      	ble.n	8009f58 <_svfprintf_r+0x1048>
 8009f46:	9803      	ldr	r0, [sp, #12]
 8009f48:	aa26      	add	r2, sp, #152	@ 0x98
 8009f4a:	4659      	mov	r1, fp
 8009f4c:	f7fd fbe2 	bl	8007714 <__ssprint_r>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	f040 8158 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009f56:	a929      	add	r1, sp, #164	@ 0xa4
 8009f58:	f1a8 0810 	sub.w	r8, r8, #16
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	e762      	b.n	8009e26 <_svfprintf_r+0xf16>
 8009f60:	460c      	mov	r4, r1
 8009f62:	e77c      	b.n	8009e5e <_svfprintf_r+0xf4e>
 8009f64:	2f00      	cmp	r7, #0
 8009f66:	d04a      	beq.n	8009ffe <_svfprintf_r+0x10ee>
 8009f68:	3f01      	subs	r7, #1
 8009f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009f72:	6063      	str	r3, [r4, #4]
 8009f74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009f76:	4413      	add	r3, r2
 8009f78:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009f7a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	2b07      	cmp	r3, #7
 8009f80:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009f82:	dc43      	bgt.n	800a00c <_svfprintf_r+0x10fc>
 8009f84:	3408      	adds	r4, #8
 8009f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f88:	781a      	ldrb	r2, [r3, #0]
 8009f8a:	9b06      	ldr	r3, [sp, #24]
 8009f8c:	eba3 0308 	sub.w	r3, r3, r8
 8009f90:	429a      	cmp	r2, r3
 8009f92:	bfa8      	it	ge
 8009f94:	461a      	movge	r2, r3
 8009f96:	2a00      	cmp	r2, #0
 8009f98:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009f9a:	4691      	mov	r9, r2
 8009f9c:	dd09      	ble.n	8009fb2 <_svfprintf_r+0x10a2>
 8009f9e:	4413      	add	r3, r2
 8009fa0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009fa2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	2b07      	cmp	r3, #7
 8009fa8:	e9c4 8200 	strd	r8, r2, [r4]
 8009fac:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009fae:	dc37      	bgt.n	800a020 <_svfprintf_r+0x1110>
 8009fb0:	3408      	adds	r4, #8
 8009fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb4:	781e      	ldrb	r6, [r3, #0]
 8009fb6:	f1b9 0f00 	cmp.w	r9, #0
 8009fba:	bfa8      	it	ge
 8009fbc:	eba6 0609 	subge.w	r6, r6, r9
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	dd18      	ble.n	8009ff6 <_svfprintf_r+0x10e6>
 8009fc4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8009fc8:	482f      	ldr	r0, [pc, #188]	@ (800a088 <_svfprintf_r+0x1178>)
 8009fca:	6020      	str	r0, [r4, #0]
 8009fcc:	2e10      	cmp	r6, #16
 8009fce:	f103 0301 	add.w	r3, r3, #1
 8009fd2:	f104 0108 	add.w	r1, r4, #8
 8009fd6:	dc2d      	bgt.n	800a034 <_svfprintf_r+0x1124>
 8009fd8:	6066      	str	r6, [r4, #4]
 8009fda:	2b07      	cmp	r3, #7
 8009fdc:	4416      	add	r6, r2
 8009fde:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8009fe2:	dd3a      	ble.n	800a05a <_svfprintf_r+0x114a>
 8009fe4:	9803      	ldr	r0, [sp, #12]
 8009fe6:	aa26      	add	r2, sp, #152	@ 0x98
 8009fe8:	4659      	mov	r1, fp
 8009fea:	f7fd fb93 	bl	8007714 <__ssprint_r>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	f040 8109 	bne.w	800a206 <_svfprintf_r+0x12f6>
 8009ff4:	ac29      	add	r4, sp, #164	@ 0xa4
 8009ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	4498      	add	r8, r3
 8009ffc:	e733      	b.n	8009e66 <_svfprintf_r+0xf56>
 8009ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a000:	3b01      	subs	r3, #1
 800a002:	9309      	str	r3, [sp, #36]	@ 0x24
 800a004:	9b08      	ldr	r3, [sp, #32]
 800a006:	3b01      	subs	r3, #1
 800a008:	9308      	str	r3, [sp, #32]
 800a00a:	e7ae      	b.n	8009f6a <_svfprintf_r+0x105a>
 800a00c:	9803      	ldr	r0, [sp, #12]
 800a00e:	aa26      	add	r2, sp, #152	@ 0x98
 800a010:	4659      	mov	r1, fp
 800a012:	f7fd fb7f 	bl	8007714 <__ssprint_r>
 800a016:	2800      	cmp	r0, #0
 800a018:	f040 80f5 	bne.w	800a206 <_svfprintf_r+0x12f6>
 800a01c:	ac29      	add	r4, sp, #164	@ 0xa4
 800a01e:	e7b2      	b.n	8009f86 <_svfprintf_r+0x1076>
 800a020:	9803      	ldr	r0, [sp, #12]
 800a022:	aa26      	add	r2, sp, #152	@ 0x98
 800a024:	4659      	mov	r1, fp
 800a026:	f7fd fb75 	bl	8007714 <__ssprint_r>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	f040 80eb 	bne.w	800a206 <_svfprintf_r+0x12f6>
 800a030:	ac29      	add	r4, sp, #164	@ 0xa4
 800a032:	e7be      	b.n	8009fb2 <_svfprintf_r+0x10a2>
 800a034:	2010      	movs	r0, #16
 800a036:	4402      	add	r2, r0
 800a038:	2b07      	cmp	r3, #7
 800a03a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a03e:	6060      	str	r0, [r4, #4]
 800a040:	dd08      	ble.n	800a054 <_svfprintf_r+0x1144>
 800a042:	9803      	ldr	r0, [sp, #12]
 800a044:	aa26      	add	r2, sp, #152	@ 0x98
 800a046:	4659      	mov	r1, fp
 800a048:	f7fd fb64 	bl	8007714 <__ssprint_r>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f040 80da 	bne.w	800a206 <_svfprintf_r+0x12f6>
 800a052:	a929      	add	r1, sp, #164	@ 0xa4
 800a054:	3e10      	subs	r6, #16
 800a056:	460c      	mov	r4, r1
 800a058:	e7b4      	b.n	8009fc4 <_svfprintf_r+0x10b4>
 800a05a:	460c      	mov	r4, r1
 800a05c:	e7cb      	b.n	8009ff6 <_svfprintf_r+0x10e6>
 800a05e:	9803      	ldr	r0, [sp, #12]
 800a060:	aa26      	add	r2, sp, #152	@ 0x98
 800a062:	4659      	mov	r1, fp
 800a064:	f7fd fb56 	bl	8007714 <__ssprint_r>
 800a068:	2800      	cmp	r0, #0
 800a06a:	f040 80cc 	bne.w	800a206 <_svfprintf_r+0x12f6>
 800a06e:	ac29      	add	r4, sp, #164	@ 0xa4
 800a070:	e717      	b.n	8009ea2 <_svfprintf_r+0xf92>
 800a072:	9803      	ldr	r0, [sp, #12]
 800a074:	aa26      	add	r2, sp, #152	@ 0x98
 800a076:	4659      	mov	r1, fp
 800a078:	f7fd fb4c 	bl	8007714 <__ssprint_r>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	f040 80c2 	bne.w	800a206 <_svfprintf_r+0x12f6>
 800a082:	ac29      	add	r4, sp, #164	@ 0xa4
 800a084:	e724      	b.n	8009ed0 <_svfprintf_r+0xfc0>
 800a086:	bf00      	nop
 800a088:	0800fac8 	.word	0x0800fac8
 800a08c:	9904      	ldr	r1, [sp, #16]
 800a08e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a090:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800a092:	2901      	cmp	r1, #1
 800a094:	f103 0301 	add.w	r3, r3, #1
 800a098:	f102 0201 	add.w	r2, r2, #1
 800a09c:	f104 0608 	add.w	r6, r4, #8
 800a0a0:	dc02      	bgt.n	800a0a8 <_svfprintf_r+0x1198>
 800a0a2:	07e9      	lsls	r1, r5, #31
 800a0a4:	f140 8083 	bpl.w	800a1ae <_svfprintf_r+0x129e>
 800a0a8:	2101      	movs	r1, #1
 800a0aa:	2a07      	cmp	r2, #7
 800a0ac:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a0b0:	f8c4 9000 	str.w	r9, [r4]
 800a0b4:	6061      	str	r1, [r4, #4]
 800a0b6:	dd08      	ble.n	800a0ca <_svfprintf_r+0x11ba>
 800a0b8:	9803      	ldr	r0, [sp, #12]
 800a0ba:	aa26      	add	r2, sp, #152	@ 0x98
 800a0bc:	4659      	mov	r1, fp
 800a0be:	f7fd fb29 	bl	8007714 <__ssprint_r>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	f040 809f 	bne.w	800a206 <_svfprintf_r+0x12f6>
 800a0c8:	ae29      	add	r6, sp, #164	@ 0xa4
 800a0ca:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a0cc:	6033      	str	r3, [r6, #0]
 800a0ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0d2:	6073      	str	r3, [r6, #4]
 800a0d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a0d6:	4413      	add	r3, r2
 800a0d8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a0da:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a0dc:	3301      	adds	r3, #1
 800a0de:	2b07      	cmp	r3, #7
 800a0e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a0e2:	dc33      	bgt.n	800a14c <_svfprintf_r+0x123c>
 800a0e4:	3608      	adds	r6, #8
 800a0e6:	9b04      	ldr	r3, [sp, #16]
 800a0e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0ec:	1e5c      	subs	r4, r3, #1
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800a0f6:	f7f6 fd17 	bl	8000b28 <__aeabi_dcmpeq>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d12f      	bne.n	800a15e <_svfprintf_r+0x124e>
 800a0fe:	f109 0201 	add.w	r2, r9, #1
 800a102:	e9c6 2400 	strd	r2, r4, [r6]
 800a106:	9a04      	ldr	r2, [sp, #16]
 800a108:	f108 0301 	add.w	r3, r8, #1
 800a10c:	3f01      	subs	r7, #1
 800a10e:	4417      	add	r7, r2
 800a110:	2b07      	cmp	r3, #7
 800a112:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800a116:	dd53      	ble.n	800a1c0 <_svfprintf_r+0x12b0>
 800a118:	9803      	ldr	r0, [sp, #12]
 800a11a:	aa26      	add	r2, sp, #152	@ 0x98
 800a11c:	4659      	mov	r1, fp
 800a11e:	f7fd faf9 	bl	8007714 <__ssprint_r>
 800a122:	2800      	cmp	r0, #0
 800a124:	d16f      	bne.n	800a206 <_svfprintf_r+0x12f6>
 800a126:	ae29      	add	r6, sp, #164	@ 0xa4
 800a128:	ab22      	add	r3, sp, #136	@ 0x88
 800a12a:	6033      	str	r3, [r6, #0]
 800a12c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800a12e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a130:	6073      	str	r3, [r6, #4]
 800a132:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a134:	4413      	add	r3, r2
 800a136:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a138:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a13a:	3301      	adds	r3, #1
 800a13c:	2b07      	cmp	r3, #7
 800a13e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a140:	f73f ada0 	bgt.w	8009c84 <_svfprintf_r+0xd74>
 800a144:	f106 0408 	add.w	r4, r6, #8
 800a148:	f7ff baec 	b.w	8009724 <_svfprintf_r+0x814>
 800a14c:	9803      	ldr	r0, [sp, #12]
 800a14e:	aa26      	add	r2, sp, #152	@ 0x98
 800a150:	4659      	mov	r1, fp
 800a152:	f7fd fadf 	bl	8007714 <__ssprint_r>
 800a156:	2800      	cmp	r0, #0
 800a158:	d155      	bne.n	800a206 <_svfprintf_r+0x12f6>
 800a15a:	ae29      	add	r6, sp, #164	@ 0xa4
 800a15c:	e7c3      	b.n	800a0e6 <_svfprintf_r+0x11d6>
 800a15e:	9b04      	ldr	r3, [sp, #16]
 800a160:	2b01      	cmp	r3, #1
 800a162:	dde1      	ble.n	800a128 <_svfprintf_r+0x1218>
 800a164:	4f57      	ldr	r7, [pc, #348]	@ (800a2c4 <_svfprintf_r+0x13b4>)
 800a166:	f04f 0810 	mov.w	r8, #16
 800a16a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800a16e:	2c10      	cmp	r4, #16
 800a170:	f103 0301 	add.w	r3, r3, #1
 800a174:	f106 0108 	add.w	r1, r6, #8
 800a178:	6037      	str	r7, [r6, #0]
 800a17a:	dc07      	bgt.n	800a18c <_svfprintf_r+0x127c>
 800a17c:	6074      	str	r4, [r6, #4]
 800a17e:	2b07      	cmp	r3, #7
 800a180:	4414      	add	r4, r2
 800a182:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800a186:	dcc7      	bgt.n	800a118 <_svfprintf_r+0x1208>
 800a188:	460e      	mov	r6, r1
 800a18a:	e7cd      	b.n	800a128 <_svfprintf_r+0x1218>
 800a18c:	3210      	adds	r2, #16
 800a18e:	2b07      	cmp	r3, #7
 800a190:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a194:	f8c6 8004 	str.w	r8, [r6, #4]
 800a198:	dd06      	ble.n	800a1a8 <_svfprintf_r+0x1298>
 800a19a:	9803      	ldr	r0, [sp, #12]
 800a19c:	aa26      	add	r2, sp, #152	@ 0x98
 800a19e:	4659      	mov	r1, fp
 800a1a0:	f7fd fab8 	bl	8007714 <__ssprint_r>
 800a1a4:	bb78      	cbnz	r0, 800a206 <_svfprintf_r+0x12f6>
 800a1a6:	a929      	add	r1, sp, #164	@ 0xa4
 800a1a8:	3c10      	subs	r4, #16
 800a1aa:	460e      	mov	r6, r1
 800a1ac:	e7dd      	b.n	800a16a <_svfprintf_r+0x125a>
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	2a07      	cmp	r2, #7
 800a1b2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a1b6:	f8c4 9000 	str.w	r9, [r4]
 800a1ba:	6061      	str	r1, [r4, #4]
 800a1bc:	ddb4      	ble.n	800a128 <_svfprintf_r+0x1218>
 800a1be:	e7ab      	b.n	800a118 <_svfprintf_r+0x1208>
 800a1c0:	3608      	adds	r6, #8
 800a1c2:	e7b1      	b.n	800a128 <_svfprintf_r+0x1218>
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	f7ff baad 	b.w	8009724 <_svfprintf_r+0x814>
 800a1ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a1ce:	1a9d      	subs	r5, r3, r2
 800a1d0:	2d00      	cmp	r5, #0
 800a1d2:	f77f aaaa 	ble.w	800972a <_svfprintf_r+0x81a>
 800a1d6:	4e3c      	ldr	r6, [pc, #240]	@ (800a2c8 <_svfprintf_r+0x13b8>)
 800a1d8:	2710      	movs	r7, #16
 800a1da:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800a1de:	2d10      	cmp	r5, #16
 800a1e0:	f103 0301 	add.w	r3, r3, #1
 800a1e4:	6026      	str	r6, [r4, #0]
 800a1e6:	dc18      	bgt.n	800a21a <_svfprintf_r+0x130a>
 800a1e8:	442a      	add	r2, r5
 800a1ea:	2b07      	cmp	r3, #7
 800a1ec:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a1f0:	6065      	str	r5, [r4, #4]
 800a1f2:	f77f aa9a 	ble.w	800972a <_svfprintf_r+0x81a>
 800a1f6:	9803      	ldr	r0, [sp, #12]
 800a1f8:	aa26      	add	r2, sp, #152	@ 0x98
 800a1fa:	4659      	mov	r1, fp
 800a1fc:	f7fd fa8a 	bl	8007714 <__ssprint_r>
 800a200:	2800      	cmp	r0, #0
 800a202:	f43f aa92 	beq.w	800972a <_svfprintf_r+0x81a>
 800a206:	f1ba 0f00 	cmp.w	sl, #0
 800a20a:	f43f a89a 	beq.w	8009342 <_svfprintf_r+0x432>
 800a20e:	9803      	ldr	r0, [sp, #12]
 800a210:	4651      	mov	r1, sl
 800a212:	f7fe f9cf 	bl	80085b4 <_free_r>
 800a216:	f7ff b894 	b.w	8009342 <_svfprintf_r+0x432>
 800a21a:	3210      	adds	r2, #16
 800a21c:	2b07      	cmp	r3, #7
 800a21e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a222:	6067      	str	r7, [r4, #4]
 800a224:	dc02      	bgt.n	800a22c <_svfprintf_r+0x131c>
 800a226:	3408      	adds	r4, #8
 800a228:	3d10      	subs	r5, #16
 800a22a:	e7d6      	b.n	800a1da <_svfprintf_r+0x12ca>
 800a22c:	9803      	ldr	r0, [sp, #12]
 800a22e:	aa26      	add	r2, sp, #152	@ 0x98
 800a230:	4659      	mov	r1, fp
 800a232:	f7fd fa6f 	bl	8007714 <__ssprint_r>
 800a236:	2800      	cmp	r0, #0
 800a238:	d1e5      	bne.n	800a206 <_svfprintf_r+0x12f6>
 800a23a:	ac29      	add	r4, sp, #164	@ 0xa4
 800a23c:	e7f4      	b.n	800a228 <_svfprintf_r+0x1318>
 800a23e:	9803      	ldr	r0, [sp, #12]
 800a240:	4651      	mov	r1, sl
 800a242:	f7fe f9b7 	bl	80085b4 <_free_r>
 800a246:	f7ff ba88 	b.w	800975a <_svfprintf_r+0x84a>
 800a24a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f43f a878 	beq.w	8009342 <_svfprintf_r+0x432>
 800a252:	9803      	ldr	r0, [sp, #12]
 800a254:	aa26      	add	r2, sp, #152	@ 0x98
 800a256:	4659      	mov	r1, fp
 800a258:	f7fd fa5c 	bl	8007714 <__ssprint_r>
 800a25c:	f7ff b871 	b.w	8009342 <_svfprintf_r+0x432>
 800a260:	ea56 0207 	orrs.w	r2, r6, r7
 800a264:	9508      	str	r5, [sp, #32]
 800a266:	f43f ab7a 	beq.w	800995e <_svfprintf_r+0xa4e>
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	f43f abfb 	beq.w	8009a66 <_svfprintf_r+0xb56>
 800a270:	2b02      	cmp	r3, #2
 800a272:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800a276:	f43f ac3f 	beq.w	8009af8 <_svfprintf_r+0xbe8>
 800a27a:	f006 0307 	and.w	r3, r6, #7
 800a27e:	08f6      	lsrs	r6, r6, #3
 800a280:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800a284:	08ff      	lsrs	r7, r7, #3
 800a286:	3330      	adds	r3, #48	@ 0x30
 800a288:	ea56 0107 	orrs.w	r1, r6, r7
 800a28c:	464a      	mov	r2, r9
 800a28e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800a292:	d1f2      	bne.n	800a27a <_svfprintf_r+0x136a>
 800a294:	9908      	ldr	r1, [sp, #32]
 800a296:	07c8      	lsls	r0, r1, #31
 800a298:	d506      	bpl.n	800a2a8 <_svfprintf_r+0x1398>
 800a29a:	2b30      	cmp	r3, #48	@ 0x30
 800a29c:	d004      	beq.n	800a2a8 <_svfprintf_r+0x1398>
 800a29e:	2330      	movs	r3, #48	@ 0x30
 800a2a0:	f809 3c01 	strb.w	r3, [r9, #-1]
 800a2a4:	f1a2 0902 	sub.w	r9, r2, #2
 800a2a8:	ab52      	add	r3, sp, #328	@ 0x148
 800a2aa:	9d08      	ldr	r5, [sp, #32]
 800a2ac:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800a2b0:	f04f 0a00 	mov.w	sl, #0
 800a2b4:	eba3 0809 	sub.w	r8, r3, r9
 800a2b8:	4657      	mov	r7, sl
 800a2ba:	f8cd a020 	str.w	sl, [sp, #32]
 800a2be:	4656      	mov	r6, sl
 800a2c0:	f7ff b97c 	b.w	80095bc <_svfprintf_r+0x6ac>
 800a2c4:	0800fac8 	.word	0x0800fac8
 800a2c8:	0800fad8 	.word	0x0800fad8

0800a2cc <__ssvfscanf_r>:
 800a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 800a2d4:	461d      	mov	r5, r3
 800a2d6:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800a2da:	af02      	add	r7, sp, #8
 800a2dc:	049e      	lsls	r6, r3, #18
 800a2de:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	617a      	str	r2, [r7, #20]
 800a2e4:	d406      	bmi.n	800a2f4 <__ssvfscanf_r+0x28>
 800a2e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a2ea:	818b      	strh	r3, [r1, #12]
 800a2ec:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800a2ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2f2:	664b      	str	r3, [r1, #100]	@ 0x64
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	e9c7 3307 	strd	r3, r3, [r7, #28]
 800a2fa:	61bb      	str	r3, [r7, #24]
 800a2fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800a300:	627b      	str	r3, [r7, #36]	@ 0x24
 800a302:	f8d7 8014 	ldr.w	r8, [r7, #20]
 800a306:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 80d3 	beq.w	800a4b8 <__ssvfscanf_r+0x1ec>
 800a312:	4a84      	ldr	r2, [pc, #528]	@ (800a524 <__ssvfscanf_r+0x258>)
 800a314:	5cd6      	ldrb	r6, [r2, r3]
 800a316:	f016 0608 	ands.w	r6, r6, #8
 800a31a:	d01b      	beq.n	800a354 <__ssvfscanf_r+0x88>
 800a31c:	6863      	ldr	r3, [r4, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dd08      	ble.n	800a334 <__ssvfscanf_r+0x68>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	497f      	ldr	r1, [pc, #508]	@ (800a524 <__ssvfscanf_r+0x258>)
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	5c8a      	ldrb	r2, [r1, r2]
 800a32a:	0710      	lsls	r0, r2, #28
 800a32c:	d409      	bmi.n	800a342 <__ssvfscanf_r+0x76>
 800a32e:	f8c7 8014 	str.w	r8, [r7, #20]
 800a332:	e7e6      	b.n	800a302 <__ssvfscanf_r+0x36>
 800a334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a336:	4621      	mov	r1, r4
 800a338:	f003 fe99 	bl	800e06e <__ssrefill_r>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d0f0      	beq.n	800a322 <__ssvfscanf_r+0x56>
 800a340:	e7f5      	b.n	800a32e <__ssvfscanf_r+0x62>
 800a342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a344:	3201      	adds	r2, #1
 800a346:	633a      	str	r2, [r7, #48]	@ 0x30
 800a348:	6862      	ldr	r2, [r4, #4]
 800a34a:	3301      	adds	r3, #1
 800a34c:	3a01      	subs	r2, #1
 800a34e:	6062      	str	r2, [r4, #4]
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	e7e3      	b.n	800a31c <__ssvfscanf_r+0x50>
 800a354:	2b25      	cmp	r3, #37	@ 0x25
 800a356:	d163      	bne.n	800a420 <__ssvfscanf_r+0x154>
 800a358:	62fe      	str	r6, [r7, #44]	@ 0x2c
 800a35a:	4642      	mov	r2, r8
 800a35c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a360:	617a      	str	r2, [r7, #20]
 800a362:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 800a366:	2a55      	cmp	r2, #85	@ 0x55
 800a368:	f200 816e 	bhi.w	800a648 <__ssvfscanf_r+0x37c>
 800a36c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a370:	016c0056 	.word	0x016c0056
 800a374:	016c016c 	.word	0x016c016c
 800a378:	007d016c 	.word	0x007d016c
 800a37c:	016c016c 	.word	0x016c016c
 800a380:	016c016c 	.word	0x016c016c
 800a384:	00b9016c 	.word	0x00b9016c
 800a388:	00b900b9 	.word	0x00b900b9
 800a38c:	00b900b9 	.word	0x00b900b9
 800a390:	00b900b9 	.word	0x00b900b9
 800a394:	00b900b9 	.word	0x00b900b9
 800a398:	016c00b9 	.word	0x016c00b9
 800a39c:	016c016c 	.word	0x016c016c
 800a3a0:	016c016c 	.word	0x016c016c
 800a3a4:	016c016c 	.word	0x016c016c
 800a3a8:	016c00e0 	.word	0x016c00e0
 800a3ac:	00c3010a 	.word	0x00c3010a
 800a3b0:	00e000e0 	.word	0x00e000e0
 800a3b4:	016c00e0 	.word	0x016c00e0
 800a3b8:	016c016c 	.word	0x016c016c
 800a3bc:	00a2016c 	.word	0x00a2016c
 800a3c0:	016c016c 	.word	0x016c016c
 800a3c4:	016c00c7 	.word	0x016c00c7
 800a3c8:	016c016c 	.word	0x016c016c
 800a3cc:	016c00fa 	.word	0x016c00fa
 800a3d0:	016c016c 	.word	0x016c016c
 800a3d4:	00d4016c 	.word	0x00d4016c
 800a3d8:	016c016c 	.word	0x016c016c
 800a3dc:	016c00ff 	.word	0x016c00ff
 800a3e0:	016c016c 	.word	0x016c016c
 800a3e4:	016c016c 	.word	0x016c016c
 800a3e8:	016c00e0 	.word	0x016c00e0
 800a3ec:	00c5010c 	.word	0x00c5010c
 800a3f0:	00e000e0 	.word	0x00e000e0
 800a3f4:	009400e0 	.word	0x009400e0
 800a3f8:	00a20130 	.word	0x00a20130
 800a3fc:	0085016c 	.word	0x0085016c
 800a400:	011400ac 	.word	0x011400ac
 800a404:	011100c9 	.word	0x011100c9
 800a408:	016c016c 	.word	0x016c016c
 800a40c:	00a900fc 	.word	0x00a900fc
 800a410:	016c00d0 	.word	0x016c00d0
 800a414:	00d4016c 	.word	0x00d4016c
 800a418:	00a9016c 	.word	0x00a9016c
 800a41c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	dd0e      	ble.n	800a444 <__ssvfscanf_r+0x178>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a42c:	7819      	ldrb	r1, [r3, #0]
 800a42e:	4291      	cmp	r1, r2
 800a430:	d142      	bne.n	800a4b8 <__ssvfscanf_r+0x1ec>
 800a432:	3301      	adds	r3, #1
 800a434:	6862      	ldr	r2, [r4, #4]
 800a436:	6023      	str	r3, [r4, #0]
 800a438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43a:	3a01      	subs	r2, #1
 800a43c:	3301      	adds	r3, #1
 800a43e:	6062      	str	r2, [r4, #4]
 800a440:	633b      	str	r3, [r7, #48]	@ 0x30
 800a442:	e774      	b.n	800a32e <__ssvfscanf_r+0x62>
 800a444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a446:	4621      	mov	r1, r4
 800a448:	f003 fe11 	bl	800e06e <__ssrefill_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d0ea      	beq.n	800a426 <__ssvfscanf_r+0x15a>
 800a450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a452:	b113      	cbz	r3, 800a45a <__ssvfscanf_r+0x18e>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	065b      	lsls	r3, r3, #25
 800a458:	d52e      	bpl.n	800a4b8 <__ssvfscanf_r+0x1ec>
 800a45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f041 809d 	bne.w	800b59c <__ssvfscanf_r+0x12d0>
 800a462:	f04f 33ff 	mov.w	r3, #4294967295
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
 800a468:	e0f9      	b.n	800a65e <__ssvfscanf_r+0x392>
 800a46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46c:	4333      	orrs	r3, r6
 800a46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a470:	d122      	bne.n	800a4b8 <__ssvfscanf_r+0x1ec>
 800a472:	2610      	movs	r6, #16
 800a474:	f8d7 8014 	ldr.w	r8, [r7, #20]
 800a478:	e76f      	b.n	800a35a <__ssvfscanf_r+0x8e>
 800a47a:	0731      	lsls	r1, r6, #28
 800a47c:	d11c      	bne.n	800a4b8 <__ssvfscanf_r+0x1ec>
 800a47e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a482:	2b6c      	cmp	r3, #108	@ 0x6c
 800a484:	d105      	bne.n	800a492 <__ssvfscanf_r+0x1c6>
 800a486:	f108 0302 	add.w	r3, r8, #2
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	f046 0602 	orr.w	r6, r6, #2
 800a490:	e7f0      	b.n	800a474 <__ssvfscanf_r+0x1a8>
 800a492:	f046 0601 	orr.w	r6, r6, #1
 800a496:	e7ed      	b.n	800a474 <__ssvfscanf_r+0x1a8>
 800a498:	0732      	lsls	r2, r6, #28
 800a49a:	d10d      	bne.n	800a4b8 <__ssvfscanf_r+0x1ec>
 800a49c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a4a0:	2b68      	cmp	r3, #104	@ 0x68
 800a4a2:	bf03      	ittte	eq
 800a4a4:	f108 0302 	addeq.w	r3, r8, #2
 800a4a8:	617b      	streq	r3, [r7, #20]
 800a4aa:	f046 0608 	orreq.w	r6, r6, #8
 800a4ae:	f046 0604 	orrne.w	r6, r6, #4
 800a4b2:	e7df      	b.n	800a474 <__ssvfscanf_r+0x1a8>
 800a4b4:	0733      	lsls	r3, r6, #28
 800a4b6:	d0e9      	beq.n	800a48c <__ssvfscanf_r+0x1c0>
 800a4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 80cf 	beq.w	800a65e <__ssvfscanf_r+0x392>
 800a4c0:	e0c8      	b.n	800a654 <__ssvfscanf_r+0x388>
 800a4c2:	0730      	lsls	r0, r6, #28
 800a4c4:	d0d6      	beq.n	800a474 <__ssvfscanf_r+0x1a8>
 800a4c6:	e7f7      	b.n	800a4b8 <__ssvfscanf_r+0x1ec>
 800a4c8:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 800a4cc:	d1f4      	bne.n	800a4b8 <__ssvfscanf_r+0x1ec>
 800a4ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4d0:	b922      	cbnz	r2, 800a4dc <__ssvfscanf_r+0x210>
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	aa02      	add	r2, sp, #8
 800a4d6:	e9c2 3300 	strd	r3, r3, [r2]
 800a4da:	637a      	str	r2, [r7, #52]	@ 0x34
 800a4dc:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 800a4e0:	e7c8      	b.n	800a474 <__ssvfscanf_r+0x1a8>
 800a4e2:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 800a4e6:	d1e7      	bne.n	800a4b8 <__ssvfscanf_r+0x1ec>
 800a4e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4ea:	220a      	movs	r2, #10
 800a4ec:	fb02 3301 	mla	r3, r2, r1, r3
 800a4f0:	3b30      	subs	r3, #48	@ 0x30
 800a4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4f4:	e7be      	b.n	800a474 <__ssvfscanf_r+0x1a8>
 800a4f6:	f046 0601 	orr.w	r6, r6, #1
 800a4fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a528 <__ssvfscanf_r+0x25c>)
 800a4fc:	e009      	b.n	800a512 <__ssvfscanf_r+0x246>
 800a4fe:	f046 0601 	orr.w	r6, r6, #1
 800a502:	4b0a      	ldr	r3, [pc, #40]	@ (800a52c <__ssvfscanf_r+0x260>)
 800a504:	61bb      	str	r3, [r7, #24]
 800a506:	2308      	movs	r3, #8
 800a508:	61fb      	str	r3, [r7, #28]
 800a50a:	f04f 0803 	mov.w	r8, #3
 800a50e:	e011      	b.n	800a534 <__ssvfscanf_r+0x268>
 800a510:	4b06      	ldr	r3, [pc, #24]	@ (800a52c <__ssvfscanf_r+0x260>)
 800a512:	61bb      	str	r3, [r7, #24]
 800a514:	230a      	movs	r3, #10
 800a516:	e7f7      	b.n	800a508 <__ssvfscanf_r+0x23c>
 800a518:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 800a51c:	4b03      	ldr	r3, [pc, #12]	@ (800a52c <__ssvfscanf_r+0x260>)
 800a51e:	61bb      	str	r3, [r7, #24]
 800a520:	2310      	movs	r3, #16
 800a522:	e7f1      	b.n	800a508 <__ssvfscanf_r+0x23c>
 800a524:	0800fd39 	.word	0x0800fd39
 800a528:	0800dc59 	.word	0x0800dc59
 800a52c:	0800dd39 	.word	0x0800dd39
 800a530:	f04f 0804 	mov.w	r8, #4
 800a534:	6863      	ldr	r3, [r4, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	dd4e      	ble.n	800a5d8 <__ssvfscanf_r+0x30c>
 800a53a:	0673      	lsls	r3, r6, #25
 800a53c:	d407      	bmi.n	800a54e <__ssvfscanf_r+0x282>
 800a53e:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 800a83c <__ssvfscanf_r+0x570>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	781a      	ldrb	r2, [r3, #0]
 800a546:	f819 2002 	ldrb.w	r2, [r9, r2]
 800a54a:	0710      	lsls	r0, r2, #28
 800a54c:	d44b      	bmi.n	800a5e6 <__ssvfscanf_r+0x31a>
 800a54e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a552:	f1b8 0f03 	cmp.w	r8, #3
 800a556:	d858      	bhi.n	800a60a <__ssvfscanf_r+0x33e>
 800a558:	e8df f018 	tbh	[pc, r8, lsl #1]
 800a55c:	037801c1 	.word	0x037801c1
 800a560:	05f30514 	.word	0x05f30514
 800a564:	f046 0601 	orr.w	r6, r6, #1
 800a568:	f04f 0802 	mov.w	r8, #2
 800a56c:	e7e2      	b.n	800a534 <__ssvfscanf_r+0x268>
 800a56e:	6979      	ldr	r1, [r7, #20]
 800a570:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800a574:	f001 f91f 	bl	800b7b6 <__sccl>
 800a578:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 800a57c:	6178      	str	r0, [r7, #20]
 800a57e:	f04f 0801 	mov.w	r8, #1
 800a582:	e7d7      	b.n	800a534 <__ssvfscanf_r+0x268>
 800a584:	f046 0601 	orr.w	r6, r6, #1
 800a588:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 800a58c:	f04f 0800 	mov.w	r8, #0
 800a590:	e7d0      	b.n	800a534 <__ssvfscanf_r+0x268>
 800a592:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 800a596:	e7c1      	b.n	800a51c <__ssvfscanf_r+0x250>
 800a598:	06f1      	lsls	r1, r6, #27
 800a59a:	f53f aeb2 	bmi.w	800a302 <__ssvfscanf_r+0x36>
 800a59e:	0732      	lsls	r2, r6, #28
 800a5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a4:	d502      	bpl.n	800a5ac <__ssvfscanf_r+0x2e0>
 800a5a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5a8:	701a      	strb	r2, [r3, #0]
 800a5aa:	e6aa      	b.n	800a302 <__ssvfscanf_r+0x36>
 800a5ac:	0770      	lsls	r0, r6, #29
 800a5ae:	d502      	bpl.n	800a5b6 <__ssvfscanf_r+0x2ea>
 800a5b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b2:	801a      	strh	r2, [r3, #0]
 800a5b4:	e6a5      	b.n	800a302 <__ssvfscanf_r+0x36>
 800a5b6:	07f1      	lsls	r1, r6, #31
 800a5b8:	d502      	bpl.n	800a5c0 <__ssvfscanf_r+0x2f4>
 800a5ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	e6a0      	b.n	800a302 <__ssvfscanf_r+0x36>
 800a5c0:	07b2      	lsls	r2, r6, #30
 800a5c2:	d5fa      	bpl.n	800a5ba <__ssvfscanf_r+0x2ee>
 800a5c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5c8:	17d2      	asrs	r2, r2, #31
 800a5ca:	e9c3 1200 	strd	r1, r2, [r3]
 800a5ce:	e698      	b.n	800a302 <__ssvfscanf_r+0x36>
 800a5d0:	4b99      	ldr	r3, [pc, #612]	@ (800a838 <__ssvfscanf_r+0x56c>)
 800a5d2:	61bb      	str	r3, [r7, #24]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	e797      	b.n	800a508 <__ssvfscanf_r+0x23c>
 800a5d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5da:	4621      	mov	r1, r4
 800a5dc:	f003 fd47 	bl	800e06e <__ssrefill_r>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d0aa      	beq.n	800a53a <__ssvfscanf_r+0x26e>
 800a5e4:	e734      	b.n	800a450 <__ssvfscanf_r+0x184>
 800a5e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5e8:	3201      	adds	r2, #1
 800a5ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5ec:	6862      	ldr	r2, [r4, #4]
 800a5ee:	3a01      	subs	r2, #1
 800a5f0:	2a00      	cmp	r2, #0
 800a5f2:	6062      	str	r2, [r4, #4]
 800a5f4:	dd02      	ble.n	800a5fc <__ssvfscanf_r+0x330>
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	e7a2      	b.n	800a542 <__ssvfscanf_r+0x276>
 800a5fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5fe:	4621      	mov	r1, r4
 800a600:	f003 fd35 	bl	800e06e <__ssrefill_r>
 800a604:	2800      	cmp	r0, #0
 800a606:	d09c      	beq.n	800a542 <__ssvfscanf_r+0x276>
 800a608:	e722      	b.n	800a450 <__ssvfscanf_r+0x184>
 800a60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	bf38      	it	cc
 800a610:	2301      	movcc	r3, #1
 800a612:	4698      	mov	r8, r3
 800a614:	f016 0301 	ands.w	r3, r6, #1
 800a618:	f006 0b10 	and.w	fp, r6, #16
 800a61c:	f000 80eb 	beq.w	800a7f6 <__ssvfscanf_r+0x52a>
 800a620:	f1bb 0f00 	cmp.w	fp, #0
 800a624:	f040 8085 	bne.w	800a732 <__ssvfscanf_r+0x466>
 800a628:	462b      	mov	r3, r5
 800a62a:	0631      	lsls	r1, r6, #24
 800a62c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a632:	f140 8085 	bpl.w	800a740 <__ssvfscanf_r+0x474>
 800a636:	b13d      	cbz	r5, 800a648 <__ssvfscanf_r+0x37c>
 800a638:	2080      	movs	r0, #128	@ 0x80
 800a63a:	f001 fffd 	bl	800c638 <malloc>
 800a63e:	4606      	mov	r6, r0
 800a640:	b998      	cbnz	r0, 800a66a <__ssvfscanf_r+0x39e>
 800a642:	f04f 33ff 	mov.w	r3, #4294967295
 800a646:	627b      	str	r3, [r7, #36]	@ 0x24
 800a648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64a:	b143      	cbz	r3, 800a65e <__ssvfscanf_r+0x392>
 800a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64e:	3301      	adds	r3, #1
 800a650:	f000 87a4 	beq.w	800b59c <__ssvfscanf_r+0x12d0>
 800a654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	b108      	cbz	r0, 800a65e <__ssvfscanf_r+0x392>
 800a65a:	f001 fff5 	bl	800c648 <free>
 800a65e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a660:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 800a664:	46bd      	mov	sp, r7
 800a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66c:	6028      	str	r0, [r5, #0]
 800a66e:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800a672:	889b      	ldrh	r3, [r3, #4]
 800a674:	4599      	cmp	r9, r3
 800a676:	d314      	bcc.n	800a6a2 <__ssvfscanf_r+0x3d6>
 800a678:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800a67c:	4293      	cmp	r3, r2
 800a67e:	f200 878d 	bhi.w	800b59c <__ssvfscanf_r+0x12d0>
 800a682:	3308      	adds	r3, #8
 800a684:	fa1f fa83 	uxth.w	sl, r3
 800a688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68a:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	f002 fc58 	bl	800cf44 <realloc>
 800a694:	2800      	cmp	r0, #0
 800a696:	f000 8781 	beq.w	800b59c <__ssvfscanf_r+0x12d0>
 800a69a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69c:	6018      	str	r0, [r3, #0]
 800a69e:	f8a3 a004 	strh.w	sl, [r3, #4]
 800a6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f109 0201 	add.w	r2, r9, #1
 800a6ac:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800a6b0:	46aa      	mov	sl, r5
 800a6b2:	80ca      	strh	r2, [r1, #6]
 800a6b4:	4635      	mov	r5, r6
 800a6b6:	f04f 0920 	mov.w	r9, #32
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	613a      	str	r2, [r7, #16]
 800a6be:	f001 f8d3 	bl	800b868 <__locale_mb_cur_max>
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	4290      	cmp	r0, r2
 800a6c6:	f43f aec3 	beq.w	800a450 <__ssvfscanf_r+0x184>
 800a6ca:	6821      	ldr	r1, [r4, #0]
 800a6cc:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 800a6d0:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a6d4:	f80c 0002 	strb.w	r0, [ip, r2]
 800a6d8:	1c53      	adds	r3, r2, #1
 800a6da:	6862      	ldr	r2, [r4, #4]
 800a6dc:	3a01      	subs	r2, #1
 800a6de:	e9c4 1200 	strd	r1, r2, [r4]
 800a6e2:	6a3a      	ldr	r2, [r7, #32]
 800a6e4:	2a03      	cmp	r2, #3
 800a6e6:	d102      	bne.n	800a6ee <__ssvfscanf_r+0x422>
 800a6e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6ea:	2a04      	cmp	r2, #4
 800a6ec:	d007      	beq.n	800a6fe <__ssvfscanf_r+0x432>
 800a6ee:	2208      	movs	r2, #8
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800a6f6:	623b      	str	r3, [r7, #32]
 800a6f8:	f7fd fe55 	bl	80083a6 <memset>
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a702:	9200      	str	r2, [sp, #0]
 800a704:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a706:	613b      	str	r3, [r7, #16]
 800a708:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800a70c:	4629      	mov	r1, r5
 800a70e:	f003 fc4b 	bl	800dfa8 <_mbrtowc_r>
 800a712:	1c42      	adds	r2, r0, #1
 800a714:	6238      	str	r0, [r7, #32]
 800a716:	f43f ae9b 	beq.w	800a450 <__ssvfscanf_r+0x184>
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	b9b8      	cbnz	r0, 800a74e <__ssvfscanf_r+0x482>
 800a71e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a720:	441a      	add	r2, r3
 800a722:	4613      	mov	r3, r2
 800a724:	f1bb 0f00 	cmp.w	fp, #0
 800a728:	d00e      	beq.n	800a748 <__ssvfscanf_r+0x47c>
 800a72a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a72c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a730:	e019      	b.n	800a766 <__ssvfscanf_r+0x49a>
 800a732:	f04f 0900 	mov.w	r9, #0
 800a736:	62fd      	str	r5, [r7, #44]	@ 0x2c
 800a738:	464e      	mov	r6, r9
 800a73a:	46ca      	mov	sl, r9
 800a73c:	464d      	mov	r5, r9
 800a73e:	e7bc      	b.n	800a6ba <__ssvfscanf_r+0x3ee>
 800a740:	46d9      	mov	r9, fp
 800a742:	465e      	mov	r6, fp
 800a744:	46da      	mov	sl, fp
 800a746:	e7b8      	b.n	800a6ba <__ssvfscanf_r+0x3ee>
 800a748:	f8c5 b000 	str.w	fp, [r5]
 800a74c:	e7ed      	b.n	800a72a <__ssvfscanf_r+0x45e>
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	3202      	adds	r2, #2
 800a752:	d025      	beq.n	800a7a0 <__ssvfscanf_r+0x4d4>
 800a754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a756:	441a      	add	r2, r3
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d1e5      	bne.n	800a72c <__ssvfscanf_r+0x460>
 800a760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a762:	2b04      	cmp	r3, #4
 800a764:	d1e2      	bne.n	800a72c <__ssvfscanf_r+0x460>
 800a766:	f1bb 0f00 	cmp.w	fp, #0
 800a76a:	d117      	bne.n	800a79c <__ssvfscanf_r+0x4d0>
 800a76c:	f1ba 0f00 	cmp.w	sl, #0
 800a770:	d013      	beq.n	800a79a <__ssvfscanf_r+0x4ce>
 800a772:	1bab      	subs	r3, r5, r6
 800a774:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800a778:	d80f      	bhi.n	800a79a <__ssvfscanf_r+0x4ce>
 800a77a:	4630      	mov	r0, r6
 800a77c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a780:	613b      	str	r3, [r7, #16]
 800a782:	f002 fbdf 	bl	800cf44 <realloc>
 800a786:	4606      	mov	r6, r0
 800a788:	2800      	cmp	r0, #0
 800a78a:	f43f af5a 	beq.w	800a642 <__ssvfscanf_r+0x376>
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f8ca 0000 	str.w	r0, [sl]
 800a794:	18c5      	adds	r5, r0, r3
 800a796:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800a79a:	3504      	adds	r5, #4
 800a79c:	2200      	movs	r2, #0
 800a79e:	e000      	b.n	800a7a2 <__ssvfscanf_r+0x4d6>
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6863      	ldr	r3, [r4, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dc14      	bgt.n	800a7d2 <__ssvfscanf_r+0x506>
 800a7a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7aa:	613a      	str	r2, [r7, #16]
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	f003 fc5e 	bl	800e06e <__ssrefill_r>
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	b168      	cbz	r0, 800a7d2 <__ssvfscanf_r+0x506>
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	f47f ae4a 	bne.w	800a450 <__ssvfscanf_r+0x184>
 800a7bc:	f1ba 0f00 	cmp.w	sl, #0
 800a7c0:	d10c      	bne.n	800a7dc <__ssvfscanf_r+0x510>
 800a7c2:	f1bb 0f00 	cmp.w	fp, #0
 800a7c6:	d102      	bne.n	800a7ce <__ssvfscanf_r+0x502>
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7ce:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800a7d0:	e597      	b.n	800a302 <__ssvfscanf_r+0x36>
 800a7d2:	f1b8 0f00 	cmp.w	r8, #0
 800a7d6:	f47f af71 	bne.w	800a6bc <__ssvfscanf_r+0x3f0>
 800a7da:	e7ef      	b.n	800a7bc <__ssvfscanf_r+0x4f0>
 800a7dc:	1ba9      	subs	r1, r5, r6
 800a7de:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 800a7e2:	d9ee      	bls.n	800a7c2 <__ssvfscanf_r+0x4f6>
 800a7e4:	f8da 0000 	ldr.w	r0, [sl]
 800a7e8:	f002 fbac 	bl	800cf44 <realloc>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d0e8      	beq.n	800a7c2 <__ssvfscanf_r+0x4f6>
 800a7f0:	f8ca 0000 	str.w	r0, [sl]
 800a7f4:	e7e5      	b.n	800a7c2 <__ssvfscanf_r+0x4f6>
 800a7f6:	f1bb 0f00 	cmp.w	fp, #0
 800a7fa:	d021      	beq.n	800a840 <__ssvfscanf_r+0x574>
 800a7fc:	461e      	mov	r6, r3
 800a7fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a802:	4598      	cmp	r8, r3
 800a804:	dd11      	ble.n	800a82a <__ssvfscanf_r+0x55e>
 800a806:	441a      	add	r2, r3
 800a808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a80a:	6022      	str	r2, [r4, #0]
 800a80c:	4621      	mov	r1, r4
 800a80e:	441e      	add	r6, r3
 800a810:	eba8 0803 	sub.w	r8, r8, r3
 800a814:	f003 fc2b 	bl	800e06e <__ssrefill_r>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d0f0      	beq.n	800a7fe <__ssvfscanf_r+0x532>
 800a81c:	2e00      	cmp	r6, #0
 800a81e:	f43f ae17 	beq.w	800a450 <__ssvfscanf_r+0x184>
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	4433      	add	r3, r6
 800a826:	633b      	str	r3, [r7, #48]	@ 0x30
 800a828:	e56b      	b.n	800a302 <__ssvfscanf_r+0x36>
 800a82a:	eba3 0308 	sub.w	r3, r3, r8
 800a82e:	4442      	add	r2, r8
 800a830:	4446      	add	r6, r8
 800a832:	6063      	str	r3, [r4, #4]
 800a834:	6022      	str	r2, [r4, #0]
 800a836:	e7f4      	b.n	800a822 <__ssvfscanf_r+0x556>
 800a838:	0800dc59 	.word	0x0800dc59
 800a83c:	0800fd39 	.word	0x0800fd39
 800a840:	46a9      	mov	r9, r5
 800a842:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800a846:	f859 5b04 	ldr.w	r5, [r9], #4
 800a84a:	d02c      	beq.n	800a8a6 <__ssvfscanf_r+0x5da>
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	f43f ae33 	beq.w	800a4b8 <__ssvfscanf_r+0x1ec>
 800a852:	4640      	mov	r0, r8
 800a854:	f001 fef0 	bl	800c638 <malloc>
 800a858:	4682      	mov	sl, r0
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f adfd 	beq.w	800a45a <__ssvfscanf_r+0x18e>
 800a860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a862:	6028      	str	r0, [r5, #0]
 800a864:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800a868:	889e      	ldrh	r6, [r3, #4]
 800a86a:	45b3      	cmp	fp, r6
 800a86c:	d311      	bcc.n	800a892 <__ssvfscanf_r+0x5c6>
 800a86e:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800a872:	429e      	cmp	r6, r3
 800a874:	f200 8692 	bhi.w	800b59c <__ssvfscanf_r+0x12d0>
 800a878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a87a:	3608      	adds	r6, #8
 800a87c:	b2b6      	uxth	r6, r6
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	00b1      	lsls	r1, r6, #2
 800a882:	f002 fb5f 	bl	800cf44 <realloc>
 800a886:	2800      	cmp	r0, #0
 800a888:	f000 8688 	beq.w	800b59c <__ssvfscanf_r+0x12d0>
 800a88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88e:	6018      	str	r0, [r3, #0]
 800a890:	809e      	strh	r6, [r3, #4]
 800a892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a894:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f10b 0201 	add.w	r2, fp, #1
 800a89c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800a8a0:	462e      	mov	r6, r5
 800a8a2:	80ca      	strh	r2, [r1, #6]
 800a8a4:	4655      	mov	r5, sl
 800a8a6:	9400      	str	r4, [sp, #0]
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8ac:	4643      	mov	r3, r8
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f003 fbfa 	bl	800e0a8 <_sfread_r>
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	f43f adca 	beq.w	800a450 <__ssvfscanf_r+0x184>
 800a8bc:	b13e      	cbz	r6, 800a8ce <__ssvfscanf_r+0x602>
 800a8be:	4580      	cmp	r8, r0
 800a8c0:	d905      	bls.n	800a8ce <__ssvfscanf_r+0x602>
 800a8c2:	4601      	mov	r1, r0
 800a8c4:	6830      	ldr	r0, [r6, #0]
 800a8c6:	f002 fb3d 	bl	800cf44 <realloc>
 800a8ca:	b100      	cbz	r0, 800a8ce <__ssvfscanf_r+0x602>
 800a8cc:	6030      	str	r0, [r6, #0]
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d0:	442b      	add	r3, r5
 800a8d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8da:	464d      	mov	r5, r9
 800a8dc:	e511      	b.n	800a302 <__ssvfscanf_r+0x36>
 800a8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bf08      	it	eq
 800a8e4:	f04f 33ff 	moveq.w	r3, #4294967295
 800a8e8:	f016 0801 	ands.w	r8, r6, #1
 800a8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8ee:	f006 0a10 	and.w	sl, r6, #16
 800a8f2:	f000 8101 	beq.w	800aaf8 <__ssvfscanf_r+0x82c>
 800a8f6:	f1ba 0f00 	cmp.w	sl, #0
 800a8fa:	f040 80a4 	bne.w	800aa46 <__ssvfscanf_r+0x77a>
 800a8fe:	462b      	mov	r3, r5
 800a900:	f853 5b04 	ldr.w	r5, [r3], #4
 800a904:	60fb      	str	r3, [r7, #12]
 800a906:	0633      	lsls	r3, r6, #24
 800a908:	f140 80a5 	bpl.w	800aa56 <__ssvfscanf_r+0x78a>
 800a90c:	2d00      	cmp	r5, #0
 800a90e:	f43f ae9b 	beq.w	800a648 <__ssvfscanf_r+0x37c>
 800a912:	2080      	movs	r0, #128	@ 0x80
 800a914:	f001 fe90 	bl	800c638 <malloc>
 800a918:	4680      	mov	r8, r0
 800a91a:	2800      	cmp	r0, #0
 800a91c:	f43f ae91 	beq.w	800a642 <__ssvfscanf_r+0x376>
 800a920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a922:	6028      	str	r0, [r5, #0]
 800a924:	88de      	ldrh	r6, [r3, #6]
 800a926:	889b      	ldrh	r3, [r3, #4]
 800a928:	429e      	cmp	r6, r3
 800a92a:	d314      	bcc.n	800a956 <__ssvfscanf_r+0x68a>
 800a92c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800a930:	4293      	cmp	r3, r2
 800a932:	f200 8633 	bhi.w	800b59c <__ssvfscanf_r+0x12d0>
 800a936:	3308      	adds	r3, #8
 800a938:	fa1f f983 	uxth.w	r9, r3
 800a93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a942:	6818      	ldr	r0, [r3, #0]
 800a944:	f002 fafe 	bl	800cf44 <realloc>
 800a948:	2800      	cmp	r0, #0
 800a94a:	f000 8627 	beq.w	800b59c <__ssvfscanf_r+0x12d0>
 800a94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a950:	6018      	str	r0, [r3, #0]
 800a952:	f8a3 9004 	strh.w	r9, [r3, #4]
 800a956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a958:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	1c72      	adds	r2, r6, #1
 800a95e:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 800a962:	46ab      	mov	fp, r5
 800a964:	80ca      	strh	r2, [r1, #6]
 800a966:	4645      	mov	r5, r8
 800a968:	f04f 0920 	mov.w	r9, #32
 800a96c:	2600      	movs	r6, #0
 800a96e:	f000 ff7b 	bl	800b868 <__locale_mb_cur_max>
 800a972:	42b0      	cmp	r0, r6
 800a974:	f43f ad6c 	beq.w	800a450 <__ssvfscanf_r+0x184>
 800a978:	1c73      	adds	r3, r6, #1
 800a97a:	613b      	str	r3, [r7, #16]
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800a982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a986:	558a      	strb	r2, [r1, r6]
 800a988:	6862      	ldr	r2, [r4, #4]
 800a98a:	3a01      	subs	r2, #1
 800a98c:	e9c4 3200 	strd	r3, r2, [r4]
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	2b03      	cmp	r3, #3
 800a994:	d102      	bne.n	800a99c <__ssvfscanf_r+0x6d0>
 800a996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a998:	2b04      	cmp	r3, #4
 800a99a:	d005      	beq.n	800a9a8 <__ssvfscanf_r+0x6dc>
 800a99c:	2208      	movs	r2, #8
 800a99e:	2100      	movs	r1, #0
 800a9a0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800a9a4:	f7fd fcff 	bl	80083a6 <memset>
 800a9a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9b2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	f003 faf6 	bl	800dfa8 <_mbrtowc_r>
 800a9bc:	1c46      	adds	r6, r0, #1
 800a9be:	6238      	str	r0, [r7, #32]
 800a9c0:	f43f ad46 	beq.w	800a450 <__ssvfscanf_r+0x184>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d14a      	bne.n	800aa5e <__ssvfscanf_r+0x792>
 800a9c8:	6028      	str	r0, [r5, #0]
 800a9ca:	682e      	ldr	r6, [r5, #0]
 800a9cc:	1c70      	adds	r0, r6, #1
 800a9ce:	d056      	beq.n	800aa7e <__ssvfscanf_r+0x7b2>
 800a9d0:	2208      	movs	r2, #8
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800a9d8:	f7fd fce5 	bl	80083a6 <memset>
 800a9dc:	4b9a      	ldr	r3, [pc, #616]	@ (800ac48 <__ssvfscanf_r+0x97c>)
 800a9de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9e4:	60bb      	str	r3, [r7, #8]
 800a9e6:	4632      	mov	r2, r6
 800a9e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a9ec:	68be      	ldr	r6, [r7, #8]
 800a9ee:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800a9f2:	47b0      	blx	r6
 800a9f4:	2801      	cmp	r0, #1
 800a9f6:	d144      	bne.n	800aa82 <__ssvfscanf_r+0x7b6>
 800a9f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a9fc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800aa00:	5c9b      	ldrb	r3, [r3, r2]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d148      	bne.n	800aa98 <__ssvfscanf_r+0x7cc>
 800aa06:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d13a      	bne.n	800aa86 <__ssvfscanf_r+0x7ba>
 800aa10:	f1ba 0f00 	cmp.w	sl, #0
 800aa14:	d115      	bne.n	800aa42 <__ssvfscanf_r+0x776>
 800aa16:	f8c5 a000 	str.w	sl, [r5]
 800aa1a:	f1bb 0f00 	cmp.w	fp, #0
 800aa1e:	d00d      	beq.n	800aa3c <__ssvfscanf_r+0x770>
 800aa20:	eba5 0108 	sub.w	r1, r5, r8
 800aa24:	108b      	asrs	r3, r1, #2
 800aa26:	3301      	adds	r3, #1
 800aa28:	4599      	cmp	r9, r3
 800aa2a:	d907      	bls.n	800aa3c <__ssvfscanf_r+0x770>
 800aa2c:	f8db 0000 	ldr.w	r0, [fp]
 800aa30:	3104      	adds	r1, #4
 800aa32:	f002 fa87 	bl	800cf44 <realloc>
 800aa36:	b108      	cbz	r0, 800aa3c <__ssvfscanf_r+0x770>
 800aa38:	f8cb 0000 	str.w	r0, [fp]
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3e:	3301      	adds	r3, #1
 800aa40:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa42:	68fd      	ldr	r5, [r7, #12]
 800aa44:	e45d      	b.n	800a302 <__ssvfscanf_r+0x36>
 800aa46:	f04f 0900 	mov.w	r9, #0
 800aa4a:	60fd      	str	r5, [r7, #12]
 800aa4c:	46c8      	mov	r8, r9
 800aa4e:	46cb      	mov	fp, r9
 800aa50:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 800aa54:	e78a      	b.n	800a96c <__ssvfscanf_r+0x6a0>
 800aa56:	46d1      	mov	r9, sl
 800aa58:	46d0      	mov	r8, sl
 800aa5a:	46d3      	mov	fp, sl
 800aa5c:	e786      	b.n	800a96c <__ssvfscanf_r+0x6a0>
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	3302      	adds	r3, #2
 800aa62:	d1b2      	bne.n	800a9ca <__ssvfscanf_r+0x6fe>
 800aa64:	693e      	ldr	r6, [r7, #16]
 800aa66:	6863      	ldr	r3, [r4, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dc40      	bgt.n	800aaee <__ssvfscanf_r+0x822>
 800aa6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa6e:	4621      	mov	r1, r4
 800aa70:	f003 fafd 	bl	800e06e <__ssrefill_r>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d03a      	beq.n	800aaee <__ssvfscanf_r+0x822>
 800aa78:	2e00      	cmp	r6, #0
 800aa7a:	d0c9      	beq.n	800aa10 <__ssvfscanf_r+0x744>
 800aa7c:	e4e8      	b.n	800a450 <__ssvfscanf_r+0x184>
 800aa7e:	4632      	mov	r2, r6
 800aa80:	e7bc      	b.n	800a9fc <__ssvfscanf_r+0x730>
 800aa82:	2200      	movs	r2, #0
 800aa84:	e7ba      	b.n	800a9fc <__ssvfscanf_r+0x730>
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	5cf1      	ldrb	r1, [r6, r3]
 800aa90:	613b      	str	r3, [r7, #16]
 800aa92:	f003 fab1 	bl	800dff8 <_sungetc_r>
 800aa96:	e7b8      	b.n	800aa0a <__ssvfscanf_r+0x73e>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d102      	bne.n	800aaac <__ssvfscanf_r+0x7e0>
 800aaa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	d002      	beq.n	800aab2 <__ssvfscanf_r+0x7e6>
 800aaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaae:	3b01      	subs	r3, #1
 800aab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aab2:	f1ba 0f00 	cmp.w	sl, #0
 800aab6:	d118      	bne.n	800aaea <__ssvfscanf_r+0x81e>
 800aab8:	3504      	adds	r5, #4
 800aaba:	f1bb 0f00 	cmp.w	fp, #0
 800aabe:	d014      	beq.n	800aaea <__ssvfscanf_r+0x81e>
 800aac0:	eba5 0608 	sub.w	r6, r5, r8
 800aac4:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 800aac8:	d80d      	bhi.n	800aae6 <__ssvfscanf_r+0x81a>
 800aaca:	4640      	mov	r0, r8
 800aacc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aad0:	f002 fa38 	bl	800cf44 <realloc>
 800aad4:	4680      	mov	r8, r0
 800aad6:	2800      	cmp	r0, #0
 800aad8:	f43f adb3 	beq.w	800a642 <__ssvfscanf_r+0x376>
 800aadc:	1985      	adds	r5, r0, r6
 800aade:	f8cb 0000 	str.w	r0, [fp]
 800aae2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800aae6:	4656      	mov	r6, sl
 800aae8:	e7bd      	b.n	800aa66 <__ssvfscanf_r+0x79a>
 800aaea:	2600      	movs	r6, #0
 800aaec:	e7bb      	b.n	800aa66 <__ssvfscanf_r+0x79a>
 800aaee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f47f af3c 	bne.w	800a96e <__ssvfscanf_r+0x6a2>
 800aaf6:	e78b      	b.n	800aa10 <__ssvfscanf_r+0x744>
 800aaf8:	f1ba 0f00 	cmp.w	sl, #0
 800aafc:	d01e      	beq.n	800ab3c <__ssvfscanf_r+0x870>
 800aafe:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	781a      	ldrb	r2, [r3, #0]
 800ab06:	5cb2      	ldrb	r2, [r6, r2]
 800ab08:	b91a      	cbnz	r2, 800ab12 <__ssvfscanf_r+0x846>
 800ab0a:	f1b8 0f00 	cmp.w	r8, #0
 800ab0e:	d112      	bne.n	800ab36 <__ssvfscanf_r+0x86a>
 800ab10:	e4d2      	b.n	800a4b8 <__ssvfscanf_r+0x1ec>
 800ab12:	3301      	adds	r3, #1
 800ab14:	6862      	ldr	r2, [r4, #4]
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1a:	f108 0801 	add.w	r8, r8, #1
 800ab1e:	3a01      	subs	r2, #1
 800ab20:	4543      	cmp	r3, r8
 800ab22:	6062      	str	r2, [r4, #4]
 800ab24:	d007      	beq.n	800ab36 <__ssvfscanf_r+0x86a>
 800ab26:	2a00      	cmp	r2, #0
 800ab28:	dceb      	bgt.n	800ab02 <__ssvfscanf_r+0x836>
 800ab2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	f003 fa9e 	bl	800e06e <__ssrefill_r>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d0e5      	beq.n	800ab02 <__ssvfscanf_r+0x836>
 800ab36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab38:	4443      	add	r3, r8
 800ab3a:	e674      	b.n	800a826 <__ssvfscanf_r+0x55a>
 800ab3c:	46a9      	mov	r9, r5
 800ab3e:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800ab42:	f859 8b04 	ldr.w	r8, [r9], #4
 800ab46:	d07d      	beq.n	800ac44 <__ssvfscanf_r+0x978>
 800ab48:	f1b8 0f00 	cmp.w	r8, #0
 800ab4c:	f43f acb4 	beq.w	800a4b8 <__ssvfscanf_r+0x1ec>
 800ab50:	2020      	movs	r0, #32
 800ab52:	f001 fd71 	bl	800c638 <malloc>
 800ab56:	4606      	mov	r6, r0
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	f43f ac7e 	beq.w	800a45a <__ssvfscanf_r+0x18e>
 800ab5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab60:	f8c8 0000 	str.w	r0, [r8]
 800ab64:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800ab68:	889d      	ldrh	r5, [r3, #4]
 800ab6a:	45aa      	cmp	sl, r5
 800ab6c:	d311      	bcc.n	800ab92 <__ssvfscanf_r+0x8c6>
 800ab6e:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800ab72:	429d      	cmp	r5, r3
 800ab74:	f200 8512 	bhi.w	800b59c <__ssvfscanf_r+0x12d0>
 800ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7a:	3508      	adds	r5, #8
 800ab7c:	b2ad      	uxth	r5, r5
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	00a9      	lsls	r1, r5, #2
 800ab82:	f002 f9df 	bl	800cf44 <realloc>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f000 8508 	beq.w	800b59c <__ssvfscanf_r+0x12d0>
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab8e:	6018      	str	r0, [r3, #0]
 800ab90:	809d      	strh	r5, [r3, #4]
 800ab92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab94:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f10a 0201 	add.w	r2, sl, #1
 800ab9c:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 800aba0:	80ca      	strh	r2, [r1, #6]
 800aba2:	46c2      	mov	sl, r8
 800aba4:	46b0      	mov	r8, r6
 800aba6:	2620      	movs	r6, #32
 800aba8:	4645      	mov	r5, r8
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800abb0:	781a      	ldrb	r2, [r3, #0]
 800abb2:	5c8a      	ldrb	r2, [r1, r2]
 800abb4:	b35a      	cbz	r2, 800ac0e <__ssvfscanf_r+0x942>
 800abb6:	6862      	ldr	r2, [r4, #4]
 800abb8:	3a01      	subs	r2, #1
 800abba:	6062      	str	r2, [r4, #4]
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	6022      	str	r2, [r4, #0]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	f808 3b01 	strb.w	r3, [r8], #1
 800abc6:	f1ba 0f00 	cmp.w	sl, #0
 800abca:	d010      	beq.n	800abee <__ssvfscanf_r+0x922>
 800abcc:	eba8 0b05 	sub.w	fp, r8, r5
 800abd0:	45b3      	cmp	fp, r6
 800abd2:	d30c      	bcc.n	800abee <__ssvfscanf_r+0x922>
 800abd4:	0076      	lsls	r6, r6, #1
 800abd6:	4628      	mov	r0, r5
 800abd8:	4631      	mov	r1, r6
 800abda:	f002 f9b3 	bl	800cf44 <realloc>
 800abde:	4605      	mov	r5, r0
 800abe0:	2800      	cmp	r0, #0
 800abe2:	f43f ac3a 	beq.w	800a45a <__ssvfscanf_r+0x18e>
 800abe6:	eb00 080b 	add.w	r8, r0, fp
 800abea:	f8ca 0000 	str.w	r0, [sl]
 800abee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf0:	3b01      	subs	r3, #1
 800abf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abf4:	d00b      	beq.n	800ac0e <__ssvfscanf_r+0x942>
 800abf6:	6863      	ldr	r3, [r4, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dcd6      	bgt.n	800abaa <__ssvfscanf_r+0x8de>
 800abfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abfe:	4621      	mov	r1, r4
 800ac00:	f003 fa35 	bl	800e06e <__ssrefill_r>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d0d0      	beq.n	800abaa <__ssvfscanf_r+0x8de>
 800ac08:	45a8      	cmp	r8, r5
 800ac0a:	f43f ac21 	beq.w	800a450 <__ssvfscanf_r+0x184>
 800ac0e:	ebb8 0505 	subs.w	r5, r8, r5
 800ac12:	f43f ac51 	beq.w	800a4b8 <__ssvfscanf_r+0x1ec>
 800ac16:	2300      	movs	r3, #0
 800ac18:	f888 3000 	strb.w	r3, [r8]
 800ac1c:	f1ba 0f00 	cmp.w	sl, #0
 800ac20:	d009      	beq.n	800ac36 <__ssvfscanf_r+0x96a>
 800ac22:	1c69      	adds	r1, r5, #1
 800ac24:	428e      	cmp	r6, r1
 800ac26:	d906      	bls.n	800ac36 <__ssvfscanf_r+0x96a>
 800ac28:	f8da 0000 	ldr.w	r0, [sl]
 800ac2c:	f002 f98a 	bl	800cf44 <realloc>
 800ac30:	b108      	cbz	r0, 800ac36 <__ssvfscanf_r+0x96a>
 800ac32:	f8ca 0000 	str.w	r0, [sl]
 800ac36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac38:	3301      	adds	r3, #1
 800ac3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3e:	442b      	add	r3, r5
 800ac40:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac42:	e64a      	b.n	800a8da <__ssvfscanf_r+0x60e>
 800ac44:	46b2      	mov	sl, r6
 800ac46:	e7af      	b.n	800aba8 <__ssvfscanf_r+0x8dc>
 800ac48:	2000058c 	.word	0x2000058c
 800ac4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	bf08      	it	eq
 800ac52:	f04f 33ff 	moveq.w	r3, #4294967295
 800ac56:	f016 0901 	ands.w	r9, r6, #1
 800ac5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac5c:	f006 0810 	and.w	r8, r6, #16
 800ac60:	f000 80ef 	beq.w	800ae42 <__ssvfscanf_r+0xb76>
 800ac64:	f1b8 0f00 	cmp.w	r8, #0
 800ac68:	f040 8098 	bne.w	800ad9c <__ssvfscanf_r+0xad0>
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	0631      	lsls	r1, r6, #24
 800ac70:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac74:	613b      	str	r3, [r7, #16]
 800ac76:	f140 8099 	bpl.w	800adac <__ssvfscanf_r+0xae0>
 800ac7a:	2d00      	cmp	r5, #0
 800ac7c:	f43f ace4 	beq.w	800a648 <__ssvfscanf_r+0x37c>
 800ac80:	2080      	movs	r0, #128	@ 0x80
 800ac82:	f001 fcd9 	bl	800c638 <malloc>
 800ac86:	4606      	mov	r6, r0
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	f43f acda 	beq.w	800a642 <__ssvfscanf_r+0x376>
 800ac8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac90:	6028      	str	r0, [r5, #0]
 800ac92:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800ac96:	889b      	ldrh	r3, [r3, #4]
 800ac98:	4599      	cmp	r9, r3
 800ac9a:	d314      	bcc.n	800acc6 <__ssvfscanf_r+0x9fa>
 800ac9c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 800aca0:	4293      	cmp	r3, r2
 800aca2:	f200 847b 	bhi.w	800b59c <__ssvfscanf_r+0x12d0>
 800aca6:	3308      	adds	r3, #8
 800aca8:	fa1f fa83 	uxth.w	sl, r3
 800acac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acae:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	f002 f946 	bl	800cf44 <realloc>
 800acb8:	2800      	cmp	r0, #0
 800acba:	f000 846f 	beq.w	800b59c <__ssvfscanf_r+0x12d0>
 800acbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc0:	6018      	str	r0, [r3, #0]
 800acc2:	f8a3 a004 	strh.w	sl, [r3, #4]
 800acc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f109 0201 	add.w	r2, r9, #1
 800acd0:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800acd4:	46aa      	mov	sl, r5
 800acd6:	80ca      	strh	r2, [r1, #6]
 800acd8:	4635      	mov	r5, r6
 800acda:	f04f 0920 	mov.w	r9, #32
 800acde:	2300      	movs	r3, #0
 800ace0:	6822      	ldr	r2, [r4, #0]
 800ace2:	49a7      	ldr	r1, [pc, #668]	@ (800af80 <__ssvfscanf_r+0xcb4>)
 800ace4:	7812      	ldrb	r2, [r2, #0]
 800ace6:	5c8a      	ldrb	r2, [r1, r2]
 800ace8:	0710      	lsls	r0, r2, #28
 800acea:	d43c      	bmi.n	800ad66 <__ssvfscanf_r+0xa9a>
 800acec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acee:	2a00      	cmp	r2, #0
 800acf0:	d039      	beq.n	800ad66 <__ssvfscanf_r+0xa9a>
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	f000 fdb8 	bl	800b868 <__locale_mb_cur_max>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	4298      	cmp	r0, r3
 800acfc:	f43f aba8 	beq.w	800a450 <__ssvfscanf_r+0x184>
 800ad00:	6822      	ldr	r2, [r4, #0]
 800ad02:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800ad06:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ad0a:	54c8      	strb	r0, [r1, r3]
 800ad0c:	f103 0b01 	add.w	fp, r3, #1
 800ad10:	6863      	ldr	r3, [r4, #4]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	e9c4 2300 	strd	r2, r3, [r4]
 800ad18:	6a3b      	ldr	r3, [r7, #32]
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d102      	bne.n	800ad24 <__ssvfscanf_r+0xa58>
 800ad1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d005      	beq.n	800ad30 <__ssvfscanf_r+0xa64>
 800ad24:	2208      	movs	r2, #8
 800ad26:	2100      	movs	r1, #0
 800ad28:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800ad2c:	f7fd fb3b 	bl	80083a6 <memset>
 800ad30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800ad3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad3c:	465b      	mov	r3, fp
 800ad3e:	4629      	mov	r1, r5
 800ad40:	f003 f932 	bl	800dfa8 <_mbrtowc_r>
 800ad44:	1c42      	adds	r2, r0, #1
 800ad46:	6238      	str	r0, [r7, #32]
 800ad48:	f43f ab82 	beq.w	800a450 <__ssvfscanf_r+0x184>
 800ad4c:	bb90      	cbnz	r0, 800adb4 <__ssvfscanf_r+0xae8>
 800ad4e:	6028      	str	r0, [r5, #0]
 800ad50:	6828      	ldr	r0, [r5, #0]
 800ad52:	f003 f943 	bl	800dfdc <iswspace>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d047      	beq.n	800adec <__ssvfscanf_r+0xb20>
 800ad5c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ad60:	f1bb 0f00 	cmp.w	fp, #0
 800ad64:	d139      	bne.n	800adda <__ssvfscanf_r+0xb0e>
 800ad66:	f1b8 0f00 	cmp.w	r8, #0
 800ad6a:	d114      	bne.n	800ad96 <__ssvfscanf_r+0xaca>
 800ad6c:	f8c5 8000 	str.w	r8, [r5]
 800ad70:	f1ba 0f00 	cmp.w	sl, #0
 800ad74:	d00c      	beq.n	800ad90 <__ssvfscanf_r+0xac4>
 800ad76:	1ba9      	subs	r1, r5, r6
 800ad78:	108b      	asrs	r3, r1, #2
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	4599      	cmp	r9, r3
 800ad7e:	d907      	bls.n	800ad90 <__ssvfscanf_r+0xac4>
 800ad80:	f8da 0000 	ldr.w	r0, [sl]
 800ad84:	3104      	adds	r1, #4
 800ad86:	f002 f8dd 	bl	800cf44 <realloc>
 800ad8a:	b108      	cbz	r0, 800ad90 <__ssvfscanf_r+0xac4>
 800ad8c:	f8ca 0000 	str.w	r0, [sl]
 800ad90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad92:	3301      	adds	r3, #1
 800ad94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad96:	693d      	ldr	r5, [r7, #16]
 800ad98:	f7ff bab3 	b.w	800a302 <__ssvfscanf_r+0x36>
 800ad9c:	f04f 0900 	mov.w	r9, #0
 800ada0:	613d      	str	r5, [r7, #16]
 800ada2:	464e      	mov	r6, r9
 800ada4:	46ca      	mov	sl, r9
 800ada6:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 800adaa:	e798      	b.n	800acde <__ssvfscanf_r+0xa12>
 800adac:	46c1      	mov	r9, r8
 800adae:	4646      	mov	r6, r8
 800adb0:	46c2      	mov	sl, r8
 800adb2:	e794      	b.n	800acde <__ssvfscanf_r+0xa12>
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	3302      	adds	r3, #2
 800adb8:	d1ca      	bne.n	800ad50 <__ssvfscanf_r+0xa84>
 800adba:	465b      	mov	r3, fp
 800adbc:	6862      	ldr	r2, [r4, #4]
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	dc8e      	bgt.n	800ace0 <__ssvfscanf_r+0xa14>
 800adc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adc4:	60fb      	str	r3, [r7, #12]
 800adc6:	4621      	mov	r1, r4
 800adc8:	f003 f951 	bl	800e06e <__ssrefill_r>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2800      	cmp	r0, #0
 800add0:	d086      	beq.n	800ace0 <__ssvfscanf_r+0xa14>
 800add2:	2b00      	cmp	r3, #0
 800add4:	f47f ab3c 	bne.w	800a450 <__ssvfscanf_r+0x184>
 800add8:	e7c5      	b.n	800ad66 <__ssvfscanf_r+0xa9a>
 800adda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800adde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ade0:	f813 100b 	ldrb.w	r1, [r3, fp]
 800ade4:	4622      	mov	r2, r4
 800ade6:	f003 f907 	bl	800dff8 <_sungetc_r>
 800adea:	e7b7      	b.n	800ad5c <__ssvfscanf_r+0xa90>
 800adec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adee:	445a      	add	r2, fp
 800adf0:	633a      	str	r2, [r7, #48]	@ 0x30
 800adf2:	6a3a      	ldr	r2, [r7, #32]
 800adf4:	2a03      	cmp	r2, #3
 800adf6:	d102      	bne.n	800adfe <__ssvfscanf_r+0xb32>
 800adf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adfa:	2a04      	cmp	r2, #4
 800adfc:	d002      	beq.n	800ae04 <__ssvfscanf_r+0xb38>
 800adfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae00:	3a01      	subs	r2, #1
 800ae02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae04:	f1b8 0f00 	cmp.w	r8, #0
 800ae08:	d1d8      	bne.n	800adbc <__ssvfscanf_r+0xaf0>
 800ae0a:	3504      	adds	r5, #4
 800ae0c:	f1ba 0f00 	cmp.w	sl, #0
 800ae10:	d015      	beq.n	800ae3e <__ssvfscanf_r+0xb72>
 800ae12:	eba5 0b06 	sub.w	fp, r5, r6
 800ae16:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 800ae1a:	d80e      	bhi.n	800ae3a <__ssvfscanf_r+0xb6e>
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae22:	f002 f88f 	bl	800cf44 <realloc>
 800ae26:	4606      	mov	r6, r0
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	f43f ac0a 	beq.w	800a642 <__ssvfscanf_r+0x376>
 800ae2e:	eb00 050b 	add.w	r5, r0, fp
 800ae32:	f8ca 0000 	str.w	r0, [sl]
 800ae36:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800ae3a:	4643      	mov	r3, r8
 800ae3c:	e7be      	b.n	800adbc <__ssvfscanf_r+0xaf0>
 800ae3e:	4653      	mov	r3, sl
 800ae40:	e7bc      	b.n	800adbc <__ssvfscanf_r+0xaf0>
 800ae42:	f1b8 0f00 	cmp.w	r8, #0
 800ae46:	d01a      	beq.n	800ae7e <__ssvfscanf_r+0xbb2>
 800ae48:	4e4d      	ldr	r6, [pc, #308]	@ (800af80 <__ssvfscanf_r+0xcb4>)
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	781a      	ldrb	r2, [r3, #0]
 800ae4e:	5cb2      	ldrb	r2, [r6, r2]
 800ae50:	0711      	lsls	r1, r2, #28
 800ae52:	d411      	bmi.n	800ae78 <__ssvfscanf_r+0xbac>
 800ae54:	3301      	adds	r3, #1
 800ae56:	6862      	ldr	r2, [r4, #4]
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5c:	f109 0901 	add.w	r9, r9, #1
 800ae60:	3a01      	subs	r2, #1
 800ae62:	454b      	cmp	r3, r9
 800ae64:	6062      	str	r2, [r4, #4]
 800ae66:	d007      	beq.n	800ae78 <__ssvfscanf_r+0xbac>
 800ae68:	2a00      	cmp	r2, #0
 800ae6a:	dcee      	bgt.n	800ae4a <__ssvfscanf_r+0xb7e>
 800ae6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae6e:	4621      	mov	r1, r4
 800ae70:	f003 f8fd 	bl	800e06e <__ssrefill_r>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d0e8      	beq.n	800ae4a <__ssvfscanf_r+0xb7e>
 800ae78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7a:	444b      	add	r3, r9
 800ae7c:	e4d3      	b.n	800a826 <__ssvfscanf_r+0x55a>
 800ae7e:	46a8      	mov	r8, r5
 800ae80:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800ae84:	f858 5b04 	ldr.w	r5, [r8], #4
 800ae88:	d077      	beq.n	800af7a <__ssvfscanf_r+0xcae>
 800ae8a:	2d00      	cmp	r5, #0
 800ae8c:	f43f ab14 	beq.w	800a4b8 <__ssvfscanf_r+0x1ec>
 800ae90:	2020      	movs	r0, #32
 800ae92:	f001 fbd1 	bl	800c638 <malloc>
 800ae96:	4681      	mov	r9, r0
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	f43f aade 	beq.w	800a45a <__ssvfscanf_r+0x18e>
 800ae9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea0:	6028      	str	r0, [r5, #0]
 800aea2:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800aea6:	889e      	ldrh	r6, [r3, #4]
 800aea8:	45b2      	cmp	sl, r6
 800aeaa:	d311      	bcc.n	800aed0 <__ssvfscanf_r+0xc04>
 800aeac:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800aeb0:	429e      	cmp	r6, r3
 800aeb2:	f200 8373 	bhi.w	800b59c <__ssvfscanf_r+0x12d0>
 800aeb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeb8:	3608      	adds	r6, #8
 800aeba:	b2b6      	uxth	r6, r6
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	00b1      	lsls	r1, r6, #2
 800aec0:	f002 f840 	bl	800cf44 <realloc>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	f000 8369 	beq.w	800b59c <__ssvfscanf_r+0x12d0>
 800aeca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aecc:	6018      	str	r0, [r3, #0]
 800aece:	809e      	strh	r6, [r3, #4]
 800aed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f10a 0201 	add.w	r2, sl, #1
 800aeda:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 800aede:	80ca      	strh	r2, [r1, #6]
 800aee0:	46aa      	mov	sl, r5
 800aee2:	2620      	movs	r6, #32
 800aee4:	464d      	mov	r5, r9
 800aee6:	46a9      	mov	r9, r5
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	4925      	ldr	r1, [pc, #148]	@ (800af80 <__ssvfscanf_r+0xcb4>)
 800aeec:	781a      	ldrb	r2, [r3, #0]
 800aeee:	5c8a      	ldrb	r2, [r1, r2]
 800aef0:	0712      	lsls	r2, r2, #28
 800aef2:	d428      	bmi.n	800af46 <__ssvfscanf_r+0xc7a>
 800aef4:	6862      	ldr	r2, [r4, #4]
 800aef6:	3a01      	subs	r2, #1
 800aef8:	6062      	str	r2, [r4, #4]
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	6022      	str	r2, [r4, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	f805 3b01 	strb.w	r3, [r5], #1
 800af04:	f1ba 0f00 	cmp.w	sl, #0
 800af08:	d010      	beq.n	800af2c <__ssvfscanf_r+0xc60>
 800af0a:	eba5 0b09 	sub.w	fp, r5, r9
 800af0e:	45b3      	cmp	fp, r6
 800af10:	d30c      	bcc.n	800af2c <__ssvfscanf_r+0xc60>
 800af12:	0076      	lsls	r6, r6, #1
 800af14:	4648      	mov	r0, r9
 800af16:	4631      	mov	r1, r6
 800af18:	f002 f814 	bl	800cf44 <realloc>
 800af1c:	4681      	mov	r9, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	f43f aa9b 	beq.w	800a45a <__ssvfscanf_r+0x18e>
 800af24:	eb00 050b 	add.w	r5, r0, fp
 800af28:	f8ca 0000 	str.w	r0, [sl]
 800af2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2e:	3b01      	subs	r3, #1
 800af30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af32:	d008      	beq.n	800af46 <__ssvfscanf_r+0xc7a>
 800af34:	6863      	ldr	r3, [r4, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	dcd6      	bgt.n	800aee8 <__ssvfscanf_r+0xc1c>
 800af3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af3c:	4621      	mov	r1, r4
 800af3e:	f003 f896 	bl	800e06e <__ssrefill_r>
 800af42:	2800      	cmp	r0, #0
 800af44:	d0d0      	beq.n	800aee8 <__ssvfscanf_r+0xc1c>
 800af46:	2300      	movs	r3, #0
 800af48:	702b      	strb	r3, [r5, #0]
 800af4a:	eba5 0509 	sub.w	r5, r5, r9
 800af4e:	f1ba 0f00 	cmp.w	sl, #0
 800af52:	d009      	beq.n	800af68 <__ssvfscanf_r+0xc9c>
 800af54:	1c69      	adds	r1, r5, #1
 800af56:	428e      	cmp	r6, r1
 800af58:	d906      	bls.n	800af68 <__ssvfscanf_r+0xc9c>
 800af5a:	f8da 0000 	ldr.w	r0, [sl]
 800af5e:	f001 fff1 	bl	800cf44 <realloc>
 800af62:	b108      	cbz	r0, 800af68 <__ssvfscanf_r+0xc9c>
 800af64:	f8ca 0000 	str.w	r0, [sl]
 800af68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6a:	442b      	add	r3, r5
 800af6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800af6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af70:	3301      	adds	r3, #1
 800af72:	627b      	str	r3, [r7, #36]	@ 0x24
 800af74:	4645      	mov	r5, r8
 800af76:	f7ff b9c4 	b.w	800a302 <__ssvfscanf_r+0x36>
 800af7a:	46b2      	mov	sl, r6
 800af7c:	e7b3      	b.n	800aee6 <__ssvfscanf_r+0xc1a>
 800af7e:	bf00      	nop
 800af80:	0800fd39 	.word	0x0800fd39
 800af84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af86:	3b01      	subs	r3, #1
 800af88:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 800af8c:	bf81      	itttt	hi
 800af8e:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 800af90:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 800af94:	eb03 090c 	addhi.w	r9, r3, ip
 800af98:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af9c:	bf8c      	ite	hi
 800af9e:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 800afa0:	f04f 0900 	movls.w	r9, #0
 800afa4:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 800afa8:	f04f 0a00 	mov.w	sl, #0
 800afac:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	7813      	ldrb	r3, [r2, #0]
 800afb4:	2b39      	cmp	r3, #57	@ 0x39
 800afb6:	d80f      	bhi.n	800afd8 <__ssvfscanf_r+0xd0c>
 800afb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800afba:	d91a      	bls.n	800aff2 <__ssvfscanf_r+0xd26>
 800afbc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800afc0:	290e      	cmp	r1, #14
 800afc2:	d816      	bhi.n	800aff2 <__ssvfscanf_r+0xd26>
 800afc4:	e8df f001 	tbb	[pc, r1]
 800afc8:	15781578 	.word	0x15781578
 800afcc:	68683f15 	.word	0x68683f15
 800afd0:	68686868 	.word	0x68686868
 800afd4:	7068      	.short	0x7068
 800afd6:	70          	.byte	0x70
 800afd7:	00          	.byte	0x00
 800afd8:	2b66      	cmp	r3, #102	@ 0x66
 800afda:	d832      	bhi.n	800b042 <__ssvfscanf_r+0xd76>
 800afdc:	2b60      	cmp	r3, #96	@ 0x60
 800afde:	d803      	bhi.n	800afe8 <__ssvfscanf_r+0xd1c>
 800afe0:	2b46      	cmp	r3, #70	@ 0x46
 800afe2:	d804      	bhi.n	800afee <__ssvfscanf_r+0xd22>
 800afe4:	2b40      	cmp	r3, #64	@ 0x40
 800afe6:	d904      	bls.n	800aff2 <__ssvfscanf_r+0xd26>
 800afe8:	69f9      	ldr	r1, [r7, #28]
 800afea:	290a      	cmp	r1, #10
 800afec:	e062      	b.n	800b0b4 <__ssvfscanf_r+0xde8>
 800afee:	2b58      	cmp	r3, #88	@ 0x58
 800aff0:	d068      	beq.n	800b0c4 <__ssvfscanf_r+0xdf8>
 800aff2:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 800aff6:	d011      	beq.n	800b01c <__ssvfscanf_r+0xd50>
 800aff8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800affc:	4598      	cmp	r8, r3
 800affe:	d908      	bls.n	800b012 <__ssvfscanf_r+0xd46>
 800b000:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800b004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b006:	4622      	mov	r2, r4
 800b008:	f002 fff6 	bl	800dff8 <_sungetc_r>
 800b00c:	f108 39ff 	add.w	r9, r8, #4294967295
 800b010:	46c8      	mov	r8, r9
 800b012:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b016:	4598      	cmp	r8, r3
 800b018:	f43f aa4e 	beq.w	800a4b8 <__ssvfscanf_r+0x1ec>
 800b01c:	f01b 0210 	ands.w	r2, fp, #16
 800b020:	d16c      	bne.n	800b0fc <__ssvfscanf_r+0xe30>
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b026:	69be      	ldr	r6, [r7, #24]
 800b028:	f888 2000 	strb.w	r2, [r8]
 800b02c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800b030:	47b0      	blx	r6
 800b032:	f01b 0f20 	tst.w	fp, #32
 800b036:	f105 0904 	add.w	r9, r5, #4
 800b03a:	d056      	beq.n	800b0ea <__ssvfscanf_r+0xe1e>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	6018      	str	r0, [r3, #0]
 800b040:	e058      	b.n	800b0f4 <__ssvfscanf_r+0xe28>
 800b042:	2b78      	cmp	r3, #120	@ 0x78
 800b044:	e7d4      	b.n	800aff0 <__ssvfscanf_r+0xd24>
 800b046:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 800b04a:	d00a      	beq.n	800b062 <__ssvfscanf_r+0xd96>
 800b04c:	69f9      	ldr	r1, [r7, #28]
 800b04e:	b919      	cbnz	r1, 800b058 <__ssvfscanf_r+0xd8c>
 800b050:	2108      	movs	r1, #8
 800b052:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 800b056:	61f9      	str	r1, [r7, #28]
 800b058:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 800b05c:	d004      	beq.n	800b068 <__ssvfscanf_r+0xd9c>
 800b05e:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 800b062:	f808 3b01 	strb.w	r3, [r8], #1
 800b066:	e00b      	b.n	800b080 <__ssvfscanf_r+0xdb4>
 800b068:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 800b06c:	f1b9 0f00 	cmp.w	r9, #0
 800b070:	d004      	beq.n	800b07c <__ssvfscanf_r+0xdb0>
 800b072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b074:	3301      	adds	r3, #1
 800b076:	f109 39ff 	add.w	r9, r9, #4294967295
 800b07a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b07c:	f10a 0a01 	add.w	sl, sl, #1
 800b080:	6863      	ldr	r3, [r4, #4]
 800b082:	3b01      	subs	r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	6063      	str	r3, [r4, #4]
 800b088:	dd28      	ble.n	800b0dc <__ssvfscanf_r+0xe10>
 800b08a:	3201      	adds	r2, #1
 800b08c:	6022      	str	r2, [r4, #0]
 800b08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b090:	3b01      	subs	r3, #1
 800b092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b094:	d18c      	bne.n	800afb0 <__ssvfscanf_r+0xce4>
 800b096:	e7ac      	b.n	800aff2 <__ssvfscanf_r+0xd26>
 800b098:	69f8      	ldr	r0, [r7, #28]
 800b09a:	499b      	ldr	r1, [pc, #620]	@ (800b308 <__ssvfscanf_r+0x103c>)
 800b09c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800b0a0:	61f9      	str	r1, [r7, #28]
 800b0a2:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 800b0a6:	e7dc      	b.n	800b062 <__ssvfscanf_r+0xd96>
 800b0a8:	69f8      	ldr	r0, [r7, #28]
 800b0aa:	4997      	ldr	r1, [pc, #604]	@ (800b308 <__ssvfscanf_r+0x103c>)
 800b0ac:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800b0b0:	61f9      	str	r1, [r7, #28]
 800b0b2:	2908      	cmp	r1, #8
 800b0b4:	dcf5      	bgt.n	800b0a2 <__ssvfscanf_r+0xdd6>
 800b0b6:	e79c      	b.n	800aff2 <__ssvfscanf_r+0xd26>
 800b0b8:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 800b0bc:	d099      	beq.n	800aff2 <__ssvfscanf_r+0xd26>
 800b0be:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 800b0c2:	e7ce      	b.n	800b062 <__ssvfscanf_r+0xd96>
 800b0c4:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 800b0c8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b0cc:	d191      	bne.n	800aff2 <__ssvfscanf_r+0xd26>
 800b0ce:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 800b0d2:	2110      	movs	r1, #16
 800b0d4:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 800b0d8:	61f9      	str	r1, [r7, #28]
 800b0da:	e7c2      	b.n	800b062 <__ssvfscanf_r+0xd96>
 800b0dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0de:	4621      	mov	r1, r4
 800b0e0:	f002 ffc5 	bl	800e06e <__ssrefill_r>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d0d2      	beq.n	800b08e <__ssvfscanf_r+0xdc2>
 800b0e8:	e783      	b.n	800aff2 <__ssvfscanf_r+0xd26>
 800b0ea:	f01b 0f08 	tst.w	fp, #8
 800b0ee:	d00b      	beq.n	800b108 <__ssvfscanf_r+0xe3c>
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	7018      	strb	r0, [r3, #0]
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0fa:	464d      	mov	r5, r9
 800b0fc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b100:	eba8 0803 	sub.w	r8, r8, r3
 800b104:	44d0      	add	r8, sl
 800b106:	e516      	b.n	800ab36 <__ssvfscanf_r+0x86a>
 800b108:	f01b 0f04 	tst.w	fp, #4
 800b10c:	d002      	beq.n	800b114 <__ssvfscanf_r+0xe48>
 800b10e:	682b      	ldr	r3, [r5, #0]
 800b110:	8018      	strh	r0, [r3, #0]
 800b112:	e7ef      	b.n	800b0f4 <__ssvfscanf_r+0xe28>
 800b114:	f01b 0201 	ands.w	r2, fp, #1
 800b118:	d190      	bne.n	800b03c <__ssvfscanf_r+0xd70>
 800b11a:	f01b 0f02 	tst.w	fp, #2
 800b11e:	d08d      	beq.n	800b03c <__ssvfscanf_r+0xd70>
 800b120:	4b7a      	ldr	r3, [pc, #488]	@ (800b30c <__ssvfscanf_r+0x1040>)
 800b122:	69b9      	ldr	r1, [r7, #24]
 800b124:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b126:	4299      	cmp	r1, r3
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800b12e:	d105      	bne.n	800b13c <__ssvfscanf_r+0xe70>
 800b130:	f002 ff38 	bl	800dfa4 <_strtoull_r>
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	e9c3 0100 	strd	r0, r1, [r3]
 800b13a:	e7db      	b.n	800b0f4 <__ssvfscanf_r+0xe28>
 800b13c:	f002 fe9a 	bl	800de74 <_strtoll_r>
 800b140:	e7f8      	b.n	800b134 <__ssvfscanf_r+0xe68>
 800b142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b144:	f7fd f94a 	bl	80083dc <_localeconv_r>
 800b148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b14a:	6802      	ldr	r2, [r0, #0]
 800b14c:	3b01      	subs	r3, #1
 800b14e:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 800b152:	f04f 0800 	mov.w	r8, #0
 800b156:	bf88      	it	hi
 800b158:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 800b15a:	f8c7 8010 	str.w	r8, [r7, #16]
 800b15e:	e9c7 8802 	strd	r8, r8, [r7, #8]
 800b162:	bf81      	itttt	hi
 800b164:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 800b168:	f240 115d 	movwhi	r1, #349	@ 0x15d
 800b16c:	181b      	addhi	r3, r3, r0
 800b16e:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 800b170:	bf98      	it	ls
 800b172:	2300      	movls	r3, #0
 800b174:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 800b178:	46c3      	mov	fp, r8
 800b17a:	46c2      	mov	sl, r8
 800b17c:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 800b180:	6821      	ldr	r1, [r4, #0]
 800b182:	6079      	str	r1, [r7, #4]
 800b184:	7808      	ldrb	r0, [r1, #0]
 800b186:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 800b18a:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 800b18e:	f200 8123 	bhi.w	800b3d8 <__ssvfscanf_r+0x110c>
 800b192:	e8df f01c 	tbh	[pc, ip, lsl #1]
 800b196:	0089      	.short	0x0089
 800b198:	00890121 	.word	0x00890121
 800b19c:	01210121 	.word	0x01210121
 800b1a0:	006f004f 	.word	0x006f004f
 800b1a4:	006f006f 	.word	0x006f006f
 800b1a8:	006f006f 	.word	0x006f006f
 800b1ac:	006f006f 	.word	0x006f006f
 800b1b0:	006f006f 	.word	0x006f006f
 800b1b4:	01210121 	.word	0x01210121
 800b1b8:	01210121 	.word	0x01210121
 800b1bc:	01210121 	.word	0x01210121
 800b1c0:	00af0121 	.word	0x00af0121
 800b1c4:	006d006d 	.word	0x006d006d
 800b1c8:	011e006d 	.word	0x011e006d
 800b1cc:	012100ed 	.word	0x012100ed
 800b1d0:	00d60121 	.word	0x00d60121
 800b1d4:	01210121 	.word	0x01210121
 800b1d8:	01210121 	.word	0x01210121
 800b1dc:	01210090 	.word	0x01210090
 800b1e0:	01210104 	.word	0x01210104
 800b1e4:	01210121 	.word	0x01210121
 800b1e8:	012100f8 	.word	0x012100f8
 800b1ec:	01210121 	.word	0x01210121
 800b1f0:	00fe0073 	.word	0x00fe0073
 800b1f4:	01210121 	.word	0x01210121
 800b1f8:	01210121 	.word	0x01210121
 800b1fc:	01210121 	.word	0x01210121
 800b200:	00af0121 	.word	0x00af0121
 800b204:	006d006d 	.word	0x006d006d
 800b208:	011e006d 	.word	0x011e006d
 800b20c:	012100ed 	.word	0x012100ed
 800b210:	00d60121 	.word	0x00d60121
 800b214:	01210121 	.word	0x01210121
 800b218:	01210121 	.word	0x01210121
 800b21c:	01210090 	.word	0x01210090
 800b220:	01210104 	.word	0x01210104
 800b224:	01210121 	.word	0x01210121
 800b228:	012100f8 	.word	0x012100f8
 800b22c:	01210121 	.word	0x01210121
 800b230:	00fe0073 	.word	0x00fe0073
 800b234:	05f1      	lsls	r1, r6, #23
 800b236:	d51d      	bpl.n	800b274 <__ssvfscanf_r+0xfa8>
 800b238:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 800b23c:	f10a 0a01 	add.w	sl, sl, #1
 800b240:	b11b      	cbz	r3, 800b24a <__ssvfscanf_r+0xf7e>
 800b242:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b244:	3001      	adds	r0, #1
 800b246:	3b01      	subs	r3, #1
 800b248:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b24a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b24c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b24e:	3001      	adds	r0, #1
 800b250:	6338      	str	r0, [r7, #48]	@ 0x30
 800b252:	6860      	ldr	r0, [r4, #4]
 800b254:	3801      	subs	r0, #1
 800b256:	3901      	subs	r1, #1
 800b258:	2800      	cmp	r0, #0
 800b25a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b25c:	6060      	str	r0, [r4, #4]
 800b25e:	f340 80cc 	ble.w	800b3fa <__ssvfscanf_r+0x112e>
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	3101      	adds	r1, #1
 800b266:	6021      	str	r1, [r4, #0]
 800b268:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b26a:	2900      	cmp	r1, #0
 800b26c:	d188      	bne.n	800b180 <__ssvfscanf_r+0xeb4>
 800b26e:	e052      	b.n	800b316 <__ssvfscanf_r+0x104a>
 800b270:	0531      	lsls	r1, r6, #20
 800b272:	d550      	bpl.n	800b316 <__ssvfscanf_r+0x104a>
 800b274:	eb1b 0c08 	adds.w	ip, fp, r8
 800b278:	d041      	beq.n	800b2fe <__ssvfscanf_r+0x1032>
 800b27a:	e04c      	b.n	800b316 <__ssvfscanf_r+0x104a>
 800b27c:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 800b280:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800b284:	d147      	bne.n	800b316 <__ssvfscanf_r+0x104a>
 800b286:	f1ba 0f01 	cmp.w	sl, #1
 800b28a:	d144      	bne.n	800b316 <__ssvfscanf_r+0x104a>
 800b28c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b28e:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800b292:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 800b296:	3901      	subs	r1, #1
 800b298:	f809 cb01 	strb.w	ip, [r9], #1
 800b29c:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 800b2a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b2a2:	f04f 0a00 	mov.w	sl, #0
 800b2a6:	e003      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b2a8:	0631      	lsls	r1, r6, #24
 800b2aa:	d534      	bpl.n	800b316 <__ssvfscanf_r+0x104a>
 800b2ac:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 800b2b0:	f809 0b01 	strb.w	r0, [r9], #1
 800b2b4:	e7c9      	b.n	800b24a <__ssvfscanf_r+0xf7e>
 800b2b6:	f1bb 0f00 	cmp.w	fp, #0
 800b2ba:	d10c      	bne.n	800b2d6 <__ssvfscanf_r+0x100a>
 800b2bc:	f1ba 0f00 	cmp.w	sl, #0
 800b2c0:	d10d      	bne.n	800b2de <__ssvfscanf_r+0x1012>
 800b2c2:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 800b2c6:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 800b2ca:	d108      	bne.n	800b2de <__ssvfscanf_r+0x1012>
 800b2cc:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 800b2d0:	f04f 0b01 	mov.w	fp, #1
 800b2d4:	e7ec      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b2d6:	f1bb 0f02 	cmp.w	fp, #2
 800b2da:	f000 8088 	beq.w	800b3ee <__ssvfscanf_r+0x1122>
 800b2de:	f1b8 0f01 	cmp.w	r8, #1
 800b2e2:	d002      	beq.n	800b2ea <__ssvfscanf_r+0x101e>
 800b2e4:	f1b8 0f04 	cmp.w	r8, #4
 800b2e8:	d115      	bne.n	800b316 <__ssvfscanf_r+0x104a>
 800b2ea:	f108 0801 	add.w	r8, r8, #1
 800b2ee:	fa5f f888 	uxtb.w	r8, r8
 800b2f2:	e7dd      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b2f4:	0531      	lsls	r1, r6, #20
 800b2f6:	d50b      	bpl.n	800b310 <__ssvfscanf_r+0x1044>
 800b2f8:	eb1b 0c08 	adds.w	ip, fp, r8
 800b2fc:	d108      	bne.n	800b310 <__ssvfscanf_r+0x1044>
 800b2fe:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 800b302:	46e0      	mov	r8, ip
 800b304:	46e3      	mov	fp, ip
 800b306:	e7d3      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b308:	0800faee 	.word	0x0800faee
 800b30c:	0800dd39 	.word	0x0800dd39
 800b310:	f1bb 0f01 	cmp.w	fp, #1
 800b314:	d06e      	beq.n	800b3f4 <__ssvfscanf_r+0x1128>
 800b316:	f1ba 0f00 	cmp.w	sl, #0
 800b31a:	d001      	beq.n	800b320 <__ssvfscanf_r+0x1054>
 800b31c:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 800b320:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b324:	f1bb 0f01 	cmp.w	fp, #1
 800b328:	d873      	bhi.n	800b412 <__ssvfscanf_r+0x1146>
 800b32a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 800b32e:	45a9      	cmp	r9, r5
 800b330:	f67f a8c2 	bls.w	800a4b8 <__ssvfscanf_r+0x1ec>
 800b334:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800b338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b33a:	4622      	mov	r2, r4
 800b33c:	f002 fe5c 	bl	800dff8 <_sungetc_r>
 800b340:	e7f5      	b.n	800b32e <__ssvfscanf_r+0x1062>
 800b342:	f1b8 0f00 	cmp.w	r8, #0
 800b346:	d10d      	bne.n	800b364 <__ssvfscanf_r+0x1098>
 800b348:	f1ba 0f00 	cmp.w	sl, #0
 800b34c:	d1e6      	bne.n	800b31c <__ssvfscanf_r+0x1050>
 800b34e:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 800b352:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 800b356:	f040 8124 	bne.w	800b5a2 <__ssvfscanf_r+0x12d6>
 800b35a:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 800b35e:	f04f 0801 	mov.w	r8, #1
 800b362:	e7a5      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b364:	f1b8 0f03 	cmp.w	r8, #3
 800b368:	d0bf      	beq.n	800b2ea <__ssvfscanf_r+0x101e>
 800b36a:	f1b8 0f05 	cmp.w	r8, #5
 800b36e:	e7bb      	b.n	800b2e8 <__ssvfscanf_r+0x101c>
 800b370:	0531      	lsls	r1, r6, #20
 800b372:	d502      	bpl.n	800b37a <__ssvfscanf_r+0x10ae>
 800b374:	eb1b 0c08 	adds.w	ip, fp, r8
 800b378:	d0c1      	beq.n	800b2fe <__ssvfscanf_r+0x1032>
 800b37a:	f1b8 0f02 	cmp.w	r8, #2
 800b37e:	d1ca      	bne.n	800b316 <__ssvfscanf_r+0x104a>
 800b380:	f04f 0803 	mov.w	r8, #3
 800b384:	e794      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b386:	f1b8 0f06 	cmp.w	r8, #6
 800b38a:	d1c4      	bne.n	800b316 <__ssvfscanf_r+0x104a>
 800b38c:	f04f 0807 	mov.w	r8, #7
 800b390:	e78e      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b392:	f1b8 0f07 	cmp.w	r8, #7
 800b396:	d1be      	bne.n	800b316 <__ssvfscanf_r+0x104a>
 800b398:	f04f 0808 	mov.w	r8, #8
 800b39c:	e788      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b39e:	0531      	lsls	r1, r6, #20
 800b3a0:	d5b9      	bpl.n	800b316 <__ssvfscanf_r+0x104a>
 800b3a2:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 800b3a6:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 800b3aa:	d005      	beq.n	800b3b8 <__ssvfscanf_r+0x10ec>
 800b3ac:	0571      	lsls	r1, r6, #21
 800b3ae:	d5b2      	bpl.n	800b316 <__ssvfscanf_r+0x104a>
 800b3b0:	f1ba 0f00 	cmp.w	sl, #0
 800b3b4:	f000 80f5 	beq.w	800b5a2 <__ssvfscanf_r+0x12d6>
 800b3b8:	05b1      	lsls	r1, r6, #22
 800b3ba:	bf58      	it	pl
 800b3bc:	6939      	ldrpl	r1, [r7, #16]
 800b3be:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 800b3c2:	bf5c      	itt	pl
 800b3c4:	ebaa 0101 	subpl.w	r1, sl, r1
 800b3c8:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 800b3cc:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 800b3d0:	e767      	b.n	800b2a2 <__ssvfscanf_r+0xfd6>
 800b3d2:	0531      	lsls	r1, r6, #20
 800b3d4:	d5e5      	bpl.n	800b3a2 <__ssvfscanf_r+0x10d6>
 800b3d6:	e74d      	b.n	800b274 <__ssvfscanf_r+0xfa8>
 800b3d8:	f892 c000 	ldrb.w	ip, [r2]
 800b3dc:	4584      	cmp	ip, r0
 800b3de:	d19a      	bne.n	800b316 <__ssvfscanf_r+0x104a>
 800b3e0:	05b1      	lsls	r1, r6, #22
 800b3e2:	d598      	bpl.n	800b316 <__ssvfscanf_r+0x104a>
 800b3e4:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 800b3e8:	f8c7 a010 	str.w	sl, [r7, #16]
 800b3ec:	e760      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b3ee:	f04f 0b03 	mov.w	fp, #3
 800b3f2:	e75d      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b3f4:	f04f 0b02 	mov.w	fp, #2
 800b3f8:	e75a      	b.n	800b2b0 <__ssvfscanf_r+0xfe4>
 800b3fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	e9c7 2300 	strd	r2, r3, [r7]
 800b402:	f002 fe34 	bl	800e06e <__ssrefill_r>
 800b406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b40a:	2800      	cmp	r0, #0
 800b40c:	f43f af2c 	beq.w	800b268 <__ssvfscanf_r+0xf9c>
 800b410:	e781      	b.n	800b316 <__ssvfscanf_r+0x104a>
 800b412:	f108 33ff 	add.w	r3, r8, #4294967295
 800b416:	2b06      	cmp	r3, #6
 800b418:	d827      	bhi.n	800b46a <__ssvfscanf_r+0x119e>
 800b41a:	f1b8 0f02 	cmp.w	r8, #2
 800b41e:	d834      	bhi.n	800b48a <__ssvfscanf_r+0x11be>
 800b420:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 800b424:	45a9      	cmp	r9, r5
 800b426:	f67f a847 	bls.w	800a4b8 <__ssvfscanf_r+0x1ec>
 800b42a:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800b42e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b430:	4622      	mov	r2, r4
 800b432:	f002 fde1 	bl	800dff8 <_sungetc_r>
 800b436:	e7f5      	b.n	800b424 <__ssvfscanf_r+0x1158>
 800b438:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b43c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b43e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b440:	4622      	mov	r2, r4
 800b442:	f002 fdd9 	bl	800dff8 <_sungetc_r>
 800b446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b448:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b44c:	fa5f fb8b 	uxtb.w	fp, fp
 800b450:	f1bb 0f02 	cmp.w	fp, #2
 800b454:	d1f0      	bne.n	800b438 <__ssvfscanf_r+0x116c>
 800b456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b458:	f1a8 0803 	sub.w	r8, r8, #3
 800b45c:	fa5f f888 	uxtb.w	r8, r8
 800b460:	eba3 0308 	sub.w	r3, r3, r8
 800b464:	eba9 0908 	sub.w	r9, r9, r8
 800b468:	633b      	str	r3, [r7, #48]	@ 0x30
 800b46a:	05f3      	lsls	r3, r6, #23
 800b46c:	d52d      	bpl.n	800b4ca <__ssvfscanf_r+0x11fe>
 800b46e:	0570      	lsls	r0, r6, #21
 800b470:	d50e      	bpl.n	800b490 <__ssvfscanf_r+0x11c4>
 800b472:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 800b476:	45a9      	cmp	r9, r5
 800b478:	f67f a81e 	bls.w	800a4b8 <__ssvfscanf_r+0x1ec>
 800b47c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800b480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b482:	4622      	mov	r2, r4
 800b484:	f002 fdb8 	bl	800dff8 <_sungetc_r>
 800b488:	e7f5      	b.n	800b476 <__ssvfscanf_r+0x11aa>
 800b48a:	46c3      	mov	fp, r8
 800b48c:	464b      	mov	r3, r9
 800b48e:	e7db      	b.n	800b448 <__ssvfscanf_r+0x117c>
 800b490:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 800b494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b496:	2965      	cmp	r1, #101	@ 0x65
 800b498:	f109 38ff 	add.w	r8, r9, #4294967295
 800b49c:	f103 3bff 	add.w	fp, r3, #4294967295
 800b4a0:	d00c      	beq.n	800b4bc <__ssvfscanf_r+0x11f0>
 800b4a2:	2945      	cmp	r1, #69	@ 0x45
 800b4a4:	d00a      	beq.n	800b4bc <__ssvfscanf_r+0x11f0>
 800b4a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	f002 fda5 	bl	800dff8 <_sungetc_r>
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b0:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 800b4b4:	f1a9 0802 	sub.w	r8, r9, #2
 800b4b8:	f1a3 0b02 	sub.w	fp, r3, #2
 800b4bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4be:	4622      	mov	r2, r4
 800b4c0:	f002 fd9a 	bl	800dff8 <_sungetc_r>
 800b4c4:	46c1      	mov	r9, r8
 800b4c6:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 800b4ca:	f016 0210 	ands.w	r2, r6, #16
 800b4ce:	f47e af18 	bne.w	800a302 <__ssvfscanf_r+0x36>
 800b4d2:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 800b4d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4da:	f889 2000 	strb.w	r2, [r9]
 800b4de:	d119      	bne.n	800b514 <__ssvfscanf_r+0x1248>
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	4553      	cmp	r3, sl
 800b4e4:	eba3 020a 	sub.w	r2, r3, sl
 800b4e8:	d121      	bne.n	800b52e <__ssvfscanf_r+0x1262>
 800b4ea:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800b4ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f002 fb31 	bl	800db58 <_strtod_r>
 800b4f6:	07f1      	lsls	r1, r6, #31
 800b4f8:	ec59 8b10 	vmov	r8, r9, d0
 800b4fc:	f105 0a04 	add.w	sl, r5, #4
 800b500:	d520      	bpl.n	800b544 <__ssvfscanf_r+0x1278>
 800b502:	682b      	ldr	r3, [r5, #0]
 800b504:	ed83 0b00 	vstr	d0, [r3]
 800b508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50a:	3301      	adds	r3, #1
 800b50c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b50e:	4655      	mov	r5, sl
 800b510:	f7fe bef7 	b.w	800a302 <__ssvfscanf_r+0x36>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0e7      	beq.n	800b4ea <__ssvfscanf_r+0x121e>
 800b51a:	68b9      	ldr	r1, [r7, #8]
 800b51c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b51e:	230a      	movs	r3, #10
 800b520:	3101      	adds	r1, #1
 800b522:	f002 fb99 	bl	800dc58 <_strtol_r>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800b52c:	1ac2      	subs	r2, r0, r3
 800b52e:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 800b532:	4599      	cmp	r9, r3
 800b534:	bf28      	it	cs
 800b536:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 800b53a:	491b      	ldr	r1, [pc, #108]	@ (800b5a8 <__ssvfscanf_r+0x12dc>)
 800b53c:	4648      	mov	r0, r9
 800b53e:	f000 f973 	bl	800b828 <sprintf>
 800b542:	e7d2      	b.n	800b4ea <__ssvfscanf_r+0x121e>
 800b544:	07b2      	lsls	r2, r6, #30
 800b546:	682d      	ldr	r5, [r5, #0]
 800b548:	d502      	bpl.n	800b550 <__ssvfscanf_r+0x1284>
 800b54a:	ed85 0b00 	vstr	d0, [r5]
 800b54e:	e7db      	b.n	800b508 <__ssvfscanf_r+0x123c>
 800b550:	4642      	mov	r2, r8
 800b552:	464b      	mov	r3, r9
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	f7f5 fb18 	bl	8000b8c <__aeabi_dcmpun>
 800b55c:	b128      	cbz	r0, 800b56a <__ssvfscanf_r+0x129e>
 800b55e:	4813      	ldr	r0, [pc, #76]	@ (800b5ac <__ssvfscanf_r+0x12e0>)
 800b560:	f000 f9b8 	bl	800b8d4 <nanf>
 800b564:	ed85 0a00 	vstr	s0, [r5]
 800b568:	e7ce      	b.n	800b508 <__ssvfscanf_r+0x123c>
 800b56a:	4640      	mov	r0, r8
 800b56c:	4649      	mov	r1, r9
 800b56e:	f7f5 fb6b 	bl	8000c48 <__aeabi_d2f>
 800b572:	6028      	str	r0, [r5, #0]
 800b574:	e7c8      	b.n	800b508 <__ssvfscanf_r+0x123c>
 800b576:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b57a:	6818      	ldr	r0, [r3, #0]
 800b57c:	f001 f864 	bl	800c648 <free>
 800b580:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b584:	3401      	adds	r4, #1
 800b586:	601e      	str	r6, [r3, #0]
 800b588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b58a:	681d      	ldr	r5, [r3, #0]
 800b58c:	88db      	ldrh	r3, [r3, #6]
 800b58e:	42a3      	cmp	r3, r4
 800b590:	dcf1      	bgt.n	800b576 <__ssvfscanf_r+0x12aa>
 800b592:	f04f 33ff 	mov.w	r3, #4294967295
 800b596:	627b      	str	r3, [r7, #36]	@ 0x24
 800b598:	f7ff b85c 	b.w	800a654 <__ssvfscanf_r+0x388>
 800b59c:	2400      	movs	r4, #0
 800b59e:	4626      	mov	r6, r4
 800b5a0:	e7f2      	b.n	800b588 <__ssvfscanf_r+0x12bc>
 800b5a2:	f04f 0a00 	mov.w	sl, #0
 800b5a6:	e6bb      	b.n	800b320 <__ssvfscanf_r+0x1054>
 800b5a8:	0800fae8 	.word	0x0800fae8
 800b5ac:	0800fe74 	.word	0x0800fe74

0800b5b0 <_fclose_r>:
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	b1b1      	cbz	r1, 800b5e6 <_fclose_r+0x36>
 800b5b8:	b118      	cbz	r0, 800b5c2 <_fclose_r+0x12>
 800b5ba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b5bc:	b90b      	cbnz	r3, 800b5c2 <_fclose_r+0x12>
 800b5be:	f7fc fdff 	bl	80081c0 <__sinit>
 800b5c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5c4:	07de      	lsls	r6, r3, #31
 800b5c6:	d405      	bmi.n	800b5d4 <_fclose_r+0x24>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	0598      	lsls	r0, r3, #22
 800b5cc:	d402      	bmi.n	800b5d4 <_fclose_r+0x24>
 800b5ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5d0:	f7fc ff7a 	bl	80084c8 <__retarget_lock_acquire_recursive>
 800b5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5d8:	b943      	cbnz	r3, 800b5ec <_fclose_r+0x3c>
 800b5da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5dc:	07d9      	lsls	r1, r3, #31
 800b5de:	d402      	bmi.n	800b5e6 <_fclose_r+0x36>
 800b5e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5e2:	f7fc ff72 	bl	80084ca <__retarget_lock_release_recursive>
 800b5e6:	2600      	movs	r6, #0
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	bd70      	pop	{r4, r5, r6, pc}
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f000 f834 	bl	800b65c <__sflush_r>
 800b5f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	b133      	cbz	r3, 800b608 <_fclose_r+0x58>
 800b5fa:	69e1      	ldr	r1, [r4, #28]
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	4798      	blx	r3
 800b600:	2800      	cmp	r0, #0
 800b602:	bfb8      	it	lt
 800b604:	f04f 36ff 	movlt.w	r6, #4294967295
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	061a      	lsls	r2, r3, #24
 800b60c:	d503      	bpl.n	800b616 <_fclose_r+0x66>
 800b60e:	6921      	ldr	r1, [r4, #16]
 800b610:	4628      	mov	r0, r5
 800b612:	f7fc ffcf 	bl	80085b4 <_free_r>
 800b616:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b618:	b141      	cbz	r1, 800b62c <_fclose_r+0x7c>
 800b61a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800b61e:	4299      	cmp	r1, r3
 800b620:	d002      	beq.n	800b628 <_fclose_r+0x78>
 800b622:	4628      	mov	r0, r5
 800b624:	f7fc ffc6 	bl	80085b4 <_free_r>
 800b628:	2300      	movs	r3, #0
 800b62a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b62c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b62e:	b121      	cbz	r1, 800b63a <_fclose_r+0x8a>
 800b630:	4628      	mov	r0, r5
 800b632:	f7fc ffbf 	bl	80085b4 <_free_r>
 800b636:	2300      	movs	r3, #0
 800b638:	6463      	str	r3, [r4, #68]	@ 0x44
 800b63a:	f7fc fdb5 	bl	80081a8 <__sfp_lock_acquire>
 800b63e:	2300      	movs	r3, #0
 800b640:	81a3      	strh	r3, [r4, #12]
 800b642:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b644:	07db      	lsls	r3, r3, #31
 800b646:	d402      	bmi.n	800b64e <_fclose_r+0x9e>
 800b648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b64a:	f7fc ff3e 	bl	80084ca <__retarget_lock_release_recursive>
 800b64e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b650:	f7fc ff39 	bl	80084c6 <__retarget_lock_close_recursive>
 800b654:	f7fc fdae 	bl	80081b4 <__sfp_lock_release>
 800b658:	e7c6      	b.n	800b5e8 <_fclose_r+0x38>
	...

0800b65c <__sflush_r>:
 800b65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b660:	4605      	mov	r5, r0
 800b662:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800b666:	0706      	lsls	r6, r0, #28
 800b668:	460c      	mov	r4, r1
 800b66a:	d457      	bmi.n	800b71c <__sflush_r+0xc0>
 800b66c:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800b670:	818b      	strh	r3, [r1, #12]
 800b672:	684b      	ldr	r3, [r1, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	dc02      	bgt.n	800b67e <__sflush_r+0x22>
 800b678:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	dd4c      	ble.n	800b718 <__sflush_r+0xbc>
 800b67e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b680:	2e00      	cmp	r6, #0
 800b682:	d049      	beq.n	800b718 <__sflush_r+0xbc>
 800b684:	2300      	movs	r3, #0
 800b686:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800b68a:	682f      	ldr	r7, [r5, #0]
 800b68c:	69e1      	ldr	r1, [r4, #28]
 800b68e:	602b      	str	r3, [r5, #0]
 800b690:	d034      	beq.n	800b6fc <__sflush_r+0xa0>
 800b692:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	0759      	lsls	r1, r3, #29
 800b698:	d505      	bpl.n	800b6a6 <__sflush_r+0x4a>
 800b69a:	6863      	ldr	r3, [r4, #4]
 800b69c:	1ad2      	subs	r2, r2, r3
 800b69e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b6a0:	b10b      	cbz	r3, 800b6a6 <__sflush_r+0x4a>
 800b6a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b6a4:	1ad2      	subs	r2, r2, r3
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6aa:	69e1      	ldr	r1, [r4, #28]
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	47b0      	blx	r6
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d106      	bne.n	800b6c2 <__sflush_r+0x66>
 800b6b4:	682a      	ldr	r2, [r5, #0]
 800b6b6:	2a1d      	cmp	r2, #29
 800b6b8:	d848      	bhi.n	800b74c <__sflush_r+0xf0>
 800b6ba:	4b2b      	ldr	r3, [pc, #172]	@ (800b768 <__sflush_r+0x10c>)
 800b6bc:	4113      	asrs	r3, r2
 800b6be:	07de      	lsls	r6, r3, #31
 800b6c0:	d444      	bmi.n	800b74c <__sflush_r+0xf0>
 800b6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b6ca:	81a2      	strh	r2, [r4, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	6062      	str	r2, [r4, #4]
 800b6d0:	04d9      	lsls	r1, r3, #19
 800b6d2:	6922      	ldr	r2, [r4, #16]
 800b6d4:	6022      	str	r2, [r4, #0]
 800b6d6:	d504      	bpl.n	800b6e2 <__sflush_r+0x86>
 800b6d8:	1c42      	adds	r2, r0, #1
 800b6da:	d101      	bne.n	800b6e0 <__sflush_r+0x84>
 800b6dc:	682b      	ldr	r3, [r5, #0]
 800b6de:	b903      	cbnz	r3, 800b6e2 <__sflush_r+0x86>
 800b6e0:	6520      	str	r0, [r4, #80]	@ 0x50
 800b6e2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b6e4:	602f      	str	r7, [r5, #0]
 800b6e6:	b1b9      	cbz	r1, 800b718 <__sflush_r+0xbc>
 800b6e8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800b6ec:	4299      	cmp	r1, r3
 800b6ee:	d002      	beq.n	800b6f6 <__sflush_r+0x9a>
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f7fc ff5f 	bl	80085b4 <_free_r>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6fa:	e00d      	b.n	800b718 <__sflush_r+0xbc>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	4628      	mov	r0, r5
 800b700:	47b0      	blx	r6
 800b702:	4602      	mov	r2, r0
 800b704:	1c50      	adds	r0, r2, #1
 800b706:	d1c5      	bne.n	800b694 <__sflush_r+0x38>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0c2      	beq.n	800b694 <__sflush_r+0x38>
 800b70e:	2b1d      	cmp	r3, #29
 800b710:	d001      	beq.n	800b716 <__sflush_r+0xba>
 800b712:	2b16      	cmp	r3, #22
 800b714:	d11a      	bne.n	800b74c <__sflush_r+0xf0>
 800b716:	602f      	str	r7, [r5, #0]
 800b718:	2000      	movs	r0, #0
 800b71a:	e01e      	b.n	800b75a <__sflush_r+0xfe>
 800b71c:	690f      	ldr	r7, [r1, #16]
 800b71e:	2f00      	cmp	r7, #0
 800b720:	d0fa      	beq.n	800b718 <__sflush_r+0xbc>
 800b722:	0783      	lsls	r3, r0, #30
 800b724:	680e      	ldr	r6, [r1, #0]
 800b726:	bf08      	it	eq
 800b728:	694b      	ldreq	r3, [r1, #20]
 800b72a:	600f      	str	r7, [r1, #0]
 800b72c:	bf18      	it	ne
 800b72e:	2300      	movne	r3, #0
 800b730:	eba6 0807 	sub.w	r8, r6, r7
 800b734:	608b      	str	r3, [r1, #8]
 800b736:	f1b8 0f00 	cmp.w	r8, #0
 800b73a:	dded      	ble.n	800b718 <__sflush_r+0xbc>
 800b73c:	69e1      	ldr	r1, [r4, #28]
 800b73e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800b740:	4643      	mov	r3, r8
 800b742:	463a      	mov	r2, r7
 800b744:	4628      	mov	r0, r5
 800b746:	47b0      	blx	r6
 800b748:	2800      	cmp	r0, #0
 800b74a:	dc08      	bgt.n	800b75e <__sflush_r+0x102>
 800b74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b754:	81a3      	strh	r3, [r4, #12]
 800b756:	f04f 30ff 	mov.w	r0, #4294967295
 800b75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75e:	4407      	add	r7, r0
 800b760:	eba8 0800 	sub.w	r8, r8, r0
 800b764:	e7e7      	b.n	800b736 <__sflush_r+0xda>
 800b766:	bf00      	nop
 800b768:	dfbffffe 	.word	0xdfbffffe

0800b76c <_fflush_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	460c      	mov	r4, r1
 800b770:	4605      	mov	r5, r0
 800b772:	b118      	cbz	r0, 800b77c <_fflush_r+0x10>
 800b774:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b776:	b90b      	cbnz	r3, 800b77c <_fflush_r+0x10>
 800b778:	f7fc fd22 	bl	80081c0 <__sinit>
 800b77c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800b780:	b1b8      	cbz	r0, 800b7b2 <_fflush_r+0x46>
 800b782:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b784:	07db      	lsls	r3, r3, #31
 800b786:	d404      	bmi.n	800b792 <_fflush_r+0x26>
 800b788:	0581      	lsls	r1, r0, #22
 800b78a:	d402      	bmi.n	800b792 <_fflush_r+0x26>
 800b78c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b78e:	f7fc fe9b 	bl	80084c8 <__retarget_lock_acquire_recursive>
 800b792:	4628      	mov	r0, r5
 800b794:	4621      	mov	r1, r4
 800b796:	f7ff ff61 	bl	800b65c <__sflush_r>
 800b79a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b79c:	07da      	lsls	r2, r3, #31
 800b79e:	4605      	mov	r5, r0
 800b7a0:	d405      	bmi.n	800b7ae <_fflush_r+0x42>
 800b7a2:	89a3      	ldrh	r3, [r4, #12]
 800b7a4:	059b      	lsls	r3, r3, #22
 800b7a6:	d402      	bmi.n	800b7ae <_fflush_r+0x42>
 800b7a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7aa:	f7fc fe8e 	bl	80084ca <__retarget_lock_release_recursive>
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	bd38      	pop	{r3, r4, r5, pc}
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	e7fb      	b.n	800b7ae <_fflush_r+0x42>

0800b7b6 <__sccl>:
 800b7b6:	b570      	push	{r4, r5, r6, lr}
 800b7b8:	780b      	ldrb	r3, [r1, #0]
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	2b5e      	cmp	r3, #94	@ 0x5e
 800b7be:	bf0b      	itete	eq
 800b7c0:	784b      	ldrbeq	r3, [r1, #1]
 800b7c2:	1c4a      	addne	r2, r1, #1
 800b7c4:	1c8a      	addeq	r2, r1, #2
 800b7c6:	2100      	movne	r1, #0
 800b7c8:	bf08      	it	eq
 800b7ca:	2101      	moveq	r1, #1
 800b7cc:	3801      	subs	r0, #1
 800b7ce:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b7d2:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b7d6:	42a8      	cmp	r0, r5
 800b7d8:	d1fb      	bne.n	800b7d2 <__sccl+0x1c>
 800b7da:	b90b      	cbnz	r3, 800b7e0 <__sccl+0x2a>
 800b7dc:	1e50      	subs	r0, r2, #1
 800b7de:	bd70      	pop	{r4, r5, r6, pc}
 800b7e0:	f081 0101 	eor.w	r1, r1, #1
 800b7e4:	54e1      	strb	r1, [r4, r3]
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b7ee:	2d2d      	cmp	r5, #45	@ 0x2d
 800b7f0:	d005      	beq.n	800b7fe <__sccl+0x48>
 800b7f2:	2d5d      	cmp	r5, #93	@ 0x5d
 800b7f4:	d016      	beq.n	800b824 <__sccl+0x6e>
 800b7f6:	2d00      	cmp	r5, #0
 800b7f8:	d0f1      	beq.n	800b7de <__sccl+0x28>
 800b7fa:	462b      	mov	r3, r5
 800b7fc:	e7f2      	b.n	800b7e4 <__sccl+0x2e>
 800b7fe:	7846      	ldrb	r6, [r0, #1]
 800b800:	2e5d      	cmp	r6, #93	@ 0x5d
 800b802:	d0fa      	beq.n	800b7fa <__sccl+0x44>
 800b804:	42b3      	cmp	r3, r6
 800b806:	dcf8      	bgt.n	800b7fa <__sccl+0x44>
 800b808:	3002      	adds	r0, #2
 800b80a:	461a      	mov	r2, r3
 800b80c:	3201      	adds	r2, #1
 800b80e:	4296      	cmp	r6, r2
 800b810:	54a1      	strb	r1, [r4, r2]
 800b812:	dcfb      	bgt.n	800b80c <__sccl+0x56>
 800b814:	1af2      	subs	r2, r6, r3
 800b816:	3a01      	subs	r2, #1
 800b818:	1c5d      	adds	r5, r3, #1
 800b81a:	42b3      	cmp	r3, r6
 800b81c:	bfa8      	it	ge
 800b81e:	2200      	movge	r2, #0
 800b820:	18ab      	adds	r3, r5, r2
 800b822:	e7e1      	b.n	800b7e8 <__sccl+0x32>
 800b824:	4610      	mov	r0, r2
 800b826:	e7da      	b.n	800b7de <__sccl+0x28>

0800b828 <sprintf>:
 800b828:	b40e      	push	{r1, r2, r3}
 800b82a:	b500      	push	{lr}
 800b82c:	b09c      	sub	sp, #112	@ 0x70
 800b82e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b830:	9002      	str	r0, [sp, #8]
 800b832:	9006      	str	r0, [sp, #24]
 800b834:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b838:	4809      	ldr	r0, [pc, #36]	@ (800b860 <sprintf+0x38>)
 800b83a:	9107      	str	r1, [sp, #28]
 800b83c:	9104      	str	r1, [sp, #16]
 800b83e:	4909      	ldr	r1, [pc, #36]	@ (800b864 <sprintf+0x3c>)
 800b840:	f853 2b04 	ldr.w	r2, [r3], #4
 800b844:	9105      	str	r1, [sp, #20]
 800b846:	6800      	ldr	r0, [r0, #0]
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	a902      	add	r1, sp, #8
 800b84c:	f7fd fb60 	bl	8008f10 <_svfprintf_r>
 800b850:	9b02      	ldr	r3, [sp, #8]
 800b852:	2200      	movs	r2, #0
 800b854:	701a      	strb	r2, [r3, #0]
 800b856:	b01c      	add	sp, #112	@ 0x70
 800b858:	f85d eb04 	ldr.w	lr, [sp], #4
 800b85c:	b003      	add	sp, #12
 800b85e:	4770      	bx	lr
 800b860:	20000050 	.word	0x20000050
 800b864:	ffff0208 	.word	0xffff0208

0800b868 <__locale_mb_cur_max>:
 800b868:	4b01      	ldr	r3, [pc, #4]	@ (800b870 <__locale_mb_cur_max+0x8>)
 800b86a:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800b86e:	4770      	bx	lr
 800b870:	2000058c 	.word	0x2000058c

0800b874 <_sbrk_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d06      	ldr	r5, [pc, #24]	@ (800b890 <_sbrk_r+0x1c>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	602b      	str	r3, [r5, #0]
 800b880:	f7f7 f8ac 	bl	80029dc <_sbrk>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_sbrk_r+0x1a>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_sbrk_r+0x1a>
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	20000bec 	.word	0x20000bec

0800b894 <__libc_fini_array>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d07      	ldr	r5, [pc, #28]	@ (800b8b4 <__libc_fini_array+0x20>)
 800b898:	4c07      	ldr	r4, [pc, #28]	@ (800b8b8 <__libc_fini_array+0x24>)
 800b89a:	1b64      	subs	r4, r4, r5
 800b89c:	10a4      	asrs	r4, r4, #2
 800b89e:	b91c      	cbnz	r4, 800b8a8 <__libc_fini_array+0x14>
 800b8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8a4:	f004 b86c 	b.w	800f980 <_fini>
 800b8a8:	3c01      	subs	r4, #1
 800b8aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b8ae:	4798      	blx	r3
 800b8b0:	e7f5      	b.n	800b89e <__libc_fini_array+0xa>
 800b8b2:	bf00      	nop
 800b8b4:	0800ff0c 	.word	0x0800ff0c
 800b8b8:	0800ff10 	.word	0x0800ff10

0800b8bc <sysconf>:
 800b8bc:	2808      	cmp	r0, #8
 800b8be:	b508      	push	{r3, lr}
 800b8c0:	d006      	beq.n	800b8d0 <sysconf+0x14>
 800b8c2:	f7fc fdd5 	bl	8008470 <__errno>
 800b8c6:	2316      	movs	r3, #22
 800b8c8:	6003      	str	r3, [r0, #0]
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	bd08      	pop	{r3, pc}
 800b8d0:	2080      	movs	r0, #128	@ 0x80
 800b8d2:	e7fc      	b.n	800b8ce <sysconf+0x12>

0800b8d4 <nanf>:
 800b8d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b8dc <nanf+0x8>
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	7fc00000 	.word	0x7fc00000

0800b8e0 <frexp>:
 800b8e0:	b570      	push	{r4, r5, r6, lr}
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	ec55 4b10 	vmov	r4, r5, d0
 800b8e8:	6001      	str	r1, [r0, #0]
 800b8ea:	4915      	ldr	r1, [pc, #84]	@ (800b940 <frexp+0x60>)
 800b8ec:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b8f0:	428a      	cmp	r2, r1
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	d820      	bhi.n	800b93a <frexp+0x5a>
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	4311      	orrs	r1, r2
 800b8fc:	d01d      	beq.n	800b93a <frexp+0x5a>
 800b8fe:	4911      	ldr	r1, [pc, #68]	@ (800b944 <frexp+0x64>)
 800b900:	4029      	ands	r1, r5
 800b902:	b961      	cbnz	r1, 800b91e <frexp+0x3e>
 800b904:	4b10      	ldr	r3, [pc, #64]	@ (800b948 <frexp+0x68>)
 800b906:	2200      	movs	r2, #0
 800b908:	4620      	mov	r0, r4
 800b90a:	4629      	mov	r1, r5
 800b90c:	f7f4 fea4 	bl	8000658 <__aeabi_dmul>
 800b910:	460b      	mov	r3, r1
 800b912:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b916:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800b91a:	4604      	mov	r4, r0
 800b91c:	6031      	str	r1, [r6, #0]
 800b91e:	6831      	ldr	r1, [r6, #0]
 800b920:	1512      	asrs	r2, r2, #20
 800b922:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b926:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800b92a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b92e:	4411      	add	r1, r2
 800b930:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b934:	6031      	str	r1, [r6, #0]
 800b936:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800b93a:	ec45 4b10 	vmov	d0, r4, r5
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	7fefffff 	.word	0x7fefffff
 800b944:	7ff00000 	.word	0x7ff00000
 800b948:	43500000 	.word	0x43500000

0800b94c <__register_exitproc>:
 800b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800b9c8 <__register_exitproc+0x7c>
 800b954:	4606      	mov	r6, r0
 800b956:	f8da 0000 	ldr.w	r0, [sl]
 800b95a:	4698      	mov	r8, r3
 800b95c:	460f      	mov	r7, r1
 800b95e:	4691      	mov	r9, r2
 800b960:	f7fc fdb2 	bl	80084c8 <__retarget_lock_acquire_recursive>
 800b964:	4b16      	ldr	r3, [pc, #88]	@ (800b9c0 <__register_exitproc+0x74>)
 800b966:	681c      	ldr	r4, [r3, #0]
 800b968:	b90c      	cbnz	r4, 800b96e <__register_exitproc+0x22>
 800b96a:	4c16      	ldr	r4, [pc, #88]	@ (800b9c4 <__register_exitproc+0x78>)
 800b96c:	601c      	str	r4, [r3, #0]
 800b96e:	6865      	ldr	r5, [r4, #4]
 800b970:	f8da 0000 	ldr.w	r0, [sl]
 800b974:	2d1f      	cmp	r5, #31
 800b976:	dd05      	ble.n	800b984 <__register_exitproc+0x38>
 800b978:	f7fc fda7 	bl	80084ca <__retarget_lock_release_recursive>
 800b97c:	f04f 30ff 	mov.w	r0, #4294967295
 800b980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b984:	b19e      	cbz	r6, 800b9ae <__register_exitproc+0x62>
 800b986:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800b98a:	2201      	movs	r2, #1
 800b98c:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800b990:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800b994:	40aa      	lsls	r2, r5
 800b996:	4313      	orrs	r3, r2
 800b998:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800b99c:	2e02      	cmp	r6, #2
 800b99e:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800b9a2:	bf02      	ittt	eq
 800b9a4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800b9a8:	4313      	orreq	r3, r2
 800b9aa:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800b9ae:	1c6b      	adds	r3, r5, #1
 800b9b0:	3502      	adds	r5, #2
 800b9b2:	6063      	str	r3, [r4, #4]
 800b9b4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800b9b8:	f7fc fd87 	bl	80084ca <__retarget_lock_release_recursive>
 800b9bc:	2000      	movs	r0, #0
 800b9be:	e7df      	b.n	800b980 <__register_exitproc+0x34>
 800b9c0:	20000bf4 	.word	0x20000bf4
 800b9c4:	20000c2c 	.word	0x20000c2c
 800b9c8:	20000178 	.word	0x20000178

0800b9cc <quorem>:
 800b9cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	6903      	ldr	r3, [r0, #16]
 800b9d2:	690c      	ldr	r4, [r1, #16]
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	db7e      	blt.n	800bad8 <quorem+0x10c>
 800b9da:	3c01      	subs	r4, #1
 800b9dc:	f101 0814 	add.w	r8, r1, #20
 800b9e0:	00a3      	lsls	r3, r4, #2
 800b9e2:	f100 0514 	add.w	r5, r0, #20
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba02:	d32e      	bcc.n	800ba62 <quorem+0x96>
 800ba04:	f04f 0a00 	mov.w	sl, #0
 800ba08:	46c4      	mov	ip, r8
 800ba0a:	46ae      	mov	lr, r5
 800ba0c:	46d3      	mov	fp, sl
 800ba0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba12:	b298      	uxth	r0, r3
 800ba14:	fb06 a000 	mla	r0, r6, r0, sl
 800ba18:	0c02      	lsrs	r2, r0, #16
 800ba1a:	0c1b      	lsrs	r3, r3, #16
 800ba1c:	fb06 2303 	mla	r3, r6, r3, r2
 800ba20:	f8de 2000 	ldr.w	r2, [lr]
 800ba24:	b280      	uxth	r0, r0
 800ba26:	b292      	uxth	r2, r2
 800ba28:	1a12      	subs	r2, r2, r0
 800ba2a:	445a      	add	r2, fp
 800ba2c:	f8de 0000 	ldr.w	r0, [lr]
 800ba30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba3e:	b292      	uxth	r2, r2
 800ba40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba44:	45e1      	cmp	r9, ip
 800ba46:	f84e 2b04 	str.w	r2, [lr], #4
 800ba4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba4e:	d2de      	bcs.n	800ba0e <quorem+0x42>
 800ba50:	9b00      	ldr	r3, [sp, #0]
 800ba52:	58eb      	ldr	r3, [r5, r3]
 800ba54:	b92b      	cbnz	r3, 800ba62 <quorem+0x96>
 800ba56:	9b01      	ldr	r3, [sp, #4]
 800ba58:	3b04      	subs	r3, #4
 800ba5a:	429d      	cmp	r5, r3
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	d32f      	bcc.n	800bac0 <quorem+0xf4>
 800ba60:	613c      	str	r4, [r7, #16]
 800ba62:	4638      	mov	r0, r7
 800ba64:	f001 f880 	bl	800cb68 <__mcmp>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	db25      	blt.n	800bab8 <quorem+0xec>
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	2000      	movs	r0, #0
 800ba70:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba74:	f8d1 c000 	ldr.w	ip, [r1]
 800ba78:	fa1f fe82 	uxth.w	lr, r2
 800ba7c:	fa1f f38c 	uxth.w	r3, ip
 800ba80:	eba3 030e 	sub.w	r3, r3, lr
 800ba84:	4403      	add	r3, r0
 800ba86:	0c12      	lsrs	r2, r2, #16
 800ba88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba96:	45c1      	cmp	r9, r8
 800ba98:	f841 3b04 	str.w	r3, [r1], #4
 800ba9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800baa0:	d2e6      	bcs.n	800ba70 <quorem+0xa4>
 800baa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baaa:	b922      	cbnz	r2, 800bab6 <quorem+0xea>
 800baac:	3b04      	subs	r3, #4
 800baae:	429d      	cmp	r5, r3
 800bab0:	461a      	mov	r2, r3
 800bab2:	d30b      	bcc.n	800bacc <quorem+0x100>
 800bab4:	613c      	str	r4, [r7, #16]
 800bab6:	3601      	adds	r6, #1
 800bab8:	4630      	mov	r0, r6
 800baba:	b003      	add	sp, #12
 800babc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac0:	6812      	ldr	r2, [r2, #0]
 800bac2:	3b04      	subs	r3, #4
 800bac4:	2a00      	cmp	r2, #0
 800bac6:	d1cb      	bne.n	800ba60 <quorem+0x94>
 800bac8:	3c01      	subs	r4, #1
 800baca:	e7c6      	b.n	800ba5a <quorem+0x8e>
 800bacc:	6812      	ldr	r2, [r2, #0]
 800bace:	3b04      	subs	r3, #4
 800bad0:	2a00      	cmp	r2, #0
 800bad2:	d1ef      	bne.n	800bab4 <quorem+0xe8>
 800bad4:	3c01      	subs	r4, #1
 800bad6:	e7ea      	b.n	800baae <quorem+0xe2>
 800bad8:	2000      	movs	r0, #0
 800bada:	e7ee      	b.n	800baba <quorem+0xee>
 800badc:	0000      	movs	r0, r0
	...

0800bae0 <_dtoa_r>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	b099      	sub	sp, #100	@ 0x64
 800bae6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800baea:	9109      	str	r1, [sp, #36]	@ 0x24
 800baec:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800baee:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800baf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800baf2:	ec55 4b10 	vmov	r4, r5, d0
 800baf6:	4683      	mov	fp, r0
 800baf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bafa:	b149      	cbz	r1, 800bb10 <_dtoa_r+0x30>
 800bafc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bafe:	604a      	str	r2, [r1, #4]
 800bb00:	2301      	movs	r3, #1
 800bb02:	4093      	lsls	r3, r2
 800bb04:	608b      	str	r3, [r1, #8]
 800bb06:	f000 fdde 	bl	800c6c6 <_Bfree>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800bb10:	1e2b      	subs	r3, r5, #0
 800bb12:	bfb9      	ittee	lt
 800bb14:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb18:	9303      	strlt	r3, [sp, #12]
 800bb1a:	2300      	movge	r3, #0
 800bb1c:	6033      	strge	r3, [r6, #0]
 800bb1e:	9f03      	ldr	r7, [sp, #12]
 800bb20:	4b97      	ldr	r3, [pc, #604]	@ (800bd80 <_dtoa_r+0x2a0>)
 800bb22:	bfbc      	itt	lt
 800bb24:	2201      	movlt	r2, #1
 800bb26:	6032      	strlt	r2, [r6, #0]
 800bb28:	43bb      	bics	r3, r7
 800bb2a:	d114      	bne.n	800bb56 <_dtoa_r+0x76>
 800bb2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb2e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb38:	4323      	orrs	r3, r4
 800bb3a:	f000 854c 	beq.w	800c5d6 <_dtoa_r+0xaf6>
 800bb3e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb40:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd98 <_dtoa_r+0x2b8>
 800bb44:	b11b      	cbz	r3, 800bb4e <_dtoa_r+0x6e>
 800bb46:	f10a 0303 	add.w	r3, sl, #3
 800bb4a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	4650      	mov	r0, sl
 800bb50:	b019      	add	sp, #100	@ 0x64
 800bb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb56:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	ec51 0b17 	vmov	r0, r1, d7
 800bb60:	2300      	movs	r3, #0
 800bb62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb66:	f7f4 ffdf 	bl	8000b28 <__aeabi_dcmpeq>
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	b150      	cbz	r0, 800bb84 <_dtoa_r+0xa4>
 800bb6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb70:	2301      	movs	r3, #1
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb76:	b113      	cbz	r3, 800bb7e <_dtoa_r+0x9e>
 800bb78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb7a:	4b82      	ldr	r3, [pc, #520]	@ (800bd84 <_dtoa_r+0x2a4>)
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800bd9c <_dtoa_r+0x2bc>
 800bb82:	e7e4      	b.n	800bb4e <_dtoa_r+0x6e>
 800bb84:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb88:	aa16      	add	r2, sp, #88	@ 0x58
 800bb8a:	a917      	add	r1, sp, #92	@ 0x5c
 800bb8c:	4658      	mov	r0, fp
 800bb8e:	f001 f90b 	bl	800cda8 <__d2b>
 800bb92:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb96:	4681      	mov	r9, r0
 800bb98:	2e00      	cmp	r6, #0
 800bb9a:	d077      	beq.n	800bc8c <_dtoa_r+0x1ac>
 800bb9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb9e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbaa:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bbae:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bbb2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	2200      	movs	r2, #0
 800bbba:	4b73      	ldr	r3, [pc, #460]	@ (800bd88 <_dtoa_r+0x2a8>)
 800bbbc:	f7f4 fb94 	bl	80002e8 <__aeabi_dsub>
 800bbc0:	a369      	add	r3, pc, #420	@ (adr r3, 800bd68 <_dtoa_r+0x288>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	f7f4 fd47 	bl	8000658 <__aeabi_dmul>
 800bbca:	a369      	add	r3, pc, #420	@ (adr r3, 800bd70 <_dtoa_r+0x290>)
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	f7f4 fb8c 	bl	80002ec <__adddf3>
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	460d      	mov	r5, r1
 800bbda:	f7f4 fcd3 	bl	8000584 <__aeabi_i2d>
 800bbde:	a366      	add	r3, pc, #408	@ (adr r3, 800bd78 <_dtoa_r+0x298>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f7f4 fd38 	bl	8000658 <__aeabi_dmul>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f7f4 fb7c 	bl	80002ec <__adddf3>
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	460d      	mov	r5, r1
 800bbf8:	f7f4 ffde 	bl	8000bb8 <__aeabi_d2iz>
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	4607      	mov	r7, r0
 800bc00:	2300      	movs	r3, #0
 800bc02:	4620      	mov	r0, r4
 800bc04:	4629      	mov	r1, r5
 800bc06:	f7f4 ff99 	bl	8000b3c <__aeabi_dcmplt>
 800bc0a:	b140      	cbz	r0, 800bc1e <_dtoa_r+0x13e>
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	f7f4 fcb9 	bl	8000584 <__aeabi_i2d>
 800bc12:	4622      	mov	r2, r4
 800bc14:	462b      	mov	r3, r5
 800bc16:	f7f4 ff87 	bl	8000b28 <__aeabi_dcmpeq>
 800bc1a:	b900      	cbnz	r0, 800bc1e <_dtoa_r+0x13e>
 800bc1c:	3f01      	subs	r7, #1
 800bc1e:	2f16      	cmp	r7, #22
 800bc20:	d851      	bhi.n	800bcc6 <_dtoa_r+0x1e6>
 800bc22:	4b5a      	ldr	r3, [pc, #360]	@ (800bd8c <_dtoa_r+0x2ac>)
 800bc24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc30:	f7f4 ff84 	bl	8000b3c <__aeabi_dcmplt>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d048      	beq.n	800bcca <_dtoa_r+0x1ea>
 800bc38:	3f01      	subs	r7, #1
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc3e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc40:	1b9b      	subs	r3, r3, r6
 800bc42:	1e5a      	subs	r2, r3, #1
 800bc44:	bf44      	itt	mi
 800bc46:	f1c3 0801 	rsbmi	r8, r3, #1
 800bc4a:	2300      	movmi	r3, #0
 800bc4c:	9208      	str	r2, [sp, #32]
 800bc4e:	bf54      	ite	pl
 800bc50:	f04f 0800 	movpl.w	r8, #0
 800bc54:	9308      	strmi	r3, [sp, #32]
 800bc56:	2f00      	cmp	r7, #0
 800bc58:	db39      	blt.n	800bcce <_dtoa_r+0x1ee>
 800bc5a:	9b08      	ldr	r3, [sp, #32]
 800bc5c:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc5e:	443b      	add	r3, r7
 800bc60:	9308      	str	r3, [sp, #32]
 800bc62:	2300      	movs	r3, #0
 800bc64:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc68:	2b09      	cmp	r3, #9
 800bc6a:	d865      	bhi.n	800bd38 <_dtoa_r+0x258>
 800bc6c:	2b05      	cmp	r3, #5
 800bc6e:	bfc4      	itt	gt
 800bc70:	3b04      	subgt	r3, #4
 800bc72:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc76:	f1a3 0302 	sub.w	r3, r3, #2
 800bc7a:	bfcc      	ite	gt
 800bc7c:	2400      	movgt	r4, #0
 800bc7e:	2401      	movle	r4, #1
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	d864      	bhi.n	800bd4e <_dtoa_r+0x26e>
 800bc84:	e8df f003 	tbb	[pc, r3]
 800bc88:	5635372a 	.word	0x5635372a
 800bc8c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bc90:	441e      	add	r6, r3
 800bc92:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	bfc1      	itttt	gt
 800bc9a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc9e:	409f      	lslgt	r7, r3
 800bca0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bca4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bca8:	bfd6      	itet	le
 800bcaa:	f1c3 0320 	rsble	r3, r3, #32
 800bcae:	ea47 0003 	orrgt.w	r0, r7, r3
 800bcb2:	fa04 f003 	lslle.w	r0, r4, r3
 800bcb6:	f7f4 fc55 	bl	8000564 <__aeabi_ui2d>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bcc0:	3e01      	subs	r6, #1
 800bcc2:	9214      	str	r2, [sp, #80]	@ 0x50
 800bcc4:	e777      	b.n	800bbb6 <_dtoa_r+0xd6>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e7b8      	b.n	800bc3c <_dtoa_r+0x15c>
 800bcca:	9012      	str	r0, [sp, #72]	@ 0x48
 800bccc:	e7b7      	b.n	800bc3e <_dtoa_r+0x15e>
 800bcce:	427b      	negs	r3, r7
 800bcd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	eba8 0807 	sub.w	r8, r8, r7
 800bcd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcda:	e7c4      	b.n	800bc66 <_dtoa_r+0x186>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	dc36      	bgt.n	800bd54 <_dtoa_r+0x274>
 800bce6:	2301      	movs	r3, #1
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	9307      	str	r3, [sp, #28]
 800bcec:	461a      	mov	r2, r3
 800bcee:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcf0:	e00b      	b.n	800bd0a <_dtoa_r+0x22a>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e7f3      	b.n	800bcde <_dtoa_r+0x1fe>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcfc:	18fb      	adds	r3, r7, r3
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	3301      	adds	r3, #1
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	9307      	str	r3, [sp, #28]
 800bd06:	bfb8      	it	lt
 800bd08:	2301      	movlt	r3, #1
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	f102 0014 	add.w	r0, r2, #20
 800bd12:	4298      	cmp	r0, r3
 800bd14:	d922      	bls.n	800bd5c <_dtoa_r+0x27c>
 800bd16:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800bd1a:	4658      	mov	r0, fp
 800bd1c:	f000 fcae 	bl	800c67c <_Balloc>
 800bd20:	4682      	mov	sl, r0
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d13c      	bne.n	800bda0 <_dtoa_r+0x2c0>
 800bd26:	4b1a      	ldr	r3, [pc, #104]	@ (800bd90 <_dtoa_r+0x2b0>)
 800bd28:	4602      	mov	r2, r0
 800bd2a:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd2e:	4819      	ldr	r0, [pc, #100]	@ (800bd94 <_dtoa_r+0x2b4>)
 800bd30:	f002 fa4a 	bl	800e1c8 <__assert_func>
 800bd34:	2301      	movs	r3, #1
 800bd36:	e7df      	b.n	800bcf8 <_dtoa_r+0x218>
 800bd38:	2401      	movs	r4, #1
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd40:	f04f 33ff 	mov.w	r3, #4294967295
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	9307      	str	r3, [sp, #28]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2312      	movs	r3, #18
 800bd4c:	e7cf      	b.n	800bcee <_dtoa_r+0x20e>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd52:	e7f5      	b.n	800bd40 <_dtoa_r+0x260>
 800bd54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	9307      	str	r3, [sp, #28]
 800bd5a:	e7d6      	b.n	800bd0a <_dtoa_r+0x22a>
 800bd5c:	3101      	adds	r1, #1
 800bd5e:	0052      	lsls	r2, r2, #1
 800bd60:	e7d5      	b.n	800bd0e <_dtoa_r+0x22e>
 800bd62:	bf00      	nop
 800bd64:	f3af 8000 	nop.w
 800bd68:	636f4361 	.word	0x636f4361
 800bd6c:	3fd287a7 	.word	0x3fd287a7
 800bd70:	8b60c8b3 	.word	0x8b60c8b3
 800bd74:	3fc68a28 	.word	0x3fc68a28
 800bd78:	509f79fb 	.word	0x509f79fb
 800bd7c:	3fd34413 	.word	0x3fd34413
 800bd80:	7ff00000 	.word	0x7ff00000
 800bd84:	0800fac7 	.word	0x0800fac7
 800bd88:	3ff80000 	.word	0x3ff80000
 800bd8c:	0800fc20 	.word	0x0800fc20
 800bd90:	0800fb27 	.word	0x0800fb27
 800bd94:	0800fb38 	.word	0x0800fb38
 800bd98:	0800fb23 	.word	0x0800fb23
 800bd9c:	0800fac6 	.word	0x0800fac6
 800bda0:	9b07      	ldr	r3, [sp, #28]
 800bda2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800bda6:	2b0e      	cmp	r3, #14
 800bda8:	f200 80a4 	bhi.w	800bef4 <_dtoa_r+0x414>
 800bdac:	2c00      	cmp	r4, #0
 800bdae:	f000 80a1 	beq.w	800bef4 <_dtoa_r+0x414>
 800bdb2:	2f00      	cmp	r7, #0
 800bdb4:	dd33      	ble.n	800be1e <_dtoa_r+0x33e>
 800bdb6:	4bae      	ldr	r3, [pc, #696]	@ (800c070 <_dtoa_r+0x590>)
 800bdb8:	f007 020f 	and.w	r2, r7, #15
 800bdbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdc0:	ed93 7b00 	vldr	d7, [r3]
 800bdc4:	05f8      	lsls	r0, r7, #23
 800bdc6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bdca:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bdce:	d516      	bpl.n	800bdfe <_dtoa_r+0x31e>
 800bdd0:	4ba8      	ldr	r3, [pc, #672]	@ (800c074 <_dtoa_r+0x594>)
 800bdd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdda:	f7f4 fd67 	bl	80008ac <__aeabi_ddiv>
 800bdde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bde2:	f004 040f 	and.w	r4, r4, #15
 800bde6:	2603      	movs	r6, #3
 800bde8:	4da2      	ldr	r5, [pc, #648]	@ (800c074 <_dtoa_r+0x594>)
 800bdea:	b954      	cbnz	r4, 800be02 <_dtoa_r+0x322>
 800bdec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdf4:	f7f4 fd5a 	bl	80008ac <__aeabi_ddiv>
 800bdf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdfc:	e028      	b.n	800be50 <_dtoa_r+0x370>
 800bdfe:	2602      	movs	r6, #2
 800be00:	e7f2      	b.n	800bde8 <_dtoa_r+0x308>
 800be02:	07e1      	lsls	r1, r4, #31
 800be04:	d508      	bpl.n	800be18 <_dtoa_r+0x338>
 800be06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be0e:	f7f4 fc23 	bl	8000658 <__aeabi_dmul>
 800be12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be16:	3601      	adds	r6, #1
 800be18:	1064      	asrs	r4, r4, #1
 800be1a:	3508      	adds	r5, #8
 800be1c:	e7e5      	b.n	800bdea <_dtoa_r+0x30a>
 800be1e:	f000 80d2 	beq.w	800bfc6 <_dtoa_r+0x4e6>
 800be22:	427c      	negs	r4, r7
 800be24:	4b92      	ldr	r3, [pc, #584]	@ (800c070 <_dtoa_r+0x590>)
 800be26:	4d93      	ldr	r5, [pc, #588]	@ (800c074 <_dtoa_r+0x594>)
 800be28:	f004 020f 	and.w	r2, r4, #15
 800be2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be38:	f7f4 fc0e 	bl	8000658 <__aeabi_dmul>
 800be3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be40:	1124      	asrs	r4, r4, #4
 800be42:	2300      	movs	r3, #0
 800be44:	2602      	movs	r6, #2
 800be46:	2c00      	cmp	r4, #0
 800be48:	f040 80b2 	bne.w	800bfb0 <_dtoa_r+0x4d0>
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1d3      	bne.n	800bdf8 <_dtoa_r+0x318>
 800be50:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be52:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 80b7 	beq.w	800bfca <_dtoa_r+0x4ea>
 800be5c:	4b86      	ldr	r3, [pc, #536]	@ (800c078 <_dtoa_r+0x598>)
 800be5e:	2200      	movs	r2, #0
 800be60:	4620      	mov	r0, r4
 800be62:	4629      	mov	r1, r5
 800be64:	f7f4 fe6a 	bl	8000b3c <__aeabi_dcmplt>
 800be68:	2800      	cmp	r0, #0
 800be6a:	f000 80ae 	beq.w	800bfca <_dtoa_r+0x4ea>
 800be6e:	9b07      	ldr	r3, [sp, #28]
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 80aa 	beq.w	800bfca <_dtoa_r+0x4ea>
 800be76:	9b00      	ldr	r3, [sp, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	dd37      	ble.n	800beec <_dtoa_r+0x40c>
 800be7c:	1e7b      	subs	r3, r7, #1
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	4620      	mov	r0, r4
 800be82:	4b7e      	ldr	r3, [pc, #504]	@ (800c07c <_dtoa_r+0x59c>)
 800be84:	2200      	movs	r2, #0
 800be86:	4629      	mov	r1, r5
 800be88:	f7f4 fbe6 	bl	8000658 <__aeabi_dmul>
 800be8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be90:	9c00      	ldr	r4, [sp, #0]
 800be92:	3601      	adds	r6, #1
 800be94:	4630      	mov	r0, r6
 800be96:	f7f4 fb75 	bl	8000584 <__aeabi_i2d>
 800be9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be9e:	f7f4 fbdb 	bl	8000658 <__aeabi_dmul>
 800bea2:	4b77      	ldr	r3, [pc, #476]	@ (800c080 <_dtoa_r+0x5a0>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	f7f4 fa21 	bl	80002ec <__adddf3>
 800beaa:	4605      	mov	r5, r0
 800beac:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800beb0:	2c00      	cmp	r4, #0
 800beb2:	f040 808d 	bne.w	800bfd0 <_dtoa_r+0x4f0>
 800beb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beba:	4b72      	ldr	r3, [pc, #456]	@ (800c084 <_dtoa_r+0x5a4>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	f7f4 fa13 	bl	80002e8 <__aeabi_dsub>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800beca:	462a      	mov	r2, r5
 800becc:	4633      	mov	r3, r6
 800bece:	f7f4 fe53 	bl	8000b78 <__aeabi_dcmpgt>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f040 828c 	bne.w	800c3f0 <_dtoa_r+0x910>
 800bed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bedc:	462a      	mov	r2, r5
 800bede:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bee2:	f7f4 fe2b 	bl	8000b3c <__aeabi_dcmplt>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f040 8129 	bne.w	800c13e <_dtoa_r+0x65e>
 800beec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bef0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bef4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f2c0 815b 	blt.w	800c1b2 <_dtoa_r+0x6d2>
 800befc:	2f0e      	cmp	r7, #14
 800befe:	f300 8158 	bgt.w	800c1b2 <_dtoa_r+0x6d2>
 800bf02:	4b5b      	ldr	r3, [pc, #364]	@ (800c070 <_dtoa_r+0x590>)
 800bf04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf08:	ed93 7b00 	vldr	d7, [r3]
 800bf0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	ed8d 7b00 	vstr	d7, [sp]
 800bf14:	da03      	bge.n	800bf1e <_dtoa_r+0x43e>
 800bf16:	9b07      	ldr	r3, [sp, #28]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f340 8102 	ble.w	800c122 <_dtoa_r+0x642>
 800bf1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf22:	4656      	mov	r6, sl
 800bf24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf28:	4620      	mov	r0, r4
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	f7f4 fcbe 	bl	80008ac <__aeabi_ddiv>
 800bf30:	f7f4 fe42 	bl	8000bb8 <__aeabi_d2iz>
 800bf34:	4680      	mov	r8, r0
 800bf36:	f7f4 fb25 	bl	8000584 <__aeabi_i2d>
 800bf3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3e:	f7f4 fb8b 	bl	8000658 <__aeabi_dmul>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4620      	mov	r0, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf4e:	f7f4 f9cb 	bl	80002e8 <__aeabi_dsub>
 800bf52:	f806 4b01 	strb.w	r4, [r6], #1
 800bf56:	9d07      	ldr	r5, [sp, #28]
 800bf58:	eba6 040a 	sub.w	r4, r6, sl
 800bf5c:	42a5      	cmp	r5, r4
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	f040 8118 	bne.w	800c196 <_dtoa_r+0x6b6>
 800bf66:	f7f4 f9c1 	bl	80002ec <__adddf3>
 800bf6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf6e:	4604      	mov	r4, r0
 800bf70:	460d      	mov	r5, r1
 800bf72:	f7f4 fe01 	bl	8000b78 <__aeabi_dcmpgt>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	f040 80fa 	bne.w	800c170 <_dtoa_r+0x690>
 800bf7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf80:	4620      	mov	r0, r4
 800bf82:	4629      	mov	r1, r5
 800bf84:	f7f4 fdd0 	bl	8000b28 <__aeabi_dcmpeq>
 800bf88:	b118      	cbz	r0, 800bf92 <_dtoa_r+0x4b2>
 800bf8a:	f018 0f01 	tst.w	r8, #1
 800bf8e:	f040 80ef 	bne.w	800c170 <_dtoa_r+0x690>
 800bf92:	4649      	mov	r1, r9
 800bf94:	4658      	mov	r0, fp
 800bf96:	f000 fb96 	bl	800c6c6 <_Bfree>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	7033      	strb	r3, [r6, #0]
 800bf9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bfa0:	3701      	adds	r7, #1
 800bfa2:	601f      	str	r7, [r3, #0]
 800bfa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f43f add1 	beq.w	800bb4e <_dtoa_r+0x6e>
 800bfac:	601e      	str	r6, [r3, #0]
 800bfae:	e5ce      	b.n	800bb4e <_dtoa_r+0x6e>
 800bfb0:	07e2      	lsls	r2, r4, #31
 800bfb2:	d505      	bpl.n	800bfc0 <_dtoa_r+0x4e0>
 800bfb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfb8:	f7f4 fb4e 	bl	8000658 <__aeabi_dmul>
 800bfbc:	3601      	adds	r6, #1
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	1064      	asrs	r4, r4, #1
 800bfc2:	3508      	adds	r5, #8
 800bfc4:	e73f      	b.n	800be46 <_dtoa_r+0x366>
 800bfc6:	2602      	movs	r6, #2
 800bfc8:	e742      	b.n	800be50 <_dtoa_r+0x370>
 800bfca:	9c07      	ldr	r4, [sp, #28]
 800bfcc:	9704      	str	r7, [sp, #16]
 800bfce:	e761      	b.n	800be94 <_dtoa_r+0x3b4>
 800bfd0:	4b27      	ldr	r3, [pc, #156]	@ (800c070 <_dtoa_r+0x590>)
 800bfd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfdc:	4454      	add	r4, sl
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	d054      	beq.n	800c08c <_dtoa_r+0x5ac>
 800bfe2:	4929      	ldr	r1, [pc, #164]	@ (800c088 <_dtoa_r+0x5a8>)
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	f7f4 fc61 	bl	80008ac <__aeabi_ddiv>
 800bfea:	4633      	mov	r3, r6
 800bfec:	462a      	mov	r2, r5
 800bfee:	f7f4 f97b 	bl	80002e8 <__aeabi_dsub>
 800bff2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bff6:	4656      	mov	r6, sl
 800bff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bffc:	f7f4 fddc 	bl	8000bb8 <__aeabi_d2iz>
 800c000:	4605      	mov	r5, r0
 800c002:	f7f4 fabf 	bl	8000584 <__aeabi_i2d>
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c00e:	f7f4 f96b 	bl	80002e8 <__aeabi_dsub>
 800c012:	3530      	adds	r5, #48	@ 0x30
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c01c:	f806 5b01 	strb.w	r5, [r6], #1
 800c020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c024:	f7f4 fd8a 	bl	8000b3c <__aeabi_dcmplt>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d172      	bne.n	800c112 <_dtoa_r+0x632>
 800c02c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c030:	4911      	ldr	r1, [pc, #68]	@ (800c078 <_dtoa_r+0x598>)
 800c032:	2000      	movs	r0, #0
 800c034:	f7f4 f958 	bl	80002e8 <__aeabi_dsub>
 800c038:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c03c:	f7f4 fd7e 	bl	8000b3c <__aeabi_dcmplt>
 800c040:	2800      	cmp	r0, #0
 800c042:	f040 8096 	bne.w	800c172 <_dtoa_r+0x692>
 800c046:	42a6      	cmp	r6, r4
 800c048:	f43f af50 	beq.w	800beec <_dtoa_r+0x40c>
 800c04c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c050:	4b0a      	ldr	r3, [pc, #40]	@ (800c07c <_dtoa_r+0x59c>)
 800c052:	2200      	movs	r2, #0
 800c054:	f7f4 fb00 	bl	8000658 <__aeabi_dmul>
 800c058:	4b08      	ldr	r3, [pc, #32]	@ (800c07c <_dtoa_r+0x59c>)
 800c05a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c05e:	2200      	movs	r2, #0
 800c060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c064:	f7f4 faf8 	bl	8000658 <__aeabi_dmul>
 800c068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c06c:	e7c4      	b.n	800bff8 <_dtoa_r+0x518>
 800c06e:	bf00      	nop
 800c070:	0800fc20 	.word	0x0800fc20
 800c074:	0800fbf8 	.word	0x0800fbf8
 800c078:	3ff00000 	.word	0x3ff00000
 800c07c:	40240000 	.word	0x40240000
 800c080:	401c0000 	.word	0x401c0000
 800c084:	40140000 	.word	0x40140000
 800c088:	3fe00000 	.word	0x3fe00000
 800c08c:	4631      	mov	r1, r6
 800c08e:	4628      	mov	r0, r5
 800c090:	f7f4 fae2 	bl	8000658 <__aeabi_dmul>
 800c094:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c098:	9415      	str	r4, [sp, #84]	@ 0x54
 800c09a:	4656      	mov	r6, sl
 800c09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a0:	f7f4 fd8a 	bl	8000bb8 <__aeabi_d2iz>
 800c0a4:	4605      	mov	r5, r0
 800c0a6:	f7f4 fa6d 	bl	8000584 <__aeabi_i2d>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0b2:	f7f4 f919 	bl	80002e8 <__aeabi_dsub>
 800c0b6:	3530      	adds	r5, #48	@ 0x30
 800c0b8:	f806 5b01 	strb.w	r5, [r6], #1
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	42a6      	cmp	r6, r4
 800c0c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0c6:	f04f 0200 	mov.w	r2, #0
 800c0ca:	d124      	bne.n	800c116 <_dtoa_r+0x636>
 800c0cc:	4bac      	ldr	r3, [pc, #688]	@ (800c380 <_dtoa_r+0x8a0>)
 800c0ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0d2:	f7f4 f90b 	bl	80002ec <__adddf3>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0de:	f7f4 fd4b 	bl	8000b78 <__aeabi_dcmpgt>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d145      	bne.n	800c172 <_dtoa_r+0x692>
 800c0e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0ea:	49a5      	ldr	r1, [pc, #660]	@ (800c380 <_dtoa_r+0x8a0>)
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	f7f4 f8fb 	bl	80002e8 <__aeabi_dsub>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fa:	f7f4 fd1f 	bl	8000b3c <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f43f aef4 	beq.w	800beec <_dtoa_r+0x40c>
 800c104:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c106:	1e73      	subs	r3, r6, #1
 800c108:	9315      	str	r3, [sp, #84]	@ 0x54
 800c10a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c10e:	2b30      	cmp	r3, #48	@ 0x30
 800c110:	d0f8      	beq.n	800c104 <_dtoa_r+0x624>
 800c112:	9f04      	ldr	r7, [sp, #16]
 800c114:	e73d      	b.n	800bf92 <_dtoa_r+0x4b2>
 800c116:	4b9b      	ldr	r3, [pc, #620]	@ (800c384 <_dtoa_r+0x8a4>)
 800c118:	f7f4 fa9e 	bl	8000658 <__aeabi_dmul>
 800c11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c120:	e7bc      	b.n	800c09c <_dtoa_r+0x5bc>
 800c122:	d10c      	bne.n	800c13e <_dtoa_r+0x65e>
 800c124:	4b98      	ldr	r3, [pc, #608]	@ (800c388 <_dtoa_r+0x8a8>)
 800c126:	2200      	movs	r2, #0
 800c128:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c12c:	f7f4 fa94 	bl	8000658 <__aeabi_dmul>
 800c130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c134:	f7f4 fd16 	bl	8000b64 <__aeabi_dcmpge>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f000 8157 	beq.w	800c3ec <_dtoa_r+0x90c>
 800c13e:	2400      	movs	r4, #0
 800c140:	4625      	mov	r5, r4
 800c142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c144:	43db      	mvns	r3, r3
 800c146:	9304      	str	r3, [sp, #16]
 800c148:	4656      	mov	r6, sl
 800c14a:	2700      	movs	r7, #0
 800c14c:	4621      	mov	r1, r4
 800c14e:	4658      	mov	r0, fp
 800c150:	f000 fab9 	bl	800c6c6 <_Bfree>
 800c154:	2d00      	cmp	r5, #0
 800c156:	d0dc      	beq.n	800c112 <_dtoa_r+0x632>
 800c158:	b12f      	cbz	r7, 800c166 <_dtoa_r+0x686>
 800c15a:	42af      	cmp	r7, r5
 800c15c:	d003      	beq.n	800c166 <_dtoa_r+0x686>
 800c15e:	4639      	mov	r1, r7
 800c160:	4658      	mov	r0, fp
 800c162:	f000 fab0 	bl	800c6c6 <_Bfree>
 800c166:	4629      	mov	r1, r5
 800c168:	4658      	mov	r0, fp
 800c16a:	f000 faac 	bl	800c6c6 <_Bfree>
 800c16e:	e7d0      	b.n	800c112 <_dtoa_r+0x632>
 800c170:	9704      	str	r7, [sp, #16]
 800c172:	4633      	mov	r3, r6
 800c174:	461e      	mov	r6, r3
 800c176:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c17a:	2a39      	cmp	r2, #57	@ 0x39
 800c17c:	d107      	bne.n	800c18e <_dtoa_r+0x6ae>
 800c17e:	459a      	cmp	sl, r3
 800c180:	d1f8      	bne.n	800c174 <_dtoa_r+0x694>
 800c182:	9a04      	ldr	r2, [sp, #16]
 800c184:	3201      	adds	r2, #1
 800c186:	9204      	str	r2, [sp, #16]
 800c188:	2230      	movs	r2, #48	@ 0x30
 800c18a:	f88a 2000 	strb.w	r2, [sl]
 800c18e:	781a      	ldrb	r2, [r3, #0]
 800c190:	3201      	adds	r2, #1
 800c192:	701a      	strb	r2, [r3, #0]
 800c194:	e7bd      	b.n	800c112 <_dtoa_r+0x632>
 800c196:	4b7b      	ldr	r3, [pc, #492]	@ (800c384 <_dtoa_r+0x8a4>)
 800c198:	2200      	movs	r2, #0
 800c19a:	f7f4 fa5d 	bl	8000658 <__aeabi_dmul>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	460d      	mov	r5, r1
 800c1a6:	f7f4 fcbf 	bl	8000b28 <__aeabi_dcmpeq>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	f43f aeba 	beq.w	800bf24 <_dtoa_r+0x444>
 800c1b0:	e6ef      	b.n	800bf92 <_dtoa_r+0x4b2>
 800c1b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c1b4:	2a00      	cmp	r2, #0
 800c1b6:	f000 80db 	beq.w	800c370 <_dtoa_r+0x890>
 800c1ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1bc:	2a01      	cmp	r2, #1
 800c1be:	f300 80bf 	bgt.w	800c340 <_dtoa_r+0x860>
 800c1c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c1c4:	2a00      	cmp	r2, #0
 800c1c6:	f000 80b7 	beq.w	800c338 <_dtoa_r+0x858>
 800c1ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c1ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1d0:	4646      	mov	r6, r8
 800c1d2:	9a08      	ldr	r2, [sp, #32]
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	441a      	add	r2, r3
 800c1d8:	4658      	mov	r0, fp
 800c1da:	4498      	add	r8, r3
 800c1dc:	9208      	str	r2, [sp, #32]
 800c1de:	f000 fb57 	bl	800c890 <__i2b>
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	b15e      	cbz	r6, 800c1fe <_dtoa_r+0x71e>
 800c1e6:	9b08      	ldr	r3, [sp, #32]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dd08      	ble.n	800c1fe <_dtoa_r+0x71e>
 800c1ec:	42b3      	cmp	r3, r6
 800c1ee:	9a08      	ldr	r2, [sp, #32]
 800c1f0:	bfa8      	it	ge
 800c1f2:	4633      	movge	r3, r6
 800c1f4:	eba8 0803 	sub.w	r8, r8, r3
 800c1f8:	1af6      	subs	r6, r6, r3
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	9308      	str	r3, [sp, #32]
 800c1fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c200:	b1f3      	cbz	r3, 800c240 <_dtoa_r+0x760>
 800c202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c204:	2b00      	cmp	r3, #0
 800c206:	f000 80b7 	beq.w	800c378 <_dtoa_r+0x898>
 800c20a:	b18c      	cbz	r4, 800c230 <_dtoa_r+0x750>
 800c20c:	4629      	mov	r1, r5
 800c20e:	4622      	mov	r2, r4
 800c210:	4658      	mov	r0, fp
 800c212:	f000 fbfd 	bl	800ca10 <__pow5mult>
 800c216:	464a      	mov	r2, r9
 800c218:	4601      	mov	r1, r0
 800c21a:	4605      	mov	r5, r0
 800c21c:	4658      	mov	r0, fp
 800c21e:	f000 fb4d 	bl	800c8bc <__multiply>
 800c222:	4649      	mov	r1, r9
 800c224:	9004      	str	r0, [sp, #16]
 800c226:	4658      	mov	r0, fp
 800c228:	f000 fa4d 	bl	800c6c6 <_Bfree>
 800c22c:	9b04      	ldr	r3, [sp, #16]
 800c22e:	4699      	mov	r9, r3
 800c230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c232:	1b1a      	subs	r2, r3, r4
 800c234:	d004      	beq.n	800c240 <_dtoa_r+0x760>
 800c236:	4649      	mov	r1, r9
 800c238:	4658      	mov	r0, fp
 800c23a:	f000 fbe9 	bl	800ca10 <__pow5mult>
 800c23e:	4681      	mov	r9, r0
 800c240:	2101      	movs	r1, #1
 800c242:	4658      	mov	r0, fp
 800c244:	f000 fb24 	bl	800c890 <__i2b>
 800c248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c24a:	4604      	mov	r4, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 81cc 	beq.w	800c5ea <_dtoa_r+0xb0a>
 800c252:	461a      	mov	r2, r3
 800c254:	4601      	mov	r1, r0
 800c256:	4658      	mov	r0, fp
 800c258:	f000 fbda 	bl	800ca10 <__pow5mult>
 800c25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c25e:	2b01      	cmp	r3, #1
 800c260:	4604      	mov	r4, r0
 800c262:	f300 8095 	bgt.w	800c390 <_dtoa_r+0x8b0>
 800c266:	9b02      	ldr	r3, [sp, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f040 8087 	bne.w	800c37c <_dtoa_r+0x89c>
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c274:	2b00      	cmp	r3, #0
 800c276:	f040 8089 	bne.w	800c38c <_dtoa_r+0x8ac>
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c280:	0d1b      	lsrs	r3, r3, #20
 800c282:	051b      	lsls	r3, r3, #20
 800c284:	b12b      	cbz	r3, 800c292 <_dtoa_r+0x7b2>
 800c286:	9b08      	ldr	r3, [sp, #32]
 800c288:	3301      	adds	r3, #1
 800c28a:	9308      	str	r3, [sp, #32]
 800c28c:	f108 0801 	add.w	r8, r8, #1
 800c290:	2301      	movs	r3, #1
 800c292:	930a      	str	r3, [sp, #40]	@ 0x28
 800c294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 81ad 	beq.w	800c5f6 <_dtoa_r+0xb16>
 800c29c:	6923      	ldr	r3, [r4, #16]
 800c29e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2a2:	6918      	ldr	r0, [r3, #16]
 800c2a4:	f000 faa8 	bl	800c7f8 <__hi0bits>
 800c2a8:	f1c0 0020 	rsb	r0, r0, #32
 800c2ac:	9b08      	ldr	r3, [sp, #32]
 800c2ae:	4418      	add	r0, r3
 800c2b0:	f010 001f 	ands.w	r0, r0, #31
 800c2b4:	d077      	beq.n	800c3a6 <_dtoa_r+0x8c6>
 800c2b6:	f1c0 0320 	rsb	r3, r0, #32
 800c2ba:	2b04      	cmp	r3, #4
 800c2bc:	dd6b      	ble.n	800c396 <_dtoa_r+0x8b6>
 800c2be:	9b08      	ldr	r3, [sp, #32]
 800c2c0:	f1c0 001c 	rsb	r0, r0, #28
 800c2c4:	4403      	add	r3, r0
 800c2c6:	4480      	add	r8, r0
 800c2c8:	4406      	add	r6, r0
 800c2ca:	9308      	str	r3, [sp, #32]
 800c2cc:	f1b8 0f00 	cmp.w	r8, #0
 800c2d0:	dd05      	ble.n	800c2de <_dtoa_r+0x7fe>
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	4642      	mov	r2, r8
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	f000 fbda 	bl	800ca90 <__lshift>
 800c2dc:	4681      	mov	r9, r0
 800c2de:	9b08      	ldr	r3, [sp, #32]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	dd05      	ble.n	800c2f0 <_dtoa_r+0x810>
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	4658      	mov	r0, fp
 800c2ea:	f000 fbd1 	bl	800ca90 <__lshift>
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d059      	beq.n	800c3aa <_dtoa_r+0x8ca>
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	4648      	mov	r0, r9
 800c2fa:	f000 fc35 	bl	800cb68 <__mcmp>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	da53      	bge.n	800c3aa <_dtoa_r+0x8ca>
 800c302:	1e7b      	subs	r3, r7, #1
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	4649      	mov	r1, r9
 800c308:	2300      	movs	r3, #0
 800c30a:	220a      	movs	r2, #10
 800c30c:	4658      	mov	r0, fp
 800c30e:	f000 f9e3 	bl	800c6d8 <__multadd>
 800c312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c314:	4681      	mov	r9, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 816f 	beq.w	800c5fa <_dtoa_r+0xb1a>
 800c31c:	2300      	movs	r3, #0
 800c31e:	4629      	mov	r1, r5
 800c320:	220a      	movs	r2, #10
 800c322:	4658      	mov	r0, fp
 800c324:	f000 f9d8 	bl	800c6d8 <__multadd>
 800c328:	9b00      	ldr	r3, [sp, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	4605      	mov	r5, r0
 800c32e:	dc67      	bgt.n	800c400 <_dtoa_r+0x920>
 800c330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c332:	2b02      	cmp	r3, #2
 800c334:	dc41      	bgt.n	800c3ba <_dtoa_r+0x8da>
 800c336:	e063      	b.n	800c400 <_dtoa_r+0x920>
 800c338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c33a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c33e:	e746      	b.n	800c1ce <_dtoa_r+0x6ee>
 800c340:	9b07      	ldr	r3, [sp, #28]
 800c342:	1e5c      	subs	r4, r3, #1
 800c344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c346:	42a3      	cmp	r3, r4
 800c348:	bfbf      	itttt	lt
 800c34a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c34c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c34e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c350:	1ae3      	sublt	r3, r4, r3
 800c352:	bfb4      	ite	lt
 800c354:	18d2      	addlt	r2, r2, r3
 800c356:	1b1c      	subge	r4, r3, r4
 800c358:	9b07      	ldr	r3, [sp, #28]
 800c35a:	bfbc      	itt	lt
 800c35c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c35e:	2400      	movlt	r4, #0
 800c360:	2b00      	cmp	r3, #0
 800c362:	bfb5      	itete	lt
 800c364:	eba8 0603 	sublt.w	r6, r8, r3
 800c368:	9b07      	ldrge	r3, [sp, #28]
 800c36a:	2300      	movlt	r3, #0
 800c36c:	4646      	movge	r6, r8
 800c36e:	e730      	b.n	800c1d2 <_dtoa_r+0x6f2>
 800c370:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c372:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c374:	4646      	mov	r6, r8
 800c376:	e735      	b.n	800c1e4 <_dtoa_r+0x704>
 800c378:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c37a:	e75c      	b.n	800c236 <_dtoa_r+0x756>
 800c37c:	2300      	movs	r3, #0
 800c37e:	e788      	b.n	800c292 <_dtoa_r+0x7b2>
 800c380:	3fe00000 	.word	0x3fe00000
 800c384:	40240000 	.word	0x40240000
 800c388:	40140000 	.word	0x40140000
 800c38c:	9b02      	ldr	r3, [sp, #8]
 800c38e:	e780      	b.n	800c292 <_dtoa_r+0x7b2>
 800c390:	2300      	movs	r3, #0
 800c392:	930a      	str	r3, [sp, #40]	@ 0x28
 800c394:	e782      	b.n	800c29c <_dtoa_r+0x7bc>
 800c396:	d099      	beq.n	800c2cc <_dtoa_r+0x7ec>
 800c398:	9a08      	ldr	r2, [sp, #32]
 800c39a:	331c      	adds	r3, #28
 800c39c:	441a      	add	r2, r3
 800c39e:	4498      	add	r8, r3
 800c3a0:	441e      	add	r6, r3
 800c3a2:	9208      	str	r2, [sp, #32]
 800c3a4:	e792      	b.n	800c2cc <_dtoa_r+0x7ec>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	e7f6      	b.n	800c398 <_dtoa_r+0x8b8>
 800c3aa:	9b07      	ldr	r3, [sp, #28]
 800c3ac:	9704      	str	r7, [sp, #16]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dc20      	bgt.n	800c3f4 <_dtoa_r+0x914>
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	dd1e      	ble.n	800c3f8 <_dtoa_r+0x918>
 800c3ba:	9b00      	ldr	r3, [sp, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f47f aec0 	bne.w	800c142 <_dtoa_r+0x662>
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	2205      	movs	r2, #5
 800c3c6:	4658      	mov	r0, fp
 800c3c8:	f000 f986 	bl	800c6d8 <__multadd>
 800c3cc:	4601      	mov	r1, r0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4648      	mov	r0, r9
 800c3d2:	f000 fbc9 	bl	800cb68 <__mcmp>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	f77f aeb3 	ble.w	800c142 <_dtoa_r+0x662>
 800c3dc:	4656      	mov	r6, sl
 800c3de:	2331      	movs	r3, #49	@ 0x31
 800c3e0:	f806 3b01 	strb.w	r3, [r6], #1
 800c3e4:	9b04      	ldr	r3, [sp, #16]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	9304      	str	r3, [sp, #16]
 800c3ea:	e6ae      	b.n	800c14a <_dtoa_r+0x66a>
 800c3ec:	9c07      	ldr	r4, [sp, #28]
 800c3ee:	9704      	str	r7, [sp, #16]
 800c3f0:	4625      	mov	r5, r4
 800c3f2:	e7f3      	b.n	800c3dc <_dtoa_r+0x8fc>
 800c3f4:	9b07      	ldr	r3, [sp, #28]
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 8101 	beq.w	800c602 <_dtoa_r+0xb22>
 800c400:	2e00      	cmp	r6, #0
 800c402:	dd05      	ble.n	800c410 <_dtoa_r+0x930>
 800c404:	4629      	mov	r1, r5
 800c406:	4632      	mov	r2, r6
 800c408:	4658      	mov	r0, fp
 800c40a:	f000 fb41 	bl	800ca90 <__lshift>
 800c40e:	4605      	mov	r5, r0
 800c410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c412:	2b00      	cmp	r3, #0
 800c414:	d059      	beq.n	800c4ca <_dtoa_r+0x9ea>
 800c416:	6869      	ldr	r1, [r5, #4]
 800c418:	4658      	mov	r0, fp
 800c41a:	f000 f92f 	bl	800c67c <_Balloc>
 800c41e:	4606      	mov	r6, r0
 800c420:	b920      	cbnz	r0, 800c42c <_dtoa_r+0x94c>
 800c422:	4b83      	ldr	r3, [pc, #524]	@ (800c630 <_dtoa_r+0xb50>)
 800c424:	4602      	mov	r2, r0
 800c426:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c42a:	e480      	b.n	800bd2e <_dtoa_r+0x24e>
 800c42c:	692a      	ldr	r2, [r5, #16]
 800c42e:	3202      	adds	r2, #2
 800c430:	0092      	lsls	r2, r2, #2
 800c432:	f105 010c 	add.w	r1, r5, #12
 800c436:	300c      	adds	r0, #12
 800c438:	f7fc f848 	bl	80084cc <memcpy>
 800c43c:	2201      	movs	r2, #1
 800c43e:	4631      	mov	r1, r6
 800c440:	4658      	mov	r0, fp
 800c442:	f000 fb25 	bl	800ca90 <__lshift>
 800c446:	f10a 0301 	add.w	r3, sl, #1
 800c44a:	9307      	str	r3, [sp, #28]
 800c44c:	9b00      	ldr	r3, [sp, #0]
 800c44e:	4453      	add	r3, sl
 800c450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c452:	9b02      	ldr	r3, [sp, #8]
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	462f      	mov	r7, r5
 800c45a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c45c:	4605      	mov	r5, r0
 800c45e:	9b07      	ldr	r3, [sp, #28]
 800c460:	4621      	mov	r1, r4
 800c462:	3b01      	subs	r3, #1
 800c464:	4648      	mov	r0, r9
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	f7ff fab0 	bl	800b9cc <quorem>
 800c46c:	4639      	mov	r1, r7
 800c46e:	9002      	str	r0, [sp, #8]
 800c470:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c474:	4648      	mov	r0, r9
 800c476:	f000 fb77 	bl	800cb68 <__mcmp>
 800c47a:	462a      	mov	r2, r5
 800c47c:	9008      	str	r0, [sp, #32]
 800c47e:	4621      	mov	r1, r4
 800c480:	4658      	mov	r0, fp
 800c482:	f000 fb8d 	bl	800cba0 <__mdiff>
 800c486:	68c2      	ldr	r2, [r0, #12]
 800c488:	4606      	mov	r6, r0
 800c48a:	bb02      	cbnz	r2, 800c4ce <_dtoa_r+0x9ee>
 800c48c:	4601      	mov	r1, r0
 800c48e:	4648      	mov	r0, r9
 800c490:	f000 fb6a 	bl	800cb68 <__mcmp>
 800c494:	4602      	mov	r2, r0
 800c496:	4631      	mov	r1, r6
 800c498:	4658      	mov	r0, fp
 800c49a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c49c:	f000 f913 	bl	800c6c6 <_Bfree>
 800c4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4a4:	9e07      	ldr	r6, [sp, #28]
 800c4a6:	ea43 0102 	orr.w	r1, r3, r2
 800c4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ac:	4319      	orrs	r1, r3
 800c4ae:	d110      	bne.n	800c4d2 <_dtoa_r+0x9f2>
 800c4b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4b4:	d029      	beq.n	800c50a <_dtoa_r+0xa2a>
 800c4b6:	9b08      	ldr	r3, [sp, #32]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	dd02      	ble.n	800c4c2 <_dtoa_r+0x9e2>
 800c4bc:	9b02      	ldr	r3, [sp, #8]
 800c4be:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c4c2:	9b00      	ldr	r3, [sp, #0]
 800c4c4:	f883 8000 	strb.w	r8, [r3]
 800c4c8:	e640      	b.n	800c14c <_dtoa_r+0x66c>
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	e7bb      	b.n	800c446 <_dtoa_r+0x966>
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	e7e1      	b.n	800c496 <_dtoa_r+0x9b6>
 800c4d2:	9b08      	ldr	r3, [sp, #32]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	db04      	blt.n	800c4e2 <_dtoa_r+0xa02>
 800c4d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4da:	430b      	orrs	r3, r1
 800c4dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4de:	430b      	orrs	r3, r1
 800c4e0:	d120      	bne.n	800c524 <_dtoa_r+0xa44>
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	dded      	ble.n	800c4c2 <_dtoa_r+0x9e2>
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	4658      	mov	r0, fp
 800c4ec:	f000 fad0 	bl	800ca90 <__lshift>
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	4681      	mov	r9, r0
 800c4f4:	f000 fb38 	bl	800cb68 <__mcmp>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	dc03      	bgt.n	800c504 <_dtoa_r+0xa24>
 800c4fc:	d1e1      	bne.n	800c4c2 <_dtoa_r+0x9e2>
 800c4fe:	f018 0f01 	tst.w	r8, #1
 800c502:	d0de      	beq.n	800c4c2 <_dtoa_r+0x9e2>
 800c504:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c508:	d1d8      	bne.n	800c4bc <_dtoa_r+0x9dc>
 800c50a:	9a00      	ldr	r2, [sp, #0]
 800c50c:	2339      	movs	r3, #57	@ 0x39
 800c50e:	7013      	strb	r3, [r2, #0]
 800c510:	4633      	mov	r3, r6
 800c512:	461e      	mov	r6, r3
 800c514:	3b01      	subs	r3, #1
 800c516:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c51a:	2a39      	cmp	r2, #57	@ 0x39
 800c51c:	d052      	beq.n	800c5c4 <_dtoa_r+0xae4>
 800c51e:	3201      	adds	r2, #1
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	e613      	b.n	800c14c <_dtoa_r+0x66c>
 800c524:	2a00      	cmp	r2, #0
 800c526:	dd07      	ble.n	800c538 <_dtoa_r+0xa58>
 800c528:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c52c:	d0ed      	beq.n	800c50a <_dtoa_r+0xa2a>
 800c52e:	9a00      	ldr	r2, [sp, #0]
 800c530:	f108 0301 	add.w	r3, r8, #1
 800c534:	7013      	strb	r3, [r2, #0]
 800c536:	e609      	b.n	800c14c <_dtoa_r+0x66c>
 800c538:	9b07      	ldr	r3, [sp, #28]
 800c53a:	9a07      	ldr	r2, [sp, #28]
 800c53c:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c542:	4293      	cmp	r3, r2
 800c544:	d028      	beq.n	800c598 <_dtoa_r+0xab8>
 800c546:	4649      	mov	r1, r9
 800c548:	2300      	movs	r3, #0
 800c54a:	220a      	movs	r2, #10
 800c54c:	4658      	mov	r0, fp
 800c54e:	f000 f8c3 	bl	800c6d8 <__multadd>
 800c552:	42af      	cmp	r7, r5
 800c554:	4681      	mov	r9, r0
 800c556:	f04f 0300 	mov.w	r3, #0
 800c55a:	f04f 020a 	mov.w	r2, #10
 800c55e:	4639      	mov	r1, r7
 800c560:	4658      	mov	r0, fp
 800c562:	d107      	bne.n	800c574 <_dtoa_r+0xa94>
 800c564:	f000 f8b8 	bl	800c6d8 <__multadd>
 800c568:	4607      	mov	r7, r0
 800c56a:	4605      	mov	r5, r0
 800c56c:	9b07      	ldr	r3, [sp, #28]
 800c56e:	3301      	adds	r3, #1
 800c570:	9307      	str	r3, [sp, #28]
 800c572:	e774      	b.n	800c45e <_dtoa_r+0x97e>
 800c574:	f000 f8b0 	bl	800c6d8 <__multadd>
 800c578:	4629      	mov	r1, r5
 800c57a:	4607      	mov	r7, r0
 800c57c:	2300      	movs	r3, #0
 800c57e:	220a      	movs	r2, #10
 800c580:	4658      	mov	r0, fp
 800c582:	f000 f8a9 	bl	800c6d8 <__multadd>
 800c586:	4605      	mov	r5, r0
 800c588:	e7f0      	b.n	800c56c <_dtoa_r+0xa8c>
 800c58a:	9b00      	ldr	r3, [sp, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bfcc      	ite	gt
 800c590:	461e      	movgt	r6, r3
 800c592:	2601      	movle	r6, #1
 800c594:	4456      	add	r6, sl
 800c596:	2700      	movs	r7, #0
 800c598:	4649      	mov	r1, r9
 800c59a:	2201      	movs	r2, #1
 800c59c:	4658      	mov	r0, fp
 800c59e:	f000 fa77 	bl	800ca90 <__lshift>
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	4681      	mov	r9, r0
 800c5a6:	f000 fadf 	bl	800cb68 <__mcmp>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	dcb0      	bgt.n	800c510 <_dtoa_r+0xa30>
 800c5ae:	d102      	bne.n	800c5b6 <_dtoa_r+0xad6>
 800c5b0:	f018 0f01 	tst.w	r8, #1
 800c5b4:	d1ac      	bne.n	800c510 <_dtoa_r+0xa30>
 800c5b6:	4633      	mov	r3, r6
 800c5b8:	461e      	mov	r6, r3
 800c5ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5be:	2a30      	cmp	r2, #48	@ 0x30
 800c5c0:	d0fa      	beq.n	800c5b8 <_dtoa_r+0xad8>
 800c5c2:	e5c3      	b.n	800c14c <_dtoa_r+0x66c>
 800c5c4:	459a      	cmp	sl, r3
 800c5c6:	d1a4      	bne.n	800c512 <_dtoa_r+0xa32>
 800c5c8:	9b04      	ldr	r3, [sp, #16]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	9304      	str	r3, [sp, #16]
 800c5ce:	2331      	movs	r3, #49	@ 0x31
 800c5d0:	f88a 3000 	strb.w	r3, [sl]
 800c5d4:	e5ba      	b.n	800c14c <_dtoa_r+0x66c>
 800c5d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c634 <_dtoa_r+0xb54>
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f43f aab6 	beq.w	800bb4e <_dtoa_r+0x6e>
 800c5e2:	f10a 0308 	add.w	r3, sl, #8
 800c5e6:	f7ff bab0 	b.w	800bb4a <_dtoa_r+0x6a>
 800c5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	f77f ae3a 	ble.w	800c266 <_dtoa_r+0x786>
 800c5f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	e658      	b.n	800c2ac <_dtoa_r+0x7cc>
 800c5fa:	9b00      	ldr	r3, [sp, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f77f aed9 	ble.w	800c3b4 <_dtoa_r+0x8d4>
 800c602:	4656      	mov	r6, sl
 800c604:	4621      	mov	r1, r4
 800c606:	4648      	mov	r0, r9
 800c608:	f7ff f9e0 	bl	800b9cc <quorem>
 800c60c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c610:	f806 8b01 	strb.w	r8, [r6], #1
 800c614:	9b00      	ldr	r3, [sp, #0]
 800c616:	eba6 020a 	sub.w	r2, r6, sl
 800c61a:	4293      	cmp	r3, r2
 800c61c:	ddb5      	ble.n	800c58a <_dtoa_r+0xaaa>
 800c61e:	4649      	mov	r1, r9
 800c620:	2300      	movs	r3, #0
 800c622:	220a      	movs	r2, #10
 800c624:	4658      	mov	r0, fp
 800c626:	f000 f857 	bl	800c6d8 <__multadd>
 800c62a:	4681      	mov	r9, r0
 800c62c:	e7ea      	b.n	800c604 <_dtoa_r+0xb24>
 800c62e:	bf00      	nop
 800c630:	0800fb27 	.word	0x0800fb27
 800c634:	0800fb1a 	.word	0x0800fb1a

0800c638 <malloc>:
 800c638:	4b02      	ldr	r3, [pc, #8]	@ (800c644 <malloc+0xc>)
 800c63a:	4601      	mov	r1, r0
 800c63c:	6818      	ldr	r0, [r3, #0]
 800c63e:	f7fc b879 	b.w	8008734 <_malloc_r>
 800c642:	bf00      	nop
 800c644:	20000050 	.word	0x20000050

0800c648 <free>:
 800c648:	4b02      	ldr	r3, [pc, #8]	@ (800c654 <free+0xc>)
 800c64a:	4601      	mov	r1, r0
 800c64c:	6818      	ldr	r0, [r3, #0]
 800c64e:	f7fb bfb1 	b.w	80085b4 <_free_r>
 800c652:	bf00      	nop
 800c654:	20000050 	.word	0x20000050

0800c658 <__ascii_mbtowc>:
 800c658:	b082      	sub	sp, #8
 800c65a:	b901      	cbnz	r1, 800c65e <__ascii_mbtowc+0x6>
 800c65c:	a901      	add	r1, sp, #4
 800c65e:	b142      	cbz	r2, 800c672 <__ascii_mbtowc+0x1a>
 800c660:	b14b      	cbz	r3, 800c676 <__ascii_mbtowc+0x1e>
 800c662:	7813      	ldrb	r3, [r2, #0]
 800c664:	600b      	str	r3, [r1, #0]
 800c666:	7812      	ldrb	r2, [r2, #0]
 800c668:	1e10      	subs	r0, r2, #0
 800c66a:	bf18      	it	ne
 800c66c:	2001      	movne	r0, #1
 800c66e:	b002      	add	sp, #8
 800c670:	4770      	bx	lr
 800c672:	4610      	mov	r0, r2
 800c674:	e7fb      	b.n	800c66e <__ascii_mbtowc+0x16>
 800c676:	f06f 0001 	mvn.w	r0, #1
 800c67a:	e7f8      	b.n	800c66e <__ascii_mbtowc+0x16>

0800c67c <_Balloc>:
 800c67c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c67e:	b570      	push	{r4, r5, r6, lr}
 800c680:	4605      	mov	r5, r0
 800c682:	460c      	mov	r4, r1
 800c684:	b17b      	cbz	r3, 800c6a6 <_Balloc+0x2a>
 800c686:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800c688:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c68c:	b9a0      	cbnz	r0, 800c6b8 <_Balloc+0x3c>
 800c68e:	2101      	movs	r1, #1
 800c690:	fa01 f604 	lsl.w	r6, r1, r4
 800c694:	1d72      	adds	r2, r6, #5
 800c696:	0092      	lsls	r2, r2, #2
 800c698:	4628      	mov	r0, r5
 800c69a:	f001 fdb3 	bl	800e204 <_calloc_r>
 800c69e:	b148      	cbz	r0, 800c6b4 <_Balloc+0x38>
 800c6a0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c6a4:	e00b      	b.n	800c6be <_Balloc+0x42>
 800c6a6:	2221      	movs	r2, #33	@ 0x21
 800c6a8:	2104      	movs	r1, #4
 800c6aa:	f001 fdab 	bl	800e204 <_calloc_r>
 800c6ae:	6468      	str	r0, [r5, #68]	@ 0x44
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d1e8      	bne.n	800c686 <_Balloc+0xa>
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	6802      	ldr	r2, [r0, #0]
 800c6ba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6c4:	e7f7      	b.n	800c6b6 <_Balloc+0x3a>

0800c6c6 <_Bfree>:
 800c6c6:	b131      	cbz	r1, 800c6d6 <_Bfree+0x10>
 800c6c8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c6ca:	684a      	ldr	r2, [r1, #4]
 800c6cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c6d0:	6008      	str	r0, [r1, #0]
 800c6d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c6d6:	4770      	bx	lr

0800c6d8 <__multadd>:
 800c6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6dc:	690d      	ldr	r5, [r1, #16]
 800c6de:	4607      	mov	r7, r0
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	461e      	mov	r6, r3
 800c6e4:	f101 0c14 	add.w	ip, r1, #20
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	f8dc 3000 	ldr.w	r3, [ip]
 800c6ee:	b299      	uxth	r1, r3
 800c6f0:	fb02 6101 	mla	r1, r2, r1, r6
 800c6f4:	0c1e      	lsrs	r6, r3, #16
 800c6f6:	0c0b      	lsrs	r3, r1, #16
 800c6f8:	fb02 3306 	mla	r3, r2, r6, r3
 800c6fc:	b289      	uxth	r1, r1
 800c6fe:	3001      	adds	r0, #1
 800c700:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c704:	4285      	cmp	r5, r0
 800c706:	f84c 1b04 	str.w	r1, [ip], #4
 800c70a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c70e:	dcec      	bgt.n	800c6ea <__multadd+0x12>
 800c710:	b30e      	cbz	r6, 800c756 <__multadd+0x7e>
 800c712:	68a3      	ldr	r3, [r4, #8]
 800c714:	42ab      	cmp	r3, r5
 800c716:	dc19      	bgt.n	800c74c <__multadd+0x74>
 800c718:	6861      	ldr	r1, [r4, #4]
 800c71a:	4638      	mov	r0, r7
 800c71c:	3101      	adds	r1, #1
 800c71e:	f7ff ffad 	bl	800c67c <_Balloc>
 800c722:	4680      	mov	r8, r0
 800c724:	b928      	cbnz	r0, 800c732 <__multadd+0x5a>
 800c726:	4602      	mov	r2, r0
 800c728:	4b0c      	ldr	r3, [pc, #48]	@ (800c75c <__multadd+0x84>)
 800c72a:	480d      	ldr	r0, [pc, #52]	@ (800c760 <__multadd+0x88>)
 800c72c:	21ba      	movs	r1, #186	@ 0xba
 800c72e:	f001 fd4b 	bl	800e1c8 <__assert_func>
 800c732:	6922      	ldr	r2, [r4, #16]
 800c734:	3202      	adds	r2, #2
 800c736:	f104 010c 	add.w	r1, r4, #12
 800c73a:	0092      	lsls	r2, r2, #2
 800c73c:	300c      	adds	r0, #12
 800c73e:	f7fb fec5 	bl	80084cc <memcpy>
 800c742:	4621      	mov	r1, r4
 800c744:	4638      	mov	r0, r7
 800c746:	f7ff ffbe 	bl	800c6c6 <_Bfree>
 800c74a:	4644      	mov	r4, r8
 800c74c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c750:	3501      	adds	r5, #1
 800c752:	615e      	str	r6, [r3, #20]
 800c754:	6125      	str	r5, [r4, #16]
 800c756:	4620      	mov	r0, r4
 800c758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c75c:	0800fb27 	.word	0x0800fb27
 800c760:	0800fb90 	.word	0x0800fb90

0800c764 <__s2b>:
 800c764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c768:	460c      	mov	r4, r1
 800c76a:	4615      	mov	r5, r2
 800c76c:	461f      	mov	r7, r3
 800c76e:	2209      	movs	r2, #9
 800c770:	3308      	adds	r3, #8
 800c772:	4606      	mov	r6, r0
 800c774:	fb93 f3f2 	sdiv	r3, r3, r2
 800c778:	2100      	movs	r1, #0
 800c77a:	2201      	movs	r2, #1
 800c77c:	429a      	cmp	r2, r3
 800c77e:	db09      	blt.n	800c794 <__s2b+0x30>
 800c780:	4630      	mov	r0, r6
 800c782:	f7ff ff7b 	bl	800c67c <_Balloc>
 800c786:	b940      	cbnz	r0, 800c79a <__s2b+0x36>
 800c788:	4602      	mov	r2, r0
 800c78a:	4b19      	ldr	r3, [pc, #100]	@ (800c7f0 <__s2b+0x8c>)
 800c78c:	4819      	ldr	r0, [pc, #100]	@ (800c7f4 <__s2b+0x90>)
 800c78e:	21d3      	movs	r1, #211	@ 0xd3
 800c790:	f001 fd1a 	bl	800e1c8 <__assert_func>
 800c794:	0052      	lsls	r2, r2, #1
 800c796:	3101      	adds	r1, #1
 800c798:	e7f0      	b.n	800c77c <__s2b+0x18>
 800c79a:	9b08      	ldr	r3, [sp, #32]
 800c79c:	6143      	str	r3, [r0, #20]
 800c79e:	2d09      	cmp	r5, #9
 800c7a0:	f04f 0301 	mov.w	r3, #1
 800c7a4:	6103      	str	r3, [r0, #16]
 800c7a6:	dd16      	ble.n	800c7d6 <__s2b+0x72>
 800c7a8:	f104 0909 	add.w	r9, r4, #9
 800c7ac:	46c8      	mov	r8, r9
 800c7ae:	442c      	add	r4, r5
 800c7b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c7b4:	4601      	mov	r1, r0
 800c7b6:	3b30      	subs	r3, #48	@ 0x30
 800c7b8:	220a      	movs	r2, #10
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f7ff ff8c 	bl	800c6d8 <__multadd>
 800c7c0:	45a0      	cmp	r8, r4
 800c7c2:	d1f5      	bne.n	800c7b0 <__s2b+0x4c>
 800c7c4:	f1a5 0408 	sub.w	r4, r5, #8
 800c7c8:	444c      	add	r4, r9
 800c7ca:	1b2d      	subs	r5, r5, r4
 800c7cc:	1963      	adds	r3, r4, r5
 800c7ce:	42bb      	cmp	r3, r7
 800c7d0:	db04      	blt.n	800c7dc <__s2b+0x78>
 800c7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7d6:	340a      	adds	r4, #10
 800c7d8:	2509      	movs	r5, #9
 800c7da:	e7f6      	b.n	800c7ca <__s2b+0x66>
 800c7dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7e0:	4601      	mov	r1, r0
 800c7e2:	3b30      	subs	r3, #48	@ 0x30
 800c7e4:	220a      	movs	r2, #10
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7ff ff76 	bl	800c6d8 <__multadd>
 800c7ec:	e7ee      	b.n	800c7cc <__s2b+0x68>
 800c7ee:	bf00      	nop
 800c7f0:	0800fb27 	.word	0x0800fb27
 800c7f4:	0800fb90 	.word	0x0800fb90

0800c7f8 <__hi0bits>:
 800c7f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	bf36      	itet	cc
 800c800:	0403      	lslcc	r3, r0, #16
 800c802:	2000      	movcs	r0, #0
 800c804:	2010      	movcc	r0, #16
 800c806:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c80a:	bf3c      	itt	cc
 800c80c:	021b      	lslcc	r3, r3, #8
 800c80e:	3008      	addcc	r0, #8
 800c810:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c814:	bf3c      	itt	cc
 800c816:	011b      	lslcc	r3, r3, #4
 800c818:	3004      	addcc	r0, #4
 800c81a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c81e:	bf3c      	itt	cc
 800c820:	009b      	lslcc	r3, r3, #2
 800c822:	3002      	addcc	r0, #2
 800c824:	2b00      	cmp	r3, #0
 800c826:	db05      	blt.n	800c834 <__hi0bits+0x3c>
 800c828:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c82c:	f100 0001 	add.w	r0, r0, #1
 800c830:	bf08      	it	eq
 800c832:	2020      	moveq	r0, #32
 800c834:	4770      	bx	lr

0800c836 <__lo0bits>:
 800c836:	6803      	ldr	r3, [r0, #0]
 800c838:	4602      	mov	r2, r0
 800c83a:	f013 0007 	ands.w	r0, r3, #7
 800c83e:	d00b      	beq.n	800c858 <__lo0bits+0x22>
 800c840:	07d9      	lsls	r1, r3, #31
 800c842:	d421      	bmi.n	800c888 <__lo0bits+0x52>
 800c844:	0798      	lsls	r0, r3, #30
 800c846:	bf49      	itett	mi
 800c848:	085b      	lsrmi	r3, r3, #1
 800c84a:	089b      	lsrpl	r3, r3, #2
 800c84c:	2001      	movmi	r0, #1
 800c84e:	6013      	strmi	r3, [r2, #0]
 800c850:	bf5c      	itt	pl
 800c852:	6013      	strpl	r3, [r2, #0]
 800c854:	2002      	movpl	r0, #2
 800c856:	4770      	bx	lr
 800c858:	b299      	uxth	r1, r3
 800c85a:	b909      	cbnz	r1, 800c860 <__lo0bits+0x2a>
 800c85c:	0c1b      	lsrs	r3, r3, #16
 800c85e:	2010      	movs	r0, #16
 800c860:	b2d9      	uxtb	r1, r3
 800c862:	b909      	cbnz	r1, 800c868 <__lo0bits+0x32>
 800c864:	3008      	adds	r0, #8
 800c866:	0a1b      	lsrs	r3, r3, #8
 800c868:	0719      	lsls	r1, r3, #28
 800c86a:	bf04      	itt	eq
 800c86c:	091b      	lsreq	r3, r3, #4
 800c86e:	3004      	addeq	r0, #4
 800c870:	0799      	lsls	r1, r3, #30
 800c872:	bf04      	itt	eq
 800c874:	089b      	lsreq	r3, r3, #2
 800c876:	3002      	addeq	r0, #2
 800c878:	07d9      	lsls	r1, r3, #31
 800c87a:	d403      	bmi.n	800c884 <__lo0bits+0x4e>
 800c87c:	085b      	lsrs	r3, r3, #1
 800c87e:	f100 0001 	add.w	r0, r0, #1
 800c882:	d003      	beq.n	800c88c <__lo0bits+0x56>
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	4770      	bx	lr
 800c888:	2000      	movs	r0, #0
 800c88a:	4770      	bx	lr
 800c88c:	2020      	movs	r0, #32
 800c88e:	4770      	bx	lr

0800c890 <__i2b>:
 800c890:	b510      	push	{r4, lr}
 800c892:	460c      	mov	r4, r1
 800c894:	2101      	movs	r1, #1
 800c896:	f7ff fef1 	bl	800c67c <_Balloc>
 800c89a:	4602      	mov	r2, r0
 800c89c:	b928      	cbnz	r0, 800c8aa <__i2b+0x1a>
 800c89e:	4b05      	ldr	r3, [pc, #20]	@ (800c8b4 <__i2b+0x24>)
 800c8a0:	4805      	ldr	r0, [pc, #20]	@ (800c8b8 <__i2b+0x28>)
 800c8a2:	f240 1145 	movw	r1, #325	@ 0x145
 800c8a6:	f001 fc8f 	bl	800e1c8 <__assert_func>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	6144      	str	r4, [r0, #20]
 800c8ae:	6103      	str	r3, [r0, #16]
 800c8b0:	bd10      	pop	{r4, pc}
 800c8b2:	bf00      	nop
 800c8b4:	0800fb27 	.word	0x0800fb27
 800c8b8:	0800fb90 	.word	0x0800fb90

0800c8bc <__multiply>:
 800c8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c0:	4614      	mov	r4, r2
 800c8c2:	690a      	ldr	r2, [r1, #16]
 800c8c4:	6923      	ldr	r3, [r4, #16]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	bfa8      	it	ge
 800c8ca:	4623      	movge	r3, r4
 800c8cc:	460f      	mov	r7, r1
 800c8ce:	bfa4      	itt	ge
 800c8d0:	460c      	movge	r4, r1
 800c8d2:	461f      	movge	r7, r3
 800c8d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c8d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c8dc:	68a3      	ldr	r3, [r4, #8]
 800c8de:	6861      	ldr	r1, [r4, #4]
 800c8e0:	eb0a 0609 	add.w	r6, sl, r9
 800c8e4:	42b3      	cmp	r3, r6
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	bfb8      	it	lt
 800c8ea:	3101      	addlt	r1, #1
 800c8ec:	f7ff fec6 	bl	800c67c <_Balloc>
 800c8f0:	b930      	cbnz	r0, 800c900 <__multiply+0x44>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	4b44      	ldr	r3, [pc, #272]	@ (800ca08 <__multiply+0x14c>)
 800c8f6:	4845      	ldr	r0, [pc, #276]	@ (800ca0c <__multiply+0x150>)
 800c8f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c8fc:	f001 fc64 	bl	800e1c8 <__assert_func>
 800c900:	f100 0514 	add.w	r5, r0, #20
 800c904:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c908:	462b      	mov	r3, r5
 800c90a:	2200      	movs	r2, #0
 800c90c:	4543      	cmp	r3, r8
 800c90e:	d321      	bcc.n	800c954 <__multiply+0x98>
 800c910:	f107 0114 	add.w	r1, r7, #20
 800c914:	f104 0214 	add.w	r2, r4, #20
 800c918:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c91c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c920:	9302      	str	r3, [sp, #8]
 800c922:	1b13      	subs	r3, r2, r4
 800c924:	3b15      	subs	r3, #21
 800c926:	f023 0303 	bic.w	r3, r3, #3
 800c92a:	3304      	adds	r3, #4
 800c92c:	f104 0715 	add.w	r7, r4, #21
 800c930:	42ba      	cmp	r2, r7
 800c932:	bf38      	it	cc
 800c934:	2304      	movcc	r3, #4
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	9b02      	ldr	r3, [sp, #8]
 800c93a:	9103      	str	r1, [sp, #12]
 800c93c:	428b      	cmp	r3, r1
 800c93e:	d80c      	bhi.n	800c95a <__multiply+0x9e>
 800c940:	2e00      	cmp	r6, #0
 800c942:	dd03      	ble.n	800c94c <__multiply+0x90>
 800c944:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d05b      	beq.n	800ca04 <__multiply+0x148>
 800c94c:	6106      	str	r6, [r0, #16]
 800c94e:	b005      	add	sp, #20
 800c950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c954:	f843 2b04 	str.w	r2, [r3], #4
 800c958:	e7d8      	b.n	800c90c <__multiply+0x50>
 800c95a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c95e:	f1ba 0f00 	cmp.w	sl, #0
 800c962:	d024      	beq.n	800c9ae <__multiply+0xf2>
 800c964:	f104 0e14 	add.w	lr, r4, #20
 800c968:	46a9      	mov	r9, r5
 800c96a:	f04f 0c00 	mov.w	ip, #0
 800c96e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c972:	f8d9 3000 	ldr.w	r3, [r9]
 800c976:	fa1f fb87 	uxth.w	fp, r7
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c980:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c984:	f8d9 7000 	ldr.w	r7, [r9]
 800c988:	4463      	add	r3, ip
 800c98a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c98e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c992:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c996:	b29b      	uxth	r3, r3
 800c998:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c99c:	4572      	cmp	r2, lr
 800c99e:	f849 3b04 	str.w	r3, [r9], #4
 800c9a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c9a6:	d8e2      	bhi.n	800c96e <__multiply+0xb2>
 800c9a8:	9b01      	ldr	r3, [sp, #4]
 800c9aa:	f845 c003 	str.w	ip, [r5, r3]
 800c9ae:	9b03      	ldr	r3, [sp, #12]
 800c9b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c9b4:	3104      	adds	r1, #4
 800c9b6:	f1b9 0f00 	cmp.w	r9, #0
 800c9ba:	d021      	beq.n	800ca00 <__multiply+0x144>
 800c9bc:	682b      	ldr	r3, [r5, #0]
 800c9be:	f104 0c14 	add.w	ip, r4, #20
 800c9c2:	46ae      	mov	lr, r5
 800c9c4:	f04f 0a00 	mov.w	sl, #0
 800c9c8:	f8bc b000 	ldrh.w	fp, [ip]
 800c9cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c9d0:	fb09 770b 	mla	r7, r9, fp, r7
 800c9d4:	4457      	add	r7, sl
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c9dc:	f84e 3b04 	str.w	r3, [lr], #4
 800c9e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9e8:	f8be 3000 	ldrh.w	r3, [lr]
 800c9ec:	fb09 330a 	mla	r3, r9, sl, r3
 800c9f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c9f4:	4562      	cmp	r2, ip
 800c9f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9fa:	d8e5      	bhi.n	800c9c8 <__multiply+0x10c>
 800c9fc:	9f01      	ldr	r7, [sp, #4]
 800c9fe:	51eb      	str	r3, [r5, r7]
 800ca00:	3504      	adds	r5, #4
 800ca02:	e799      	b.n	800c938 <__multiply+0x7c>
 800ca04:	3e01      	subs	r6, #1
 800ca06:	e79b      	b.n	800c940 <__multiply+0x84>
 800ca08:	0800fb27 	.word	0x0800fb27
 800ca0c:	0800fb90 	.word	0x0800fb90

0800ca10 <__pow5mult>:
 800ca10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca14:	4615      	mov	r5, r2
 800ca16:	f012 0203 	ands.w	r2, r2, #3
 800ca1a:	4607      	mov	r7, r0
 800ca1c:	460e      	mov	r6, r1
 800ca1e:	d007      	beq.n	800ca30 <__pow5mult+0x20>
 800ca20:	4c1a      	ldr	r4, [pc, #104]	@ (800ca8c <__pow5mult+0x7c>)
 800ca22:	3a01      	subs	r2, #1
 800ca24:	2300      	movs	r3, #0
 800ca26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca2a:	f7ff fe55 	bl	800c6d8 <__multadd>
 800ca2e:	4606      	mov	r6, r0
 800ca30:	10ad      	asrs	r5, r5, #2
 800ca32:	d027      	beq.n	800ca84 <__pow5mult+0x74>
 800ca34:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ca36:	b944      	cbnz	r4, 800ca4a <__pow5mult+0x3a>
 800ca38:	f240 2171 	movw	r1, #625	@ 0x271
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	f7ff ff27 	bl	800c890 <__i2b>
 800ca42:	2300      	movs	r3, #0
 800ca44:	6438      	str	r0, [r7, #64]	@ 0x40
 800ca46:	4604      	mov	r4, r0
 800ca48:	6003      	str	r3, [r0, #0]
 800ca4a:	f04f 0900 	mov.w	r9, #0
 800ca4e:	07eb      	lsls	r3, r5, #31
 800ca50:	d50a      	bpl.n	800ca68 <__pow5mult+0x58>
 800ca52:	4631      	mov	r1, r6
 800ca54:	4622      	mov	r2, r4
 800ca56:	4638      	mov	r0, r7
 800ca58:	f7ff ff30 	bl	800c8bc <__multiply>
 800ca5c:	4631      	mov	r1, r6
 800ca5e:	4680      	mov	r8, r0
 800ca60:	4638      	mov	r0, r7
 800ca62:	f7ff fe30 	bl	800c6c6 <_Bfree>
 800ca66:	4646      	mov	r6, r8
 800ca68:	106d      	asrs	r5, r5, #1
 800ca6a:	d00b      	beq.n	800ca84 <__pow5mult+0x74>
 800ca6c:	6820      	ldr	r0, [r4, #0]
 800ca6e:	b938      	cbnz	r0, 800ca80 <__pow5mult+0x70>
 800ca70:	4622      	mov	r2, r4
 800ca72:	4621      	mov	r1, r4
 800ca74:	4638      	mov	r0, r7
 800ca76:	f7ff ff21 	bl	800c8bc <__multiply>
 800ca7a:	6020      	str	r0, [r4, #0]
 800ca7c:	f8c0 9000 	str.w	r9, [r0]
 800ca80:	4604      	mov	r4, r0
 800ca82:	e7e4      	b.n	800ca4e <__pow5mult+0x3e>
 800ca84:	4630      	mov	r0, r6
 800ca86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8a:	bf00      	nop
 800ca8c:	0800fbec 	.word	0x0800fbec

0800ca90 <__lshift>:
 800ca90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca94:	460c      	mov	r4, r1
 800ca96:	6849      	ldr	r1, [r1, #4]
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca9e:	68a3      	ldr	r3, [r4, #8]
 800caa0:	4607      	mov	r7, r0
 800caa2:	4691      	mov	r9, r2
 800caa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800caa8:	f108 0601 	add.w	r6, r8, #1
 800caac:	42b3      	cmp	r3, r6
 800caae:	db0b      	blt.n	800cac8 <__lshift+0x38>
 800cab0:	4638      	mov	r0, r7
 800cab2:	f7ff fde3 	bl	800c67c <_Balloc>
 800cab6:	4605      	mov	r5, r0
 800cab8:	b948      	cbnz	r0, 800cace <__lshift+0x3e>
 800caba:	4602      	mov	r2, r0
 800cabc:	4b28      	ldr	r3, [pc, #160]	@ (800cb60 <__lshift+0xd0>)
 800cabe:	4829      	ldr	r0, [pc, #164]	@ (800cb64 <__lshift+0xd4>)
 800cac0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cac4:	f001 fb80 	bl	800e1c8 <__assert_func>
 800cac8:	3101      	adds	r1, #1
 800caca:	005b      	lsls	r3, r3, #1
 800cacc:	e7ee      	b.n	800caac <__lshift+0x1c>
 800cace:	2300      	movs	r3, #0
 800cad0:	f100 0114 	add.w	r1, r0, #20
 800cad4:	f100 0210 	add.w	r2, r0, #16
 800cad8:	4618      	mov	r0, r3
 800cada:	4553      	cmp	r3, sl
 800cadc:	db33      	blt.n	800cb46 <__lshift+0xb6>
 800cade:	6920      	ldr	r0, [r4, #16]
 800cae0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cae4:	f104 0314 	add.w	r3, r4, #20
 800cae8:	f019 091f 	ands.w	r9, r9, #31
 800caec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800caf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800caf4:	d02b      	beq.n	800cb4e <__lshift+0xbe>
 800caf6:	f1c9 0e20 	rsb	lr, r9, #32
 800cafa:	468a      	mov	sl, r1
 800cafc:	2200      	movs	r2, #0
 800cafe:	6818      	ldr	r0, [r3, #0]
 800cb00:	fa00 f009 	lsl.w	r0, r0, r9
 800cb04:	4310      	orrs	r0, r2
 800cb06:	f84a 0b04 	str.w	r0, [sl], #4
 800cb0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb0e:	459c      	cmp	ip, r3
 800cb10:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb14:	d8f3      	bhi.n	800cafe <__lshift+0x6e>
 800cb16:	ebac 0304 	sub.w	r3, ip, r4
 800cb1a:	3b15      	subs	r3, #21
 800cb1c:	f023 0303 	bic.w	r3, r3, #3
 800cb20:	3304      	adds	r3, #4
 800cb22:	f104 0015 	add.w	r0, r4, #21
 800cb26:	4584      	cmp	ip, r0
 800cb28:	bf38      	it	cc
 800cb2a:	2304      	movcc	r3, #4
 800cb2c:	50ca      	str	r2, [r1, r3]
 800cb2e:	b10a      	cbz	r2, 800cb34 <__lshift+0xa4>
 800cb30:	f108 0602 	add.w	r6, r8, #2
 800cb34:	3e01      	subs	r6, #1
 800cb36:	4638      	mov	r0, r7
 800cb38:	612e      	str	r6, [r5, #16]
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	f7ff fdc3 	bl	800c6c6 <_Bfree>
 800cb40:	4628      	mov	r0, r5
 800cb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb46:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	e7c5      	b.n	800cada <__lshift+0x4a>
 800cb4e:	3904      	subs	r1, #4
 800cb50:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb54:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb58:	459c      	cmp	ip, r3
 800cb5a:	d8f9      	bhi.n	800cb50 <__lshift+0xc0>
 800cb5c:	e7ea      	b.n	800cb34 <__lshift+0xa4>
 800cb5e:	bf00      	nop
 800cb60:	0800fb27 	.word	0x0800fb27
 800cb64:	0800fb90 	.word	0x0800fb90

0800cb68 <__mcmp>:
 800cb68:	690a      	ldr	r2, [r1, #16]
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	6900      	ldr	r0, [r0, #16]
 800cb6e:	1a80      	subs	r0, r0, r2
 800cb70:	b530      	push	{r4, r5, lr}
 800cb72:	d10e      	bne.n	800cb92 <__mcmp+0x2a>
 800cb74:	3314      	adds	r3, #20
 800cb76:	3114      	adds	r1, #20
 800cb78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb88:	4295      	cmp	r5, r2
 800cb8a:	d003      	beq.n	800cb94 <__mcmp+0x2c>
 800cb8c:	d205      	bcs.n	800cb9a <__mcmp+0x32>
 800cb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb92:	bd30      	pop	{r4, r5, pc}
 800cb94:	42a3      	cmp	r3, r4
 800cb96:	d3f3      	bcc.n	800cb80 <__mcmp+0x18>
 800cb98:	e7fb      	b.n	800cb92 <__mcmp+0x2a>
 800cb9a:	2001      	movs	r0, #1
 800cb9c:	e7f9      	b.n	800cb92 <__mcmp+0x2a>
	...

0800cba0 <__mdiff>:
 800cba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba4:	4689      	mov	r9, r1
 800cba6:	4606      	mov	r6, r0
 800cba8:	4611      	mov	r1, r2
 800cbaa:	4648      	mov	r0, r9
 800cbac:	4614      	mov	r4, r2
 800cbae:	f7ff ffdb 	bl	800cb68 <__mcmp>
 800cbb2:	1e05      	subs	r5, r0, #0
 800cbb4:	d112      	bne.n	800cbdc <__mdiff+0x3c>
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f7ff fd5f 	bl	800c67c <_Balloc>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	b928      	cbnz	r0, 800cbce <__mdiff+0x2e>
 800cbc2:	4b3f      	ldr	r3, [pc, #252]	@ (800ccc0 <__mdiff+0x120>)
 800cbc4:	f240 2137 	movw	r1, #567	@ 0x237
 800cbc8:	483e      	ldr	r0, [pc, #248]	@ (800ccc4 <__mdiff+0x124>)
 800cbca:	f001 fafd 	bl	800e1c8 <__assert_func>
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	b003      	add	sp, #12
 800cbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbdc:	bfbc      	itt	lt
 800cbde:	464b      	movlt	r3, r9
 800cbe0:	46a1      	movlt	r9, r4
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cbe8:	bfba      	itte	lt
 800cbea:	461c      	movlt	r4, r3
 800cbec:	2501      	movlt	r5, #1
 800cbee:	2500      	movge	r5, #0
 800cbf0:	f7ff fd44 	bl	800c67c <_Balloc>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	b918      	cbnz	r0, 800cc00 <__mdiff+0x60>
 800cbf8:	4b31      	ldr	r3, [pc, #196]	@ (800ccc0 <__mdiff+0x120>)
 800cbfa:	f240 2145 	movw	r1, #581	@ 0x245
 800cbfe:	e7e3      	b.n	800cbc8 <__mdiff+0x28>
 800cc00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cc04:	6926      	ldr	r6, [r4, #16]
 800cc06:	60c5      	str	r5, [r0, #12]
 800cc08:	f109 0310 	add.w	r3, r9, #16
 800cc0c:	f109 0514 	add.w	r5, r9, #20
 800cc10:	f104 0e14 	add.w	lr, r4, #20
 800cc14:	f100 0b14 	add.w	fp, r0, #20
 800cc18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cc1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	46d9      	mov	r9, fp
 800cc24:	f04f 0c00 	mov.w	ip, #0
 800cc28:	9b01      	ldr	r3, [sp, #4]
 800cc2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cc2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc32:	9301      	str	r3, [sp, #4]
 800cc34:	fa1f f38a 	uxth.w	r3, sl
 800cc38:	4619      	mov	r1, r3
 800cc3a:	b283      	uxth	r3, r0
 800cc3c:	1acb      	subs	r3, r1, r3
 800cc3e:	0c00      	lsrs	r0, r0, #16
 800cc40:	4463      	add	r3, ip
 800cc42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc50:	4576      	cmp	r6, lr
 800cc52:	f849 3b04 	str.w	r3, [r9], #4
 800cc56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc5a:	d8e5      	bhi.n	800cc28 <__mdiff+0x88>
 800cc5c:	1b33      	subs	r3, r6, r4
 800cc5e:	3b15      	subs	r3, #21
 800cc60:	f023 0303 	bic.w	r3, r3, #3
 800cc64:	3415      	adds	r4, #21
 800cc66:	3304      	adds	r3, #4
 800cc68:	42a6      	cmp	r6, r4
 800cc6a:	bf38      	it	cc
 800cc6c:	2304      	movcc	r3, #4
 800cc6e:	441d      	add	r5, r3
 800cc70:	445b      	add	r3, fp
 800cc72:	461e      	mov	r6, r3
 800cc74:	462c      	mov	r4, r5
 800cc76:	4544      	cmp	r4, r8
 800cc78:	d30e      	bcc.n	800cc98 <__mdiff+0xf8>
 800cc7a:	f108 0103 	add.w	r1, r8, #3
 800cc7e:	1b49      	subs	r1, r1, r5
 800cc80:	f021 0103 	bic.w	r1, r1, #3
 800cc84:	3d03      	subs	r5, #3
 800cc86:	45a8      	cmp	r8, r5
 800cc88:	bf38      	it	cc
 800cc8a:	2100      	movcc	r1, #0
 800cc8c:	440b      	add	r3, r1
 800cc8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc92:	b191      	cbz	r1, 800ccba <__mdiff+0x11a>
 800cc94:	6117      	str	r7, [r2, #16]
 800cc96:	e79d      	b.n	800cbd4 <__mdiff+0x34>
 800cc98:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc9c:	46e6      	mov	lr, ip
 800cc9e:	0c08      	lsrs	r0, r1, #16
 800cca0:	fa1c fc81 	uxtah	ip, ip, r1
 800cca4:	4471      	add	r1, lr
 800cca6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ccaa:	b289      	uxth	r1, r1
 800ccac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ccb0:	f846 1b04 	str.w	r1, [r6], #4
 800ccb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ccb8:	e7dd      	b.n	800cc76 <__mdiff+0xd6>
 800ccba:	3f01      	subs	r7, #1
 800ccbc:	e7e7      	b.n	800cc8e <__mdiff+0xee>
 800ccbe:	bf00      	nop
 800ccc0:	0800fb27 	.word	0x0800fb27
 800ccc4:	0800fb90 	.word	0x0800fb90

0800ccc8 <__ulp>:
 800ccc8:	b082      	sub	sp, #8
 800ccca:	ed8d 0b00 	vstr	d0, [sp]
 800ccce:	9a01      	ldr	r2, [sp, #4]
 800ccd0:	4b0f      	ldr	r3, [pc, #60]	@ (800cd10 <__ulp+0x48>)
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	dc08      	bgt.n	800ccee <__ulp+0x26>
 800ccdc:	425b      	negs	r3, r3
 800ccde:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cce2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cce6:	da04      	bge.n	800ccf2 <__ulp+0x2a>
 800cce8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ccec:	4113      	asrs	r3, r2
 800ccee:	2200      	movs	r2, #0
 800ccf0:	e008      	b.n	800cd04 <__ulp+0x3c>
 800ccf2:	f1a2 0314 	sub.w	r3, r2, #20
 800ccf6:	2b1e      	cmp	r3, #30
 800ccf8:	bfda      	itte	le
 800ccfa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ccfe:	40da      	lsrle	r2, r3
 800cd00:	2201      	movgt	r2, #1
 800cd02:	2300      	movs	r3, #0
 800cd04:	4619      	mov	r1, r3
 800cd06:	4610      	mov	r0, r2
 800cd08:	ec41 0b10 	vmov	d0, r0, r1
 800cd0c:	b002      	add	sp, #8
 800cd0e:	4770      	bx	lr
 800cd10:	7ff00000 	.word	0x7ff00000

0800cd14 <__b2d>:
 800cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd18:	6906      	ldr	r6, [r0, #16]
 800cd1a:	f100 0814 	add.w	r8, r0, #20
 800cd1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cd22:	1f37      	subs	r7, r6, #4
 800cd24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cd28:	4610      	mov	r0, r2
 800cd2a:	f7ff fd65 	bl	800c7f8 <__hi0bits>
 800cd2e:	f1c0 0320 	rsb	r3, r0, #32
 800cd32:	280a      	cmp	r0, #10
 800cd34:	600b      	str	r3, [r1, #0]
 800cd36:	491b      	ldr	r1, [pc, #108]	@ (800cda4 <__b2d+0x90>)
 800cd38:	dc15      	bgt.n	800cd66 <__b2d+0x52>
 800cd3a:	f1c0 0c0b 	rsb	ip, r0, #11
 800cd3e:	fa22 f30c 	lsr.w	r3, r2, ip
 800cd42:	45b8      	cmp	r8, r7
 800cd44:	ea43 0501 	orr.w	r5, r3, r1
 800cd48:	bf34      	ite	cc
 800cd4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cd4e:	2300      	movcs	r3, #0
 800cd50:	3015      	adds	r0, #21
 800cd52:	fa02 f000 	lsl.w	r0, r2, r0
 800cd56:	fa23 f30c 	lsr.w	r3, r3, ip
 800cd5a:	4303      	orrs	r3, r0
 800cd5c:	461c      	mov	r4, r3
 800cd5e:	ec45 4b10 	vmov	d0, r4, r5
 800cd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd66:	45b8      	cmp	r8, r7
 800cd68:	bf3a      	itte	cc
 800cd6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cd6e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cd72:	2300      	movcs	r3, #0
 800cd74:	380b      	subs	r0, #11
 800cd76:	d012      	beq.n	800cd9e <__b2d+0x8a>
 800cd78:	f1c0 0120 	rsb	r1, r0, #32
 800cd7c:	fa23 f401 	lsr.w	r4, r3, r1
 800cd80:	4082      	lsls	r2, r0
 800cd82:	4322      	orrs	r2, r4
 800cd84:	4547      	cmp	r7, r8
 800cd86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cd8a:	bf8c      	ite	hi
 800cd8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cd90:	2200      	movls	r2, #0
 800cd92:	4083      	lsls	r3, r0
 800cd94:	40ca      	lsrs	r2, r1
 800cd96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	e7de      	b.n	800cd5c <__b2d+0x48>
 800cd9e:	ea42 0501 	orr.w	r5, r2, r1
 800cda2:	e7db      	b.n	800cd5c <__b2d+0x48>
 800cda4:	3ff00000 	.word	0x3ff00000

0800cda8 <__d2b>:
 800cda8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdac:	460f      	mov	r7, r1
 800cdae:	2101      	movs	r1, #1
 800cdb0:	ec59 8b10 	vmov	r8, r9, d0
 800cdb4:	4616      	mov	r6, r2
 800cdb6:	f7ff fc61 	bl	800c67c <_Balloc>
 800cdba:	4604      	mov	r4, r0
 800cdbc:	b930      	cbnz	r0, 800cdcc <__d2b+0x24>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	4b23      	ldr	r3, [pc, #140]	@ (800ce50 <__d2b+0xa8>)
 800cdc2:	4824      	ldr	r0, [pc, #144]	@ (800ce54 <__d2b+0xac>)
 800cdc4:	f240 310f 	movw	r1, #783	@ 0x30f
 800cdc8:	f001 f9fe 	bl	800e1c8 <__assert_func>
 800cdcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cdd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdd4:	b10d      	cbz	r5, 800cdda <__d2b+0x32>
 800cdd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdda:	9301      	str	r3, [sp, #4]
 800cddc:	f1b8 0300 	subs.w	r3, r8, #0
 800cde0:	d023      	beq.n	800ce2a <__d2b+0x82>
 800cde2:	4668      	mov	r0, sp
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	f7ff fd26 	bl	800c836 <__lo0bits>
 800cdea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdee:	b1d0      	cbz	r0, 800ce26 <__d2b+0x7e>
 800cdf0:	f1c0 0320 	rsb	r3, r0, #32
 800cdf4:	fa02 f303 	lsl.w	r3, r2, r3
 800cdf8:	430b      	orrs	r3, r1
 800cdfa:	40c2      	lsrs	r2, r0
 800cdfc:	6163      	str	r3, [r4, #20]
 800cdfe:	9201      	str	r2, [sp, #4]
 800ce00:	9b01      	ldr	r3, [sp, #4]
 800ce02:	61a3      	str	r3, [r4, #24]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	bf0c      	ite	eq
 800ce08:	2201      	moveq	r2, #1
 800ce0a:	2202      	movne	r2, #2
 800ce0c:	6122      	str	r2, [r4, #16]
 800ce0e:	b1a5      	cbz	r5, 800ce3a <__d2b+0x92>
 800ce10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ce14:	4405      	add	r5, r0
 800ce16:	603d      	str	r5, [r7, #0]
 800ce18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ce1c:	6030      	str	r0, [r6, #0]
 800ce1e:	4620      	mov	r0, r4
 800ce20:	b003      	add	sp, #12
 800ce22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce26:	6161      	str	r1, [r4, #20]
 800ce28:	e7ea      	b.n	800ce00 <__d2b+0x58>
 800ce2a:	a801      	add	r0, sp, #4
 800ce2c:	f7ff fd03 	bl	800c836 <__lo0bits>
 800ce30:	9b01      	ldr	r3, [sp, #4]
 800ce32:	6163      	str	r3, [r4, #20]
 800ce34:	3020      	adds	r0, #32
 800ce36:	2201      	movs	r2, #1
 800ce38:	e7e8      	b.n	800ce0c <__d2b+0x64>
 800ce3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce42:	6038      	str	r0, [r7, #0]
 800ce44:	6918      	ldr	r0, [r3, #16]
 800ce46:	f7ff fcd7 	bl	800c7f8 <__hi0bits>
 800ce4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce4e:	e7e5      	b.n	800ce1c <__d2b+0x74>
 800ce50:	0800fb27 	.word	0x0800fb27
 800ce54:	0800fb90 	.word	0x0800fb90

0800ce58 <__ratio>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	b085      	sub	sp, #20
 800ce5e:	e9cd 1000 	strd	r1, r0, [sp]
 800ce62:	a902      	add	r1, sp, #8
 800ce64:	f7ff ff56 	bl	800cd14 <__b2d>
 800ce68:	9800      	ldr	r0, [sp, #0]
 800ce6a:	a903      	add	r1, sp, #12
 800ce6c:	ec55 4b10 	vmov	r4, r5, d0
 800ce70:	f7ff ff50 	bl	800cd14 <__b2d>
 800ce74:	9b01      	ldr	r3, [sp, #4]
 800ce76:	6919      	ldr	r1, [r3, #16]
 800ce78:	9b00      	ldr	r3, [sp, #0]
 800ce7a:	691b      	ldr	r3, [r3, #16]
 800ce7c:	1ac9      	subs	r1, r1, r3
 800ce7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ce82:	1a9b      	subs	r3, r3, r2
 800ce84:	ec5b ab10 	vmov	sl, fp, d0
 800ce88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	bfce      	itee	gt
 800ce90:	462a      	movgt	r2, r5
 800ce92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce96:	465a      	movle	r2, fp
 800ce98:	462f      	mov	r7, r5
 800ce9a:	46d9      	mov	r9, fp
 800ce9c:	bfcc      	ite	gt
 800ce9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cea2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cea6:	464b      	mov	r3, r9
 800cea8:	4652      	mov	r2, sl
 800ceaa:	4620      	mov	r0, r4
 800ceac:	4639      	mov	r1, r7
 800ceae:	f7f3 fcfd 	bl	80008ac <__aeabi_ddiv>
 800ceb2:	ec41 0b10 	vmov	d0, r0, r1
 800ceb6:	b005      	add	sp, #20
 800ceb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cebc <__copybits>:
 800cebc:	3901      	subs	r1, #1
 800cebe:	b570      	push	{r4, r5, r6, lr}
 800cec0:	1149      	asrs	r1, r1, #5
 800cec2:	6914      	ldr	r4, [r2, #16]
 800cec4:	3101      	adds	r1, #1
 800cec6:	f102 0314 	add.w	r3, r2, #20
 800ceca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cece:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ced2:	1f05      	subs	r5, r0, #4
 800ced4:	42a3      	cmp	r3, r4
 800ced6:	d30c      	bcc.n	800cef2 <__copybits+0x36>
 800ced8:	1aa3      	subs	r3, r4, r2
 800ceda:	3b11      	subs	r3, #17
 800cedc:	f023 0303 	bic.w	r3, r3, #3
 800cee0:	3211      	adds	r2, #17
 800cee2:	42a2      	cmp	r2, r4
 800cee4:	bf88      	it	hi
 800cee6:	2300      	movhi	r3, #0
 800cee8:	4418      	add	r0, r3
 800ceea:	2300      	movs	r3, #0
 800ceec:	4288      	cmp	r0, r1
 800ceee:	d305      	bcc.n	800cefc <__copybits+0x40>
 800cef0:	bd70      	pop	{r4, r5, r6, pc}
 800cef2:	f853 6b04 	ldr.w	r6, [r3], #4
 800cef6:	f845 6f04 	str.w	r6, [r5, #4]!
 800cefa:	e7eb      	b.n	800ced4 <__copybits+0x18>
 800cefc:	f840 3b04 	str.w	r3, [r0], #4
 800cf00:	e7f4      	b.n	800ceec <__copybits+0x30>

0800cf02 <__any_on>:
 800cf02:	f100 0214 	add.w	r2, r0, #20
 800cf06:	6900      	ldr	r0, [r0, #16]
 800cf08:	114b      	asrs	r3, r1, #5
 800cf0a:	4298      	cmp	r0, r3
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	db11      	blt.n	800cf34 <__any_on+0x32>
 800cf10:	dd0a      	ble.n	800cf28 <__any_on+0x26>
 800cf12:	f011 011f 	ands.w	r1, r1, #31
 800cf16:	d007      	beq.n	800cf28 <__any_on+0x26>
 800cf18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf1c:	fa24 f001 	lsr.w	r0, r4, r1
 800cf20:	fa00 f101 	lsl.w	r1, r0, r1
 800cf24:	428c      	cmp	r4, r1
 800cf26:	d10b      	bne.n	800cf40 <__any_on+0x3e>
 800cf28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d803      	bhi.n	800cf38 <__any_on+0x36>
 800cf30:	2000      	movs	r0, #0
 800cf32:	bd10      	pop	{r4, pc}
 800cf34:	4603      	mov	r3, r0
 800cf36:	e7f7      	b.n	800cf28 <__any_on+0x26>
 800cf38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	d0f5      	beq.n	800cf2c <__any_on+0x2a>
 800cf40:	2001      	movs	r0, #1
 800cf42:	e7f6      	b.n	800cf32 <__any_on+0x30>

0800cf44 <realloc>:
 800cf44:	4b02      	ldr	r3, [pc, #8]	@ (800cf50 <realloc+0xc>)
 800cf46:	460a      	mov	r2, r1
 800cf48:	4601      	mov	r1, r0
 800cf4a:	6818      	ldr	r0, [r3, #0]
 800cf4c:	f7fb be38 	b.w	8008bc0 <_realloc_r>
 800cf50:	20000050 	.word	0x20000050

0800cf54 <sulp>:
 800cf54:	b570      	push	{r4, r5, r6, lr}
 800cf56:	4604      	mov	r4, r0
 800cf58:	460d      	mov	r5, r1
 800cf5a:	ec45 4b10 	vmov	d0, r4, r5
 800cf5e:	4616      	mov	r6, r2
 800cf60:	f7ff feb2 	bl	800ccc8 <__ulp>
 800cf64:	ec51 0b10 	vmov	r0, r1, d0
 800cf68:	b17e      	cbz	r6, 800cf8a <sulp+0x36>
 800cf6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	dd09      	ble.n	800cf8a <sulp+0x36>
 800cf76:	051b      	lsls	r3, r3, #20
 800cf78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cf7c:	2400      	movs	r4, #0
 800cf7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cf82:	4622      	mov	r2, r4
 800cf84:	462b      	mov	r3, r5
 800cf86:	f7f3 fb67 	bl	8000658 <__aeabi_dmul>
 800cf8a:	ec41 0b10 	vmov	d0, r0, r1
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}

0800cf90 <_strtod_l>:
 800cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf94:	b09f      	sub	sp, #124	@ 0x7c
 800cf96:	460c      	mov	r4, r1
 800cf98:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	921a      	str	r2, [sp, #104]	@ 0x68
 800cf9e:	9005      	str	r0, [sp, #20]
 800cfa0:	f04f 0a00 	mov.w	sl, #0
 800cfa4:	f04f 0b00 	mov.w	fp, #0
 800cfa8:	460a      	mov	r2, r1
 800cfaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800cfac:	7811      	ldrb	r1, [r2, #0]
 800cfae:	292b      	cmp	r1, #43	@ 0x2b
 800cfb0:	d04a      	beq.n	800d048 <_strtod_l+0xb8>
 800cfb2:	d838      	bhi.n	800d026 <_strtod_l+0x96>
 800cfb4:	290d      	cmp	r1, #13
 800cfb6:	d832      	bhi.n	800d01e <_strtod_l+0x8e>
 800cfb8:	2908      	cmp	r1, #8
 800cfba:	d832      	bhi.n	800d022 <_strtod_l+0x92>
 800cfbc:	2900      	cmp	r1, #0
 800cfbe:	d03b      	beq.n	800d038 <_strtod_l+0xa8>
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cfc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cfc6:	782a      	ldrb	r2, [r5, #0]
 800cfc8:	2a30      	cmp	r2, #48	@ 0x30
 800cfca:	f040 80b3 	bne.w	800d134 <_strtod_l+0x1a4>
 800cfce:	786a      	ldrb	r2, [r5, #1]
 800cfd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cfd4:	2a58      	cmp	r2, #88	@ 0x58
 800cfd6:	d16e      	bne.n	800d0b6 <_strtod_l+0x126>
 800cfd8:	9302      	str	r3, [sp, #8]
 800cfda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	ab1a      	add	r3, sp, #104	@ 0x68
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	4a8e      	ldr	r2, [pc, #568]	@ (800d21c <_strtod_l+0x28c>)
 800cfe4:	9805      	ldr	r0, [sp, #20]
 800cfe6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cfe8:	a919      	add	r1, sp, #100	@ 0x64
 800cfea:	f001 f9a7 	bl	800e33c <__gethex>
 800cfee:	f010 060f 	ands.w	r6, r0, #15
 800cff2:	4604      	mov	r4, r0
 800cff4:	d005      	beq.n	800d002 <_strtod_l+0x72>
 800cff6:	2e06      	cmp	r6, #6
 800cff8:	d128      	bne.n	800d04c <_strtod_l+0xbc>
 800cffa:	3501      	adds	r5, #1
 800cffc:	2300      	movs	r3, #0
 800cffe:	9519      	str	r5, [sp, #100]	@ 0x64
 800d000:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d002:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d004:	2b00      	cmp	r3, #0
 800d006:	f040 858e 	bne.w	800db26 <_strtod_l+0xb96>
 800d00a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d00c:	b1cb      	cbz	r3, 800d042 <_strtod_l+0xb2>
 800d00e:	4652      	mov	r2, sl
 800d010:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d014:	ec43 2b10 	vmov	d0, r2, r3
 800d018:	b01f      	add	sp, #124	@ 0x7c
 800d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01e:	2920      	cmp	r1, #32
 800d020:	d1ce      	bne.n	800cfc0 <_strtod_l+0x30>
 800d022:	3201      	adds	r2, #1
 800d024:	e7c1      	b.n	800cfaa <_strtod_l+0x1a>
 800d026:	292d      	cmp	r1, #45	@ 0x2d
 800d028:	d1ca      	bne.n	800cfc0 <_strtod_l+0x30>
 800d02a:	2101      	movs	r1, #1
 800d02c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d02e:	1c51      	adds	r1, r2, #1
 800d030:	9119      	str	r1, [sp, #100]	@ 0x64
 800d032:	7852      	ldrb	r2, [r2, #1]
 800d034:	2a00      	cmp	r2, #0
 800d036:	d1c5      	bne.n	800cfc4 <_strtod_l+0x34>
 800d038:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d03a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f040 8570 	bne.w	800db22 <_strtod_l+0xb92>
 800d042:	4652      	mov	r2, sl
 800d044:	465b      	mov	r3, fp
 800d046:	e7e5      	b.n	800d014 <_strtod_l+0x84>
 800d048:	2100      	movs	r1, #0
 800d04a:	e7ef      	b.n	800d02c <_strtod_l+0x9c>
 800d04c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d04e:	b13a      	cbz	r2, 800d060 <_strtod_l+0xd0>
 800d050:	2135      	movs	r1, #53	@ 0x35
 800d052:	a81c      	add	r0, sp, #112	@ 0x70
 800d054:	f7ff ff32 	bl	800cebc <__copybits>
 800d058:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d05a:	9805      	ldr	r0, [sp, #20]
 800d05c:	f7ff fb33 	bl	800c6c6 <_Bfree>
 800d060:	3e01      	subs	r6, #1
 800d062:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d064:	2e04      	cmp	r6, #4
 800d066:	d806      	bhi.n	800d076 <_strtod_l+0xe6>
 800d068:	e8df f006 	tbb	[pc, r6]
 800d06c:	201d0314 	.word	0x201d0314
 800d070:	14          	.byte	0x14
 800d071:	00          	.byte	0x00
 800d072:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d076:	05e1      	lsls	r1, r4, #23
 800d078:	bf48      	it	mi
 800d07a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d07e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d082:	0d1b      	lsrs	r3, r3, #20
 800d084:	051b      	lsls	r3, r3, #20
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1bb      	bne.n	800d002 <_strtod_l+0x72>
 800d08a:	f7fb f9f1 	bl	8008470 <__errno>
 800d08e:	2322      	movs	r3, #34	@ 0x22
 800d090:	6003      	str	r3, [r0, #0]
 800d092:	e7b6      	b.n	800d002 <_strtod_l+0x72>
 800d094:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d098:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d09c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d0a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d0a4:	e7e7      	b.n	800d076 <_strtod_l+0xe6>
 800d0a6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d224 <_strtod_l+0x294>
 800d0aa:	e7e4      	b.n	800d076 <_strtod_l+0xe6>
 800d0ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d0b0:	f04f 3aff 	mov.w	sl, #4294967295
 800d0b4:	e7df      	b.n	800d076 <_strtod_l+0xe6>
 800d0b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0b8:	1c5a      	adds	r2, r3, #1
 800d0ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0bc:	785b      	ldrb	r3, [r3, #1]
 800d0be:	2b30      	cmp	r3, #48	@ 0x30
 800d0c0:	d0f9      	beq.n	800d0b6 <_strtod_l+0x126>
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d09d      	beq.n	800d002 <_strtod_l+0x72>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	9308      	str	r3, [sp, #32]
 800d0d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0d4:	461f      	mov	r7, r3
 800d0d6:	220a      	movs	r2, #10
 800d0d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d0da:	7805      	ldrb	r5, [r0, #0]
 800d0dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d0e0:	b2d9      	uxtb	r1, r3
 800d0e2:	2909      	cmp	r1, #9
 800d0e4:	d928      	bls.n	800d138 <_strtod_l+0x1a8>
 800d0e6:	494e      	ldr	r1, [pc, #312]	@ (800d220 <_strtod_l+0x290>)
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	f001 f850 	bl	800e18e <strncmp>
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d032      	beq.n	800d158 <_strtod_l+0x1c8>
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	462a      	mov	r2, r5
 800d0f6:	4681      	mov	r9, r0
 800d0f8:	463d      	mov	r5, r7
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2a65      	cmp	r2, #101	@ 0x65
 800d0fe:	d001      	beq.n	800d104 <_strtod_l+0x174>
 800d100:	2a45      	cmp	r2, #69	@ 0x45
 800d102:	d114      	bne.n	800d12e <_strtod_l+0x19e>
 800d104:	b91d      	cbnz	r5, 800d10e <_strtod_l+0x17e>
 800d106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d108:	4302      	orrs	r2, r0
 800d10a:	d095      	beq.n	800d038 <_strtod_l+0xa8>
 800d10c:	2500      	movs	r5, #0
 800d10e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d110:	1c62      	adds	r2, r4, #1
 800d112:	9219      	str	r2, [sp, #100]	@ 0x64
 800d114:	7862      	ldrb	r2, [r4, #1]
 800d116:	2a2b      	cmp	r2, #43	@ 0x2b
 800d118:	d077      	beq.n	800d20a <_strtod_l+0x27a>
 800d11a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d11c:	d07b      	beq.n	800d216 <_strtod_l+0x286>
 800d11e:	f04f 0c00 	mov.w	ip, #0
 800d122:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d126:	2909      	cmp	r1, #9
 800d128:	f240 8082 	bls.w	800d230 <_strtod_l+0x2a0>
 800d12c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d12e:	f04f 0800 	mov.w	r8, #0
 800d132:	e0a2      	b.n	800d27a <_strtod_l+0x2ea>
 800d134:	2300      	movs	r3, #0
 800d136:	e7c7      	b.n	800d0c8 <_strtod_l+0x138>
 800d138:	2f08      	cmp	r7, #8
 800d13a:	bfd5      	itete	le
 800d13c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d13e:	9908      	ldrgt	r1, [sp, #32]
 800d140:	fb02 3301 	mlale	r3, r2, r1, r3
 800d144:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d148:	f100 0001 	add.w	r0, r0, #1
 800d14c:	bfd4      	ite	le
 800d14e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d150:	9308      	strgt	r3, [sp, #32]
 800d152:	3701      	adds	r7, #1
 800d154:	9019      	str	r0, [sp, #100]	@ 0x64
 800d156:	e7bf      	b.n	800d0d8 <_strtod_l+0x148>
 800d158:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d15e:	785a      	ldrb	r2, [r3, #1]
 800d160:	b37f      	cbz	r7, 800d1c2 <_strtod_l+0x232>
 800d162:	4681      	mov	r9, r0
 800d164:	463d      	mov	r5, r7
 800d166:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d16a:	2b09      	cmp	r3, #9
 800d16c:	d912      	bls.n	800d194 <_strtod_l+0x204>
 800d16e:	2301      	movs	r3, #1
 800d170:	e7c4      	b.n	800d0fc <_strtod_l+0x16c>
 800d172:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d174:	1c5a      	adds	r2, r3, #1
 800d176:	9219      	str	r2, [sp, #100]	@ 0x64
 800d178:	785a      	ldrb	r2, [r3, #1]
 800d17a:	3001      	adds	r0, #1
 800d17c:	2a30      	cmp	r2, #48	@ 0x30
 800d17e:	d0f8      	beq.n	800d172 <_strtod_l+0x1e2>
 800d180:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d184:	2b08      	cmp	r3, #8
 800d186:	f200 84d3 	bhi.w	800db30 <_strtod_l+0xba0>
 800d18a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d18c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d18e:	4681      	mov	r9, r0
 800d190:	2000      	movs	r0, #0
 800d192:	4605      	mov	r5, r0
 800d194:	3a30      	subs	r2, #48	@ 0x30
 800d196:	f100 0301 	add.w	r3, r0, #1
 800d19a:	d02a      	beq.n	800d1f2 <_strtod_l+0x262>
 800d19c:	4499      	add	r9, r3
 800d19e:	eb00 0c05 	add.w	ip, r0, r5
 800d1a2:	462b      	mov	r3, r5
 800d1a4:	210a      	movs	r1, #10
 800d1a6:	4563      	cmp	r3, ip
 800d1a8:	d10d      	bne.n	800d1c6 <_strtod_l+0x236>
 800d1aa:	1c69      	adds	r1, r5, #1
 800d1ac:	4401      	add	r1, r0
 800d1ae:	4428      	add	r0, r5
 800d1b0:	2808      	cmp	r0, #8
 800d1b2:	dc16      	bgt.n	800d1e2 <_strtod_l+0x252>
 800d1b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d1b6:	230a      	movs	r3, #10
 800d1b8:	fb03 2300 	mla	r3, r3, r0, r2
 800d1bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1be:	2300      	movs	r3, #0
 800d1c0:	e018      	b.n	800d1f4 <_strtod_l+0x264>
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	e7da      	b.n	800d17c <_strtod_l+0x1ec>
 800d1c6:	2b08      	cmp	r3, #8
 800d1c8:	f103 0301 	add.w	r3, r3, #1
 800d1cc:	dc03      	bgt.n	800d1d6 <_strtod_l+0x246>
 800d1ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d1d0:	434e      	muls	r6, r1
 800d1d2:	960a      	str	r6, [sp, #40]	@ 0x28
 800d1d4:	e7e7      	b.n	800d1a6 <_strtod_l+0x216>
 800d1d6:	2b10      	cmp	r3, #16
 800d1d8:	bfde      	ittt	le
 800d1da:	9e08      	ldrle	r6, [sp, #32]
 800d1dc:	434e      	mulle	r6, r1
 800d1de:	9608      	strle	r6, [sp, #32]
 800d1e0:	e7e1      	b.n	800d1a6 <_strtod_l+0x216>
 800d1e2:	280f      	cmp	r0, #15
 800d1e4:	dceb      	bgt.n	800d1be <_strtod_l+0x22e>
 800d1e6:	9808      	ldr	r0, [sp, #32]
 800d1e8:	230a      	movs	r3, #10
 800d1ea:	fb03 2300 	mla	r3, r3, r0, r2
 800d1ee:	9308      	str	r3, [sp, #32]
 800d1f0:	e7e5      	b.n	800d1be <_strtod_l+0x22e>
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1f6:	1c50      	adds	r0, r2, #1
 800d1f8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d1fa:	7852      	ldrb	r2, [r2, #1]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	460d      	mov	r5, r1
 800d200:	e7b1      	b.n	800d166 <_strtod_l+0x1d6>
 800d202:	f04f 0900 	mov.w	r9, #0
 800d206:	2301      	movs	r3, #1
 800d208:	e77d      	b.n	800d106 <_strtod_l+0x176>
 800d20a:	f04f 0c00 	mov.w	ip, #0
 800d20e:	1ca2      	adds	r2, r4, #2
 800d210:	9219      	str	r2, [sp, #100]	@ 0x64
 800d212:	78a2      	ldrb	r2, [r4, #2]
 800d214:	e785      	b.n	800d122 <_strtod_l+0x192>
 800d216:	f04f 0c01 	mov.w	ip, #1
 800d21a:	e7f8      	b.n	800d20e <_strtod_l+0x27e>
 800d21c:	0800fcfc 	.word	0x0800fcfc
 800d220:	0800fb18 	.word	0x0800fb18
 800d224:	7ff00000 	.word	0x7ff00000
 800d228:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d22a:	1c51      	adds	r1, r2, #1
 800d22c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d22e:	7852      	ldrb	r2, [r2, #1]
 800d230:	2a30      	cmp	r2, #48	@ 0x30
 800d232:	d0f9      	beq.n	800d228 <_strtod_l+0x298>
 800d234:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d238:	2908      	cmp	r1, #8
 800d23a:	f63f af78 	bhi.w	800d12e <_strtod_l+0x19e>
 800d23e:	3a30      	subs	r2, #48	@ 0x30
 800d240:	920e      	str	r2, [sp, #56]	@ 0x38
 800d242:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d244:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d246:	f04f 080a 	mov.w	r8, #10
 800d24a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d24c:	1c56      	adds	r6, r2, #1
 800d24e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d250:	7852      	ldrb	r2, [r2, #1]
 800d252:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d256:	f1be 0f09 	cmp.w	lr, #9
 800d25a:	d939      	bls.n	800d2d0 <_strtod_l+0x340>
 800d25c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d25e:	1a76      	subs	r6, r6, r1
 800d260:	2e08      	cmp	r6, #8
 800d262:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d266:	dc03      	bgt.n	800d270 <_strtod_l+0x2e0>
 800d268:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d26a:	4588      	cmp	r8, r1
 800d26c:	bfa8      	it	ge
 800d26e:	4688      	movge	r8, r1
 800d270:	f1bc 0f00 	cmp.w	ip, #0
 800d274:	d001      	beq.n	800d27a <_strtod_l+0x2ea>
 800d276:	f1c8 0800 	rsb	r8, r8, #0
 800d27a:	2d00      	cmp	r5, #0
 800d27c:	d14e      	bne.n	800d31c <_strtod_l+0x38c>
 800d27e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d280:	4308      	orrs	r0, r1
 800d282:	f47f aebe 	bne.w	800d002 <_strtod_l+0x72>
 800d286:	2b00      	cmp	r3, #0
 800d288:	f47f aed6 	bne.w	800d038 <_strtod_l+0xa8>
 800d28c:	2a69      	cmp	r2, #105	@ 0x69
 800d28e:	d028      	beq.n	800d2e2 <_strtod_l+0x352>
 800d290:	dc25      	bgt.n	800d2de <_strtod_l+0x34e>
 800d292:	2a49      	cmp	r2, #73	@ 0x49
 800d294:	d025      	beq.n	800d2e2 <_strtod_l+0x352>
 800d296:	2a4e      	cmp	r2, #78	@ 0x4e
 800d298:	f47f aece 	bne.w	800d038 <_strtod_l+0xa8>
 800d29c:	499b      	ldr	r1, [pc, #620]	@ (800d50c <_strtod_l+0x57c>)
 800d29e:	a819      	add	r0, sp, #100	@ 0x64
 800d2a0:	f001 fa6e 	bl	800e780 <__match>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	f43f aec7 	beq.w	800d038 <_strtod_l+0xa8>
 800d2aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	2b28      	cmp	r3, #40	@ 0x28
 800d2b0:	d12e      	bne.n	800d310 <_strtod_l+0x380>
 800d2b2:	4997      	ldr	r1, [pc, #604]	@ (800d510 <_strtod_l+0x580>)
 800d2b4:	aa1c      	add	r2, sp, #112	@ 0x70
 800d2b6:	a819      	add	r0, sp, #100	@ 0x64
 800d2b8:	f001 fa76 	bl	800e7a8 <__hexnan>
 800d2bc:	2805      	cmp	r0, #5
 800d2be:	d127      	bne.n	800d310 <_strtod_l+0x380>
 800d2c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d2c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d2c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d2ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d2ce:	e698      	b.n	800d002 <_strtod_l+0x72>
 800d2d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d2d2:	fb08 2101 	mla	r1, r8, r1, r2
 800d2d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d2da:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2dc:	e7b5      	b.n	800d24a <_strtod_l+0x2ba>
 800d2de:	2a6e      	cmp	r2, #110	@ 0x6e
 800d2e0:	e7da      	b.n	800d298 <_strtod_l+0x308>
 800d2e2:	498c      	ldr	r1, [pc, #560]	@ (800d514 <_strtod_l+0x584>)
 800d2e4:	a819      	add	r0, sp, #100	@ 0x64
 800d2e6:	f001 fa4b 	bl	800e780 <__match>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	f43f aea4 	beq.w	800d038 <_strtod_l+0xa8>
 800d2f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2f2:	4989      	ldr	r1, [pc, #548]	@ (800d518 <_strtod_l+0x588>)
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	a819      	add	r0, sp, #100	@ 0x64
 800d2f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d2fa:	f001 fa41 	bl	800e780 <__match>
 800d2fe:	b910      	cbnz	r0, 800d306 <_strtod_l+0x376>
 800d300:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d302:	3301      	adds	r3, #1
 800d304:	9319      	str	r3, [sp, #100]	@ 0x64
 800d306:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d528 <_strtod_l+0x598>
 800d30a:	f04f 0a00 	mov.w	sl, #0
 800d30e:	e678      	b.n	800d002 <_strtod_l+0x72>
 800d310:	4882      	ldr	r0, [pc, #520]	@ (800d51c <_strtod_l+0x58c>)
 800d312:	f000 ff51 	bl	800e1b8 <nan>
 800d316:	ec5b ab10 	vmov	sl, fp, d0
 800d31a:	e672      	b.n	800d002 <_strtod_l+0x72>
 800d31c:	eba8 0309 	sub.w	r3, r8, r9
 800d320:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d322:	9309      	str	r3, [sp, #36]	@ 0x24
 800d324:	2f00      	cmp	r7, #0
 800d326:	bf08      	it	eq
 800d328:	462f      	moveq	r7, r5
 800d32a:	2d10      	cmp	r5, #16
 800d32c:	462c      	mov	r4, r5
 800d32e:	bfa8      	it	ge
 800d330:	2410      	movge	r4, #16
 800d332:	f7f3 f917 	bl	8000564 <__aeabi_ui2d>
 800d336:	2d09      	cmp	r5, #9
 800d338:	4682      	mov	sl, r0
 800d33a:	468b      	mov	fp, r1
 800d33c:	dc13      	bgt.n	800d366 <_strtod_l+0x3d6>
 800d33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d340:	2b00      	cmp	r3, #0
 800d342:	f43f ae5e 	beq.w	800d002 <_strtod_l+0x72>
 800d346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d348:	dd78      	ble.n	800d43c <_strtod_l+0x4ac>
 800d34a:	2b16      	cmp	r3, #22
 800d34c:	dc5f      	bgt.n	800d40e <_strtod_l+0x47e>
 800d34e:	4974      	ldr	r1, [pc, #464]	@ (800d520 <_strtod_l+0x590>)
 800d350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d354:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d358:	4652      	mov	r2, sl
 800d35a:	465b      	mov	r3, fp
 800d35c:	f7f3 f97c 	bl	8000658 <__aeabi_dmul>
 800d360:	4682      	mov	sl, r0
 800d362:	468b      	mov	fp, r1
 800d364:	e64d      	b.n	800d002 <_strtod_l+0x72>
 800d366:	4b6e      	ldr	r3, [pc, #440]	@ (800d520 <_strtod_l+0x590>)
 800d368:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d36c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d370:	f7f3 f972 	bl	8000658 <__aeabi_dmul>
 800d374:	4682      	mov	sl, r0
 800d376:	9808      	ldr	r0, [sp, #32]
 800d378:	468b      	mov	fp, r1
 800d37a:	f7f3 f8f3 	bl	8000564 <__aeabi_ui2d>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	4650      	mov	r0, sl
 800d384:	4659      	mov	r1, fp
 800d386:	f7f2 ffb1 	bl	80002ec <__adddf3>
 800d38a:	2d0f      	cmp	r5, #15
 800d38c:	4682      	mov	sl, r0
 800d38e:	468b      	mov	fp, r1
 800d390:	ddd5      	ble.n	800d33e <_strtod_l+0x3ae>
 800d392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d394:	1b2c      	subs	r4, r5, r4
 800d396:	441c      	add	r4, r3
 800d398:	2c00      	cmp	r4, #0
 800d39a:	f340 8096 	ble.w	800d4ca <_strtod_l+0x53a>
 800d39e:	f014 030f 	ands.w	r3, r4, #15
 800d3a2:	d00a      	beq.n	800d3ba <_strtod_l+0x42a>
 800d3a4:	495e      	ldr	r1, [pc, #376]	@ (800d520 <_strtod_l+0x590>)
 800d3a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3aa:	4652      	mov	r2, sl
 800d3ac:	465b      	mov	r3, fp
 800d3ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3b2:	f7f3 f951 	bl	8000658 <__aeabi_dmul>
 800d3b6:	4682      	mov	sl, r0
 800d3b8:	468b      	mov	fp, r1
 800d3ba:	f034 040f 	bics.w	r4, r4, #15
 800d3be:	d073      	beq.n	800d4a8 <_strtod_l+0x518>
 800d3c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d3c4:	dd48      	ble.n	800d458 <_strtod_l+0x4c8>
 800d3c6:	2400      	movs	r4, #0
 800d3c8:	46a0      	mov	r8, r4
 800d3ca:	940a      	str	r4, [sp, #40]	@ 0x28
 800d3cc:	46a1      	mov	r9, r4
 800d3ce:	9a05      	ldr	r2, [sp, #20]
 800d3d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d528 <_strtod_l+0x598>
 800d3d4:	2322      	movs	r3, #34	@ 0x22
 800d3d6:	6013      	str	r3, [r2, #0]
 800d3d8:	f04f 0a00 	mov.w	sl, #0
 800d3dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f43f ae0f 	beq.w	800d002 <_strtod_l+0x72>
 800d3e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3e6:	9805      	ldr	r0, [sp, #20]
 800d3e8:	f7ff f96d 	bl	800c6c6 <_Bfree>
 800d3ec:	9805      	ldr	r0, [sp, #20]
 800d3ee:	4649      	mov	r1, r9
 800d3f0:	f7ff f969 	bl	800c6c6 <_Bfree>
 800d3f4:	9805      	ldr	r0, [sp, #20]
 800d3f6:	4641      	mov	r1, r8
 800d3f8:	f7ff f965 	bl	800c6c6 <_Bfree>
 800d3fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3fe:	9805      	ldr	r0, [sp, #20]
 800d400:	f7ff f961 	bl	800c6c6 <_Bfree>
 800d404:	9805      	ldr	r0, [sp, #20]
 800d406:	4621      	mov	r1, r4
 800d408:	f7ff f95d 	bl	800c6c6 <_Bfree>
 800d40c:	e5f9      	b.n	800d002 <_strtod_l+0x72>
 800d40e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d410:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d414:	4293      	cmp	r3, r2
 800d416:	dbbc      	blt.n	800d392 <_strtod_l+0x402>
 800d418:	4c41      	ldr	r4, [pc, #260]	@ (800d520 <_strtod_l+0x590>)
 800d41a:	f1c5 050f 	rsb	r5, r5, #15
 800d41e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d422:	4652      	mov	r2, sl
 800d424:	465b      	mov	r3, fp
 800d426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d42a:	f7f3 f915 	bl	8000658 <__aeabi_dmul>
 800d42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d430:	1b5d      	subs	r5, r3, r5
 800d432:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d436:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d43a:	e78f      	b.n	800d35c <_strtod_l+0x3cc>
 800d43c:	3316      	adds	r3, #22
 800d43e:	dba8      	blt.n	800d392 <_strtod_l+0x402>
 800d440:	4b37      	ldr	r3, [pc, #220]	@ (800d520 <_strtod_l+0x590>)
 800d442:	eba9 0808 	sub.w	r8, r9, r8
 800d446:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d44a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d44e:	4650      	mov	r0, sl
 800d450:	4659      	mov	r1, fp
 800d452:	f7f3 fa2b 	bl	80008ac <__aeabi_ddiv>
 800d456:	e783      	b.n	800d360 <_strtod_l+0x3d0>
 800d458:	4b32      	ldr	r3, [pc, #200]	@ (800d524 <_strtod_l+0x594>)
 800d45a:	9308      	str	r3, [sp, #32]
 800d45c:	2300      	movs	r3, #0
 800d45e:	1124      	asrs	r4, r4, #4
 800d460:	4650      	mov	r0, sl
 800d462:	4659      	mov	r1, fp
 800d464:	461e      	mov	r6, r3
 800d466:	2c01      	cmp	r4, #1
 800d468:	dc21      	bgt.n	800d4ae <_strtod_l+0x51e>
 800d46a:	b10b      	cbz	r3, 800d470 <_strtod_l+0x4e0>
 800d46c:	4682      	mov	sl, r0
 800d46e:	468b      	mov	fp, r1
 800d470:	492c      	ldr	r1, [pc, #176]	@ (800d524 <_strtod_l+0x594>)
 800d472:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d476:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d47a:	4652      	mov	r2, sl
 800d47c:	465b      	mov	r3, fp
 800d47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d482:	f7f3 f8e9 	bl	8000658 <__aeabi_dmul>
 800d486:	4b28      	ldr	r3, [pc, #160]	@ (800d528 <_strtod_l+0x598>)
 800d488:	460a      	mov	r2, r1
 800d48a:	400b      	ands	r3, r1
 800d48c:	4927      	ldr	r1, [pc, #156]	@ (800d52c <_strtod_l+0x59c>)
 800d48e:	428b      	cmp	r3, r1
 800d490:	4682      	mov	sl, r0
 800d492:	d898      	bhi.n	800d3c6 <_strtod_l+0x436>
 800d494:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d498:	428b      	cmp	r3, r1
 800d49a:	bf86      	itte	hi
 800d49c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d530 <_strtod_l+0x5a0>
 800d4a0:	f04f 3aff 	movhi.w	sl, #4294967295
 800d4a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	9308      	str	r3, [sp, #32]
 800d4ac:	e07a      	b.n	800d5a4 <_strtod_l+0x614>
 800d4ae:	07e2      	lsls	r2, r4, #31
 800d4b0:	d505      	bpl.n	800d4be <_strtod_l+0x52e>
 800d4b2:	9b08      	ldr	r3, [sp, #32]
 800d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b8:	f7f3 f8ce 	bl	8000658 <__aeabi_dmul>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	9a08      	ldr	r2, [sp, #32]
 800d4c0:	3208      	adds	r2, #8
 800d4c2:	3601      	adds	r6, #1
 800d4c4:	1064      	asrs	r4, r4, #1
 800d4c6:	9208      	str	r2, [sp, #32]
 800d4c8:	e7cd      	b.n	800d466 <_strtod_l+0x4d6>
 800d4ca:	d0ed      	beq.n	800d4a8 <_strtod_l+0x518>
 800d4cc:	4264      	negs	r4, r4
 800d4ce:	f014 020f 	ands.w	r2, r4, #15
 800d4d2:	d00a      	beq.n	800d4ea <_strtod_l+0x55a>
 800d4d4:	4b12      	ldr	r3, [pc, #72]	@ (800d520 <_strtod_l+0x590>)
 800d4d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4da:	4650      	mov	r0, sl
 800d4dc:	4659      	mov	r1, fp
 800d4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e2:	f7f3 f9e3 	bl	80008ac <__aeabi_ddiv>
 800d4e6:	4682      	mov	sl, r0
 800d4e8:	468b      	mov	fp, r1
 800d4ea:	1124      	asrs	r4, r4, #4
 800d4ec:	d0dc      	beq.n	800d4a8 <_strtod_l+0x518>
 800d4ee:	2c1f      	cmp	r4, #31
 800d4f0:	dd20      	ble.n	800d534 <_strtod_l+0x5a4>
 800d4f2:	2400      	movs	r4, #0
 800d4f4:	46a0      	mov	r8, r4
 800d4f6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d4f8:	46a1      	mov	r9, r4
 800d4fa:	9a05      	ldr	r2, [sp, #20]
 800d4fc:	2322      	movs	r3, #34	@ 0x22
 800d4fe:	f04f 0a00 	mov.w	sl, #0
 800d502:	f04f 0b00 	mov.w	fp, #0
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	e768      	b.n	800d3dc <_strtod_l+0x44c>
 800d50a:	bf00      	nop
 800d50c:	0800fac3 	.word	0x0800fac3
 800d510:	0800fce8 	.word	0x0800fce8
 800d514:	0800fabb 	.word	0x0800fabb
 800d518:	0800fb1d 	.word	0x0800fb1d
 800d51c:	0800fe74 	.word	0x0800fe74
 800d520:	0800fc20 	.word	0x0800fc20
 800d524:	0800fbf8 	.word	0x0800fbf8
 800d528:	7ff00000 	.word	0x7ff00000
 800d52c:	7ca00000 	.word	0x7ca00000
 800d530:	7fefffff 	.word	0x7fefffff
 800d534:	f014 0310 	ands.w	r3, r4, #16
 800d538:	bf18      	it	ne
 800d53a:	236a      	movne	r3, #106	@ 0x6a
 800d53c:	4ea9      	ldr	r6, [pc, #676]	@ (800d7e4 <_strtod_l+0x854>)
 800d53e:	9308      	str	r3, [sp, #32]
 800d540:	4650      	mov	r0, sl
 800d542:	4659      	mov	r1, fp
 800d544:	2300      	movs	r3, #0
 800d546:	07e2      	lsls	r2, r4, #31
 800d548:	d504      	bpl.n	800d554 <_strtod_l+0x5c4>
 800d54a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d54e:	f7f3 f883 	bl	8000658 <__aeabi_dmul>
 800d552:	2301      	movs	r3, #1
 800d554:	1064      	asrs	r4, r4, #1
 800d556:	f106 0608 	add.w	r6, r6, #8
 800d55a:	d1f4      	bne.n	800d546 <_strtod_l+0x5b6>
 800d55c:	b10b      	cbz	r3, 800d562 <_strtod_l+0x5d2>
 800d55e:	4682      	mov	sl, r0
 800d560:	468b      	mov	fp, r1
 800d562:	9b08      	ldr	r3, [sp, #32]
 800d564:	b1b3      	cbz	r3, 800d594 <_strtod_l+0x604>
 800d566:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d56a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d56e:	2b00      	cmp	r3, #0
 800d570:	4659      	mov	r1, fp
 800d572:	dd0f      	ble.n	800d594 <_strtod_l+0x604>
 800d574:	2b1f      	cmp	r3, #31
 800d576:	dd55      	ble.n	800d624 <_strtod_l+0x694>
 800d578:	2b34      	cmp	r3, #52	@ 0x34
 800d57a:	bfde      	ittt	le
 800d57c:	f04f 33ff 	movle.w	r3, #4294967295
 800d580:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d584:	4093      	lslle	r3, r2
 800d586:	f04f 0a00 	mov.w	sl, #0
 800d58a:	bfcc      	ite	gt
 800d58c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d590:	ea03 0b01 	andle.w	fp, r3, r1
 800d594:	2200      	movs	r2, #0
 800d596:	2300      	movs	r3, #0
 800d598:	4650      	mov	r0, sl
 800d59a:	4659      	mov	r1, fp
 800d59c:	f7f3 fac4 	bl	8000b28 <__aeabi_dcmpeq>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d1a6      	bne.n	800d4f2 <_strtod_l+0x562>
 800d5a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d5aa:	9805      	ldr	r0, [sp, #20]
 800d5ac:	462b      	mov	r3, r5
 800d5ae:	463a      	mov	r2, r7
 800d5b0:	f7ff f8d8 	bl	800c764 <__s2b>
 800d5b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	f43f af05 	beq.w	800d3c6 <_strtod_l+0x436>
 800d5bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5be:	2a00      	cmp	r2, #0
 800d5c0:	eba9 0308 	sub.w	r3, r9, r8
 800d5c4:	bfa8      	it	ge
 800d5c6:	2300      	movge	r3, #0
 800d5c8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d5ca:	2400      	movs	r4, #0
 800d5cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d5d0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d5d2:	46a0      	mov	r8, r4
 800d5d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5d6:	9805      	ldr	r0, [sp, #20]
 800d5d8:	6859      	ldr	r1, [r3, #4]
 800d5da:	f7ff f84f 	bl	800c67c <_Balloc>
 800d5de:	4681      	mov	r9, r0
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	f43f aef4 	beq.w	800d3ce <_strtod_l+0x43e>
 800d5e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5e8:	691a      	ldr	r2, [r3, #16]
 800d5ea:	3202      	adds	r2, #2
 800d5ec:	f103 010c 	add.w	r1, r3, #12
 800d5f0:	0092      	lsls	r2, r2, #2
 800d5f2:	300c      	adds	r0, #12
 800d5f4:	f7fa ff6a 	bl	80084cc <memcpy>
 800d5f8:	ec4b ab10 	vmov	d0, sl, fp
 800d5fc:	9805      	ldr	r0, [sp, #20]
 800d5fe:	aa1c      	add	r2, sp, #112	@ 0x70
 800d600:	a91b      	add	r1, sp, #108	@ 0x6c
 800d602:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d606:	f7ff fbcf 	bl	800cda8 <__d2b>
 800d60a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d60c:	2800      	cmp	r0, #0
 800d60e:	f43f aede 	beq.w	800d3ce <_strtod_l+0x43e>
 800d612:	9805      	ldr	r0, [sp, #20]
 800d614:	2101      	movs	r1, #1
 800d616:	f7ff f93b 	bl	800c890 <__i2b>
 800d61a:	4680      	mov	r8, r0
 800d61c:	b948      	cbnz	r0, 800d632 <_strtod_l+0x6a2>
 800d61e:	f04f 0800 	mov.w	r8, #0
 800d622:	e6d4      	b.n	800d3ce <_strtod_l+0x43e>
 800d624:	f04f 32ff 	mov.w	r2, #4294967295
 800d628:	fa02 f303 	lsl.w	r3, r2, r3
 800d62c:	ea03 0a0a 	and.w	sl, r3, sl
 800d630:	e7b0      	b.n	800d594 <_strtod_l+0x604>
 800d632:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d634:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d636:	2d00      	cmp	r5, #0
 800d638:	bfab      	itete	ge
 800d63a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d63c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d63e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d640:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d642:	bfac      	ite	ge
 800d644:	18ef      	addge	r7, r5, r3
 800d646:	1b5e      	sublt	r6, r3, r5
 800d648:	9b08      	ldr	r3, [sp, #32]
 800d64a:	1aed      	subs	r5, r5, r3
 800d64c:	4415      	add	r5, r2
 800d64e:	4b66      	ldr	r3, [pc, #408]	@ (800d7e8 <_strtod_l+0x858>)
 800d650:	3d01      	subs	r5, #1
 800d652:	429d      	cmp	r5, r3
 800d654:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d658:	da50      	bge.n	800d6fc <_strtod_l+0x76c>
 800d65a:	1b5b      	subs	r3, r3, r5
 800d65c:	2b1f      	cmp	r3, #31
 800d65e:	eba2 0203 	sub.w	r2, r2, r3
 800d662:	f04f 0101 	mov.w	r1, #1
 800d666:	dc3d      	bgt.n	800d6e4 <_strtod_l+0x754>
 800d668:	fa01 f303 	lsl.w	r3, r1, r3
 800d66c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d66e:	2300      	movs	r3, #0
 800d670:	9310      	str	r3, [sp, #64]	@ 0x40
 800d672:	18bd      	adds	r5, r7, r2
 800d674:	9b08      	ldr	r3, [sp, #32]
 800d676:	42af      	cmp	r7, r5
 800d678:	4416      	add	r6, r2
 800d67a:	441e      	add	r6, r3
 800d67c:	463b      	mov	r3, r7
 800d67e:	bfa8      	it	ge
 800d680:	462b      	movge	r3, r5
 800d682:	42b3      	cmp	r3, r6
 800d684:	bfa8      	it	ge
 800d686:	4633      	movge	r3, r6
 800d688:	2b00      	cmp	r3, #0
 800d68a:	bfc2      	ittt	gt
 800d68c:	1aed      	subgt	r5, r5, r3
 800d68e:	1af6      	subgt	r6, r6, r3
 800d690:	1aff      	subgt	r7, r7, r3
 800d692:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d694:	2b00      	cmp	r3, #0
 800d696:	dd16      	ble.n	800d6c6 <_strtod_l+0x736>
 800d698:	4641      	mov	r1, r8
 800d69a:	9805      	ldr	r0, [sp, #20]
 800d69c:	461a      	mov	r2, r3
 800d69e:	f7ff f9b7 	bl	800ca10 <__pow5mult>
 800d6a2:	4680      	mov	r8, r0
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d0ba      	beq.n	800d61e <_strtod_l+0x68e>
 800d6a8:	4601      	mov	r1, r0
 800d6aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d6ac:	9805      	ldr	r0, [sp, #20]
 800d6ae:	f7ff f905 	bl	800c8bc <__multiply>
 800d6b2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	f43f ae8a 	beq.w	800d3ce <_strtod_l+0x43e>
 800d6ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6bc:	9805      	ldr	r0, [sp, #20]
 800d6be:	f7ff f802 	bl	800c6c6 <_Bfree>
 800d6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6c6:	2d00      	cmp	r5, #0
 800d6c8:	dc1d      	bgt.n	800d706 <_strtod_l+0x776>
 800d6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	dd23      	ble.n	800d718 <_strtod_l+0x788>
 800d6d0:	4649      	mov	r1, r9
 800d6d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d6d4:	9805      	ldr	r0, [sp, #20]
 800d6d6:	f7ff f99b 	bl	800ca10 <__pow5mult>
 800d6da:	4681      	mov	r9, r0
 800d6dc:	b9e0      	cbnz	r0, 800d718 <_strtod_l+0x788>
 800d6de:	f04f 0900 	mov.w	r9, #0
 800d6e2:	e674      	b.n	800d3ce <_strtod_l+0x43e>
 800d6e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d6e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d6ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d6f0:	35e2      	adds	r5, #226	@ 0xe2
 800d6f2:	fa01 f305 	lsl.w	r3, r1, r5
 800d6f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d6fa:	e7ba      	b.n	800d672 <_strtod_l+0x6e2>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800d700:	2301      	movs	r3, #1
 800d702:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d704:	e7b5      	b.n	800d672 <_strtod_l+0x6e2>
 800d706:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d708:	9805      	ldr	r0, [sp, #20]
 800d70a:	462a      	mov	r2, r5
 800d70c:	f7ff f9c0 	bl	800ca90 <__lshift>
 800d710:	901a      	str	r0, [sp, #104]	@ 0x68
 800d712:	2800      	cmp	r0, #0
 800d714:	d1d9      	bne.n	800d6ca <_strtod_l+0x73a>
 800d716:	e65a      	b.n	800d3ce <_strtod_l+0x43e>
 800d718:	2e00      	cmp	r6, #0
 800d71a:	dd07      	ble.n	800d72c <_strtod_l+0x79c>
 800d71c:	4649      	mov	r1, r9
 800d71e:	9805      	ldr	r0, [sp, #20]
 800d720:	4632      	mov	r2, r6
 800d722:	f7ff f9b5 	bl	800ca90 <__lshift>
 800d726:	4681      	mov	r9, r0
 800d728:	2800      	cmp	r0, #0
 800d72a:	d0d8      	beq.n	800d6de <_strtod_l+0x74e>
 800d72c:	2f00      	cmp	r7, #0
 800d72e:	dd08      	ble.n	800d742 <_strtod_l+0x7b2>
 800d730:	4641      	mov	r1, r8
 800d732:	9805      	ldr	r0, [sp, #20]
 800d734:	463a      	mov	r2, r7
 800d736:	f7ff f9ab 	bl	800ca90 <__lshift>
 800d73a:	4680      	mov	r8, r0
 800d73c:	2800      	cmp	r0, #0
 800d73e:	f43f ae46 	beq.w	800d3ce <_strtod_l+0x43e>
 800d742:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d744:	9805      	ldr	r0, [sp, #20]
 800d746:	464a      	mov	r2, r9
 800d748:	f7ff fa2a 	bl	800cba0 <__mdiff>
 800d74c:	4604      	mov	r4, r0
 800d74e:	2800      	cmp	r0, #0
 800d750:	f43f ae3d 	beq.w	800d3ce <_strtod_l+0x43e>
 800d754:	68c3      	ldr	r3, [r0, #12]
 800d756:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d758:	2300      	movs	r3, #0
 800d75a:	60c3      	str	r3, [r0, #12]
 800d75c:	4641      	mov	r1, r8
 800d75e:	f7ff fa03 	bl	800cb68 <__mcmp>
 800d762:	2800      	cmp	r0, #0
 800d764:	da46      	bge.n	800d7f4 <_strtod_l+0x864>
 800d766:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d768:	ea53 030a 	orrs.w	r3, r3, sl
 800d76c:	d16c      	bne.n	800d848 <_strtod_l+0x8b8>
 800d76e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d772:	2b00      	cmp	r3, #0
 800d774:	d168      	bne.n	800d848 <_strtod_l+0x8b8>
 800d776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d77a:	0d1b      	lsrs	r3, r3, #20
 800d77c:	051b      	lsls	r3, r3, #20
 800d77e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d782:	d961      	bls.n	800d848 <_strtod_l+0x8b8>
 800d784:	6963      	ldr	r3, [r4, #20]
 800d786:	b913      	cbnz	r3, 800d78e <_strtod_l+0x7fe>
 800d788:	6923      	ldr	r3, [r4, #16]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	dd5c      	ble.n	800d848 <_strtod_l+0x8b8>
 800d78e:	4621      	mov	r1, r4
 800d790:	2201      	movs	r2, #1
 800d792:	9805      	ldr	r0, [sp, #20]
 800d794:	f7ff f97c 	bl	800ca90 <__lshift>
 800d798:	4641      	mov	r1, r8
 800d79a:	4604      	mov	r4, r0
 800d79c:	f7ff f9e4 	bl	800cb68 <__mcmp>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	dd51      	ble.n	800d848 <_strtod_l+0x8b8>
 800d7a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7a8:	9a08      	ldr	r2, [sp, #32]
 800d7aa:	0d1b      	lsrs	r3, r3, #20
 800d7ac:	051b      	lsls	r3, r3, #20
 800d7ae:	2a00      	cmp	r2, #0
 800d7b0:	d06b      	beq.n	800d88a <_strtod_l+0x8fa>
 800d7b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d7b6:	d868      	bhi.n	800d88a <_strtod_l+0x8fa>
 800d7b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d7bc:	f67f ae9d 	bls.w	800d4fa <_strtod_l+0x56a>
 800d7c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d7ec <_strtod_l+0x85c>)
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	4659      	mov	r1, fp
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f7f2 ff46 	bl	8000658 <__aeabi_dmul>
 800d7cc:	4b08      	ldr	r3, [pc, #32]	@ (800d7f0 <_strtod_l+0x860>)
 800d7ce:	400b      	ands	r3, r1
 800d7d0:	4682      	mov	sl, r0
 800d7d2:	468b      	mov	fp, r1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f47f ae05 	bne.w	800d3e4 <_strtod_l+0x454>
 800d7da:	9a05      	ldr	r2, [sp, #20]
 800d7dc:	2322      	movs	r3, #34	@ 0x22
 800d7de:	6013      	str	r3, [r2, #0]
 800d7e0:	e600      	b.n	800d3e4 <_strtod_l+0x454>
 800d7e2:	bf00      	nop
 800d7e4:	0800fd10 	.word	0x0800fd10
 800d7e8:	fffffc02 	.word	0xfffffc02
 800d7ec:	39500000 	.word	0x39500000
 800d7f0:	7ff00000 	.word	0x7ff00000
 800d7f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d7f8:	d165      	bne.n	800d8c6 <_strtod_l+0x936>
 800d7fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d7fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d800:	b35a      	cbz	r2, 800d85a <_strtod_l+0x8ca>
 800d802:	4a9f      	ldr	r2, [pc, #636]	@ (800da80 <_strtod_l+0xaf0>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d12b      	bne.n	800d860 <_strtod_l+0x8d0>
 800d808:	9b08      	ldr	r3, [sp, #32]
 800d80a:	4651      	mov	r1, sl
 800d80c:	b303      	cbz	r3, 800d850 <_strtod_l+0x8c0>
 800d80e:	4b9d      	ldr	r3, [pc, #628]	@ (800da84 <_strtod_l+0xaf4>)
 800d810:	465a      	mov	r2, fp
 800d812:	4013      	ands	r3, r2
 800d814:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d818:	f04f 32ff 	mov.w	r2, #4294967295
 800d81c:	d81b      	bhi.n	800d856 <_strtod_l+0x8c6>
 800d81e:	0d1b      	lsrs	r3, r3, #20
 800d820:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d824:	fa02 f303 	lsl.w	r3, r2, r3
 800d828:	4299      	cmp	r1, r3
 800d82a:	d119      	bne.n	800d860 <_strtod_l+0x8d0>
 800d82c:	4b96      	ldr	r3, [pc, #600]	@ (800da88 <_strtod_l+0xaf8>)
 800d82e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d830:	429a      	cmp	r2, r3
 800d832:	d102      	bne.n	800d83a <_strtod_l+0x8aa>
 800d834:	3101      	adds	r1, #1
 800d836:	f43f adca 	beq.w	800d3ce <_strtod_l+0x43e>
 800d83a:	4b92      	ldr	r3, [pc, #584]	@ (800da84 <_strtod_l+0xaf4>)
 800d83c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d83e:	401a      	ands	r2, r3
 800d840:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d844:	f04f 0a00 	mov.w	sl, #0
 800d848:	9b08      	ldr	r3, [sp, #32]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1b8      	bne.n	800d7c0 <_strtod_l+0x830>
 800d84e:	e5c9      	b.n	800d3e4 <_strtod_l+0x454>
 800d850:	f04f 33ff 	mov.w	r3, #4294967295
 800d854:	e7e8      	b.n	800d828 <_strtod_l+0x898>
 800d856:	4613      	mov	r3, r2
 800d858:	e7e6      	b.n	800d828 <_strtod_l+0x898>
 800d85a:	ea53 030a 	orrs.w	r3, r3, sl
 800d85e:	d0a1      	beq.n	800d7a4 <_strtod_l+0x814>
 800d860:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d862:	b1db      	cbz	r3, 800d89c <_strtod_l+0x90c>
 800d864:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d866:	4213      	tst	r3, r2
 800d868:	d0ee      	beq.n	800d848 <_strtod_l+0x8b8>
 800d86a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d86c:	9a08      	ldr	r2, [sp, #32]
 800d86e:	4650      	mov	r0, sl
 800d870:	4659      	mov	r1, fp
 800d872:	b1bb      	cbz	r3, 800d8a4 <_strtod_l+0x914>
 800d874:	f7ff fb6e 	bl	800cf54 <sulp>
 800d878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d87c:	ec53 2b10 	vmov	r2, r3, d0
 800d880:	f7f2 fd34 	bl	80002ec <__adddf3>
 800d884:	4682      	mov	sl, r0
 800d886:	468b      	mov	fp, r1
 800d888:	e7de      	b.n	800d848 <_strtod_l+0x8b8>
 800d88a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d88e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d892:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d896:	f04f 3aff 	mov.w	sl, #4294967295
 800d89a:	e7d5      	b.n	800d848 <_strtod_l+0x8b8>
 800d89c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d89e:	ea13 0f0a 	tst.w	r3, sl
 800d8a2:	e7e1      	b.n	800d868 <_strtod_l+0x8d8>
 800d8a4:	f7ff fb56 	bl	800cf54 <sulp>
 800d8a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8ac:	ec53 2b10 	vmov	r2, r3, d0
 800d8b0:	f7f2 fd1a 	bl	80002e8 <__aeabi_dsub>
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	4682      	mov	sl, r0
 800d8ba:	468b      	mov	fp, r1
 800d8bc:	f7f3 f934 	bl	8000b28 <__aeabi_dcmpeq>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d0c1      	beq.n	800d848 <_strtod_l+0x8b8>
 800d8c4:	e619      	b.n	800d4fa <_strtod_l+0x56a>
 800d8c6:	4641      	mov	r1, r8
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f7ff fac5 	bl	800ce58 <__ratio>
 800d8ce:	ec57 6b10 	vmov	r6, r7, d0
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d8d8:	4630      	mov	r0, r6
 800d8da:	4639      	mov	r1, r7
 800d8dc:	f7f3 f938 	bl	8000b50 <__aeabi_dcmple>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d06f      	beq.n	800d9c4 <_strtod_l+0xa34>
 800d8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d17a      	bne.n	800d9e0 <_strtod_l+0xa50>
 800d8ea:	f1ba 0f00 	cmp.w	sl, #0
 800d8ee:	d158      	bne.n	800d9a2 <_strtod_l+0xa12>
 800d8f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d15a      	bne.n	800d9b0 <_strtod_l+0xa20>
 800d8fa:	4b64      	ldr	r3, [pc, #400]	@ (800da8c <_strtod_l+0xafc>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	4630      	mov	r0, r6
 800d900:	4639      	mov	r1, r7
 800d902:	f7f3 f91b 	bl	8000b3c <__aeabi_dcmplt>
 800d906:	2800      	cmp	r0, #0
 800d908:	d159      	bne.n	800d9be <_strtod_l+0xa2e>
 800d90a:	4630      	mov	r0, r6
 800d90c:	4639      	mov	r1, r7
 800d90e:	4b60      	ldr	r3, [pc, #384]	@ (800da90 <_strtod_l+0xb00>)
 800d910:	2200      	movs	r2, #0
 800d912:	f7f2 fea1 	bl	8000658 <__aeabi_dmul>
 800d916:	4606      	mov	r6, r0
 800d918:	460f      	mov	r7, r1
 800d91a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d91e:	9606      	str	r6, [sp, #24]
 800d920:	9307      	str	r3, [sp, #28]
 800d922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d926:	4d57      	ldr	r5, [pc, #348]	@ (800da84 <_strtod_l+0xaf4>)
 800d928:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d92c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d92e:	401d      	ands	r5, r3
 800d930:	4b58      	ldr	r3, [pc, #352]	@ (800da94 <_strtod_l+0xb04>)
 800d932:	429d      	cmp	r5, r3
 800d934:	f040 80b2 	bne.w	800da9c <_strtod_l+0xb0c>
 800d938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d93a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d93e:	ec4b ab10 	vmov	d0, sl, fp
 800d942:	f7ff f9c1 	bl	800ccc8 <__ulp>
 800d946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d94a:	ec51 0b10 	vmov	r0, r1, d0
 800d94e:	f7f2 fe83 	bl	8000658 <__aeabi_dmul>
 800d952:	4652      	mov	r2, sl
 800d954:	465b      	mov	r3, fp
 800d956:	f7f2 fcc9 	bl	80002ec <__adddf3>
 800d95a:	460b      	mov	r3, r1
 800d95c:	4949      	ldr	r1, [pc, #292]	@ (800da84 <_strtod_l+0xaf4>)
 800d95e:	4a4e      	ldr	r2, [pc, #312]	@ (800da98 <_strtod_l+0xb08>)
 800d960:	4019      	ands	r1, r3
 800d962:	4291      	cmp	r1, r2
 800d964:	4682      	mov	sl, r0
 800d966:	d942      	bls.n	800d9ee <_strtod_l+0xa5e>
 800d968:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d96a:	4b47      	ldr	r3, [pc, #284]	@ (800da88 <_strtod_l+0xaf8>)
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d103      	bne.n	800d978 <_strtod_l+0x9e8>
 800d970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d972:	3301      	adds	r3, #1
 800d974:	f43f ad2b 	beq.w	800d3ce <_strtod_l+0x43e>
 800d978:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800da88 <_strtod_l+0xaf8>
 800d97c:	f04f 3aff 	mov.w	sl, #4294967295
 800d980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d982:	9805      	ldr	r0, [sp, #20]
 800d984:	f7fe fe9f 	bl	800c6c6 <_Bfree>
 800d988:	9805      	ldr	r0, [sp, #20]
 800d98a:	4649      	mov	r1, r9
 800d98c:	f7fe fe9b 	bl	800c6c6 <_Bfree>
 800d990:	9805      	ldr	r0, [sp, #20]
 800d992:	4641      	mov	r1, r8
 800d994:	f7fe fe97 	bl	800c6c6 <_Bfree>
 800d998:	9805      	ldr	r0, [sp, #20]
 800d99a:	4621      	mov	r1, r4
 800d99c:	f7fe fe93 	bl	800c6c6 <_Bfree>
 800d9a0:	e618      	b.n	800d5d4 <_strtod_l+0x644>
 800d9a2:	f1ba 0f01 	cmp.w	sl, #1
 800d9a6:	d103      	bne.n	800d9b0 <_strtod_l+0xa20>
 800d9a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f43f ada5 	beq.w	800d4fa <_strtod_l+0x56a>
 800d9b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800da60 <_strtod_l+0xad0>
 800d9b4:	4f35      	ldr	r7, [pc, #212]	@ (800da8c <_strtod_l+0xafc>)
 800d9b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d9ba:	2600      	movs	r6, #0
 800d9bc:	e7b1      	b.n	800d922 <_strtod_l+0x992>
 800d9be:	4f34      	ldr	r7, [pc, #208]	@ (800da90 <_strtod_l+0xb00>)
 800d9c0:	2600      	movs	r6, #0
 800d9c2:	e7aa      	b.n	800d91a <_strtod_l+0x98a>
 800d9c4:	4b32      	ldr	r3, [pc, #200]	@ (800da90 <_strtod_l+0xb00>)
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	4639      	mov	r1, r7
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f7f2 fe44 	bl	8000658 <__aeabi_dmul>
 800d9d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	460f      	mov	r7, r1
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d09f      	beq.n	800d91a <_strtod_l+0x98a>
 800d9da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d9de:	e7a0      	b.n	800d922 <_strtod_l+0x992>
 800d9e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800da68 <_strtod_l+0xad8>
 800d9e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d9e8:	ec57 6b17 	vmov	r6, r7, d7
 800d9ec:	e799      	b.n	800d922 <_strtod_l+0x992>
 800d9ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d9f2:	9b08      	ldr	r3, [sp, #32]
 800d9f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1c1      	bne.n	800d980 <_strtod_l+0x9f0>
 800d9fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da00:	0d1b      	lsrs	r3, r3, #20
 800da02:	051b      	lsls	r3, r3, #20
 800da04:	429d      	cmp	r5, r3
 800da06:	d1bb      	bne.n	800d980 <_strtod_l+0x9f0>
 800da08:	4630      	mov	r0, r6
 800da0a:	4639      	mov	r1, r7
 800da0c:	f7f3 f984 	bl	8000d18 <__aeabi_d2lz>
 800da10:	f7f2 fdf4 	bl	80005fc <__aeabi_l2d>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4630      	mov	r0, r6
 800da1a:	4639      	mov	r1, r7
 800da1c:	f7f2 fc64 	bl	80002e8 <__aeabi_dsub>
 800da20:	460b      	mov	r3, r1
 800da22:	4602      	mov	r2, r0
 800da24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800da28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800da2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da2e:	ea46 060a 	orr.w	r6, r6, sl
 800da32:	431e      	orrs	r6, r3
 800da34:	d06f      	beq.n	800db16 <_strtod_l+0xb86>
 800da36:	a30e      	add	r3, pc, #56	@ (adr r3, 800da70 <_strtod_l+0xae0>)
 800da38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3c:	f7f3 f87e 	bl	8000b3c <__aeabi_dcmplt>
 800da40:	2800      	cmp	r0, #0
 800da42:	f47f accf 	bne.w	800d3e4 <_strtod_l+0x454>
 800da46:	a30c      	add	r3, pc, #48	@ (adr r3, 800da78 <_strtod_l+0xae8>)
 800da48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da50:	f7f3 f892 	bl	8000b78 <__aeabi_dcmpgt>
 800da54:	2800      	cmp	r0, #0
 800da56:	d093      	beq.n	800d980 <_strtod_l+0x9f0>
 800da58:	e4c4      	b.n	800d3e4 <_strtod_l+0x454>
 800da5a:	bf00      	nop
 800da5c:	f3af 8000 	nop.w
 800da60:	00000000 	.word	0x00000000
 800da64:	bff00000 	.word	0xbff00000
 800da68:	00000000 	.word	0x00000000
 800da6c:	3ff00000 	.word	0x3ff00000
 800da70:	94a03595 	.word	0x94a03595
 800da74:	3fdfffff 	.word	0x3fdfffff
 800da78:	35afe535 	.word	0x35afe535
 800da7c:	3fe00000 	.word	0x3fe00000
 800da80:	000fffff 	.word	0x000fffff
 800da84:	7ff00000 	.word	0x7ff00000
 800da88:	7fefffff 	.word	0x7fefffff
 800da8c:	3ff00000 	.word	0x3ff00000
 800da90:	3fe00000 	.word	0x3fe00000
 800da94:	7fe00000 	.word	0x7fe00000
 800da98:	7c9fffff 	.word	0x7c9fffff
 800da9c:	9b08      	ldr	r3, [sp, #32]
 800da9e:	b323      	cbz	r3, 800daea <_strtod_l+0xb5a>
 800daa0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800daa4:	d821      	bhi.n	800daea <_strtod_l+0xb5a>
 800daa6:	a328      	add	r3, pc, #160	@ (adr r3, 800db48 <_strtod_l+0xbb8>)
 800daa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daac:	4630      	mov	r0, r6
 800daae:	4639      	mov	r1, r7
 800dab0:	f7f3 f84e 	bl	8000b50 <__aeabi_dcmple>
 800dab4:	b1a0      	cbz	r0, 800dae0 <_strtod_l+0xb50>
 800dab6:	4639      	mov	r1, r7
 800dab8:	4630      	mov	r0, r6
 800daba:	f7f3 f8a5 	bl	8000c08 <__aeabi_d2uiz>
 800dabe:	2801      	cmp	r0, #1
 800dac0:	bf38      	it	cc
 800dac2:	2001      	movcc	r0, #1
 800dac4:	f7f2 fd4e 	bl	8000564 <__aeabi_ui2d>
 800dac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daca:	4606      	mov	r6, r0
 800dacc:	460f      	mov	r7, r1
 800dace:	b9fb      	cbnz	r3, 800db10 <_strtod_l+0xb80>
 800dad0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dad4:	9014      	str	r0, [sp, #80]	@ 0x50
 800dad6:	9315      	str	r3, [sp, #84]	@ 0x54
 800dad8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dadc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dae0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dae2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dae6:	1b5b      	subs	r3, r3, r5
 800dae8:	9311      	str	r3, [sp, #68]	@ 0x44
 800daea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800daee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800daf2:	f7ff f8e9 	bl	800ccc8 <__ulp>
 800daf6:	4650      	mov	r0, sl
 800daf8:	ec53 2b10 	vmov	r2, r3, d0
 800dafc:	4659      	mov	r1, fp
 800dafe:	f7f2 fdab 	bl	8000658 <__aeabi_dmul>
 800db02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800db06:	f7f2 fbf1 	bl	80002ec <__adddf3>
 800db0a:	4682      	mov	sl, r0
 800db0c:	468b      	mov	fp, r1
 800db0e:	e770      	b.n	800d9f2 <_strtod_l+0xa62>
 800db10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800db14:	e7e0      	b.n	800dad8 <_strtod_l+0xb48>
 800db16:	a30e      	add	r3, pc, #56	@ (adr r3, 800db50 <_strtod_l+0xbc0>)
 800db18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1c:	f7f3 f80e 	bl	8000b3c <__aeabi_dcmplt>
 800db20:	e798      	b.n	800da54 <_strtod_l+0xac4>
 800db22:	2300      	movs	r3, #0
 800db24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800db28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	f7ff ba6d 	b.w	800d00a <_strtod_l+0x7a>
 800db30:	2a65      	cmp	r2, #101	@ 0x65
 800db32:	f43f ab66 	beq.w	800d202 <_strtod_l+0x272>
 800db36:	2a45      	cmp	r2, #69	@ 0x45
 800db38:	f43f ab63 	beq.w	800d202 <_strtod_l+0x272>
 800db3c:	2301      	movs	r3, #1
 800db3e:	f7ff bb9e 	b.w	800d27e <_strtod_l+0x2ee>
 800db42:	bf00      	nop
 800db44:	f3af 8000 	nop.w
 800db48:	ffc00000 	.word	0xffc00000
 800db4c:	41dfffff 	.word	0x41dfffff
 800db50:	94a03595 	.word	0x94a03595
 800db54:	3fcfffff 	.word	0x3fcfffff

0800db58 <_strtod_r>:
 800db58:	4b01      	ldr	r3, [pc, #4]	@ (800db60 <_strtod_r+0x8>)
 800db5a:	f7ff ba19 	b.w	800cf90 <_strtod_l>
 800db5e:	bf00      	nop
 800db60:	2000058c 	.word	0x2000058c

0800db64 <_strtol_l.constprop.0>:
 800db64:	2b24      	cmp	r3, #36	@ 0x24
 800db66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db6a:	4686      	mov	lr, r0
 800db6c:	4690      	mov	r8, r2
 800db6e:	d801      	bhi.n	800db74 <_strtol_l.constprop.0+0x10>
 800db70:	2b01      	cmp	r3, #1
 800db72:	d106      	bne.n	800db82 <_strtol_l.constprop.0+0x1e>
 800db74:	f7fa fc7c 	bl	8008470 <__errno>
 800db78:	2316      	movs	r3, #22
 800db7a:	6003      	str	r3, [r0, #0]
 800db7c:	2000      	movs	r0, #0
 800db7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db82:	4834      	ldr	r0, [pc, #208]	@ (800dc54 <_strtol_l.constprop.0+0xf0>)
 800db84:	460d      	mov	r5, r1
 800db86:	462a      	mov	r2, r5
 800db88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db8c:	5d06      	ldrb	r6, [r0, r4]
 800db8e:	f016 0608 	ands.w	r6, r6, #8
 800db92:	d1f8      	bne.n	800db86 <_strtol_l.constprop.0+0x22>
 800db94:	2c2d      	cmp	r4, #45	@ 0x2d
 800db96:	d12d      	bne.n	800dbf4 <_strtol_l.constprop.0+0x90>
 800db98:	782c      	ldrb	r4, [r5, #0]
 800db9a:	2601      	movs	r6, #1
 800db9c:	1c95      	adds	r5, r2, #2
 800db9e:	f033 0210 	bics.w	r2, r3, #16
 800dba2:	d109      	bne.n	800dbb8 <_strtol_l.constprop.0+0x54>
 800dba4:	2c30      	cmp	r4, #48	@ 0x30
 800dba6:	d12a      	bne.n	800dbfe <_strtol_l.constprop.0+0x9a>
 800dba8:	782a      	ldrb	r2, [r5, #0]
 800dbaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dbae:	2a58      	cmp	r2, #88	@ 0x58
 800dbb0:	d125      	bne.n	800dbfe <_strtol_l.constprop.0+0x9a>
 800dbb2:	786c      	ldrb	r4, [r5, #1]
 800dbb4:	2310      	movs	r3, #16
 800dbb6:	3502      	adds	r5, #2
 800dbb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dbbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	fbbc f9f3 	udiv	r9, ip, r3
 800dbc6:	4610      	mov	r0, r2
 800dbc8:	fb03 ca19 	mls	sl, r3, r9, ip
 800dbcc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dbd0:	2f09      	cmp	r7, #9
 800dbd2:	d81b      	bhi.n	800dc0c <_strtol_l.constprop.0+0xa8>
 800dbd4:	463c      	mov	r4, r7
 800dbd6:	42a3      	cmp	r3, r4
 800dbd8:	dd27      	ble.n	800dc2a <_strtol_l.constprop.0+0xc6>
 800dbda:	1c57      	adds	r7, r2, #1
 800dbdc:	d007      	beq.n	800dbee <_strtol_l.constprop.0+0x8a>
 800dbde:	4581      	cmp	r9, r0
 800dbe0:	d320      	bcc.n	800dc24 <_strtol_l.constprop.0+0xc0>
 800dbe2:	d101      	bne.n	800dbe8 <_strtol_l.constprop.0+0x84>
 800dbe4:	45a2      	cmp	sl, r4
 800dbe6:	db1d      	blt.n	800dc24 <_strtol_l.constprop.0+0xc0>
 800dbe8:	fb00 4003 	mla	r0, r0, r3, r4
 800dbec:	2201      	movs	r2, #1
 800dbee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbf2:	e7eb      	b.n	800dbcc <_strtol_l.constprop.0+0x68>
 800dbf4:	2c2b      	cmp	r4, #43	@ 0x2b
 800dbf6:	bf04      	itt	eq
 800dbf8:	782c      	ldrbeq	r4, [r5, #0]
 800dbfa:	1c95      	addeq	r5, r2, #2
 800dbfc:	e7cf      	b.n	800db9e <_strtol_l.constprop.0+0x3a>
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1da      	bne.n	800dbb8 <_strtol_l.constprop.0+0x54>
 800dc02:	2c30      	cmp	r4, #48	@ 0x30
 800dc04:	bf0c      	ite	eq
 800dc06:	2308      	moveq	r3, #8
 800dc08:	230a      	movne	r3, #10
 800dc0a:	e7d5      	b.n	800dbb8 <_strtol_l.constprop.0+0x54>
 800dc0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dc10:	2f19      	cmp	r7, #25
 800dc12:	d801      	bhi.n	800dc18 <_strtol_l.constprop.0+0xb4>
 800dc14:	3c37      	subs	r4, #55	@ 0x37
 800dc16:	e7de      	b.n	800dbd6 <_strtol_l.constprop.0+0x72>
 800dc18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dc1c:	2f19      	cmp	r7, #25
 800dc1e:	d804      	bhi.n	800dc2a <_strtol_l.constprop.0+0xc6>
 800dc20:	3c57      	subs	r4, #87	@ 0x57
 800dc22:	e7d8      	b.n	800dbd6 <_strtol_l.constprop.0+0x72>
 800dc24:	f04f 32ff 	mov.w	r2, #4294967295
 800dc28:	e7e1      	b.n	800dbee <_strtol_l.constprop.0+0x8a>
 800dc2a:	1c53      	adds	r3, r2, #1
 800dc2c:	d108      	bne.n	800dc40 <_strtol_l.constprop.0+0xdc>
 800dc2e:	2322      	movs	r3, #34	@ 0x22
 800dc30:	f8ce 3000 	str.w	r3, [lr]
 800dc34:	4660      	mov	r0, ip
 800dc36:	f1b8 0f00 	cmp.w	r8, #0
 800dc3a:	d0a0      	beq.n	800db7e <_strtol_l.constprop.0+0x1a>
 800dc3c:	1e69      	subs	r1, r5, #1
 800dc3e:	e006      	b.n	800dc4e <_strtol_l.constprop.0+0xea>
 800dc40:	b106      	cbz	r6, 800dc44 <_strtol_l.constprop.0+0xe0>
 800dc42:	4240      	negs	r0, r0
 800dc44:	f1b8 0f00 	cmp.w	r8, #0
 800dc48:	d099      	beq.n	800db7e <_strtol_l.constprop.0+0x1a>
 800dc4a:	2a00      	cmp	r2, #0
 800dc4c:	d1f6      	bne.n	800dc3c <_strtol_l.constprop.0+0xd8>
 800dc4e:	f8c8 1000 	str.w	r1, [r8]
 800dc52:	e794      	b.n	800db7e <_strtol_l.constprop.0+0x1a>
 800dc54:	0800fd39 	.word	0x0800fd39

0800dc58 <_strtol_r>:
 800dc58:	f7ff bf84 	b.w	800db64 <_strtol_l.constprop.0>

0800dc5c <_strtoul_l.constprop.0>:
 800dc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc60:	4e34      	ldr	r6, [pc, #208]	@ (800dd34 <_strtoul_l.constprop.0+0xd8>)
 800dc62:	4686      	mov	lr, r0
 800dc64:	460d      	mov	r5, r1
 800dc66:	4628      	mov	r0, r5
 800dc68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc6c:	5d37      	ldrb	r7, [r6, r4]
 800dc6e:	f017 0708 	ands.w	r7, r7, #8
 800dc72:	d1f8      	bne.n	800dc66 <_strtoul_l.constprop.0+0xa>
 800dc74:	2c2d      	cmp	r4, #45	@ 0x2d
 800dc76:	d12f      	bne.n	800dcd8 <_strtoul_l.constprop.0+0x7c>
 800dc78:	782c      	ldrb	r4, [r5, #0]
 800dc7a:	2701      	movs	r7, #1
 800dc7c:	1c85      	adds	r5, r0, #2
 800dc7e:	f033 0010 	bics.w	r0, r3, #16
 800dc82:	d109      	bne.n	800dc98 <_strtoul_l.constprop.0+0x3c>
 800dc84:	2c30      	cmp	r4, #48	@ 0x30
 800dc86:	d12c      	bne.n	800dce2 <_strtoul_l.constprop.0+0x86>
 800dc88:	7828      	ldrb	r0, [r5, #0]
 800dc8a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800dc8e:	2858      	cmp	r0, #88	@ 0x58
 800dc90:	d127      	bne.n	800dce2 <_strtoul_l.constprop.0+0x86>
 800dc92:	786c      	ldrb	r4, [r5, #1]
 800dc94:	2310      	movs	r3, #16
 800dc96:	3502      	adds	r5, #2
 800dc98:	f04f 38ff 	mov.w	r8, #4294967295
 800dc9c:	2600      	movs	r6, #0
 800dc9e:	fbb8 f8f3 	udiv	r8, r8, r3
 800dca2:	fb03 f908 	mul.w	r9, r3, r8
 800dca6:	ea6f 0909 	mvn.w	r9, r9
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800dcb0:	f1bc 0f09 	cmp.w	ip, #9
 800dcb4:	d81c      	bhi.n	800dcf0 <_strtoul_l.constprop.0+0x94>
 800dcb6:	4664      	mov	r4, ip
 800dcb8:	42a3      	cmp	r3, r4
 800dcba:	dd2a      	ble.n	800dd12 <_strtoul_l.constprop.0+0xb6>
 800dcbc:	f1b6 3fff 	cmp.w	r6, #4294967295
 800dcc0:	d007      	beq.n	800dcd2 <_strtoul_l.constprop.0+0x76>
 800dcc2:	4580      	cmp	r8, r0
 800dcc4:	d322      	bcc.n	800dd0c <_strtoul_l.constprop.0+0xb0>
 800dcc6:	d101      	bne.n	800dccc <_strtoul_l.constprop.0+0x70>
 800dcc8:	45a1      	cmp	r9, r4
 800dcca:	db1f      	blt.n	800dd0c <_strtoul_l.constprop.0+0xb0>
 800dccc:	fb00 4003 	mla	r0, r0, r3, r4
 800dcd0:	2601      	movs	r6, #1
 800dcd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcd6:	e7e9      	b.n	800dcac <_strtoul_l.constprop.0+0x50>
 800dcd8:	2c2b      	cmp	r4, #43	@ 0x2b
 800dcda:	bf04      	itt	eq
 800dcdc:	782c      	ldrbeq	r4, [r5, #0]
 800dcde:	1c85      	addeq	r5, r0, #2
 800dce0:	e7cd      	b.n	800dc7e <_strtoul_l.constprop.0+0x22>
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1d8      	bne.n	800dc98 <_strtoul_l.constprop.0+0x3c>
 800dce6:	2c30      	cmp	r4, #48	@ 0x30
 800dce8:	bf0c      	ite	eq
 800dcea:	2308      	moveq	r3, #8
 800dcec:	230a      	movne	r3, #10
 800dcee:	e7d3      	b.n	800dc98 <_strtoul_l.constprop.0+0x3c>
 800dcf0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800dcf4:	f1bc 0f19 	cmp.w	ip, #25
 800dcf8:	d801      	bhi.n	800dcfe <_strtoul_l.constprop.0+0xa2>
 800dcfa:	3c37      	subs	r4, #55	@ 0x37
 800dcfc:	e7dc      	b.n	800dcb8 <_strtoul_l.constprop.0+0x5c>
 800dcfe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800dd02:	f1bc 0f19 	cmp.w	ip, #25
 800dd06:	d804      	bhi.n	800dd12 <_strtoul_l.constprop.0+0xb6>
 800dd08:	3c57      	subs	r4, #87	@ 0x57
 800dd0a:	e7d5      	b.n	800dcb8 <_strtoul_l.constprop.0+0x5c>
 800dd0c:	f04f 36ff 	mov.w	r6, #4294967295
 800dd10:	e7df      	b.n	800dcd2 <_strtoul_l.constprop.0+0x76>
 800dd12:	1c73      	adds	r3, r6, #1
 800dd14:	d106      	bne.n	800dd24 <_strtoul_l.constprop.0+0xc8>
 800dd16:	2322      	movs	r3, #34	@ 0x22
 800dd18:	f8ce 3000 	str.w	r3, [lr]
 800dd1c:	4630      	mov	r0, r6
 800dd1e:	b932      	cbnz	r2, 800dd2e <_strtoul_l.constprop.0+0xd2>
 800dd20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd24:	b107      	cbz	r7, 800dd28 <_strtoul_l.constprop.0+0xcc>
 800dd26:	4240      	negs	r0, r0
 800dd28:	2a00      	cmp	r2, #0
 800dd2a:	d0f9      	beq.n	800dd20 <_strtoul_l.constprop.0+0xc4>
 800dd2c:	b106      	cbz	r6, 800dd30 <_strtoul_l.constprop.0+0xd4>
 800dd2e:	1e69      	subs	r1, r5, #1
 800dd30:	6011      	str	r1, [r2, #0]
 800dd32:	e7f5      	b.n	800dd20 <_strtoul_l.constprop.0+0xc4>
 800dd34:	0800fd39 	.word	0x0800fd39

0800dd38 <_strtoul_r>:
 800dd38:	f7ff bf90 	b.w	800dc5c <_strtoul_l.constprop.0>

0800dd3c <__ascii_wctomb>:
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	4608      	mov	r0, r1
 800dd40:	b141      	cbz	r1, 800dd54 <__ascii_wctomb+0x18>
 800dd42:	2aff      	cmp	r2, #255	@ 0xff
 800dd44:	d904      	bls.n	800dd50 <__ascii_wctomb+0x14>
 800dd46:	228a      	movs	r2, #138	@ 0x8a
 800dd48:	601a      	str	r2, [r3, #0]
 800dd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd4e:	4770      	bx	lr
 800dd50:	700a      	strb	r2, [r1, #0]
 800dd52:	2001      	movs	r0, #1
 800dd54:	4770      	bx	lr
	...

0800dd58 <_strtoll_l.constprop.0>:
 800dd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5c:	b085      	sub	sp, #20
 800dd5e:	4690      	mov	r8, r2
 800dd60:	4a43      	ldr	r2, [pc, #268]	@ (800de70 <_strtoll_l.constprop.0+0x118>)
 800dd62:	9002      	str	r0, [sp, #8]
 800dd64:	4689      	mov	r9, r1
 800dd66:	461e      	mov	r6, r3
 800dd68:	460d      	mov	r5, r1
 800dd6a:	462b      	mov	r3, r5
 800dd6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd70:	5d17      	ldrb	r7, [r2, r4]
 800dd72:	f017 0708 	ands.w	r7, r7, #8
 800dd76:	d1f8      	bne.n	800dd6a <_strtoll_l.constprop.0+0x12>
 800dd78:	2c2d      	cmp	r4, #45	@ 0x2d
 800dd7a:	d149      	bne.n	800de10 <_strtoll_l.constprop.0+0xb8>
 800dd7c:	782c      	ldrb	r4, [r5, #0]
 800dd7e:	2701      	movs	r7, #1
 800dd80:	1c9d      	adds	r5, r3, #2
 800dd82:	f036 0310 	bics.w	r3, r6, #16
 800dd86:	d109      	bne.n	800dd9c <_strtoll_l.constprop.0+0x44>
 800dd88:	2c30      	cmp	r4, #48	@ 0x30
 800dd8a:	d146      	bne.n	800de1a <_strtoll_l.constprop.0+0xc2>
 800dd8c:	782b      	ldrb	r3, [r5, #0]
 800dd8e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dd92:	2b58      	cmp	r3, #88	@ 0x58
 800dd94:	d141      	bne.n	800de1a <_strtoll_l.constprop.0+0xc2>
 800dd96:	786c      	ldrb	r4, [r5, #1]
 800dd98:	2610      	movs	r6, #16
 800dd9a:	3502      	adds	r5, #2
 800dd9c:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 800dda0:	f107 3bff 	add.w	fp, r7, #4294967295
 800dda4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dda8:	17f3      	asrs	r3, r6, #31
 800ddaa:	4632      	mov	r2, r6
 800ddac:	4658      	mov	r0, fp
 800ddae:	4651      	mov	r1, sl
 800ddb0:	9303      	str	r3, [sp, #12]
 800ddb2:	f7f2 ff99 	bl	8000ce8 <__aeabi_uldivmod>
 800ddb6:	9201      	str	r2, [sp, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	468e      	mov	lr, r1
 800ddbc:	4684      	mov	ip, r0
 800ddbe:	4611      	mov	r1, r2
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800ddc6:	2b09      	cmp	r3, #9
 800ddc8:	d905      	bls.n	800ddd6 <_strtoll_l.constprop.0+0x7e>
 800ddca:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800ddce:	2b19      	cmp	r3, #25
 800ddd0:	d82a      	bhi.n	800de28 <_strtoll_l.constprop.0+0xd0>
 800ddd2:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 800ddd6:	429e      	cmp	r6, r3
 800ddd8:	dd30      	ble.n	800de3c <_strtoll_l.constprop.0+0xe4>
 800ddda:	1c54      	adds	r4, r2, #1
 800dddc:	d015      	beq.n	800de0a <_strtoll_l.constprop.0+0xb2>
 800ddde:	4584      	cmp	ip, r0
 800dde0:	eb7e 0201 	sbcs.w	r2, lr, r1
 800dde4:	d327      	bcc.n	800de36 <_strtoll_l.constprop.0+0xde>
 800dde6:	458e      	cmp	lr, r1
 800dde8:	bf08      	it	eq
 800ddea:	4584      	cmpeq	ip, r0
 800ddec:	d102      	bne.n	800ddf4 <_strtoll_l.constprop.0+0x9c>
 800ddee:	9a01      	ldr	r2, [sp, #4]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	db20      	blt.n	800de36 <_strtoll_l.constprop.0+0xde>
 800ddf4:	9a03      	ldr	r2, [sp, #12]
 800ddf6:	4371      	muls	r1, r6
 800ddf8:	fb00 1102 	mla	r1, r0, r2, r1
 800ddfc:	fba6 0200 	umull	r0, r2, r6, r0
 800de00:	440a      	add	r2, r1
 800de02:	1818      	adds	r0, r3, r0
 800de04:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 800de08:	2201      	movs	r2, #1
 800de0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de0e:	e7d8      	b.n	800ddc2 <_strtoll_l.constprop.0+0x6a>
 800de10:	2c2b      	cmp	r4, #43	@ 0x2b
 800de12:	bf04      	itt	eq
 800de14:	782c      	ldrbeq	r4, [r5, #0]
 800de16:	1c9d      	addeq	r5, r3, #2
 800de18:	e7b3      	b.n	800dd82 <_strtoll_l.constprop.0+0x2a>
 800de1a:	2e00      	cmp	r6, #0
 800de1c:	d1be      	bne.n	800dd9c <_strtoll_l.constprop.0+0x44>
 800de1e:	2c30      	cmp	r4, #48	@ 0x30
 800de20:	bf0c      	ite	eq
 800de22:	2608      	moveq	r6, #8
 800de24:	260a      	movne	r6, #10
 800de26:	e7b9      	b.n	800dd9c <_strtoll_l.constprop.0+0x44>
 800de28:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 800de2c:	2b19      	cmp	r3, #25
 800de2e:	d805      	bhi.n	800de3c <_strtoll_l.constprop.0+0xe4>
 800de30:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 800de34:	e7cf      	b.n	800ddd6 <_strtoll_l.constprop.0+0x7e>
 800de36:	f04f 32ff 	mov.w	r2, #4294967295
 800de3a:	e7e6      	b.n	800de0a <_strtoll_l.constprop.0+0xb2>
 800de3c:	1c53      	adds	r3, r2, #1
 800de3e:	d10a      	bne.n	800de56 <_strtoll_l.constprop.0+0xfe>
 800de40:	9a02      	ldr	r2, [sp, #8]
 800de42:	2322      	movs	r3, #34	@ 0x22
 800de44:	6013      	str	r3, [r2, #0]
 800de46:	4658      	mov	r0, fp
 800de48:	4651      	mov	r1, sl
 800de4a:	f1b8 0f00 	cmp.w	r8, #0
 800de4e:	d10a      	bne.n	800de66 <_strtoll_l.constprop.0+0x10e>
 800de50:	b005      	add	sp, #20
 800de52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de56:	b117      	cbz	r7, 800de5e <_strtoll_l.constprop.0+0x106>
 800de58:	4240      	negs	r0, r0
 800de5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800de5e:	f1b8 0f00 	cmp.w	r8, #0
 800de62:	d0f5      	beq.n	800de50 <_strtoll_l.constprop.0+0xf8>
 800de64:	b10a      	cbz	r2, 800de6a <_strtoll_l.constprop.0+0x112>
 800de66:	f105 39ff 	add.w	r9, r5, #4294967295
 800de6a:	f8c8 9000 	str.w	r9, [r8]
 800de6e:	e7ef      	b.n	800de50 <_strtoll_l.constprop.0+0xf8>
 800de70:	0800fd39 	.word	0x0800fd39

0800de74 <_strtoll_r>:
 800de74:	f7ff bf70 	b.w	800dd58 <_strtoll_l.constprop.0>

0800de78 <_strtoull_l.constprop.0>:
 800de78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	4691      	mov	r9, r2
 800de7e:	4a48      	ldr	r2, [pc, #288]	@ (800dfa0 <_strtoull_l.constprop.0+0x128>)
 800de80:	9001      	str	r0, [sp, #4]
 800de82:	468a      	mov	sl, r1
 800de84:	461e      	mov	r6, r3
 800de86:	460d      	mov	r5, r1
 800de88:	462b      	mov	r3, r5
 800de8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de8e:	5d17      	ldrb	r7, [r2, r4]
 800de90:	f017 0708 	ands.w	r7, r7, #8
 800de94:	d1f8      	bne.n	800de88 <_strtoull_l.constprop.0+0x10>
 800de96:	2c2d      	cmp	r4, #45	@ 0x2d
 800de98:	d14a      	bne.n	800df30 <_strtoull_l.constprop.0+0xb8>
 800de9a:	782c      	ldrb	r4, [r5, #0]
 800de9c:	2701      	movs	r7, #1
 800de9e:	1c9d      	adds	r5, r3, #2
 800dea0:	f036 0310 	bics.w	r3, r6, #16
 800dea4:	d109      	bne.n	800deba <_strtoull_l.constprop.0+0x42>
 800dea6:	2c30      	cmp	r4, #48	@ 0x30
 800dea8:	d147      	bne.n	800df3a <_strtoull_l.constprop.0+0xc2>
 800deaa:	782b      	ldrb	r3, [r5, #0]
 800deac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800deb0:	2b58      	cmp	r3, #88	@ 0x58
 800deb2:	d142      	bne.n	800df3a <_strtoull_l.constprop.0+0xc2>
 800deb4:	786c      	ldrb	r4, [r5, #1]
 800deb6:	2610      	movs	r6, #16
 800deb8:	3502      	adds	r5, #2
 800deba:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800debe:	4632      	mov	r2, r6
 800dec0:	465b      	mov	r3, fp
 800dec2:	f04f 30ff 	mov.w	r0, #4294967295
 800dec6:	f04f 31ff 	mov.w	r1, #4294967295
 800deca:	f7f2 ff0d 	bl	8000ce8 <__aeabi_uldivmod>
 800dece:	4632      	mov	r2, r6
 800ded0:	9000      	str	r0, [sp, #0]
 800ded2:	4688      	mov	r8, r1
 800ded4:	465b      	mov	r3, fp
 800ded6:	f04f 30ff 	mov.w	r0, #4294967295
 800deda:	f04f 31ff 	mov.w	r1, #4294967295
 800dede:	f7f2 ff03 	bl	8000ce8 <__aeabi_uldivmod>
 800dee2:	2300      	movs	r3, #0
 800dee4:	4618      	mov	r0, r3
 800dee6:	4619      	mov	r1, r3
 800dee8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800deec:	f1bc 0f09 	cmp.w	ip, #9
 800def0:	d82a      	bhi.n	800df48 <_strtoull_l.constprop.0+0xd0>
 800def2:	4664      	mov	r4, ip
 800def4:	42a6      	cmp	r6, r4
 800def6:	dd38      	ble.n	800df6a <_strtoull_l.constprop.0+0xf2>
 800def8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defc:	d015      	beq.n	800df2a <_strtoull_l.constprop.0+0xb2>
 800defe:	9b00      	ldr	r3, [sp, #0]
 800df00:	4283      	cmp	r3, r0
 800df02:	eb78 0301 	sbcs.w	r3, r8, r1
 800df06:	d32d      	bcc.n	800df64 <_strtoull_l.constprop.0+0xec>
 800df08:	9b00      	ldr	r3, [sp, #0]
 800df0a:	4588      	cmp	r8, r1
 800df0c:	bf08      	it	eq
 800df0e:	4283      	cmpeq	r3, r0
 800df10:	d101      	bne.n	800df16 <_strtoull_l.constprop.0+0x9e>
 800df12:	42a2      	cmp	r2, r4
 800df14:	db26      	blt.n	800df64 <_strtoull_l.constprop.0+0xec>
 800df16:	4371      	muls	r1, r6
 800df18:	fb00 110b 	mla	r1, r0, fp, r1
 800df1c:	fba6 0300 	umull	r0, r3, r6, r0
 800df20:	4419      	add	r1, r3
 800df22:	1820      	adds	r0, r4, r0
 800df24:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800df28:	2301      	movs	r3, #1
 800df2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df2e:	e7db      	b.n	800dee8 <_strtoull_l.constprop.0+0x70>
 800df30:	2c2b      	cmp	r4, #43	@ 0x2b
 800df32:	bf04      	itt	eq
 800df34:	782c      	ldrbeq	r4, [r5, #0]
 800df36:	1c9d      	addeq	r5, r3, #2
 800df38:	e7b2      	b.n	800dea0 <_strtoull_l.constprop.0+0x28>
 800df3a:	2e00      	cmp	r6, #0
 800df3c:	d1bd      	bne.n	800deba <_strtoull_l.constprop.0+0x42>
 800df3e:	2c30      	cmp	r4, #48	@ 0x30
 800df40:	bf0c      	ite	eq
 800df42:	2608      	moveq	r6, #8
 800df44:	260a      	movne	r6, #10
 800df46:	e7b8      	b.n	800deba <_strtoull_l.constprop.0+0x42>
 800df48:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800df4c:	f1bc 0f19 	cmp.w	ip, #25
 800df50:	d801      	bhi.n	800df56 <_strtoull_l.constprop.0+0xde>
 800df52:	3c37      	subs	r4, #55	@ 0x37
 800df54:	e7ce      	b.n	800def4 <_strtoull_l.constprop.0+0x7c>
 800df56:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800df5a:	f1bc 0f19 	cmp.w	ip, #25
 800df5e:	d804      	bhi.n	800df6a <_strtoull_l.constprop.0+0xf2>
 800df60:	3c57      	subs	r4, #87	@ 0x57
 800df62:	e7c7      	b.n	800def4 <_strtoull_l.constprop.0+0x7c>
 800df64:	f04f 33ff 	mov.w	r3, #4294967295
 800df68:	e7df      	b.n	800df2a <_strtoull_l.constprop.0+0xb2>
 800df6a:	1c5a      	adds	r2, r3, #1
 800df6c:	d10a      	bne.n	800df84 <_strtoull_l.constprop.0+0x10c>
 800df6e:	9901      	ldr	r1, [sp, #4]
 800df70:	2222      	movs	r2, #34	@ 0x22
 800df72:	600a      	str	r2, [r1, #0]
 800df74:	4618      	mov	r0, r3
 800df76:	4619      	mov	r1, r3
 800df78:	f1b9 0f00 	cmp.w	r9, #0
 800df7c:	d10a      	bne.n	800df94 <_strtoull_l.constprop.0+0x11c>
 800df7e:	b003      	add	sp, #12
 800df80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df84:	b117      	cbz	r7, 800df8c <_strtoull_l.constprop.0+0x114>
 800df86:	4240      	negs	r0, r0
 800df88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800df8c:	f1b9 0f00 	cmp.w	r9, #0
 800df90:	d0f5      	beq.n	800df7e <_strtoull_l.constprop.0+0x106>
 800df92:	b10b      	cbz	r3, 800df98 <_strtoull_l.constprop.0+0x120>
 800df94:	f105 3aff 	add.w	sl, r5, #4294967295
 800df98:	f8c9 a000 	str.w	sl, [r9]
 800df9c:	e7ef      	b.n	800df7e <_strtoull_l.constprop.0+0x106>
 800df9e:	bf00      	nop
 800dfa0:	0800fd39 	.word	0x0800fd39

0800dfa4 <_strtoull_r>:
 800dfa4:	f7ff bf68 	b.w	800de78 <_strtoull_l.constprop.0>

0800dfa8 <_mbrtowc_r>:
 800dfa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfaa:	4c0a      	ldr	r4, [pc, #40]	@ (800dfd4 <_mbrtowc_r+0x2c>)
 800dfac:	9e08      	ldr	r6, [sp, #32]
 800dfae:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 800dfb2:	9600      	str	r6, [sp, #0]
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	4614      	mov	r4, r2
 800dfb8:	b912      	cbnz	r2, 800dfc0 <_mbrtowc_r+0x18>
 800dfba:	4a07      	ldr	r2, [pc, #28]	@ (800dfd8 <_mbrtowc_r+0x30>)
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	47b8      	blx	r7
 800dfc2:	1c43      	adds	r3, r0, #1
 800dfc4:	bf01      	itttt	eq
 800dfc6:	2300      	moveq	r3, #0
 800dfc8:	6033      	streq	r3, [r6, #0]
 800dfca:	238a      	moveq	r3, #138	@ 0x8a
 800dfcc:	602b      	streq	r3, [r5, #0]
 800dfce:	b003      	add	sp, #12
 800dfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	2000058c 	.word	0x2000058c
 800dfd8:	0800fe74 	.word	0x0800fe74

0800dfdc <iswspace>:
 800dfdc:	2100      	movs	r1, #0
 800dfde:	f000 b801 	b.w	800dfe4 <iswspace_l>
	...

0800dfe4 <iswspace_l>:
 800dfe4:	28ff      	cmp	r0, #255	@ 0xff
 800dfe6:	bf9d      	ittte	ls
 800dfe8:	4b02      	ldrls	r3, [pc, #8]	@ (800dff4 <iswspace_l+0x10>)
 800dfea:	5c18      	ldrbls	r0, [r3, r0]
 800dfec:	f000 0008 	andls.w	r0, r0, #8
 800dff0:	2000      	movhi	r0, #0
 800dff2:	4770      	bx	lr
 800dff4:	0800fd39 	.word	0x0800fd39

0800dff8 <_sungetc_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	1c4b      	adds	r3, r1, #1
 800dffc:	4614      	mov	r4, r2
 800dffe:	d103      	bne.n	800e008 <_sungetc_r+0x10>
 800e000:	f04f 35ff 	mov.w	r5, #4294967295
 800e004:	4628      	mov	r0, r5
 800e006:	bd38      	pop	{r3, r4, r5, pc}
 800e008:	8993      	ldrh	r3, [r2, #12]
 800e00a:	f023 0320 	bic.w	r3, r3, #32
 800e00e:	8193      	strh	r3, [r2, #12]
 800e010:	6853      	ldr	r3, [r2, #4]
 800e012:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e014:	b2cd      	uxtb	r5, r1
 800e016:	b18a      	cbz	r2, 800e03c <_sungetc_r+0x44>
 800e018:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e01a:	429a      	cmp	r2, r3
 800e01c:	dd08      	ble.n	800e030 <_sungetc_r+0x38>
 800e01e:	6823      	ldr	r3, [r4, #0]
 800e020:	1e5a      	subs	r2, r3, #1
 800e022:	6022      	str	r2, [r4, #0]
 800e024:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e028:	6863      	ldr	r3, [r4, #4]
 800e02a:	3301      	adds	r3, #1
 800e02c:	6063      	str	r3, [r4, #4]
 800e02e:	e7e9      	b.n	800e004 <_sungetc_r+0xc>
 800e030:	4621      	mov	r1, r4
 800e032:	f000 f872 	bl	800e11a <__submore>
 800e036:	2800      	cmp	r0, #0
 800e038:	d0f1      	beq.n	800e01e <_sungetc_r+0x26>
 800e03a:	e7e1      	b.n	800e000 <_sungetc_r+0x8>
 800e03c:	6921      	ldr	r1, [r4, #16]
 800e03e:	6822      	ldr	r2, [r4, #0]
 800e040:	b141      	cbz	r1, 800e054 <_sungetc_r+0x5c>
 800e042:	4291      	cmp	r1, r2
 800e044:	d206      	bcs.n	800e054 <_sungetc_r+0x5c>
 800e046:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e04a:	42a9      	cmp	r1, r5
 800e04c:	d102      	bne.n	800e054 <_sungetc_r+0x5c>
 800e04e:	3a01      	subs	r2, #1
 800e050:	6022      	str	r2, [r4, #0]
 800e052:	e7ea      	b.n	800e02a <_sungetc_r+0x32>
 800e054:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 800e058:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e05c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e05e:	2303      	movs	r3, #3
 800e060:	6363      	str	r3, [r4, #52]	@ 0x34
 800e062:	4623      	mov	r3, r4
 800e064:	f803 5f42 	strb.w	r5, [r3, #66]!
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	2301      	movs	r3, #1
 800e06c:	e7de      	b.n	800e02c <_sungetc_r+0x34>

0800e06e <__ssrefill_r>:
 800e06e:	b510      	push	{r4, lr}
 800e070:	460c      	mov	r4, r1
 800e072:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800e074:	b169      	cbz	r1, 800e092 <__ssrefill_r+0x24>
 800e076:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e07a:	4299      	cmp	r1, r3
 800e07c:	d001      	beq.n	800e082 <__ssrefill_r+0x14>
 800e07e:	f7fa fa99 	bl	80085b4 <_free_r>
 800e082:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e084:	6063      	str	r3, [r4, #4]
 800e086:	2000      	movs	r0, #0
 800e088:	6320      	str	r0, [r4, #48]	@ 0x30
 800e08a:	b113      	cbz	r3, 800e092 <__ssrefill_r+0x24>
 800e08c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e08e:	6023      	str	r3, [r4, #0]
 800e090:	bd10      	pop	{r4, pc}
 800e092:	6923      	ldr	r3, [r4, #16]
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	2300      	movs	r3, #0
 800e098:	6063      	str	r3, [r4, #4]
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	f043 0320 	orr.w	r3, r3, #32
 800e0a0:	81a3      	strh	r3, [r4, #12]
 800e0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a6:	e7f3      	b.n	800e090 <__ssrefill_r+0x22>

0800e0a8 <_sfread_r>:
 800e0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ac:	461f      	mov	r7, r3
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	437b      	muls	r3, r7
 800e0b2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800e0b4:	9000      	str	r0, [sp, #0]
 800e0b6:	4688      	mov	r8, r1
 800e0b8:	4691      	mov	r9, r2
 800e0ba:	d028      	beq.n	800e10e <_sfread_r+0x66>
 800e0bc:	461e      	mov	r6, r3
 800e0be:	f04f 0b00 	mov.w	fp, #0
 800e0c2:	e9d4 1500 	ldrd	r1, r5, [r4]
 800e0c6:	42b5      	cmp	r5, r6
 800e0c8:	d30b      	bcc.n	800e0e2 <_sfread_r+0x3a>
 800e0ca:	4632      	mov	r2, r6
 800e0cc:	4640      	mov	r0, r8
 800e0ce:	f7fa f9fd 	bl	80084cc <memcpy>
 800e0d2:	6862      	ldr	r2, [r4, #4]
 800e0d4:	6821      	ldr	r1, [r4, #0]
 800e0d6:	1b92      	subs	r2, r2, r6
 800e0d8:	4431      	add	r1, r6
 800e0da:	6062      	str	r2, [r4, #4]
 800e0dc:	6021      	str	r1, [r4, #0]
 800e0de:	463b      	mov	r3, r7
 800e0e0:	e015      	b.n	800e10e <_sfread_r+0x66>
 800e0e2:	462a      	mov	r2, r5
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	9301      	str	r3, [sp, #4]
 800e0e8:	f7fa f9f0 	bl	80084cc <memcpy>
 800e0ec:	6822      	ldr	r2, [r4, #0]
 800e0ee:	9800      	ldr	r0, [sp, #0]
 800e0f0:	442a      	add	r2, r5
 800e0f2:	e9c4 2b00 	strd	r2, fp, [r4]
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	f7ff ffb9 	bl	800e06e <__ssrefill_r>
 800e0fc:	44a8      	add	r8, r5
 800e0fe:	9b01      	ldr	r3, [sp, #4]
 800e100:	eba6 0a05 	sub.w	sl, r6, r5
 800e104:	b138      	cbz	r0, 800e116 <_sfread_r+0x6e>
 800e106:	441d      	add	r5, r3
 800e108:	1bad      	subs	r5, r5, r6
 800e10a:	fbb5 f3f9 	udiv	r3, r5, r9
 800e10e:	4618      	mov	r0, r3
 800e110:	b003      	add	sp, #12
 800e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e116:	4656      	mov	r6, sl
 800e118:	e7d3      	b.n	800e0c2 <_sfread_r+0x1a>

0800e11a <__submore>:
 800e11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e11e:	460c      	mov	r4, r1
 800e120:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800e122:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800e126:	4299      	cmp	r1, r3
 800e128:	d11d      	bne.n	800e166 <__submore+0x4c>
 800e12a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e12e:	f7fa fb01 	bl	8008734 <_malloc_r>
 800e132:	b918      	cbnz	r0, 800e13c <__submore+0x22>
 800e134:	f04f 30ff 	mov.w	r0, #4294967295
 800e138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e13c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e140:	6363      	str	r3, [r4, #52]	@ 0x34
 800e142:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800e146:	6320      	str	r0, [r4, #48]	@ 0x30
 800e148:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e14c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800e150:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e154:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e158:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e15c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e160:	6020      	str	r0, [r4, #0]
 800e162:	2000      	movs	r0, #0
 800e164:	e7e8      	b.n	800e138 <__submore+0x1e>
 800e166:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800e168:	0077      	lsls	r7, r6, #1
 800e16a:	463a      	mov	r2, r7
 800e16c:	f7fa fd28 	bl	8008bc0 <_realloc_r>
 800e170:	4605      	mov	r5, r0
 800e172:	2800      	cmp	r0, #0
 800e174:	d0de      	beq.n	800e134 <__submore+0x1a>
 800e176:	eb00 0806 	add.w	r8, r0, r6
 800e17a:	4601      	mov	r1, r0
 800e17c:	4632      	mov	r2, r6
 800e17e:	4640      	mov	r0, r8
 800e180:	f7fa f9a4 	bl	80084cc <memcpy>
 800e184:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 800e188:	f8c4 8000 	str.w	r8, [r4]
 800e18c:	e7e9      	b.n	800e162 <__submore+0x48>

0800e18e <strncmp>:
 800e18e:	b510      	push	{r4, lr}
 800e190:	b16a      	cbz	r2, 800e1ae <strncmp+0x20>
 800e192:	3901      	subs	r1, #1
 800e194:	1884      	adds	r4, r0, r2
 800e196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e19a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d103      	bne.n	800e1aa <strncmp+0x1c>
 800e1a2:	42a0      	cmp	r0, r4
 800e1a4:	d001      	beq.n	800e1aa <strncmp+0x1c>
 800e1a6:	2a00      	cmp	r2, #0
 800e1a8:	d1f5      	bne.n	800e196 <strncmp+0x8>
 800e1aa:	1ad0      	subs	r0, r2, r3
 800e1ac:	bd10      	pop	{r4, pc}
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	e7fc      	b.n	800e1ac <strncmp+0x1e>
 800e1b2:	0000      	movs	r0, r0
 800e1b4:	0000      	movs	r0, r0
	...

0800e1b8 <nan>:
 800e1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e1c0 <nan+0x8>
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	00000000 	.word	0x00000000
 800e1c4:	7ff80000 	.word	0x7ff80000

0800e1c8 <__assert_func>:
 800e1c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1ca:	4614      	mov	r4, r2
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4b09      	ldr	r3, [pc, #36]	@ (800e1f4 <__assert_func+0x2c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	68d8      	ldr	r0, [r3, #12]
 800e1d6:	b954      	cbnz	r4, 800e1ee <__assert_func+0x26>
 800e1d8:	4b07      	ldr	r3, [pc, #28]	@ (800e1f8 <__assert_func+0x30>)
 800e1da:	461c      	mov	r4, r3
 800e1dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1e0:	9100      	str	r1, [sp, #0]
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	4905      	ldr	r1, [pc, #20]	@ (800e1fc <__assert_func+0x34>)
 800e1e6:	f000 fb7b 	bl	800e8e0 <fiprintf>
 800e1ea:	f001 fa91 	bl	800f710 <abort>
 800e1ee:	4b04      	ldr	r3, [pc, #16]	@ (800e200 <__assert_func+0x38>)
 800e1f0:	e7f4      	b.n	800e1dc <__assert_func+0x14>
 800e1f2:	bf00      	nop
 800e1f4:	20000050 	.word	0x20000050
 800e1f8:	0800fe74 	.word	0x0800fe74
 800e1fc:	0800fe46 	.word	0x0800fe46
 800e200:	0800fe39 	.word	0x0800fe39

0800e204 <_calloc_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	fba1 1502 	umull	r1, r5, r1, r2
 800e20a:	b935      	cbnz	r5, 800e21a <_calloc_r+0x16>
 800e20c:	f7fa fa92 	bl	8008734 <_malloc_r>
 800e210:	4604      	mov	r4, r0
 800e212:	b938      	cbnz	r0, 800e224 <_calloc_r+0x20>
 800e214:	2400      	movs	r4, #0
 800e216:	4620      	mov	r0, r4
 800e218:	bd38      	pop	{r3, r4, r5, pc}
 800e21a:	f7fa f929 	bl	8008470 <__errno>
 800e21e:	230c      	movs	r3, #12
 800e220:	6003      	str	r3, [r0, #0]
 800e222:	e7f7      	b.n	800e214 <_calloc_r+0x10>
 800e224:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e228:	f022 0203 	bic.w	r2, r2, #3
 800e22c:	3a04      	subs	r2, #4
 800e22e:	2a24      	cmp	r2, #36	@ 0x24
 800e230:	d819      	bhi.n	800e266 <_calloc_r+0x62>
 800e232:	2a13      	cmp	r2, #19
 800e234:	d915      	bls.n	800e262 <_calloc_r+0x5e>
 800e236:	2a1b      	cmp	r2, #27
 800e238:	e9c0 5500 	strd	r5, r5, [r0]
 800e23c:	d806      	bhi.n	800e24c <_calloc_r+0x48>
 800e23e:	f100 0308 	add.w	r3, r0, #8
 800e242:	2200      	movs	r2, #0
 800e244:	e9c3 2200 	strd	r2, r2, [r3]
 800e248:	609a      	str	r2, [r3, #8]
 800e24a:	e7e4      	b.n	800e216 <_calloc_r+0x12>
 800e24c:	2a24      	cmp	r2, #36	@ 0x24
 800e24e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800e252:	bf11      	iteee	ne
 800e254:	f100 0310 	addne.w	r3, r0, #16
 800e258:	6105      	streq	r5, [r0, #16]
 800e25a:	f100 0318 	addeq.w	r3, r0, #24
 800e25e:	6145      	streq	r5, [r0, #20]
 800e260:	e7ef      	b.n	800e242 <_calloc_r+0x3e>
 800e262:	4603      	mov	r3, r0
 800e264:	e7ed      	b.n	800e242 <_calloc_r+0x3e>
 800e266:	4629      	mov	r1, r5
 800e268:	f7fa f89d 	bl	80083a6 <memset>
 800e26c:	e7d3      	b.n	800e216 <_calloc_r+0x12>

0800e26e <rshift>:
 800e26e:	6903      	ldr	r3, [r0, #16]
 800e270:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e278:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e27c:	f100 0414 	add.w	r4, r0, #20
 800e280:	dd45      	ble.n	800e30e <rshift+0xa0>
 800e282:	f011 011f 	ands.w	r1, r1, #31
 800e286:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e28a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e28e:	d10c      	bne.n	800e2aa <rshift+0x3c>
 800e290:	f100 0710 	add.w	r7, r0, #16
 800e294:	4629      	mov	r1, r5
 800e296:	42b1      	cmp	r1, r6
 800e298:	d334      	bcc.n	800e304 <rshift+0x96>
 800e29a:	1a9b      	subs	r3, r3, r2
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	1eea      	subs	r2, r5, #3
 800e2a0:	4296      	cmp	r6, r2
 800e2a2:	bf38      	it	cc
 800e2a4:	2300      	movcc	r3, #0
 800e2a6:	4423      	add	r3, r4
 800e2a8:	e015      	b.n	800e2d6 <rshift+0x68>
 800e2aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e2ae:	f1c1 0820 	rsb	r8, r1, #32
 800e2b2:	40cf      	lsrs	r7, r1
 800e2b4:	f105 0e04 	add.w	lr, r5, #4
 800e2b8:	46a1      	mov	r9, r4
 800e2ba:	4576      	cmp	r6, lr
 800e2bc:	46f4      	mov	ip, lr
 800e2be:	d815      	bhi.n	800e2ec <rshift+0x7e>
 800e2c0:	1a9a      	subs	r2, r3, r2
 800e2c2:	0092      	lsls	r2, r2, #2
 800e2c4:	3a04      	subs	r2, #4
 800e2c6:	3501      	adds	r5, #1
 800e2c8:	42ae      	cmp	r6, r5
 800e2ca:	bf38      	it	cc
 800e2cc:	2200      	movcc	r2, #0
 800e2ce:	18a3      	adds	r3, r4, r2
 800e2d0:	50a7      	str	r7, [r4, r2]
 800e2d2:	b107      	cbz	r7, 800e2d6 <rshift+0x68>
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	1b1a      	subs	r2, r3, r4
 800e2d8:	42a3      	cmp	r3, r4
 800e2da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e2de:	bf08      	it	eq
 800e2e0:	2300      	moveq	r3, #0
 800e2e2:	6102      	str	r2, [r0, #16]
 800e2e4:	bf08      	it	eq
 800e2e6:	6143      	streq	r3, [r0, #20]
 800e2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2ec:	f8dc c000 	ldr.w	ip, [ip]
 800e2f0:	fa0c fc08 	lsl.w	ip, ip, r8
 800e2f4:	ea4c 0707 	orr.w	r7, ip, r7
 800e2f8:	f849 7b04 	str.w	r7, [r9], #4
 800e2fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e300:	40cf      	lsrs	r7, r1
 800e302:	e7da      	b.n	800e2ba <rshift+0x4c>
 800e304:	f851 cb04 	ldr.w	ip, [r1], #4
 800e308:	f847 cf04 	str.w	ip, [r7, #4]!
 800e30c:	e7c3      	b.n	800e296 <rshift+0x28>
 800e30e:	4623      	mov	r3, r4
 800e310:	e7e1      	b.n	800e2d6 <rshift+0x68>

0800e312 <__hexdig_fun>:
 800e312:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e316:	2b09      	cmp	r3, #9
 800e318:	d802      	bhi.n	800e320 <__hexdig_fun+0xe>
 800e31a:	3820      	subs	r0, #32
 800e31c:	b2c0      	uxtb	r0, r0
 800e31e:	4770      	bx	lr
 800e320:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e324:	2b05      	cmp	r3, #5
 800e326:	d801      	bhi.n	800e32c <__hexdig_fun+0x1a>
 800e328:	3847      	subs	r0, #71	@ 0x47
 800e32a:	e7f7      	b.n	800e31c <__hexdig_fun+0xa>
 800e32c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e330:	2b05      	cmp	r3, #5
 800e332:	d801      	bhi.n	800e338 <__hexdig_fun+0x26>
 800e334:	3827      	subs	r0, #39	@ 0x27
 800e336:	e7f1      	b.n	800e31c <__hexdig_fun+0xa>
 800e338:	2000      	movs	r0, #0
 800e33a:	4770      	bx	lr

0800e33c <__gethex>:
 800e33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e340:	b085      	sub	sp, #20
 800e342:	468a      	mov	sl, r1
 800e344:	9302      	str	r3, [sp, #8]
 800e346:	680b      	ldr	r3, [r1, #0]
 800e348:	9001      	str	r0, [sp, #4]
 800e34a:	4690      	mov	r8, r2
 800e34c:	1c9c      	adds	r4, r3, #2
 800e34e:	46a1      	mov	r9, r4
 800e350:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e354:	2830      	cmp	r0, #48	@ 0x30
 800e356:	d0fa      	beq.n	800e34e <__gethex+0x12>
 800e358:	eba9 0303 	sub.w	r3, r9, r3
 800e35c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e360:	f7ff ffd7 	bl	800e312 <__hexdig_fun>
 800e364:	4605      	mov	r5, r0
 800e366:	2800      	cmp	r0, #0
 800e368:	d168      	bne.n	800e43c <__gethex+0x100>
 800e36a:	49a0      	ldr	r1, [pc, #640]	@ (800e5ec <__gethex+0x2b0>)
 800e36c:	2201      	movs	r2, #1
 800e36e:	4648      	mov	r0, r9
 800e370:	f7ff ff0d 	bl	800e18e <strncmp>
 800e374:	4607      	mov	r7, r0
 800e376:	2800      	cmp	r0, #0
 800e378:	d167      	bne.n	800e44a <__gethex+0x10e>
 800e37a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e37e:	4626      	mov	r6, r4
 800e380:	f7ff ffc7 	bl	800e312 <__hexdig_fun>
 800e384:	2800      	cmp	r0, #0
 800e386:	d062      	beq.n	800e44e <__gethex+0x112>
 800e388:	4623      	mov	r3, r4
 800e38a:	7818      	ldrb	r0, [r3, #0]
 800e38c:	2830      	cmp	r0, #48	@ 0x30
 800e38e:	4699      	mov	r9, r3
 800e390:	f103 0301 	add.w	r3, r3, #1
 800e394:	d0f9      	beq.n	800e38a <__gethex+0x4e>
 800e396:	f7ff ffbc 	bl	800e312 <__hexdig_fun>
 800e39a:	fab0 f580 	clz	r5, r0
 800e39e:	096d      	lsrs	r5, r5, #5
 800e3a0:	f04f 0b01 	mov.w	fp, #1
 800e3a4:	464a      	mov	r2, r9
 800e3a6:	4616      	mov	r6, r2
 800e3a8:	3201      	adds	r2, #1
 800e3aa:	7830      	ldrb	r0, [r6, #0]
 800e3ac:	f7ff ffb1 	bl	800e312 <__hexdig_fun>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d1f8      	bne.n	800e3a6 <__gethex+0x6a>
 800e3b4:	498d      	ldr	r1, [pc, #564]	@ (800e5ec <__gethex+0x2b0>)
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f7ff fee8 	bl	800e18e <strncmp>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d13f      	bne.n	800e442 <__gethex+0x106>
 800e3c2:	b944      	cbnz	r4, 800e3d6 <__gethex+0x9a>
 800e3c4:	1c74      	adds	r4, r6, #1
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	4616      	mov	r6, r2
 800e3ca:	3201      	adds	r2, #1
 800e3cc:	7830      	ldrb	r0, [r6, #0]
 800e3ce:	f7ff ffa0 	bl	800e312 <__hexdig_fun>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d1f8      	bne.n	800e3c8 <__gethex+0x8c>
 800e3d6:	1ba4      	subs	r4, r4, r6
 800e3d8:	00a7      	lsls	r7, r4, #2
 800e3da:	7833      	ldrb	r3, [r6, #0]
 800e3dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e3e0:	2b50      	cmp	r3, #80	@ 0x50
 800e3e2:	d13e      	bne.n	800e462 <__gethex+0x126>
 800e3e4:	7873      	ldrb	r3, [r6, #1]
 800e3e6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e3e8:	d033      	beq.n	800e452 <__gethex+0x116>
 800e3ea:	2b2d      	cmp	r3, #45	@ 0x2d
 800e3ec:	d034      	beq.n	800e458 <__gethex+0x11c>
 800e3ee:	1c71      	adds	r1, r6, #1
 800e3f0:	2400      	movs	r4, #0
 800e3f2:	7808      	ldrb	r0, [r1, #0]
 800e3f4:	f7ff ff8d 	bl	800e312 <__hexdig_fun>
 800e3f8:	1e43      	subs	r3, r0, #1
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	2b18      	cmp	r3, #24
 800e3fe:	d830      	bhi.n	800e462 <__gethex+0x126>
 800e400:	f1a0 0210 	sub.w	r2, r0, #16
 800e404:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e408:	f7ff ff83 	bl	800e312 <__hexdig_fun>
 800e40c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e410:	fa5f fc8c 	uxtb.w	ip, ip
 800e414:	f1bc 0f18 	cmp.w	ip, #24
 800e418:	f04f 030a 	mov.w	r3, #10
 800e41c:	d91e      	bls.n	800e45c <__gethex+0x120>
 800e41e:	b104      	cbz	r4, 800e422 <__gethex+0xe6>
 800e420:	4252      	negs	r2, r2
 800e422:	4417      	add	r7, r2
 800e424:	f8ca 1000 	str.w	r1, [sl]
 800e428:	b1ed      	cbz	r5, 800e466 <__gethex+0x12a>
 800e42a:	f1bb 0f00 	cmp.w	fp, #0
 800e42e:	bf0c      	ite	eq
 800e430:	2506      	moveq	r5, #6
 800e432:	2500      	movne	r5, #0
 800e434:	4628      	mov	r0, r5
 800e436:	b005      	add	sp, #20
 800e438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e43c:	2500      	movs	r5, #0
 800e43e:	462c      	mov	r4, r5
 800e440:	e7b0      	b.n	800e3a4 <__gethex+0x68>
 800e442:	2c00      	cmp	r4, #0
 800e444:	d1c7      	bne.n	800e3d6 <__gethex+0x9a>
 800e446:	4627      	mov	r7, r4
 800e448:	e7c7      	b.n	800e3da <__gethex+0x9e>
 800e44a:	464e      	mov	r6, r9
 800e44c:	462f      	mov	r7, r5
 800e44e:	2501      	movs	r5, #1
 800e450:	e7c3      	b.n	800e3da <__gethex+0x9e>
 800e452:	2400      	movs	r4, #0
 800e454:	1cb1      	adds	r1, r6, #2
 800e456:	e7cc      	b.n	800e3f2 <__gethex+0xb6>
 800e458:	2401      	movs	r4, #1
 800e45a:	e7fb      	b.n	800e454 <__gethex+0x118>
 800e45c:	fb03 0002 	mla	r0, r3, r2, r0
 800e460:	e7ce      	b.n	800e400 <__gethex+0xc4>
 800e462:	4631      	mov	r1, r6
 800e464:	e7de      	b.n	800e424 <__gethex+0xe8>
 800e466:	eba6 0309 	sub.w	r3, r6, r9
 800e46a:	3b01      	subs	r3, #1
 800e46c:	4629      	mov	r1, r5
 800e46e:	2b07      	cmp	r3, #7
 800e470:	dc0a      	bgt.n	800e488 <__gethex+0x14c>
 800e472:	9801      	ldr	r0, [sp, #4]
 800e474:	f7fe f902 	bl	800c67c <_Balloc>
 800e478:	4604      	mov	r4, r0
 800e47a:	b940      	cbnz	r0, 800e48e <__gethex+0x152>
 800e47c:	4b5c      	ldr	r3, [pc, #368]	@ (800e5f0 <__gethex+0x2b4>)
 800e47e:	4602      	mov	r2, r0
 800e480:	21e4      	movs	r1, #228	@ 0xe4
 800e482:	485c      	ldr	r0, [pc, #368]	@ (800e5f4 <__gethex+0x2b8>)
 800e484:	f7ff fea0 	bl	800e1c8 <__assert_func>
 800e488:	3101      	adds	r1, #1
 800e48a:	105b      	asrs	r3, r3, #1
 800e48c:	e7ef      	b.n	800e46e <__gethex+0x132>
 800e48e:	f100 0a14 	add.w	sl, r0, #20
 800e492:	2300      	movs	r3, #0
 800e494:	4655      	mov	r5, sl
 800e496:	469b      	mov	fp, r3
 800e498:	45b1      	cmp	r9, r6
 800e49a:	d337      	bcc.n	800e50c <__gethex+0x1d0>
 800e49c:	f845 bb04 	str.w	fp, [r5], #4
 800e4a0:	eba5 050a 	sub.w	r5, r5, sl
 800e4a4:	10ad      	asrs	r5, r5, #2
 800e4a6:	6125      	str	r5, [r4, #16]
 800e4a8:	4658      	mov	r0, fp
 800e4aa:	f7fe f9a5 	bl	800c7f8 <__hi0bits>
 800e4ae:	016d      	lsls	r5, r5, #5
 800e4b0:	f8d8 6000 	ldr.w	r6, [r8]
 800e4b4:	1a2d      	subs	r5, r5, r0
 800e4b6:	42b5      	cmp	r5, r6
 800e4b8:	dd54      	ble.n	800e564 <__gethex+0x228>
 800e4ba:	1bad      	subs	r5, r5, r6
 800e4bc:	4629      	mov	r1, r5
 800e4be:	4620      	mov	r0, r4
 800e4c0:	f7fe fd1f 	bl	800cf02 <__any_on>
 800e4c4:	4681      	mov	r9, r0
 800e4c6:	b178      	cbz	r0, 800e4e8 <__gethex+0x1ac>
 800e4c8:	1e6b      	subs	r3, r5, #1
 800e4ca:	1159      	asrs	r1, r3, #5
 800e4cc:	f003 021f 	and.w	r2, r3, #31
 800e4d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e4d4:	f04f 0901 	mov.w	r9, #1
 800e4d8:	fa09 f202 	lsl.w	r2, r9, r2
 800e4dc:	420a      	tst	r2, r1
 800e4de:	d003      	beq.n	800e4e8 <__gethex+0x1ac>
 800e4e0:	454b      	cmp	r3, r9
 800e4e2:	dc36      	bgt.n	800e552 <__gethex+0x216>
 800e4e4:	f04f 0902 	mov.w	r9, #2
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	f7ff febf 	bl	800e26e <rshift>
 800e4f0:	442f      	add	r7, r5
 800e4f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4f6:	42bb      	cmp	r3, r7
 800e4f8:	da42      	bge.n	800e580 <__gethex+0x244>
 800e4fa:	9801      	ldr	r0, [sp, #4]
 800e4fc:	4621      	mov	r1, r4
 800e4fe:	f7fe f8e2 	bl	800c6c6 <_Bfree>
 800e502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e504:	2300      	movs	r3, #0
 800e506:	6013      	str	r3, [r2, #0]
 800e508:	25a3      	movs	r5, #163	@ 0xa3
 800e50a:	e793      	b.n	800e434 <__gethex+0xf8>
 800e50c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e510:	2a2e      	cmp	r2, #46	@ 0x2e
 800e512:	d012      	beq.n	800e53a <__gethex+0x1fe>
 800e514:	2b20      	cmp	r3, #32
 800e516:	d104      	bne.n	800e522 <__gethex+0x1e6>
 800e518:	f845 bb04 	str.w	fp, [r5], #4
 800e51c:	f04f 0b00 	mov.w	fp, #0
 800e520:	465b      	mov	r3, fp
 800e522:	7830      	ldrb	r0, [r6, #0]
 800e524:	9303      	str	r3, [sp, #12]
 800e526:	f7ff fef4 	bl	800e312 <__hexdig_fun>
 800e52a:	9b03      	ldr	r3, [sp, #12]
 800e52c:	f000 000f 	and.w	r0, r0, #15
 800e530:	4098      	lsls	r0, r3
 800e532:	ea4b 0b00 	orr.w	fp, fp, r0
 800e536:	3304      	adds	r3, #4
 800e538:	e7ae      	b.n	800e498 <__gethex+0x15c>
 800e53a:	45b1      	cmp	r9, r6
 800e53c:	d8ea      	bhi.n	800e514 <__gethex+0x1d8>
 800e53e:	492b      	ldr	r1, [pc, #172]	@ (800e5ec <__gethex+0x2b0>)
 800e540:	9303      	str	r3, [sp, #12]
 800e542:	2201      	movs	r2, #1
 800e544:	4630      	mov	r0, r6
 800e546:	f7ff fe22 	bl	800e18e <strncmp>
 800e54a:	9b03      	ldr	r3, [sp, #12]
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d1e1      	bne.n	800e514 <__gethex+0x1d8>
 800e550:	e7a2      	b.n	800e498 <__gethex+0x15c>
 800e552:	1ea9      	subs	r1, r5, #2
 800e554:	4620      	mov	r0, r4
 800e556:	f7fe fcd4 	bl	800cf02 <__any_on>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d0c2      	beq.n	800e4e4 <__gethex+0x1a8>
 800e55e:	f04f 0903 	mov.w	r9, #3
 800e562:	e7c1      	b.n	800e4e8 <__gethex+0x1ac>
 800e564:	da09      	bge.n	800e57a <__gethex+0x23e>
 800e566:	1b75      	subs	r5, r6, r5
 800e568:	4621      	mov	r1, r4
 800e56a:	9801      	ldr	r0, [sp, #4]
 800e56c:	462a      	mov	r2, r5
 800e56e:	f7fe fa8f 	bl	800ca90 <__lshift>
 800e572:	1b7f      	subs	r7, r7, r5
 800e574:	4604      	mov	r4, r0
 800e576:	f100 0a14 	add.w	sl, r0, #20
 800e57a:	f04f 0900 	mov.w	r9, #0
 800e57e:	e7b8      	b.n	800e4f2 <__gethex+0x1b6>
 800e580:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e584:	42bd      	cmp	r5, r7
 800e586:	dd6f      	ble.n	800e668 <__gethex+0x32c>
 800e588:	1bed      	subs	r5, r5, r7
 800e58a:	42ae      	cmp	r6, r5
 800e58c:	dc34      	bgt.n	800e5f8 <__gethex+0x2bc>
 800e58e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e592:	2b02      	cmp	r3, #2
 800e594:	d022      	beq.n	800e5dc <__gethex+0x2a0>
 800e596:	2b03      	cmp	r3, #3
 800e598:	d024      	beq.n	800e5e4 <__gethex+0x2a8>
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d115      	bne.n	800e5ca <__gethex+0x28e>
 800e59e:	42ae      	cmp	r6, r5
 800e5a0:	d113      	bne.n	800e5ca <__gethex+0x28e>
 800e5a2:	2e01      	cmp	r6, #1
 800e5a4:	d10b      	bne.n	800e5be <__gethex+0x282>
 800e5a6:	9a02      	ldr	r2, [sp, #8]
 800e5a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e5ac:	6013      	str	r3, [r2, #0]
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	6123      	str	r3, [r4, #16]
 800e5b2:	f8ca 3000 	str.w	r3, [sl]
 800e5b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5b8:	2562      	movs	r5, #98	@ 0x62
 800e5ba:	601c      	str	r4, [r3, #0]
 800e5bc:	e73a      	b.n	800e434 <__gethex+0xf8>
 800e5be:	1e71      	subs	r1, r6, #1
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f7fe fc9e 	bl	800cf02 <__any_on>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d1ed      	bne.n	800e5a6 <__gethex+0x26a>
 800e5ca:	9801      	ldr	r0, [sp, #4]
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	f7fe f87a 	bl	800c6c6 <_Bfree>
 800e5d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	6013      	str	r3, [r2, #0]
 800e5d8:	2550      	movs	r5, #80	@ 0x50
 800e5da:	e72b      	b.n	800e434 <__gethex+0xf8>
 800e5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1f3      	bne.n	800e5ca <__gethex+0x28e>
 800e5e2:	e7e0      	b.n	800e5a6 <__gethex+0x26a>
 800e5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1dd      	bne.n	800e5a6 <__gethex+0x26a>
 800e5ea:	e7ee      	b.n	800e5ca <__gethex+0x28e>
 800e5ec:	0800fb18 	.word	0x0800fb18
 800e5f0:	0800fb27 	.word	0x0800fb27
 800e5f4:	0800fe75 	.word	0x0800fe75
 800e5f8:	1e6f      	subs	r7, r5, #1
 800e5fa:	f1b9 0f00 	cmp.w	r9, #0
 800e5fe:	d130      	bne.n	800e662 <__gethex+0x326>
 800e600:	b127      	cbz	r7, 800e60c <__gethex+0x2d0>
 800e602:	4639      	mov	r1, r7
 800e604:	4620      	mov	r0, r4
 800e606:	f7fe fc7c 	bl	800cf02 <__any_on>
 800e60a:	4681      	mov	r9, r0
 800e60c:	117a      	asrs	r2, r7, #5
 800e60e:	2301      	movs	r3, #1
 800e610:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e614:	f007 071f 	and.w	r7, r7, #31
 800e618:	40bb      	lsls	r3, r7
 800e61a:	4213      	tst	r3, r2
 800e61c:	4629      	mov	r1, r5
 800e61e:	4620      	mov	r0, r4
 800e620:	bf18      	it	ne
 800e622:	f049 0902 	orrne.w	r9, r9, #2
 800e626:	f7ff fe22 	bl	800e26e <rshift>
 800e62a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e62e:	1b76      	subs	r6, r6, r5
 800e630:	2502      	movs	r5, #2
 800e632:	f1b9 0f00 	cmp.w	r9, #0
 800e636:	d047      	beq.n	800e6c8 <__gethex+0x38c>
 800e638:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d015      	beq.n	800e66c <__gethex+0x330>
 800e640:	2b03      	cmp	r3, #3
 800e642:	d017      	beq.n	800e674 <__gethex+0x338>
 800e644:	2b01      	cmp	r3, #1
 800e646:	d109      	bne.n	800e65c <__gethex+0x320>
 800e648:	f019 0f02 	tst.w	r9, #2
 800e64c:	d006      	beq.n	800e65c <__gethex+0x320>
 800e64e:	f8da 3000 	ldr.w	r3, [sl]
 800e652:	ea49 0903 	orr.w	r9, r9, r3
 800e656:	f019 0f01 	tst.w	r9, #1
 800e65a:	d10e      	bne.n	800e67a <__gethex+0x33e>
 800e65c:	f045 0510 	orr.w	r5, r5, #16
 800e660:	e032      	b.n	800e6c8 <__gethex+0x38c>
 800e662:	f04f 0901 	mov.w	r9, #1
 800e666:	e7d1      	b.n	800e60c <__gethex+0x2d0>
 800e668:	2501      	movs	r5, #1
 800e66a:	e7e2      	b.n	800e632 <__gethex+0x2f6>
 800e66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e66e:	f1c3 0301 	rsb	r3, r3, #1
 800e672:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e676:	2b00      	cmp	r3, #0
 800e678:	d0f0      	beq.n	800e65c <__gethex+0x320>
 800e67a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e67e:	f104 0314 	add.w	r3, r4, #20
 800e682:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e686:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e68a:	f04f 0c00 	mov.w	ip, #0
 800e68e:	4618      	mov	r0, r3
 800e690:	f853 2b04 	ldr.w	r2, [r3], #4
 800e694:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e698:	d01b      	beq.n	800e6d2 <__gethex+0x396>
 800e69a:	3201      	adds	r2, #1
 800e69c:	6002      	str	r2, [r0, #0]
 800e69e:	2d02      	cmp	r5, #2
 800e6a0:	f104 0314 	add.w	r3, r4, #20
 800e6a4:	d13c      	bne.n	800e720 <__gethex+0x3e4>
 800e6a6:	f8d8 2000 	ldr.w	r2, [r8]
 800e6aa:	3a01      	subs	r2, #1
 800e6ac:	42b2      	cmp	r2, r6
 800e6ae:	d109      	bne.n	800e6c4 <__gethex+0x388>
 800e6b0:	1171      	asrs	r1, r6, #5
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6b8:	f006 061f 	and.w	r6, r6, #31
 800e6bc:	fa02 f606 	lsl.w	r6, r2, r6
 800e6c0:	421e      	tst	r6, r3
 800e6c2:	d13a      	bne.n	800e73a <__gethex+0x3fe>
 800e6c4:	f045 0520 	orr.w	r5, r5, #32
 800e6c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6ca:	601c      	str	r4, [r3, #0]
 800e6cc:	9b02      	ldr	r3, [sp, #8]
 800e6ce:	601f      	str	r7, [r3, #0]
 800e6d0:	e6b0      	b.n	800e434 <__gethex+0xf8>
 800e6d2:	4299      	cmp	r1, r3
 800e6d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e6d8:	d8d9      	bhi.n	800e68e <__gethex+0x352>
 800e6da:	68a3      	ldr	r3, [r4, #8]
 800e6dc:	459b      	cmp	fp, r3
 800e6de:	db17      	blt.n	800e710 <__gethex+0x3d4>
 800e6e0:	6861      	ldr	r1, [r4, #4]
 800e6e2:	9801      	ldr	r0, [sp, #4]
 800e6e4:	3101      	adds	r1, #1
 800e6e6:	f7fd ffc9 	bl	800c67c <_Balloc>
 800e6ea:	4681      	mov	r9, r0
 800e6ec:	b918      	cbnz	r0, 800e6f6 <__gethex+0x3ba>
 800e6ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e758 <__gethex+0x41c>)
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	2184      	movs	r1, #132	@ 0x84
 800e6f4:	e6c5      	b.n	800e482 <__gethex+0x146>
 800e6f6:	6922      	ldr	r2, [r4, #16]
 800e6f8:	3202      	adds	r2, #2
 800e6fa:	f104 010c 	add.w	r1, r4, #12
 800e6fe:	0092      	lsls	r2, r2, #2
 800e700:	300c      	adds	r0, #12
 800e702:	f7f9 fee3 	bl	80084cc <memcpy>
 800e706:	4621      	mov	r1, r4
 800e708:	9801      	ldr	r0, [sp, #4]
 800e70a:	f7fd ffdc 	bl	800c6c6 <_Bfree>
 800e70e:	464c      	mov	r4, r9
 800e710:	6923      	ldr	r3, [r4, #16]
 800e712:	1c5a      	adds	r2, r3, #1
 800e714:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e718:	6122      	str	r2, [r4, #16]
 800e71a:	2201      	movs	r2, #1
 800e71c:	615a      	str	r2, [r3, #20]
 800e71e:	e7be      	b.n	800e69e <__gethex+0x362>
 800e720:	6922      	ldr	r2, [r4, #16]
 800e722:	455a      	cmp	r2, fp
 800e724:	dd0b      	ble.n	800e73e <__gethex+0x402>
 800e726:	2101      	movs	r1, #1
 800e728:	4620      	mov	r0, r4
 800e72a:	f7ff fda0 	bl	800e26e <rshift>
 800e72e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e732:	3701      	adds	r7, #1
 800e734:	42bb      	cmp	r3, r7
 800e736:	f6ff aee0 	blt.w	800e4fa <__gethex+0x1be>
 800e73a:	2501      	movs	r5, #1
 800e73c:	e7c2      	b.n	800e6c4 <__gethex+0x388>
 800e73e:	f016 061f 	ands.w	r6, r6, #31
 800e742:	d0fa      	beq.n	800e73a <__gethex+0x3fe>
 800e744:	4453      	add	r3, sl
 800e746:	f1c6 0620 	rsb	r6, r6, #32
 800e74a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e74e:	f7fe f853 	bl	800c7f8 <__hi0bits>
 800e752:	42b0      	cmp	r0, r6
 800e754:	dbe7      	blt.n	800e726 <__gethex+0x3ea>
 800e756:	e7f0      	b.n	800e73a <__gethex+0x3fe>
 800e758:	0800fb27 	.word	0x0800fb27

0800e75c <L_shift>:
 800e75c:	f1c2 0208 	rsb	r2, r2, #8
 800e760:	0092      	lsls	r2, r2, #2
 800e762:	b570      	push	{r4, r5, r6, lr}
 800e764:	f1c2 0620 	rsb	r6, r2, #32
 800e768:	6843      	ldr	r3, [r0, #4]
 800e76a:	6804      	ldr	r4, [r0, #0]
 800e76c:	fa03 f506 	lsl.w	r5, r3, r6
 800e770:	432c      	orrs	r4, r5
 800e772:	40d3      	lsrs	r3, r2
 800e774:	6004      	str	r4, [r0, #0]
 800e776:	f840 3f04 	str.w	r3, [r0, #4]!
 800e77a:	4288      	cmp	r0, r1
 800e77c:	d3f4      	bcc.n	800e768 <L_shift+0xc>
 800e77e:	bd70      	pop	{r4, r5, r6, pc}

0800e780 <__match>:
 800e780:	b530      	push	{r4, r5, lr}
 800e782:	6803      	ldr	r3, [r0, #0]
 800e784:	3301      	adds	r3, #1
 800e786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e78a:	b914      	cbnz	r4, 800e792 <__match+0x12>
 800e78c:	6003      	str	r3, [r0, #0]
 800e78e:	2001      	movs	r0, #1
 800e790:	bd30      	pop	{r4, r5, pc}
 800e792:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e796:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e79a:	2d19      	cmp	r5, #25
 800e79c:	bf98      	it	ls
 800e79e:	3220      	addls	r2, #32
 800e7a0:	42a2      	cmp	r2, r4
 800e7a2:	d0f0      	beq.n	800e786 <__match+0x6>
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	e7f3      	b.n	800e790 <__match+0x10>

0800e7a8 <__hexnan>:
 800e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	680b      	ldr	r3, [r1, #0]
 800e7ae:	6801      	ldr	r1, [r0, #0]
 800e7b0:	115e      	asrs	r6, r3, #5
 800e7b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e7b6:	f013 031f 	ands.w	r3, r3, #31
 800e7ba:	b087      	sub	sp, #28
 800e7bc:	bf18      	it	ne
 800e7be:	3604      	addne	r6, #4
 800e7c0:	2500      	movs	r5, #0
 800e7c2:	1f37      	subs	r7, r6, #4
 800e7c4:	4682      	mov	sl, r0
 800e7c6:	4690      	mov	r8, r2
 800e7c8:	9301      	str	r3, [sp, #4]
 800e7ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800e7ce:	46b9      	mov	r9, r7
 800e7d0:	463c      	mov	r4, r7
 800e7d2:	9502      	str	r5, [sp, #8]
 800e7d4:	46ab      	mov	fp, r5
 800e7d6:	784a      	ldrb	r2, [r1, #1]
 800e7d8:	1c4b      	adds	r3, r1, #1
 800e7da:	9303      	str	r3, [sp, #12]
 800e7dc:	b342      	cbz	r2, 800e830 <__hexnan+0x88>
 800e7de:	4610      	mov	r0, r2
 800e7e0:	9105      	str	r1, [sp, #20]
 800e7e2:	9204      	str	r2, [sp, #16]
 800e7e4:	f7ff fd95 	bl	800e312 <__hexdig_fun>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d151      	bne.n	800e890 <__hexnan+0xe8>
 800e7ec:	9a04      	ldr	r2, [sp, #16]
 800e7ee:	9905      	ldr	r1, [sp, #20]
 800e7f0:	2a20      	cmp	r2, #32
 800e7f2:	d818      	bhi.n	800e826 <__hexnan+0x7e>
 800e7f4:	9b02      	ldr	r3, [sp, #8]
 800e7f6:	459b      	cmp	fp, r3
 800e7f8:	dd13      	ble.n	800e822 <__hexnan+0x7a>
 800e7fa:	454c      	cmp	r4, r9
 800e7fc:	d206      	bcs.n	800e80c <__hexnan+0x64>
 800e7fe:	2d07      	cmp	r5, #7
 800e800:	dc04      	bgt.n	800e80c <__hexnan+0x64>
 800e802:	462a      	mov	r2, r5
 800e804:	4649      	mov	r1, r9
 800e806:	4620      	mov	r0, r4
 800e808:	f7ff ffa8 	bl	800e75c <L_shift>
 800e80c:	4544      	cmp	r4, r8
 800e80e:	d952      	bls.n	800e8b6 <__hexnan+0x10e>
 800e810:	2300      	movs	r3, #0
 800e812:	f1a4 0904 	sub.w	r9, r4, #4
 800e816:	f844 3c04 	str.w	r3, [r4, #-4]
 800e81a:	f8cd b008 	str.w	fp, [sp, #8]
 800e81e:	464c      	mov	r4, r9
 800e820:	461d      	mov	r5, r3
 800e822:	9903      	ldr	r1, [sp, #12]
 800e824:	e7d7      	b.n	800e7d6 <__hexnan+0x2e>
 800e826:	2a29      	cmp	r2, #41	@ 0x29
 800e828:	d157      	bne.n	800e8da <__hexnan+0x132>
 800e82a:	3102      	adds	r1, #2
 800e82c:	f8ca 1000 	str.w	r1, [sl]
 800e830:	f1bb 0f00 	cmp.w	fp, #0
 800e834:	d051      	beq.n	800e8da <__hexnan+0x132>
 800e836:	454c      	cmp	r4, r9
 800e838:	d206      	bcs.n	800e848 <__hexnan+0xa0>
 800e83a:	2d07      	cmp	r5, #7
 800e83c:	dc04      	bgt.n	800e848 <__hexnan+0xa0>
 800e83e:	462a      	mov	r2, r5
 800e840:	4649      	mov	r1, r9
 800e842:	4620      	mov	r0, r4
 800e844:	f7ff ff8a 	bl	800e75c <L_shift>
 800e848:	4544      	cmp	r4, r8
 800e84a:	d936      	bls.n	800e8ba <__hexnan+0x112>
 800e84c:	f1a8 0204 	sub.w	r2, r8, #4
 800e850:	4623      	mov	r3, r4
 800e852:	f853 1b04 	ldr.w	r1, [r3], #4
 800e856:	f842 1f04 	str.w	r1, [r2, #4]!
 800e85a:	429f      	cmp	r7, r3
 800e85c:	d2f9      	bcs.n	800e852 <__hexnan+0xaa>
 800e85e:	1b3b      	subs	r3, r7, r4
 800e860:	f023 0303 	bic.w	r3, r3, #3
 800e864:	3304      	adds	r3, #4
 800e866:	3401      	adds	r4, #1
 800e868:	3e03      	subs	r6, #3
 800e86a:	42b4      	cmp	r4, r6
 800e86c:	bf88      	it	hi
 800e86e:	2304      	movhi	r3, #4
 800e870:	4443      	add	r3, r8
 800e872:	2200      	movs	r2, #0
 800e874:	f843 2b04 	str.w	r2, [r3], #4
 800e878:	429f      	cmp	r7, r3
 800e87a:	d2fb      	bcs.n	800e874 <__hexnan+0xcc>
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	b91b      	cbnz	r3, 800e888 <__hexnan+0xe0>
 800e880:	4547      	cmp	r7, r8
 800e882:	d128      	bne.n	800e8d6 <__hexnan+0x12e>
 800e884:	2301      	movs	r3, #1
 800e886:	603b      	str	r3, [r7, #0]
 800e888:	2005      	movs	r0, #5
 800e88a:	b007      	add	sp, #28
 800e88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e890:	3501      	adds	r5, #1
 800e892:	2d08      	cmp	r5, #8
 800e894:	f10b 0b01 	add.w	fp, fp, #1
 800e898:	dd06      	ble.n	800e8a8 <__hexnan+0x100>
 800e89a:	4544      	cmp	r4, r8
 800e89c:	d9c1      	bls.n	800e822 <__hexnan+0x7a>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e8a4:	2501      	movs	r5, #1
 800e8a6:	3c04      	subs	r4, #4
 800e8a8:	6822      	ldr	r2, [r4, #0]
 800e8aa:	f000 000f 	and.w	r0, r0, #15
 800e8ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e8b2:	6020      	str	r0, [r4, #0]
 800e8b4:	e7b5      	b.n	800e822 <__hexnan+0x7a>
 800e8b6:	2508      	movs	r5, #8
 800e8b8:	e7b3      	b.n	800e822 <__hexnan+0x7a>
 800e8ba:	9b01      	ldr	r3, [sp, #4]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d0dd      	beq.n	800e87c <__hexnan+0xd4>
 800e8c0:	f1c3 0320 	rsb	r3, r3, #32
 800e8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c8:	40da      	lsrs	r2, r3
 800e8ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e8ce:	4013      	ands	r3, r2
 800e8d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e8d4:	e7d2      	b.n	800e87c <__hexnan+0xd4>
 800e8d6:	3f04      	subs	r7, #4
 800e8d8:	e7d0      	b.n	800e87c <__hexnan+0xd4>
 800e8da:	2004      	movs	r0, #4
 800e8dc:	e7d5      	b.n	800e88a <__hexnan+0xe2>
	...

0800e8e0 <fiprintf>:
 800e8e0:	b40e      	push	{r1, r2, r3}
 800e8e2:	b503      	push	{r0, r1, lr}
 800e8e4:	4601      	mov	r1, r0
 800e8e6:	ab03      	add	r3, sp, #12
 800e8e8:	4805      	ldr	r0, [pc, #20]	@ (800e900 <fiprintf+0x20>)
 800e8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8ee:	6800      	ldr	r0, [r0, #0]
 800e8f0:	9301      	str	r3, [sp, #4]
 800e8f2:	f000 f839 	bl	800e968 <_vfiprintf_r>
 800e8f6:	b002      	add	sp, #8
 800e8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8fc:	b003      	add	sp, #12
 800e8fe:	4770      	bx	lr
 800e900:	20000050 	.word	0x20000050

0800e904 <__sprint_r>:
 800e904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e908:	6893      	ldr	r3, [r2, #8]
 800e90a:	4680      	mov	r8, r0
 800e90c:	460e      	mov	r6, r1
 800e90e:	4614      	mov	r4, r2
 800e910:	b343      	cbz	r3, 800e964 <__sprint_r+0x60>
 800e912:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800e914:	049d      	lsls	r5, r3, #18
 800e916:	d522      	bpl.n	800e95e <__sprint_r+0x5a>
 800e918:	6815      	ldr	r5, [r2, #0]
 800e91a:	68a0      	ldr	r0, [r4, #8]
 800e91c:	3508      	adds	r5, #8
 800e91e:	b928      	cbnz	r0, 800e92c <__sprint_r+0x28>
 800e920:	2300      	movs	r3, #0
 800e922:	60a3      	str	r3, [r4, #8]
 800e924:	2300      	movs	r3, #0
 800e926:	6063      	str	r3, [r4, #4]
 800e928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e92c:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800e930:	f04f 0900 	mov.w	r9, #0
 800e934:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800e938:	45ca      	cmp	sl, r9
 800e93a:	dc05      	bgt.n	800e948 <__sprint_r+0x44>
 800e93c:	68a3      	ldr	r3, [r4, #8]
 800e93e:	f027 0703 	bic.w	r7, r7, #3
 800e942:	1bdb      	subs	r3, r3, r7
 800e944:	60a3      	str	r3, [r4, #8]
 800e946:	e7e8      	b.n	800e91a <__sprint_r+0x16>
 800e948:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800e94c:	4632      	mov	r2, r6
 800e94e:	4640      	mov	r0, r8
 800e950:	f000 feb5 	bl	800f6be <_fputwc_r>
 800e954:	1c43      	adds	r3, r0, #1
 800e956:	d0e3      	beq.n	800e920 <__sprint_r+0x1c>
 800e958:	f109 0901 	add.w	r9, r9, #1
 800e95c:	e7ec      	b.n	800e938 <__sprint_r+0x34>
 800e95e:	f000 fccb 	bl	800f2f8 <__sfvwrite_r>
 800e962:	e7dd      	b.n	800e920 <__sprint_r+0x1c>
 800e964:	4618      	mov	r0, r3
 800e966:	e7dd      	b.n	800e924 <__sprint_r+0x20>

0800e968 <_vfiprintf_r>:
 800e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96c:	b0bb      	sub	sp, #236	@ 0xec
 800e96e:	460f      	mov	r7, r1
 800e970:	4693      	mov	fp, r2
 800e972:	461c      	mov	r4, r3
 800e974:	461d      	mov	r5, r3
 800e976:	9000      	str	r0, [sp, #0]
 800e978:	b118      	cbz	r0, 800e982 <_vfiprintf_r+0x1a>
 800e97a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e97c:	b90b      	cbnz	r3, 800e982 <_vfiprintf_r+0x1a>
 800e97e:	f7f9 fc1f 	bl	80081c0 <__sinit>
 800e982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e984:	07db      	lsls	r3, r3, #31
 800e986:	d405      	bmi.n	800e994 <_vfiprintf_r+0x2c>
 800e988:	89bb      	ldrh	r3, [r7, #12]
 800e98a:	059e      	lsls	r6, r3, #22
 800e98c:	d402      	bmi.n	800e994 <_vfiprintf_r+0x2c>
 800e98e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e990:	f7f9 fd9a 	bl	80084c8 <__retarget_lock_acquire_recursive>
 800e994:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e998:	0498      	lsls	r0, r3, #18
 800e99a:	d406      	bmi.n	800e9aa <_vfiprintf_r+0x42>
 800e99c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e9a0:	81bb      	strh	r3, [r7, #12]
 800e9a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e9a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800e9aa:	89bb      	ldrh	r3, [r7, #12]
 800e9ac:	0719      	lsls	r1, r3, #28
 800e9ae:	d501      	bpl.n	800e9b4 <_vfiprintf_r+0x4c>
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	b9ab      	cbnz	r3, 800e9e0 <_vfiprintf_r+0x78>
 800e9b4:	9800      	ldr	r0, [sp, #0]
 800e9b6:	4639      	mov	r1, r7
 800e9b8:	f000 fdea 	bl	800f590 <__swsetup_r>
 800e9bc:	b180      	cbz	r0, 800e9e0 <_vfiprintf_r+0x78>
 800e9be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9c0:	07da      	lsls	r2, r3, #31
 800e9c2:	d506      	bpl.n	800e9d2 <_vfiprintf_r+0x6a>
 800e9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c8:	9303      	str	r3, [sp, #12]
 800e9ca:	9803      	ldr	r0, [sp, #12]
 800e9cc:	b03b      	add	sp, #236	@ 0xec
 800e9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d2:	89bb      	ldrh	r3, [r7, #12]
 800e9d4:	059b      	lsls	r3, r3, #22
 800e9d6:	d4f5      	bmi.n	800e9c4 <_vfiprintf_r+0x5c>
 800e9d8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e9da:	f7f9 fd76 	bl	80084ca <__retarget_lock_release_recursive>
 800e9de:	e7f1      	b.n	800e9c4 <_vfiprintf_r+0x5c>
 800e9e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e9e4:	f003 021a 	and.w	r2, r3, #26
 800e9e8:	2a0a      	cmp	r2, #10
 800e9ea:	d114      	bne.n	800ea16 <_vfiprintf_r+0xae>
 800e9ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e9f0:	2a00      	cmp	r2, #0
 800e9f2:	db10      	blt.n	800ea16 <_vfiprintf_r+0xae>
 800e9f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e9f6:	07d6      	lsls	r6, r2, #31
 800e9f8:	d404      	bmi.n	800ea04 <_vfiprintf_r+0x9c>
 800e9fa:	059d      	lsls	r5, r3, #22
 800e9fc:	d402      	bmi.n	800ea04 <_vfiprintf_r+0x9c>
 800e9fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ea00:	f7f9 fd63 	bl	80084ca <__retarget_lock_release_recursive>
 800ea04:	9800      	ldr	r0, [sp, #0]
 800ea06:	4623      	mov	r3, r4
 800ea08:	465a      	mov	r2, fp
 800ea0a:	4639      	mov	r1, r7
 800ea0c:	b03b      	add	sp, #236	@ 0xec
 800ea0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea12:	f000 bc31 	b.w	800f278 <__sbprintf>
 800ea16:	2300      	movs	r3, #0
 800ea18:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800ea1c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ea20:	ae11      	add	r6, sp, #68	@ 0x44
 800ea22:	960e      	str	r6, [sp, #56]	@ 0x38
 800ea24:	9307      	str	r3, [sp, #28]
 800ea26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea28:	9303      	str	r3, [sp, #12]
 800ea2a:	465b      	mov	r3, fp
 800ea2c:	461c      	mov	r4, r3
 800ea2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea32:	b10a      	cbz	r2, 800ea38 <_vfiprintf_r+0xd0>
 800ea34:	2a25      	cmp	r2, #37	@ 0x25
 800ea36:	d1f9      	bne.n	800ea2c <_vfiprintf_r+0xc4>
 800ea38:	ebb4 080b 	subs.w	r8, r4, fp
 800ea3c:	d00d      	beq.n	800ea5a <_vfiprintf_r+0xf2>
 800ea3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea40:	4443      	add	r3, r8
 800ea42:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea46:	3301      	adds	r3, #1
 800ea48:	2b07      	cmp	r3, #7
 800ea4a:	e9c6 b800 	strd	fp, r8, [r6]
 800ea4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea50:	dc75      	bgt.n	800eb3e <_vfiprintf_r+0x1d6>
 800ea52:	3608      	adds	r6, #8
 800ea54:	9b03      	ldr	r3, [sp, #12]
 800ea56:	4443      	add	r3, r8
 800ea58:	9303      	str	r3, [sp, #12]
 800ea5a:	7823      	ldrb	r3, [r4, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f000 83cd 	beq.w	800f1fc <_vfiprintf_r+0x894>
 800ea62:	2300      	movs	r3, #0
 800ea64:	f04f 32ff 	mov.w	r2, #4294967295
 800ea68:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ea6c:	3401      	adds	r4, #1
 800ea6e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ea72:	469a      	mov	sl, r3
 800ea74:	46a3      	mov	fp, r4
 800ea76:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800ea7a:	f1a3 0220 	sub.w	r2, r3, #32
 800ea7e:	2a5a      	cmp	r2, #90	@ 0x5a
 800ea80:	f200 8316 	bhi.w	800f0b0 <_vfiprintf_r+0x748>
 800ea84:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ea88:	0314009a 	.word	0x0314009a
 800ea8c:	00a20314 	.word	0x00a20314
 800ea90:	03140314 	.word	0x03140314
 800ea94:	00820314 	.word	0x00820314
 800ea98:	03140314 	.word	0x03140314
 800ea9c:	00af00a5 	.word	0x00af00a5
 800eaa0:	00ac0314 	.word	0x00ac0314
 800eaa4:	031400b1 	.word	0x031400b1
 800eaa8:	00d000cd 	.word	0x00d000cd
 800eaac:	00d000d0 	.word	0x00d000d0
 800eab0:	00d000d0 	.word	0x00d000d0
 800eab4:	00d000d0 	.word	0x00d000d0
 800eab8:	00d000d0 	.word	0x00d000d0
 800eabc:	03140314 	.word	0x03140314
 800eac0:	03140314 	.word	0x03140314
 800eac4:	03140314 	.word	0x03140314
 800eac8:	03140314 	.word	0x03140314
 800eacc:	00f70314 	.word	0x00f70314
 800ead0:	03140104 	.word	0x03140104
 800ead4:	03140314 	.word	0x03140314
 800ead8:	03140314 	.word	0x03140314
 800eadc:	03140314 	.word	0x03140314
 800eae0:	03140314 	.word	0x03140314
 800eae4:	01520314 	.word	0x01520314
 800eae8:	03140314 	.word	0x03140314
 800eaec:	019a0314 	.word	0x019a0314
 800eaf0:	027a0314 	.word	0x027a0314
 800eaf4:	03140314 	.word	0x03140314
 800eaf8:	0314029a 	.word	0x0314029a
 800eafc:	03140314 	.word	0x03140314
 800eb00:	03140314 	.word	0x03140314
 800eb04:	03140314 	.word	0x03140314
 800eb08:	03140314 	.word	0x03140314
 800eb0c:	00f70314 	.word	0x00f70314
 800eb10:	03140106 	.word	0x03140106
 800eb14:	03140314 	.word	0x03140314
 800eb18:	010600e0 	.word	0x010600e0
 800eb1c:	031400f1 	.word	0x031400f1
 800eb20:	031400eb 	.word	0x031400eb
 800eb24:	01540132 	.word	0x01540132
 800eb28:	00f10189 	.word	0x00f10189
 800eb2c:	019a0314 	.word	0x019a0314
 800eb30:	027c0098 	.word	0x027c0098
 800eb34:	03140314 	.word	0x03140314
 800eb38:	03140065 	.word	0x03140065
 800eb3c:	0098      	.short	0x0098
 800eb3e:	9800      	ldr	r0, [sp, #0]
 800eb40:	aa0e      	add	r2, sp, #56	@ 0x38
 800eb42:	4639      	mov	r1, r7
 800eb44:	f7ff fede 	bl	800e904 <__sprint_r>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	f040 8336 	bne.w	800f1ba <_vfiprintf_r+0x852>
 800eb4e:	ae11      	add	r6, sp, #68	@ 0x44
 800eb50:	e780      	b.n	800ea54 <_vfiprintf_r+0xec>
 800eb52:	4a99      	ldr	r2, [pc, #612]	@ (800edb8 <_vfiprintf_r+0x450>)
 800eb54:	9205      	str	r2, [sp, #20]
 800eb56:	f01a 0220 	ands.w	r2, sl, #32
 800eb5a:	f000 8231 	beq.w	800efc0 <_vfiprintf_r+0x658>
 800eb5e:	3507      	adds	r5, #7
 800eb60:	f025 0507 	bic.w	r5, r5, #7
 800eb64:	46a8      	mov	r8, r5
 800eb66:	686d      	ldr	r5, [r5, #4]
 800eb68:	f858 4b08 	ldr.w	r4, [r8], #8
 800eb6c:	f01a 0f01 	tst.w	sl, #1
 800eb70:	d009      	beq.n	800eb86 <_vfiprintf_r+0x21e>
 800eb72:	ea54 0205 	orrs.w	r2, r4, r5
 800eb76:	bf1f      	itttt	ne
 800eb78:	2230      	movne	r2, #48	@ 0x30
 800eb7a:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800eb7e:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800eb82:	f04a 0a02 	orrne.w	sl, sl, #2
 800eb86:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800eb8a:	e112      	b.n	800edb2 <_vfiprintf_r+0x44a>
 800eb8c:	9800      	ldr	r0, [sp, #0]
 800eb8e:	f7f9 fc25 	bl	80083dc <_localeconv_r>
 800eb92:	6843      	ldr	r3, [r0, #4]
 800eb94:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7f1 fb9a 	bl	80002d0 <strlen>
 800eb9c:	9007      	str	r0, [sp, #28]
 800eb9e:	9800      	ldr	r0, [sp, #0]
 800eba0:	f7f9 fc1c 	bl	80083dc <_localeconv_r>
 800eba4:	6883      	ldr	r3, [r0, #8]
 800eba6:	9306      	str	r3, [sp, #24]
 800eba8:	9b07      	ldr	r3, [sp, #28]
 800ebaa:	b12b      	cbz	r3, 800ebb8 <_vfiprintf_r+0x250>
 800ebac:	9b06      	ldr	r3, [sp, #24]
 800ebae:	b11b      	cbz	r3, 800ebb8 <_vfiprintf_r+0x250>
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	b10b      	cbz	r3, 800ebb8 <_vfiprintf_r+0x250>
 800ebb4:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800ebb8:	465c      	mov	r4, fp
 800ebba:	e75b      	b.n	800ea74 <_vfiprintf_r+0x10c>
 800ebbc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d1f9      	bne.n	800ebb8 <_vfiprintf_r+0x250>
 800ebc4:	2320      	movs	r3, #32
 800ebc6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ebca:	e7f5      	b.n	800ebb8 <_vfiprintf_r+0x250>
 800ebcc:	f04a 0a01 	orr.w	sl, sl, #1
 800ebd0:	e7f2      	b.n	800ebb8 <_vfiprintf_r+0x250>
 800ebd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebd6:	9302      	str	r3, [sp, #8]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	daed      	bge.n	800ebb8 <_vfiprintf_r+0x250>
 800ebdc:	425b      	negs	r3, r3
 800ebde:	9302      	str	r3, [sp, #8]
 800ebe0:	f04a 0a04 	orr.w	sl, sl, #4
 800ebe4:	e7e8      	b.n	800ebb8 <_vfiprintf_r+0x250>
 800ebe6:	232b      	movs	r3, #43	@ 0x2b
 800ebe8:	e7ed      	b.n	800ebc6 <_vfiprintf_r+0x25e>
 800ebea:	465a      	mov	r2, fp
 800ebec:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ebf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebf2:	d112      	bne.n	800ec1a <_vfiprintf_r+0x2b2>
 800ebf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebfc:	9301      	str	r3, [sp, #4]
 800ebfe:	4693      	mov	fp, r2
 800ec00:	e7da      	b.n	800ebb8 <_vfiprintf_r+0x250>
 800ec02:	9b01      	ldr	r3, [sp, #4]
 800ec04:	fb00 1303 	mla	r3, r0, r3, r1
 800ec08:	9301      	str	r3, [sp, #4]
 800ec0a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec0e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ec12:	2909      	cmp	r1, #9
 800ec14:	d9f5      	bls.n	800ec02 <_vfiprintf_r+0x29a>
 800ec16:	4693      	mov	fp, r2
 800ec18:	e72f      	b.n	800ea7a <_vfiprintf_r+0x112>
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	9101      	str	r1, [sp, #4]
 800ec1e:	200a      	movs	r0, #10
 800ec20:	e7f5      	b.n	800ec0e <_vfiprintf_r+0x2a6>
 800ec22:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800ec26:	e7c7      	b.n	800ebb8 <_vfiprintf_r+0x250>
 800ec28:	2100      	movs	r1, #0
 800ec2a:	465a      	mov	r2, fp
 800ec2c:	9102      	str	r1, [sp, #8]
 800ec2e:	200a      	movs	r0, #10
 800ec30:	9902      	ldr	r1, [sp, #8]
 800ec32:	3b30      	subs	r3, #48	@ 0x30
 800ec34:	fb00 3301 	mla	r3, r0, r1, r3
 800ec38:	9302      	str	r3, [sp, #8]
 800ec3a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec3e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ec42:	2909      	cmp	r1, #9
 800ec44:	d9f4      	bls.n	800ec30 <_vfiprintf_r+0x2c8>
 800ec46:	e7e6      	b.n	800ec16 <_vfiprintf_r+0x2ae>
 800ec48:	f89b 3000 	ldrb.w	r3, [fp]
 800ec4c:	2b68      	cmp	r3, #104	@ 0x68
 800ec4e:	bf06      	itte	eq
 800ec50:	f10b 0b01 	addeq.w	fp, fp, #1
 800ec54:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800ec58:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800ec5c:	e7ac      	b.n	800ebb8 <_vfiprintf_r+0x250>
 800ec5e:	f89b 3000 	ldrb.w	r3, [fp]
 800ec62:	2b6c      	cmp	r3, #108	@ 0x6c
 800ec64:	d104      	bne.n	800ec70 <_vfiprintf_r+0x308>
 800ec66:	f10b 0b01 	add.w	fp, fp, #1
 800ec6a:	f04a 0a20 	orr.w	sl, sl, #32
 800ec6e:	e7a3      	b.n	800ebb8 <_vfiprintf_r+0x250>
 800ec70:	f04a 0a10 	orr.w	sl, sl, #16
 800ec74:	e7a0      	b.n	800ebb8 <_vfiprintf_r+0x250>
 800ec76:	46a8      	mov	r8, r5
 800ec78:	2400      	movs	r4, #0
 800ec7a:	f858 3b04 	ldr.w	r3, [r8], #4
 800ec7e:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ec82:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ec86:	2301      	movs	r3, #1
 800ec88:	9301      	str	r3, [sp, #4]
 800ec8a:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800ec8e:	e0ab      	b.n	800ede8 <_vfiprintf_r+0x480>
 800ec90:	f04a 0a10 	orr.w	sl, sl, #16
 800ec94:	f01a 0f20 	tst.w	sl, #32
 800ec98:	d011      	beq.n	800ecbe <_vfiprintf_r+0x356>
 800ec9a:	3507      	adds	r5, #7
 800ec9c:	f025 0507 	bic.w	r5, r5, #7
 800eca0:	46a8      	mov	r8, r5
 800eca2:	686d      	ldr	r5, [r5, #4]
 800eca4:	f858 4b08 	ldr.w	r4, [r8], #8
 800eca8:	2d00      	cmp	r5, #0
 800ecaa:	da06      	bge.n	800ecba <_vfiprintf_r+0x352>
 800ecac:	4264      	negs	r4, r4
 800ecae:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800ecb2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ecb6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ecba:	2301      	movs	r3, #1
 800ecbc:	e048      	b.n	800ed50 <_vfiprintf_r+0x3e8>
 800ecbe:	46a8      	mov	r8, r5
 800ecc0:	f01a 0f10 	tst.w	sl, #16
 800ecc4:	f858 5b04 	ldr.w	r5, [r8], #4
 800ecc8:	d002      	beq.n	800ecd0 <_vfiprintf_r+0x368>
 800ecca:	462c      	mov	r4, r5
 800eccc:	17ed      	asrs	r5, r5, #31
 800ecce:	e7eb      	b.n	800eca8 <_vfiprintf_r+0x340>
 800ecd0:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ecd4:	d003      	beq.n	800ecde <_vfiprintf_r+0x376>
 800ecd6:	b22c      	sxth	r4, r5
 800ecd8:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ecdc:	e7e4      	b.n	800eca8 <_vfiprintf_r+0x340>
 800ecde:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ece2:	d0f2      	beq.n	800ecca <_vfiprintf_r+0x362>
 800ece4:	b26c      	sxtb	r4, r5
 800ece6:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ecea:	e7dd      	b.n	800eca8 <_vfiprintf_r+0x340>
 800ecec:	f01a 0f20 	tst.w	sl, #32
 800ecf0:	d007      	beq.n	800ed02 <_vfiprintf_r+0x39a>
 800ecf2:	9a03      	ldr	r2, [sp, #12]
 800ecf4:	682b      	ldr	r3, [r5, #0]
 800ecf6:	9903      	ldr	r1, [sp, #12]
 800ecf8:	17d2      	asrs	r2, r2, #31
 800ecfa:	e9c3 1200 	strd	r1, r2, [r3]
 800ecfe:	3504      	adds	r5, #4
 800ed00:	e693      	b.n	800ea2a <_vfiprintf_r+0xc2>
 800ed02:	f01a 0f10 	tst.w	sl, #16
 800ed06:	d003      	beq.n	800ed10 <_vfiprintf_r+0x3a8>
 800ed08:	682b      	ldr	r3, [r5, #0]
 800ed0a:	9a03      	ldr	r2, [sp, #12]
 800ed0c:	601a      	str	r2, [r3, #0]
 800ed0e:	e7f6      	b.n	800ecfe <_vfiprintf_r+0x396>
 800ed10:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ed14:	d003      	beq.n	800ed1e <_vfiprintf_r+0x3b6>
 800ed16:	682b      	ldr	r3, [r5, #0]
 800ed18:	9a03      	ldr	r2, [sp, #12]
 800ed1a:	801a      	strh	r2, [r3, #0]
 800ed1c:	e7ef      	b.n	800ecfe <_vfiprintf_r+0x396>
 800ed1e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ed22:	d0f1      	beq.n	800ed08 <_vfiprintf_r+0x3a0>
 800ed24:	682b      	ldr	r3, [r5, #0]
 800ed26:	9a03      	ldr	r2, [sp, #12]
 800ed28:	701a      	strb	r2, [r3, #0]
 800ed2a:	e7e8      	b.n	800ecfe <_vfiprintf_r+0x396>
 800ed2c:	f04a 0a10 	orr.w	sl, sl, #16
 800ed30:	f01a 0320 	ands.w	r3, sl, #32
 800ed34:	d01f      	beq.n	800ed76 <_vfiprintf_r+0x40e>
 800ed36:	3507      	adds	r5, #7
 800ed38:	f025 0507 	bic.w	r5, r5, #7
 800ed3c:	46a8      	mov	r8, r5
 800ed3e:	686d      	ldr	r5, [r5, #4]
 800ed40:	f858 4b08 	ldr.w	r4, [r8], #8
 800ed44:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800ed48:	2300      	movs	r3, #0
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800ed50:	9a01      	ldr	r2, [sp, #4]
 800ed52:	3201      	adds	r2, #1
 800ed54:	f000 825f 	beq.w	800f216 <_vfiprintf_r+0x8ae>
 800ed58:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800ed5c:	9204      	str	r2, [sp, #16]
 800ed5e:	ea54 0205 	orrs.w	r2, r4, r5
 800ed62:	f040 825e 	bne.w	800f222 <_vfiprintf_r+0x8ba>
 800ed66:	9a01      	ldr	r2, [sp, #4]
 800ed68:	2a00      	cmp	r2, #0
 800ed6a:	f000 8198 	beq.w	800f09e <_vfiprintf_r+0x736>
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	f040 825a 	bne.w	800f228 <_vfiprintf_r+0x8c0>
 800ed74:	e13b      	b.n	800efee <_vfiprintf_r+0x686>
 800ed76:	46a8      	mov	r8, r5
 800ed78:	f01a 0510 	ands.w	r5, sl, #16
 800ed7c:	f858 4b04 	ldr.w	r4, [r8], #4
 800ed80:	d001      	beq.n	800ed86 <_vfiprintf_r+0x41e>
 800ed82:	461d      	mov	r5, r3
 800ed84:	e7de      	b.n	800ed44 <_vfiprintf_r+0x3dc>
 800ed86:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ed8a:	d001      	beq.n	800ed90 <_vfiprintf_r+0x428>
 800ed8c:	b2a4      	uxth	r4, r4
 800ed8e:	e7d9      	b.n	800ed44 <_vfiprintf_r+0x3dc>
 800ed90:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ed94:	d0d6      	beq.n	800ed44 <_vfiprintf_r+0x3dc>
 800ed96:	b2e4      	uxtb	r4, r4
 800ed98:	e7f3      	b.n	800ed82 <_vfiprintf_r+0x41a>
 800ed9a:	46a8      	mov	r8, r5
 800ed9c:	f647 0330 	movw	r3, #30768	@ 0x7830
 800eda0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800eda4:	f858 4b04 	ldr.w	r4, [r8], #4
 800eda8:	4b03      	ldr	r3, [pc, #12]	@ (800edb8 <_vfiprintf_r+0x450>)
 800edaa:	9305      	str	r3, [sp, #20]
 800edac:	2500      	movs	r5, #0
 800edae:	f04a 0a02 	orr.w	sl, sl, #2
 800edb2:	2302      	movs	r3, #2
 800edb4:	e7c9      	b.n	800ed4a <_vfiprintf_r+0x3e2>
 800edb6:	bf00      	nop
 800edb8:	0800fa85 	.word	0x0800fa85
 800edbc:	9b01      	ldr	r3, [sp, #4]
 800edbe:	46a8      	mov	r8, r5
 800edc0:	1c5c      	adds	r4, r3, #1
 800edc2:	f04f 0500 	mov.w	r5, #0
 800edc6:	f858 9b04 	ldr.w	r9, [r8], #4
 800edca:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800edce:	f000 80d0 	beq.w	800ef72 <_vfiprintf_r+0x60a>
 800edd2:	461a      	mov	r2, r3
 800edd4:	4629      	mov	r1, r5
 800edd6:	4648      	mov	r0, r9
 800edd8:	f7f1 fa2a 	bl	8000230 <memchr>
 800eddc:	4604      	mov	r4, r0
 800edde:	b118      	cbz	r0, 800ede8 <_vfiprintf_r+0x480>
 800ede0:	eba0 0309 	sub.w	r3, r0, r9
 800ede4:	9301      	str	r3, [sp, #4]
 800ede6:	462c      	mov	r4, r5
 800ede8:	9b01      	ldr	r3, [sp, #4]
 800edea:	42a3      	cmp	r3, r4
 800edec:	bfb8      	it	lt
 800edee:	4623      	movlt	r3, r4
 800edf0:	9304      	str	r3, [sp, #16]
 800edf2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800edf6:	b113      	cbz	r3, 800edfe <_vfiprintf_r+0x496>
 800edf8:	9b04      	ldr	r3, [sp, #16]
 800edfa:	3301      	adds	r3, #1
 800edfc:	9304      	str	r3, [sp, #16]
 800edfe:	f01a 0302 	ands.w	r3, sl, #2
 800ee02:	9308      	str	r3, [sp, #32]
 800ee04:	bf1e      	ittt	ne
 800ee06:	9b04      	ldrne	r3, [sp, #16]
 800ee08:	3302      	addne	r3, #2
 800ee0a:	9304      	strne	r3, [sp, #16]
 800ee0c:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800ee10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee12:	d11f      	bne.n	800ee54 <_vfiprintf_r+0x4ec>
 800ee14:	9b02      	ldr	r3, [sp, #8]
 800ee16:	9a04      	ldr	r2, [sp, #16]
 800ee18:	1a9d      	subs	r5, r3, r2
 800ee1a:	2d00      	cmp	r5, #0
 800ee1c:	dd1a      	ble.n	800ee54 <_vfiprintf_r+0x4ec>
 800ee1e:	4ba9      	ldr	r3, [pc, #676]	@ (800f0c4 <_vfiprintf_r+0x75c>)
 800ee20:	6033      	str	r3, [r6, #0]
 800ee22:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800ee26:	2d10      	cmp	r5, #16
 800ee28:	f102 0201 	add.w	r2, r2, #1
 800ee2c:	f106 0008 	add.w	r0, r6, #8
 800ee30:	f300 814e 	bgt.w	800f0d0 <_vfiprintf_r+0x768>
 800ee34:	6075      	str	r5, [r6, #4]
 800ee36:	2a07      	cmp	r2, #7
 800ee38:	4465      	add	r5, ip
 800ee3a:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800ee3e:	f340 815a 	ble.w	800f0f6 <_vfiprintf_r+0x78e>
 800ee42:	9800      	ldr	r0, [sp, #0]
 800ee44:	aa0e      	add	r2, sp, #56	@ 0x38
 800ee46:	4639      	mov	r1, r7
 800ee48:	f7ff fd5c 	bl	800e904 <__sprint_r>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	f040 81b4 	bne.w	800f1ba <_vfiprintf_r+0x852>
 800ee52:	ae11      	add	r6, sp, #68	@ 0x44
 800ee54:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800ee58:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ee5c:	b161      	cbz	r1, 800ee78 <_vfiprintf_r+0x510>
 800ee5e:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800ee62:	3301      	adds	r3, #1
 800ee64:	6031      	str	r1, [r6, #0]
 800ee66:	2101      	movs	r1, #1
 800ee68:	440a      	add	r2, r1
 800ee6a:	2b07      	cmp	r3, #7
 800ee6c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800ee70:	6071      	str	r1, [r6, #4]
 800ee72:	f300 8142 	bgt.w	800f0fa <_vfiprintf_r+0x792>
 800ee76:	3608      	adds	r6, #8
 800ee78:	9908      	ldr	r1, [sp, #32]
 800ee7a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ee7e:	b159      	cbz	r1, 800ee98 <_vfiprintf_r+0x530>
 800ee80:	a90d      	add	r1, sp, #52	@ 0x34
 800ee82:	3301      	adds	r3, #1
 800ee84:	6031      	str	r1, [r6, #0]
 800ee86:	2102      	movs	r1, #2
 800ee88:	440a      	add	r2, r1
 800ee8a:	2b07      	cmp	r3, #7
 800ee8c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800ee90:	6071      	str	r1, [r6, #4]
 800ee92:	f300 813b 	bgt.w	800f10c <_vfiprintf_r+0x7a4>
 800ee96:	3608      	adds	r6, #8
 800ee98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee9a:	2b80      	cmp	r3, #128	@ 0x80
 800ee9c:	d11f      	bne.n	800eede <_vfiprintf_r+0x576>
 800ee9e:	9b02      	ldr	r3, [sp, #8]
 800eea0:	9a04      	ldr	r2, [sp, #16]
 800eea2:	1a9d      	subs	r5, r3, r2
 800eea4:	2d00      	cmp	r5, #0
 800eea6:	dd1a      	ble.n	800eede <_vfiprintf_r+0x576>
 800eea8:	4b87      	ldr	r3, [pc, #540]	@ (800f0c8 <_vfiprintf_r+0x760>)
 800eeaa:	6033      	str	r3, [r6, #0]
 800eeac:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800eeb0:	2d10      	cmp	r5, #16
 800eeb2:	f102 0201 	add.w	r2, r2, #1
 800eeb6:	f106 0008 	add.w	r0, r6, #8
 800eeba:	f300 8130 	bgt.w	800f11e <_vfiprintf_r+0x7b6>
 800eebe:	6075      	str	r5, [r6, #4]
 800eec0:	2a07      	cmp	r2, #7
 800eec2:	4465      	add	r5, ip
 800eec4:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800eec8:	f340 813c 	ble.w	800f144 <_vfiprintf_r+0x7dc>
 800eecc:	9800      	ldr	r0, [sp, #0]
 800eece:	aa0e      	add	r2, sp, #56	@ 0x38
 800eed0:	4639      	mov	r1, r7
 800eed2:	f7ff fd17 	bl	800e904 <__sprint_r>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	f040 816f 	bne.w	800f1ba <_vfiprintf_r+0x852>
 800eedc:	ae11      	add	r6, sp, #68	@ 0x44
 800eede:	9b01      	ldr	r3, [sp, #4]
 800eee0:	1ae4      	subs	r4, r4, r3
 800eee2:	2c00      	cmp	r4, #0
 800eee4:	dd1a      	ble.n	800ef1c <_vfiprintf_r+0x5b4>
 800eee6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eeea:	4877      	ldr	r0, [pc, #476]	@ (800f0c8 <_vfiprintf_r+0x760>)
 800eeec:	6030      	str	r0, [r6, #0]
 800eeee:	2c10      	cmp	r4, #16
 800eef0:	f103 0301 	add.w	r3, r3, #1
 800eef4:	f106 0108 	add.w	r1, r6, #8
 800eef8:	f300 8126 	bgt.w	800f148 <_vfiprintf_r+0x7e0>
 800eefc:	6074      	str	r4, [r6, #4]
 800eefe:	2b07      	cmp	r3, #7
 800ef00:	4414      	add	r4, r2
 800ef02:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800ef06:	f340 8130 	ble.w	800f16a <_vfiprintf_r+0x802>
 800ef0a:	9800      	ldr	r0, [sp, #0]
 800ef0c:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef0e:	4639      	mov	r1, r7
 800ef10:	f7ff fcf8 	bl	800e904 <__sprint_r>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	f040 8150 	bne.w	800f1ba <_vfiprintf_r+0x852>
 800ef1a:	ae11      	add	r6, sp, #68	@ 0x44
 800ef1c:	9b01      	ldr	r3, [sp, #4]
 800ef1e:	9a01      	ldr	r2, [sp, #4]
 800ef20:	6073      	str	r3, [r6, #4]
 800ef22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef24:	f8c6 9000 	str.w	r9, [r6]
 800ef28:	4413      	add	r3, r2
 800ef2a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef2e:	3301      	adds	r3, #1
 800ef30:	2b07      	cmp	r3, #7
 800ef32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef34:	f300 811b 	bgt.w	800f16e <_vfiprintf_r+0x806>
 800ef38:	f106 0308 	add.w	r3, r6, #8
 800ef3c:	f01a 0f04 	tst.w	sl, #4
 800ef40:	f040 811d 	bne.w	800f17e <_vfiprintf_r+0x816>
 800ef44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef48:	9904      	ldr	r1, [sp, #16]
 800ef4a:	428a      	cmp	r2, r1
 800ef4c:	bfac      	ite	ge
 800ef4e:	189b      	addge	r3, r3, r2
 800ef50:	185b      	addlt	r3, r3, r1
 800ef52:	9303      	str	r3, [sp, #12]
 800ef54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef56:	b13b      	cbz	r3, 800ef68 <_vfiprintf_r+0x600>
 800ef58:	9800      	ldr	r0, [sp, #0]
 800ef5a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef5c:	4639      	mov	r1, r7
 800ef5e:	f7ff fcd1 	bl	800e904 <__sprint_r>
 800ef62:	2800      	cmp	r0, #0
 800ef64:	f040 8129 	bne.w	800f1ba <_vfiprintf_r+0x852>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef6c:	4645      	mov	r5, r8
 800ef6e:	ae11      	add	r6, sp, #68	@ 0x44
 800ef70:	e55b      	b.n	800ea2a <_vfiprintf_r+0xc2>
 800ef72:	4648      	mov	r0, r9
 800ef74:	f7f1 f9ac 	bl	80002d0 <strlen>
 800ef78:	9001      	str	r0, [sp, #4]
 800ef7a:	e734      	b.n	800ede6 <_vfiprintf_r+0x47e>
 800ef7c:	f04a 0a10 	orr.w	sl, sl, #16
 800ef80:	f01a 0320 	ands.w	r3, sl, #32
 800ef84:	d008      	beq.n	800ef98 <_vfiprintf_r+0x630>
 800ef86:	3507      	adds	r5, #7
 800ef88:	f025 0507 	bic.w	r5, r5, #7
 800ef8c:	46a8      	mov	r8, r5
 800ef8e:	686d      	ldr	r5, [r5, #4]
 800ef90:	f858 4b08 	ldr.w	r4, [r8], #8
 800ef94:	2301      	movs	r3, #1
 800ef96:	e6d8      	b.n	800ed4a <_vfiprintf_r+0x3e2>
 800ef98:	46a8      	mov	r8, r5
 800ef9a:	f01a 0510 	ands.w	r5, sl, #16
 800ef9e:	f858 4b04 	ldr.w	r4, [r8], #4
 800efa2:	d001      	beq.n	800efa8 <_vfiprintf_r+0x640>
 800efa4:	461d      	mov	r5, r3
 800efa6:	e7f5      	b.n	800ef94 <_vfiprintf_r+0x62c>
 800efa8:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800efac:	d001      	beq.n	800efb2 <_vfiprintf_r+0x64a>
 800efae:	b2a4      	uxth	r4, r4
 800efb0:	e7f0      	b.n	800ef94 <_vfiprintf_r+0x62c>
 800efb2:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800efb6:	d0ed      	beq.n	800ef94 <_vfiprintf_r+0x62c>
 800efb8:	b2e4      	uxtb	r4, r4
 800efba:	e7f3      	b.n	800efa4 <_vfiprintf_r+0x63c>
 800efbc:	4a43      	ldr	r2, [pc, #268]	@ (800f0cc <_vfiprintf_r+0x764>)
 800efbe:	e5c9      	b.n	800eb54 <_vfiprintf_r+0x1ec>
 800efc0:	46a8      	mov	r8, r5
 800efc2:	f01a 0510 	ands.w	r5, sl, #16
 800efc6:	f858 4b04 	ldr.w	r4, [r8], #4
 800efca:	d001      	beq.n	800efd0 <_vfiprintf_r+0x668>
 800efcc:	4615      	mov	r5, r2
 800efce:	e5cd      	b.n	800eb6c <_vfiprintf_r+0x204>
 800efd0:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800efd4:	d001      	beq.n	800efda <_vfiprintf_r+0x672>
 800efd6:	b2a4      	uxth	r4, r4
 800efd8:	e5c8      	b.n	800eb6c <_vfiprintf_r+0x204>
 800efda:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800efde:	f43f adc5 	beq.w	800eb6c <_vfiprintf_r+0x204>
 800efe2:	b2e4      	uxtb	r4, r4
 800efe4:	e7f2      	b.n	800efcc <_vfiprintf_r+0x664>
 800efe6:	2c0a      	cmp	r4, #10
 800efe8:	f175 0300 	sbcs.w	r3, r5, #0
 800efec:	d206      	bcs.n	800effc <_vfiprintf_r+0x694>
 800efee:	3430      	adds	r4, #48	@ 0x30
 800eff0:	b2e4      	uxtb	r4, r4
 800eff2:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800eff6:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800effa:	e131      	b.n	800f260 <_vfiprintf_r+0x8f8>
 800effc:	ab3a      	add	r3, sp, #232	@ 0xe8
 800effe:	9308      	str	r3, [sp, #32]
 800f000:	9b04      	ldr	r3, [sp, #16]
 800f002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f006:	f04f 0a00 	mov.w	sl, #0
 800f00a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f00c:	220a      	movs	r2, #10
 800f00e:	2300      	movs	r3, #0
 800f010:	4620      	mov	r0, r4
 800f012:	4629      	mov	r1, r5
 800f014:	f7f1 fe68 	bl	8000ce8 <__aeabi_uldivmod>
 800f018:	460b      	mov	r3, r1
 800f01a:	9908      	ldr	r1, [sp, #32]
 800f01c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f01e:	3230      	adds	r2, #48	@ 0x30
 800f020:	f801 2c01 	strb.w	r2, [r1, #-1]
 800f024:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f026:	f101 39ff 	add.w	r9, r1, #4294967295
 800f02a:	f10a 0a01 	add.w	sl, sl, #1
 800f02e:	b1e2      	cbz	r2, 800f06a <_vfiprintf_r+0x702>
 800f030:	9a06      	ldr	r2, [sp, #24]
 800f032:	7812      	ldrb	r2, [r2, #0]
 800f034:	4552      	cmp	r2, sl
 800f036:	d118      	bne.n	800f06a <_vfiprintf_r+0x702>
 800f038:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800f03c:	d015      	beq.n	800f06a <_vfiprintf_r+0x702>
 800f03e:	2c0a      	cmp	r4, #10
 800f040:	f175 0200 	sbcs.w	r2, r5, #0
 800f044:	d311      	bcc.n	800f06a <_vfiprintf_r+0x702>
 800f046:	9308      	str	r3, [sp, #32]
 800f048:	9b07      	ldr	r3, [sp, #28]
 800f04a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f04c:	eba9 0903 	sub.w	r9, r9, r3
 800f050:	461a      	mov	r2, r3
 800f052:	4648      	mov	r0, r9
 800f054:	f7f9 f9af 	bl	80083b6 <strncpy>
 800f058:	9b06      	ldr	r3, [sp, #24]
 800f05a:	785a      	ldrb	r2, [r3, #1]
 800f05c:	9b08      	ldr	r3, [sp, #32]
 800f05e:	b172      	cbz	r2, 800f07e <_vfiprintf_r+0x716>
 800f060:	9a06      	ldr	r2, [sp, #24]
 800f062:	3201      	adds	r2, #1
 800f064:	9206      	str	r2, [sp, #24]
 800f066:	f04f 0a00 	mov.w	sl, #0
 800f06a:	2c0a      	cmp	r4, #10
 800f06c:	f175 0500 	sbcs.w	r5, r5, #0
 800f070:	f0c0 80f6 	bcc.w	800f260 <_vfiprintf_r+0x8f8>
 800f074:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f076:	f8cd 9020 	str.w	r9, [sp, #32]
 800f07a:	461d      	mov	r5, r3
 800f07c:	e7c6      	b.n	800f00c <_vfiprintf_r+0x6a4>
 800f07e:	4692      	mov	sl, r2
 800f080:	e7f3      	b.n	800f06a <_vfiprintf_r+0x702>
 800f082:	f004 030f 	and.w	r3, r4, #15
 800f086:	9a05      	ldr	r2, [sp, #20]
 800f088:	0924      	lsrs	r4, r4, #4
 800f08a:	5cd3      	ldrb	r3, [r2, r3]
 800f08c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f090:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f094:	092d      	lsrs	r5, r5, #4
 800f096:	ea54 0305 	orrs.w	r3, r4, r5
 800f09a:	d1f2      	bne.n	800f082 <_vfiprintf_r+0x71a>
 800f09c:	e0e0      	b.n	800f260 <_vfiprintf_r+0x8f8>
 800f09e:	b923      	cbnz	r3, 800f0aa <_vfiprintf_r+0x742>
 800f0a0:	f01a 0f01 	tst.w	sl, #1
 800f0a4:	d001      	beq.n	800f0aa <_vfiprintf_r+0x742>
 800f0a6:	2430      	movs	r4, #48	@ 0x30
 800f0a8:	e7a3      	b.n	800eff2 <_vfiprintf_r+0x68a>
 800f0aa:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f0ae:	e0d7      	b.n	800f260 <_vfiprintf_r+0x8f8>
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 80a3 	beq.w	800f1fc <_vfiprintf_r+0x894>
 800f0b6:	2400      	movs	r4, #0
 800f0b8:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800f0bc:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800f0c0:	46a8      	mov	r8, r5
 800f0c2:	e5e0      	b.n	800ec86 <_vfiprintf_r+0x31e>
 800f0c4:	0800fee5 	.word	0x0800fee5
 800f0c8:	0800fed5 	.word	0x0800fed5
 800f0cc:	0800fa74 	.word	0x0800fa74
 800f0d0:	2110      	movs	r1, #16
 800f0d2:	6071      	str	r1, [r6, #4]
 800f0d4:	2a07      	cmp	r2, #7
 800f0d6:	4461      	add	r1, ip
 800f0d8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f0dc:	dd08      	ble.n	800f0f0 <_vfiprintf_r+0x788>
 800f0de:	9800      	ldr	r0, [sp, #0]
 800f0e0:	aa0e      	add	r2, sp, #56	@ 0x38
 800f0e2:	4639      	mov	r1, r7
 800f0e4:	f7ff fc0e 	bl	800e904 <__sprint_r>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d166      	bne.n	800f1ba <_vfiprintf_r+0x852>
 800f0ec:	4b60      	ldr	r3, [pc, #384]	@ (800f270 <_vfiprintf_r+0x908>)
 800f0ee:	a811      	add	r0, sp, #68	@ 0x44
 800f0f0:	3d10      	subs	r5, #16
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	e694      	b.n	800ee20 <_vfiprintf_r+0x4b8>
 800f0f6:	4606      	mov	r6, r0
 800f0f8:	e6ac      	b.n	800ee54 <_vfiprintf_r+0x4ec>
 800f0fa:	9800      	ldr	r0, [sp, #0]
 800f0fc:	aa0e      	add	r2, sp, #56	@ 0x38
 800f0fe:	4639      	mov	r1, r7
 800f100:	f7ff fc00 	bl	800e904 <__sprint_r>
 800f104:	2800      	cmp	r0, #0
 800f106:	d158      	bne.n	800f1ba <_vfiprintf_r+0x852>
 800f108:	ae11      	add	r6, sp, #68	@ 0x44
 800f10a:	e6b5      	b.n	800ee78 <_vfiprintf_r+0x510>
 800f10c:	9800      	ldr	r0, [sp, #0]
 800f10e:	aa0e      	add	r2, sp, #56	@ 0x38
 800f110:	4639      	mov	r1, r7
 800f112:	f7ff fbf7 	bl	800e904 <__sprint_r>
 800f116:	2800      	cmp	r0, #0
 800f118:	d14f      	bne.n	800f1ba <_vfiprintf_r+0x852>
 800f11a:	ae11      	add	r6, sp, #68	@ 0x44
 800f11c:	e6bc      	b.n	800ee98 <_vfiprintf_r+0x530>
 800f11e:	2110      	movs	r1, #16
 800f120:	6071      	str	r1, [r6, #4]
 800f122:	2a07      	cmp	r2, #7
 800f124:	4461      	add	r1, ip
 800f126:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f12a:	dd08      	ble.n	800f13e <_vfiprintf_r+0x7d6>
 800f12c:	9800      	ldr	r0, [sp, #0]
 800f12e:	aa0e      	add	r2, sp, #56	@ 0x38
 800f130:	4639      	mov	r1, r7
 800f132:	f7ff fbe7 	bl	800e904 <__sprint_r>
 800f136:	2800      	cmp	r0, #0
 800f138:	d13f      	bne.n	800f1ba <_vfiprintf_r+0x852>
 800f13a:	4b4e      	ldr	r3, [pc, #312]	@ (800f274 <_vfiprintf_r+0x90c>)
 800f13c:	a811      	add	r0, sp, #68	@ 0x44
 800f13e:	3d10      	subs	r5, #16
 800f140:	4606      	mov	r6, r0
 800f142:	e6b2      	b.n	800eeaa <_vfiprintf_r+0x542>
 800f144:	4606      	mov	r6, r0
 800f146:	e6ca      	b.n	800eede <_vfiprintf_r+0x576>
 800f148:	2010      	movs	r0, #16
 800f14a:	4402      	add	r2, r0
 800f14c:	2b07      	cmp	r3, #7
 800f14e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800f152:	6070      	str	r0, [r6, #4]
 800f154:	dd06      	ble.n	800f164 <_vfiprintf_r+0x7fc>
 800f156:	9800      	ldr	r0, [sp, #0]
 800f158:	aa0e      	add	r2, sp, #56	@ 0x38
 800f15a:	4639      	mov	r1, r7
 800f15c:	f7ff fbd2 	bl	800e904 <__sprint_r>
 800f160:	bb58      	cbnz	r0, 800f1ba <_vfiprintf_r+0x852>
 800f162:	a911      	add	r1, sp, #68	@ 0x44
 800f164:	3c10      	subs	r4, #16
 800f166:	460e      	mov	r6, r1
 800f168:	e6bd      	b.n	800eee6 <_vfiprintf_r+0x57e>
 800f16a:	460e      	mov	r6, r1
 800f16c:	e6d6      	b.n	800ef1c <_vfiprintf_r+0x5b4>
 800f16e:	9800      	ldr	r0, [sp, #0]
 800f170:	aa0e      	add	r2, sp, #56	@ 0x38
 800f172:	4639      	mov	r1, r7
 800f174:	f7ff fbc6 	bl	800e904 <__sprint_r>
 800f178:	b9f8      	cbnz	r0, 800f1ba <_vfiprintf_r+0x852>
 800f17a:	ab11      	add	r3, sp, #68	@ 0x44
 800f17c:	e6de      	b.n	800ef3c <_vfiprintf_r+0x5d4>
 800f17e:	9a02      	ldr	r2, [sp, #8]
 800f180:	9904      	ldr	r1, [sp, #16]
 800f182:	1a54      	subs	r4, r2, r1
 800f184:	2c00      	cmp	r4, #0
 800f186:	f77f aedd 	ble.w	800ef44 <_vfiprintf_r+0x5dc>
 800f18a:	4d39      	ldr	r5, [pc, #228]	@ (800f270 <_vfiprintf_r+0x908>)
 800f18c:	2610      	movs	r6, #16
 800f18e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800f192:	2c10      	cmp	r4, #16
 800f194:	f102 0201 	add.w	r2, r2, #1
 800f198:	601d      	str	r5, [r3, #0]
 800f19a:	dc1d      	bgt.n	800f1d8 <_vfiprintf_r+0x870>
 800f19c:	605c      	str	r4, [r3, #4]
 800f19e:	2a07      	cmp	r2, #7
 800f1a0:	440c      	add	r4, r1
 800f1a2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800f1a6:	f77f aecd 	ble.w	800ef44 <_vfiprintf_r+0x5dc>
 800f1aa:	9800      	ldr	r0, [sp, #0]
 800f1ac:	aa0e      	add	r2, sp, #56	@ 0x38
 800f1ae:	4639      	mov	r1, r7
 800f1b0:	f7ff fba8 	bl	800e904 <__sprint_r>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	f43f aec5 	beq.w	800ef44 <_vfiprintf_r+0x5dc>
 800f1ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1bc:	07d9      	lsls	r1, r3, #31
 800f1be:	d405      	bmi.n	800f1cc <_vfiprintf_r+0x864>
 800f1c0:	89bb      	ldrh	r3, [r7, #12]
 800f1c2:	059a      	lsls	r2, r3, #22
 800f1c4:	d402      	bmi.n	800f1cc <_vfiprintf_r+0x864>
 800f1c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f1c8:	f7f9 f97f 	bl	80084ca <__retarget_lock_release_recursive>
 800f1cc:	89bb      	ldrh	r3, [r7, #12]
 800f1ce:	065b      	lsls	r3, r3, #25
 800f1d0:	f57f abfb 	bpl.w	800e9ca <_vfiprintf_r+0x62>
 800f1d4:	f7ff bbf6 	b.w	800e9c4 <_vfiprintf_r+0x5c>
 800f1d8:	3110      	adds	r1, #16
 800f1da:	2a07      	cmp	r2, #7
 800f1dc:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f1e0:	605e      	str	r6, [r3, #4]
 800f1e2:	dc02      	bgt.n	800f1ea <_vfiprintf_r+0x882>
 800f1e4:	3308      	adds	r3, #8
 800f1e6:	3c10      	subs	r4, #16
 800f1e8:	e7d1      	b.n	800f18e <_vfiprintf_r+0x826>
 800f1ea:	9800      	ldr	r0, [sp, #0]
 800f1ec:	aa0e      	add	r2, sp, #56	@ 0x38
 800f1ee:	4639      	mov	r1, r7
 800f1f0:	f7ff fb88 	bl	800e904 <__sprint_r>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d1e0      	bne.n	800f1ba <_vfiprintf_r+0x852>
 800f1f8:	ab11      	add	r3, sp, #68	@ 0x44
 800f1fa:	e7f4      	b.n	800f1e6 <_vfiprintf_r+0x87e>
 800f1fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f1fe:	b913      	cbnz	r3, 800f206 <_vfiprintf_r+0x89e>
 800f200:	2300      	movs	r3, #0
 800f202:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f204:	e7d9      	b.n	800f1ba <_vfiprintf_r+0x852>
 800f206:	9800      	ldr	r0, [sp, #0]
 800f208:	aa0e      	add	r2, sp, #56	@ 0x38
 800f20a:	4639      	mov	r1, r7
 800f20c:	f7ff fb7a 	bl	800e904 <__sprint_r>
 800f210:	2800      	cmp	r0, #0
 800f212:	d0f5      	beq.n	800f200 <_vfiprintf_r+0x898>
 800f214:	e7d1      	b.n	800f1ba <_vfiprintf_r+0x852>
 800f216:	ea54 0205 	orrs.w	r2, r4, r5
 800f21a:	f8cd a010 	str.w	sl, [sp, #16]
 800f21e:	f43f ada6 	beq.w	800ed6e <_vfiprintf_r+0x406>
 800f222:	2b01      	cmp	r3, #1
 800f224:	f43f aedf 	beq.w	800efe6 <_vfiprintf_r+0x67e>
 800f228:	2b02      	cmp	r3, #2
 800f22a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f22e:	f43f af28 	beq.w	800f082 <_vfiprintf_r+0x71a>
 800f232:	f004 0307 	and.w	r3, r4, #7
 800f236:	08e4      	lsrs	r4, r4, #3
 800f238:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f23c:	08ed      	lsrs	r5, r5, #3
 800f23e:	3330      	adds	r3, #48	@ 0x30
 800f240:	ea54 0105 	orrs.w	r1, r4, r5
 800f244:	464a      	mov	r2, r9
 800f246:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f24a:	d1f2      	bne.n	800f232 <_vfiprintf_r+0x8ca>
 800f24c:	9904      	ldr	r1, [sp, #16]
 800f24e:	07c8      	lsls	r0, r1, #31
 800f250:	d506      	bpl.n	800f260 <_vfiprintf_r+0x8f8>
 800f252:	2b30      	cmp	r3, #48	@ 0x30
 800f254:	d004      	beq.n	800f260 <_vfiprintf_r+0x8f8>
 800f256:	2330      	movs	r3, #48	@ 0x30
 800f258:	f809 3c01 	strb.w	r3, [r9, #-1]
 800f25c:	f1a2 0902 	sub.w	r9, r2, #2
 800f260:	ab3a      	add	r3, sp, #232	@ 0xe8
 800f262:	eba3 0309 	sub.w	r3, r3, r9
 800f266:	9c01      	ldr	r4, [sp, #4]
 800f268:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f26c:	9301      	str	r3, [sp, #4]
 800f26e:	e5bb      	b.n	800ede8 <_vfiprintf_r+0x480>
 800f270:	0800fee5 	.word	0x0800fee5
 800f274:	0800fed5 	.word	0x0800fed5

0800f278 <__sbprintf>:
 800f278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f27a:	461f      	mov	r7, r3
 800f27c:	898b      	ldrh	r3, [r1, #12]
 800f27e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800f282:	f023 0302 	bic.w	r3, r3, #2
 800f286:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f28a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800f28c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f28e:	89cb      	ldrh	r3, [r1, #14]
 800f290:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f294:	69cb      	ldr	r3, [r1, #28]
 800f296:	9307      	str	r3, [sp, #28]
 800f298:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800f29a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f29c:	ab1a      	add	r3, sp, #104	@ 0x68
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	9304      	str	r3, [sp, #16]
 800f2a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2a6:	4615      	mov	r5, r2
 800f2a8:	4606      	mov	r6, r0
 800f2aa:	9302      	str	r3, [sp, #8]
 800f2ac:	9305      	str	r3, [sp, #20]
 800f2ae:	a816      	add	r0, sp, #88	@ 0x58
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	9306      	str	r3, [sp, #24]
 800f2b6:	f7f9 f905 	bl	80084c4 <__retarget_lock_init_recursive>
 800f2ba:	462a      	mov	r2, r5
 800f2bc:	463b      	mov	r3, r7
 800f2be:	4669      	mov	r1, sp
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f7ff fb51 	bl	800e968 <_vfiprintf_r>
 800f2c6:	1e05      	subs	r5, r0, #0
 800f2c8:	db07      	blt.n	800f2da <__sbprintf+0x62>
 800f2ca:	4669      	mov	r1, sp
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f7fc fa4d 	bl	800b76c <_fflush_r>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	bf18      	it	ne
 800f2d6:	f04f 35ff 	movne.w	r5, #4294967295
 800f2da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f2de:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f2e0:	065b      	lsls	r3, r3, #25
 800f2e2:	bf42      	ittt	mi
 800f2e4:	89a3      	ldrhmi	r3, [r4, #12]
 800f2e6:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800f2ea:	81a3      	strhmi	r3, [r4, #12]
 800f2ec:	f7f9 f8eb 	bl	80084c6 <__retarget_lock_close_recursive>
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800f2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2f8 <__sfvwrite_r>:
 800f2f8:	6893      	ldr	r3, [r2, #8]
 800f2fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2fe:	4606      	mov	r6, r0
 800f300:	460c      	mov	r4, r1
 800f302:	4691      	mov	r9, r2
 800f304:	b91b      	cbnz	r3, 800f30e <__sfvwrite_r+0x16>
 800f306:	2000      	movs	r0, #0
 800f308:	b003      	add	sp, #12
 800f30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f30e:	898b      	ldrh	r3, [r1, #12]
 800f310:	0718      	lsls	r0, r3, #28
 800f312:	d550      	bpl.n	800f3b6 <__sfvwrite_r+0xbe>
 800f314:	690b      	ldr	r3, [r1, #16]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d04d      	beq.n	800f3b6 <__sfvwrite_r+0xbe>
 800f31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f31e:	f8d9 8000 	ldr.w	r8, [r9]
 800f322:	f013 0702 	ands.w	r7, r3, #2
 800f326:	d16b      	bne.n	800f400 <__sfvwrite_r+0x108>
 800f328:	f013 0301 	ands.w	r3, r3, #1
 800f32c:	f000 809c 	beq.w	800f468 <__sfvwrite_r+0x170>
 800f330:	4638      	mov	r0, r7
 800f332:	46ba      	mov	sl, r7
 800f334:	46bb      	mov	fp, r7
 800f336:	f1bb 0f00 	cmp.w	fp, #0
 800f33a:	f000 8103 	beq.w	800f544 <__sfvwrite_r+0x24c>
 800f33e:	b950      	cbnz	r0, 800f356 <__sfvwrite_r+0x5e>
 800f340:	465a      	mov	r2, fp
 800f342:	210a      	movs	r1, #10
 800f344:	4650      	mov	r0, sl
 800f346:	f7f0 ff73 	bl	8000230 <memchr>
 800f34a:	2800      	cmp	r0, #0
 800f34c:	f000 8100 	beq.w	800f550 <__sfvwrite_r+0x258>
 800f350:	3001      	adds	r0, #1
 800f352:	eba0 070a 	sub.w	r7, r0, sl
 800f356:	6820      	ldr	r0, [r4, #0]
 800f358:	6921      	ldr	r1, [r4, #16]
 800f35a:	68a5      	ldr	r5, [r4, #8]
 800f35c:	6963      	ldr	r3, [r4, #20]
 800f35e:	455f      	cmp	r7, fp
 800f360:	463a      	mov	r2, r7
 800f362:	bf28      	it	cs
 800f364:	465a      	movcs	r2, fp
 800f366:	4288      	cmp	r0, r1
 800f368:	f240 80f5 	bls.w	800f556 <__sfvwrite_r+0x25e>
 800f36c:	441d      	add	r5, r3
 800f36e:	42aa      	cmp	r2, r5
 800f370:	f340 80f1 	ble.w	800f556 <__sfvwrite_r+0x25e>
 800f374:	4651      	mov	r1, sl
 800f376:	462a      	mov	r2, r5
 800f378:	f7f8 fffb 	bl	8008372 <memmove>
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	442b      	add	r3, r5
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	4621      	mov	r1, r4
 800f384:	4630      	mov	r0, r6
 800f386:	f7fc f9f1 	bl	800b76c <_fflush_r>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d167      	bne.n	800f45e <__sfvwrite_r+0x166>
 800f38e:	1b7f      	subs	r7, r7, r5
 800f390:	f040 80f9 	bne.w	800f586 <__sfvwrite_r+0x28e>
 800f394:	4621      	mov	r1, r4
 800f396:	4630      	mov	r0, r6
 800f398:	f7fc f9e8 	bl	800b76c <_fflush_r>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d15e      	bne.n	800f45e <__sfvwrite_r+0x166>
 800f3a0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f3a4:	1b5b      	subs	r3, r3, r5
 800f3a6:	44aa      	add	sl, r5
 800f3a8:	ebab 0b05 	sub.w	fp, fp, r5
 800f3ac:	f8c9 3008 	str.w	r3, [r9, #8]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1c0      	bne.n	800f336 <__sfvwrite_r+0x3e>
 800f3b4:	e7a7      	b.n	800f306 <__sfvwrite_r+0xe>
 800f3b6:	4621      	mov	r1, r4
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f000 f8e9 	bl	800f590 <__swsetup_r>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d0ab      	beq.n	800f31a <__sfvwrite_r+0x22>
 800f3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c6:	e79f      	b.n	800f308 <__sfvwrite_r+0x10>
 800f3c8:	e9d8 a500 	ldrd	sl, r5, [r8]
 800f3cc:	f108 0808 	add.w	r8, r8, #8
 800f3d0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f3d4:	69e1      	ldr	r1, [r4, #28]
 800f3d6:	2d00      	cmp	r5, #0
 800f3d8:	d0f6      	beq.n	800f3c8 <__sfvwrite_r+0xd0>
 800f3da:	42bd      	cmp	r5, r7
 800f3dc:	462b      	mov	r3, r5
 800f3de:	4652      	mov	r2, sl
 800f3e0:	bf28      	it	cs
 800f3e2:	463b      	movcs	r3, r7
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	47d8      	blx	fp
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	dd38      	ble.n	800f45e <__sfvwrite_r+0x166>
 800f3ec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f3f0:	1a1b      	subs	r3, r3, r0
 800f3f2:	4482      	add	sl, r0
 800f3f4:	1a2d      	subs	r5, r5, r0
 800f3f6:	f8c9 3008 	str.w	r3, [r9, #8]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d1e8      	bne.n	800f3d0 <__sfvwrite_r+0xd8>
 800f3fe:	e782      	b.n	800f306 <__sfvwrite_r+0xe>
 800f400:	f04f 0a00 	mov.w	sl, #0
 800f404:	4f61      	ldr	r7, [pc, #388]	@ (800f58c <__sfvwrite_r+0x294>)
 800f406:	4655      	mov	r5, sl
 800f408:	e7e2      	b.n	800f3d0 <__sfvwrite_r+0xd8>
 800f40a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800f40e:	f108 0808 	add.w	r8, r8, #8
 800f412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f416:	6820      	ldr	r0, [r4, #0]
 800f418:	68a2      	ldr	r2, [r4, #8]
 800f41a:	f1ba 0f00 	cmp.w	sl, #0
 800f41e:	d0f4      	beq.n	800f40a <__sfvwrite_r+0x112>
 800f420:	0599      	lsls	r1, r3, #22
 800f422:	d563      	bpl.n	800f4ec <__sfvwrite_r+0x1f4>
 800f424:	4552      	cmp	r2, sl
 800f426:	d836      	bhi.n	800f496 <__sfvwrite_r+0x19e>
 800f428:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800f42c:	d033      	beq.n	800f496 <__sfvwrite_r+0x19e>
 800f42e:	6921      	ldr	r1, [r4, #16]
 800f430:	6965      	ldr	r5, [r4, #20]
 800f432:	eba0 0b01 	sub.w	fp, r0, r1
 800f436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f43a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f43e:	f10b 0201 	add.w	r2, fp, #1
 800f442:	106d      	asrs	r5, r5, #1
 800f444:	4452      	add	r2, sl
 800f446:	4295      	cmp	r5, r2
 800f448:	bf38      	it	cc
 800f44a:	4615      	movcc	r5, r2
 800f44c:	055b      	lsls	r3, r3, #21
 800f44e:	d53d      	bpl.n	800f4cc <__sfvwrite_r+0x1d4>
 800f450:	4629      	mov	r1, r5
 800f452:	4630      	mov	r0, r6
 800f454:	f7f9 f96e 	bl	8008734 <_malloc_r>
 800f458:	b948      	cbnz	r0, 800f46e <__sfvwrite_r+0x176>
 800f45a:	230c      	movs	r3, #12
 800f45c:	6033      	str	r3, [r6, #0]
 800f45e:	89a3      	ldrh	r3, [r4, #12]
 800f460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f464:	81a3      	strh	r3, [r4, #12]
 800f466:	e7ac      	b.n	800f3c2 <__sfvwrite_r+0xca>
 800f468:	461f      	mov	r7, r3
 800f46a:	469a      	mov	sl, r3
 800f46c:	e7d1      	b.n	800f412 <__sfvwrite_r+0x11a>
 800f46e:	465a      	mov	r2, fp
 800f470:	6921      	ldr	r1, [r4, #16]
 800f472:	9001      	str	r0, [sp, #4]
 800f474:	f7f9 f82a 	bl	80084cc <memcpy>
 800f478:	89a2      	ldrh	r2, [r4, #12]
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800f480:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800f484:	81a2      	strh	r2, [r4, #12]
 800f486:	6123      	str	r3, [r4, #16]
 800f488:	6165      	str	r5, [r4, #20]
 800f48a:	445b      	add	r3, fp
 800f48c:	eba5 050b 	sub.w	r5, r5, fp
 800f490:	6023      	str	r3, [r4, #0]
 800f492:	4652      	mov	r2, sl
 800f494:	60a5      	str	r5, [r4, #8]
 800f496:	4552      	cmp	r2, sl
 800f498:	bf28      	it	cs
 800f49a:	4652      	movcs	r2, sl
 800f49c:	6820      	ldr	r0, [r4, #0]
 800f49e:	9201      	str	r2, [sp, #4]
 800f4a0:	4639      	mov	r1, r7
 800f4a2:	f7f8 ff66 	bl	8008372 <memmove>
 800f4a6:	68a3      	ldr	r3, [r4, #8]
 800f4a8:	9a01      	ldr	r2, [sp, #4]
 800f4aa:	1a9b      	subs	r3, r3, r2
 800f4ac:	60a3      	str	r3, [r4, #8]
 800f4ae:	6823      	ldr	r3, [r4, #0]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	4655      	mov	r5, sl
 800f4b4:	6023      	str	r3, [r4, #0]
 800f4b6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f4ba:	1b5b      	subs	r3, r3, r5
 800f4bc:	442f      	add	r7, r5
 800f4be:	ebaa 0a05 	sub.w	sl, sl, r5
 800f4c2:	f8c9 3008 	str.w	r3, [r9, #8]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1a3      	bne.n	800f412 <__sfvwrite_r+0x11a>
 800f4ca:	e71c      	b.n	800f306 <__sfvwrite_r+0xe>
 800f4cc:	462a      	mov	r2, r5
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	f7f9 fb76 	bl	8008bc0 <_realloc_r>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	d1d5      	bne.n	800f486 <__sfvwrite_r+0x18e>
 800f4da:	6921      	ldr	r1, [r4, #16]
 800f4dc:	4630      	mov	r0, r6
 800f4de:	f7f9 f869 	bl	80085b4 <_free_r>
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f4e8:	81a3      	strh	r3, [r4, #12]
 800f4ea:	e7b6      	b.n	800f45a <__sfvwrite_r+0x162>
 800f4ec:	6923      	ldr	r3, [r4, #16]
 800f4ee:	4283      	cmp	r3, r0
 800f4f0:	d302      	bcc.n	800f4f8 <__sfvwrite_r+0x200>
 800f4f2:	6961      	ldr	r1, [r4, #20]
 800f4f4:	4551      	cmp	r1, sl
 800f4f6:	d915      	bls.n	800f524 <__sfvwrite_r+0x22c>
 800f4f8:	4552      	cmp	r2, sl
 800f4fa:	bf28      	it	cs
 800f4fc:	4652      	movcs	r2, sl
 800f4fe:	4639      	mov	r1, r7
 800f500:	4615      	mov	r5, r2
 800f502:	f7f8 ff36 	bl	8008372 <memmove>
 800f506:	68a3      	ldr	r3, [r4, #8]
 800f508:	6822      	ldr	r2, [r4, #0]
 800f50a:	1b5b      	subs	r3, r3, r5
 800f50c:	442a      	add	r2, r5
 800f50e:	60a3      	str	r3, [r4, #8]
 800f510:	6022      	str	r2, [r4, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d1cf      	bne.n	800f4b6 <__sfvwrite_r+0x1be>
 800f516:	4621      	mov	r1, r4
 800f518:	4630      	mov	r0, r6
 800f51a:	f7fc f927 	bl	800b76c <_fflush_r>
 800f51e:	2800      	cmp	r0, #0
 800f520:	d0c9      	beq.n	800f4b6 <__sfvwrite_r+0x1be>
 800f522:	e79c      	b.n	800f45e <__sfvwrite_r+0x166>
 800f524:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f528:	4553      	cmp	r3, sl
 800f52a:	bf28      	it	cs
 800f52c:	4653      	movcs	r3, sl
 800f52e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f530:	fb93 f3f1 	sdiv	r3, r3, r1
 800f534:	463a      	mov	r2, r7
 800f536:	434b      	muls	r3, r1
 800f538:	4630      	mov	r0, r6
 800f53a:	69e1      	ldr	r1, [r4, #28]
 800f53c:	47a8      	blx	r5
 800f53e:	1e05      	subs	r5, r0, #0
 800f540:	dcb9      	bgt.n	800f4b6 <__sfvwrite_r+0x1be>
 800f542:	e78c      	b.n	800f45e <__sfvwrite_r+0x166>
 800f544:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800f548:	2000      	movs	r0, #0
 800f54a:	f108 0808 	add.w	r8, r8, #8
 800f54e:	e6f2      	b.n	800f336 <__sfvwrite_r+0x3e>
 800f550:	f10b 0701 	add.w	r7, fp, #1
 800f554:	e6ff      	b.n	800f356 <__sfvwrite_r+0x5e>
 800f556:	4293      	cmp	r3, r2
 800f558:	dc08      	bgt.n	800f56c <__sfvwrite_r+0x274>
 800f55a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f55c:	69e1      	ldr	r1, [r4, #28]
 800f55e:	4652      	mov	r2, sl
 800f560:	4630      	mov	r0, r6
 800f562:	47a8      	blx	r5
 800f564:	1e05      	subs	r5, r0, #0
 800f566:	f73f af12 	bgt.w	800f38e <__sfvwrite_r+0x96>
 800f56a:	e778      	b.n	800f45e <__sfvwrite_r+0x166>
 800f56c:	4651      	mov	r1, sl
 800f56e:	9201      	str	r2, [sp, #4]
 800f570:	f7f8 feff 	bl	8008372 <memmove>
 800f574:	9a01      	ldr	r2, [sp, #4]
 800f576:	68a3      	ldr	r3, [r4, #8]
 800f578:	1a9b      	subs	r3, r3, r2
 800f57a:	60a3      	str	r3, [r4, #8]
 800f57c:	6823      	ldr	r3, [r4, #0]
 800f57e:	4413      	add	r3, r2
 800f580:	6023      	str	r3, [r4, #0]
 800f582:	4615      	mov	r5, r2
 800f584:	e703      	b.n	800f38e <__sfvwrite_r+0x96>
 800f586:	2001      	movs	r0, #1
 800f588:	e70a      	b.n	800f3a0 <__sfvwrite_r+0xa8>
 800f58a:	bf00      	nop
 800f58c:	7ffffc00 	.word	0x7ffffc00

0800f590 <__swsetup_r>:
 800f590:	b538      	push	{r3, r4, r5, lr}
 800f592:	4b29      	ldr	r3, [pc, #164]	@ (800f638 <__swsetup_r+0xa8>)
 800f594:	4605      	mov	r5, r0
 800f596:	6818      	ldr	r0, [r3, #0]
 800f598:	460c      	mov	r4, r1
 800f59a:	b118      	cbz	r0, 800f5a4 <__swsetup_r+0x14>
 800f59c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f59e:	b90b      	cbnz	r3, 800f5a4 <__swsetup_r+0x14>
 800f5a0:	f7f8 fe0e 	bl	80081c0 <__sinit>
 800f5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5a8:	0719      	lsls	r1, r3, #28
 800f5aa:	d422      	bmi.n	800f5f2 <__swsetup_r+0x62>
 800f5ac:	06da      	lsls	r2, r3, #27
 800f5ae:	d407      	bmi.n	800f5c0 <__swsetup_r+0x30>
 800f5b0:	2209      	movs	r2, #9
 800f5b2:	602a      	str	r2, [r5, #0]
 800f5b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5b8:	81a3      	strh	r3, [r4, #12]
 800f5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f5be:	e033      	b.n	800f628 <__swsetup_r+0x98>
 800f5c0:	0758      	lsls	r0, r3, #29
 800f5c2:	d512      	bpl.n	800f5ea <__swsetup_r+0x5a>
 800f5c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f5c6:	b141      	cbz	r1, 800f5da <__swsetup_r+0x4a>
 800f5c8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f5cc:	4299      	cmp	r1, r3
 800f5ce:	d002      	beq.n	800f5d6 <__swsetup_r+0x46>
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f7f8 ffef 	bl	80085b4 <_free_r>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f5e0:	81a3      	strh	r3, [r4, #12]
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	6063      	str	r3, [r4, #4]
 800f5e6:	6923      	ldr	r3, [r4, #16]
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	f043 0308 	orr.w	r3, r3, #8
 800f5f0:	81a3      	strh	r3, [r4, #12]
 800f5f2:	6923      	ldr	r3, [r4, #16]
 800f5f4:	b94b      	cbnz	r3, 800f60a <__swsetup_r+0x7a>
 800f5f6:	89a3      	ldrh	r3, [r4, #12]
 800f5f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f5fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f600:	d003      	beq.n	800f60a <__swsetup_r+0x7a>
 800f602:	4621      	mov	r1, r4
 800f604:	4628      	mov	r0, r5
 800f606:	f000 f8c9 	bl	800f79c <__smakebuf_r>
 800f60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f60e:	f013 0201 	ands.w	r2, r3, #1
 800f612:	d00a      	beq.n	800f62a <__swsetup_r+0x9a>
 800f614:	2200      	movs	r2, #0
 800f616:	60a2      	str	r2, [r4, #8]
 800f618:	6962      	ldr	r2, [r4, #20]
 800f61a:	4252      	negs	r2, r2
 800f61c:	61a2      	str	r2, [r4, #24]
 800f61e:	6922      	ldr	r2, [r4, #16]
 800f620:	b942      	cbnz	r2, 800f634 <__swsetup_r+0xa4>
 800f622:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f626:	d1c5      	bne.n	800f5b4 <__swsetup_r+0x24>
 800f628:	bd38      	pop	{r3, r4, r5, pc}
 800f62a:	0799      	lsls	r1, r3, #30
 800f62c:	bf58      	it	pl
 800f62e:	6962      	ldrpl	r2, [r4, #20]
 800f630:	60a2      	str	r2, [r4, #8]
 800f632:	e7f4      	b.n	800f61e <__swsetup_r+0x8e>
 800f634:	2000      	movs	r0, #0
 800f636:	e7f7      	b.n	800f628 <__swsetup_r+0x98>
 800f638:	20000050 	.word	0x20000050

0800f63c <__fputwc>:
 800f63c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f640:	4680      	mov	r8, r0
 800f642:	460f      	mov	r7, r1
 800f644:	4614      	mov	r4, r2
 800f646:	f7fc f90f 	bl	800b868 <__locale_mb_cur_max>
 800f64a:	2801      	cmp	r0, #1
 800f64c:	4605      	mov	r5, r0
 800f64e:	d11b      	bne.n	800f688 <__fputwc+0x4c>
 800f650:	1e7b      	subs	r3, r7, #1
 800f652:	2bfe      	cmp	r3, #254	@ 0xfe
 800f654:	d818      	bhi.n	800f688 <__fputwc+0x4c>
 800f656:	f88d 7004 	strb.w	r7, [sp, #4]
 800f65a:	2600      	movs	r6, #0
 800f65c:	f10d 0904 	add.w	r9, sp, #4
 800f660:	42ae      	cmp	r6, r5
 800f662:	d021      	beq.n	800f6a8 <__fputwc+0x6c>
 800f664:	68a3      	ldr	r3, [r4, #8]
 800f666:	f816 1009 	ldrb.w	r1, [r6, r9]
 800f66a:	3b01      	subs	r3, #1
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	60a3      	str	r3, [r4, #8]
 800f670:	da04      	bge.n	800f67c <__fputwc+0x40>
 800f672:	69a2      	ldr	r2, [r4, #24]
 800f674:	4293      	cmp	r3, r2
 800f676:	db1b      	blt.n	800f6b0 <__fputwc+0x74>
 800f678:	290a      	cmp	r1, #10
 800f67a:	d019      	beq.n	800f6b0 <__fputwc+0x74>
 800f67c:	6823      	ldr	r3, [r4, #0]
 800f67e:	1c5a      	adds	r2, r3, #1
 800f680:	6022      	str	r2, [r4, #0]
 800f682:	7019      	strb	r1, [r3, #0]
 800f684:	3601      	adds	r6, #1
 800f686:	e7eb      	b.n	800f660 <__fputwc+0x24>
 800f688:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800f68c:	463a      	mov	r2, r7
 800f68e:	a901      	add	r1, sp, #4
 800f690:	4640      	mov	r0, r8
 800f692:	f000 f845 	bl	800f720 <_wcrtomb_r>
 800f696:	1c43      	adds	r3, r0, #1
 800f698:	4605      	mov	r5, r0
 800f69a:	d1de      	bne.n	800f65a <__fputwc+0x1e>
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6a2:	81a3      	strh	r3, [r4, #12]
 800f6a4:	f04f 37ff 	mov.w	r7, #4294967295
 800f6a8:	4638      	mov	r0, r7
 800f6aa:	b003      	add	sp, #12
 800f6ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6b0:	4622      	mov	r2, r4
 800f6b2:	4640      	mov	r0, r8
 800f6b4:	f000 f8ae 	bl	800f814 <__swbuf_r>
 800f6b8:	3001      	adds	r0, #1
 800f6ba:	d1e3      	bne.n	800f684 <__fputwc+0x48>
 800f6bc:	e7f2      	b.n	800f6a4 <__fputwc+0x68>

0800f6be <_fputwc_r>:
 800f6be:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800f6c0:	07db      	lsls	r3, r3, #31
 800f6c2:	b570      	push	{r4, r5, r6, lr}
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	460e      	mov	r6, r1
 800f6c8:	4614      	mov	r4, r2
 800f6ca:	d405      	bmi.n	800f6d8 <_fputwc_r+0x1a>
 800f6cc:	8993      	ldrh	r3, [r2, #12]
 800f6ce:	0598      	lsls	r0, r3, #22
 800f6d0:	d402      	bmi.n	800f6d8 <_fputwc_r+0x1a>
 800f6d2:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800f6d4:	f7f8 fef8 	bl	80084c8 <__retarget_lock_acquire_recursive>
 800f6d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6dc:	0499      	lsls	r1, r3, #18
 800f6de:	d406      	bmi.n	800f6ee <_fputwc_r+0x30>
 800f6e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f6e4:	81a3      	strh	r3, [r4, #12]
 800f6e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f6ec:	6663      	str	r3, [r4, #100]	@ 0x64
 800f6ee:	4622      	mov	r2, r4
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	4631      	mov	r1, r6
 800f6f4:	f7ff ffa2 	bl	800f63c <__fputwc>
 800f6f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6fa:	07da      	lsls	r2, r3, #31
 800f6fc:	4605      	mov	r5, r0
 800f6fe:	d405      	bmi.n	800f70c <_fputwc_r+0x4e>
 800f700:	89a3      	ldrh	r3, [r4, #12]
 800f702:	059b      	lsls	r3, r3, #22
 800f704:	d402      	bmi.n	800f70c <_fputwc_r+0x4e>
 800f706:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f708:	f7f8 fedf 	bl	80084ca <__retarget_lock_release_recursive>
 800f70c:	4628      	mov	r0, r5
 800f70e:	bd70      	pop	{r4, r5, r6, pc}

0800f710 <abort>:
 800f710:	b508      	push	{r3, lr}
 800f712:	2006      	movs	r0, #6
 800f714:	f000 f8f0 	bl	800f8f8 <raise>
 800f718:	2001      	movs	r0, #1
 800f71a:	f7f3 f8e7 	bl	80028ec <_exit>
	...

0800f720 <_wcrtomb_r>:
 800f720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f722:	4c09      	ldr	r4, [pc, #36]	@ (800f748 <_wcrtomb_r+0x28>)
 800f724:	b085      	sub	sp, #20
 800f726:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800f72a:	4605      	mov	r5, r0
 800f72c:	461e      	mov	r6, r3
 800f72e:	b909      	cbnz	r1, 800f734 <_wcrtomb_r+0x14>
 800f730:	460a      	mov	r2, r1
 800f732:	a901      	add	r1, sp, #4
 800f734:	47b8      	blx	r7
 800f736:	1c43      	adds	r3, r0, #1
 800f738:	bf01      	itttt	eq
 800f73a:	2300      	moveq	r3, #0
 800f73c:	6033      	streq	r3, [r6, #0]
 800f73e:	238a      	moveq	r3, #138	@ 0x8a
 800f740:	602b      	streq	r3, [r5, #0]
 800f742:	b005      	add	sp, #20
 800f744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f746:	bf00      	nop
 800f748:	2000058c 	.word	0x2000058c

0800f74c <__swhatbuf_r>:
 800f74c:	b570      	push	{r4, r5, r6, lr}
 800f74e:	460c      	mov	r4, r1
 800f750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f754:	2900      	cmp	r1, #0
 800f756:	b096      	sub	sp, #88	@ 0x58
 800f758:	4615      	mov	r5, r2
 800f75a:	461e      	mov	r6, r3
 800f75c:	da07      	bge.n	800f76e <__swhatbuf_r+0x22>
 800f75e:	89a1      	ldrh	r1, [r4, #12]
 800f760:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800f764:	d117      	bne.n	800f796 <__swhatbuf_r+0x4a>
 800f766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f76a:	4608      	mov	r0, r1
 800f76c:	e00f      	b.n	800f78e <__swhatbuf_r+0x42>
 800f76e:	466a      	mov	r2, sp
 800f770:	f000 f8ca 	bl	800f908 <_fstat_r>
 800f774:	2800      	cmp	r0, #0
 800f776:	dbf2      	blt.n	800f75e <__swhatbuf_r+0x12>
 800f778:	9901      	ldr	r1, [sp, #4]
 800f77a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f77e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f782:	4259      	negs	r1, r3
 800f784:	4159      	adcs	r1, r3
 800f786:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800f78a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f78e:	6031      	str	r1, [r6, #0]
 800f790:	602b      	str	r3, [r5, #0]
 800f792:	b016      	add	sp, #88	@ 0x58
 800f794:	bd70      	pop	{r4, r5, r6, pc}
 800f796:	2100      	movs	r1, #0
 800f798:	2340      	movs	r3, #64	@ 0x40
 800f79a:	e7e6      	b.n	800f76a <__swhatbuf_r+0x1e>

0800f79c <__smakebuf_r>:
 800f79c:	898b      	ldrh	r3, [r1, #12]
 800f79e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7a0:	079d      	lsls	r5, r3, #30
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	d507      	bpl.n	800f7b8 <__smakebuf_r+0x1c>
 800f7a8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800f7ac:	6023      	str	r3, [r4, #0]
 800f7ae:	6123      	str	r3, [r4, #16]
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	6163      	str	r3, [r4, #20]
 800f7b4:	b003      	add	sp, #12
 800f7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7b8:	ab01      	add	r3, sp, #4
 800f7ba:	466a      	mov	r2, sp
 800f7bc:	f7ff ffc6 	bl	800f74c <__swhatbuf_r>
 800f7c0:	9f00      	ldr	r7, [sp, #0]
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	4639      	mov	r1, r7
 800f7c6:	4630      	mov	r0, r6
 800f7c8:	f7f8 ffb4 	bl	8008734 <_malloc_r>
 800f7cc:	b948      	cbnz	r0, 800f7e2 <__smakebuf_r+0x46>
 800f7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7d2:	059a      	lsls	r2, r3, #22
 800f7d4:	d4ee      	bmi.n	800f7b4 <__smakebuf_r+0x18>
 800f7d6:	f023 0303 	bic.w	r3, r3, #3
 800f7da:	f043 0302 	orr.w	r3, r3, #2
 800f7de:	81a3      	strh	r3, [r4, #12]
 800f7e0:	e7e2      	b.n	800f7a8 <__smakebuf_r+0xc>
 800f7e2:	89a3      	ldrh	r3, [r4, #12]
 800f7e4:	6020      	str	r0, [r4, #0]
 800f7e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7ea:	81a3      	strh	r3, [r4, #12]
 800f7ec:	9b01      	ldr	r3, [sp, #4]
 800f7ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7f2:	b15b      	cbz	r3, 800f80c <__smakebuf_r+0x70>
 800f7f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	f000 f897 	bl	800f92c <_isatty_r>
 800f7fe:	b128      	cbz	r0, 800f80c <__smakebuf_r+0x70>
 800f800:	89a3      	ldrh	r3, [r4, #12]
 800f802:	f023 0303 	bic.w	r3, r3, #3
 800f806:	f043 0301 	orr.w	r3, r3, #1
 800f80a:	81a3      	strh	r3, [r4, #12]
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	431d      	orrs	r5, r3
 800f810:	81a5      	strh	r5, [r4, #12]
 800f812:	e7cf      	b.n	800f7b4 <__smakebuf_r+0x18>

0800f814 <__swbuf_r>:
 800f814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f816:	460e      	mov	r6, r1
 800f818:	4614      	mov	r4, r2
 800f81a:	4605      	mov	r5, r0
 800f81c:	b118      	cbz	r0, 800f826 <__swbuf_r+0x12>
 800f81e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f820:	b90b      	cbnz	r3, 800f826 <__swbuf_r+0x12>
 800f822:	f7f8 fccd 	bl	80081c0 <__sinit>
 800f826:	69a3      	ldr	r3, [r4, #24]
 800f828:	60a3      	str	r3, [r4, #8]
 800f82a:	89a3      	ldrh	r3, [r4, #12]
 800f82c:	0719      	lsls	r1, r3, #28
 800f82e:	d501      	bpl.n	800f834 <__swbuf_r+0x20>
 800f830:	6923      	ldr	r3, [r4, #16]
 800f832:	b943      	cbnz	r3, 800f846 <__swbuf_r+0x32>
 800f834:	4621      	mov	r1, r4
 800f836:	4628      	mov	r0, r5
 800f838:	f7ff feaa 	bl	800f590 <__swsetup_r>
 800f83c:	b118      	cbz	r0, 800f846 <__swbuf_r+0x32>
 800f83e:	f04f 37ff 	mov.w	r7, #4294967295
 800f842:	4638      	mov	r0, r7
 800f844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f84a:	b2f6      	uxtb	r6, r6
 800f84c:	049a      	lsls	r2, r3, #18
 800f84e:	4637      	mov	r7, r6
 800f850:	d406      	bmi.n	800f860 <__swbuf_r+0x4c>
 800f852:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f856:	81a3      	strh	r3, [r4, #12]
 800f858:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f85a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f85e:	6663      	str	r3, [r4, #100]	@ 0x64
 800f860:	6823      	ldr	r3, [r4, #0]
 800f862:	6922      	ldr	r2, [r4, #16]
 800f864:	1a98      	subs	r0, r3, r2
 800f866:	6963      	ldr	r3, [r4, #20]
 800f868:	4283      	cmp	r3, r0
 800f86a:	dc05      	bgt.n	800f878 <__swbuf_r+0x64>
 800f86c:	4621      	mov	r1, r4
 800f86e:	4628      	mov	r0, r5
 800f870:	f7fb ff7c 	bl	800b76c <_fflush_r>
 800f874:	2800      	cmp	r0, #0
 800f876:	d1e2      	bne.n	800f83e <__swbuf_r+0x2a>
 800f878:	68a3      	ldr	r3, [r4, #8]
 800f87a:	3b01      	subs	r3, #1
 800f87c:	60a3      	str	r3, [r4, #8]
 800f87e:	6823      	ldr	r3, [r4, #0]
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	6022      	str	r2, [r4, #0]
 800f884:	701e      	strb	r6, [r3, #0]
 800f886:	6962      	ldr	r2, [r4, #20]
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d004      	beq.n	800f898 <__swbuf_r+0x84>
 800f88e:	89a3      	ldrh	r3, [r4, #12]
 800f890:	07db      	lsls	r3, r3, #31
 800f892:	d5d6      	bpl.n	800f842 <__swbuf_r+0x2e>
 800f894:	2e0a      	cmp	r6, #10
 800f896:	d1d4      	bne.n	800f842 <__swbuf_r+0x2e>
 800f898:	4621      	mov	r1, r4
 800f89a:	4628      	mov	r0, r5
 800f89c:	f7fb ff66 	bl	800b76c <_fflush_r>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d0ce      	beq.n	800f842 <__swbuf_r+0x2e>
 800f8a4:	e7cb      	b.n	800f83e <__swbuf_r+0x2a>

0800f8a6 <_raise_r>:
 800f8a6:	291f      	cmp	r1, #31
 800f8a8:	b538      	push	{r3, r4, r5, lr}
 800f8aa:	4605      	mov	r5, r0
 800f8ac:	460c      	mov	r4, r1
 800f8ae:	d904      	bls.n	800f8ba <_raise_r+0x14>
 800f8b0:	2316      	movs	r3, #22
 800f8b2:	6003      	str	r3, [r0, #0]
 800f8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ba:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800f8be:	b112      	cbz	r2, 800f8c6 <_raise_r+0x20>
 800f8c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8c4:	b94b      	cbnz	r3, 800f8da <_raise_r+0x34>
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	f000 f852 	bl	800f970 <_getpid_r>
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	4601      	mov	r1, r0
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8d6:	f000 b839 	b.w	800f94c <_kill_r>
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d00a      	beq.n	800f8f4 <_raise_r+0x4e>
 800f8de:	1c59      	adds	r1, r3, #1
 800f8e0:	d103      	bne.n	800f8ea <_raise_r+0x44>
 800f8e2:	2316      	movs	r3, #22
 800f8e4:	6003      	str	r3, [r0, #0]
 800f8e6:	2001      	movs	r0, #1
 800f8e8:	e7e6      	b.n	800f8b8 <_raise_r+0x12>
 800f8ea:	2100      	movs	r1, #0
 800f8ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	4798      	blx	r3
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	e7df      	b.n	800f8b8 <_raise_r+0x12>

0800f8f8 <raise>:
 800f8f8:	4b02      	ldr	r3, [pc, #8]	@ (800f904 <raise+0xc>)
 800f8fa:	4601      	mov	r1, r0
 800f8fc:	6818      	ldr	r0, [r3, #0]
 800f8fe:	f7ff bfd2 	b.w	800f8a6 <_raise_r>
 800f902:	bf00      	nop
 800f904:	20000050 	.word	0x20000050

0800f908 <_fstat_r>:
 800f908:	b538      	push	{r3, r4, r5, lr}
 800f90a:	4d07      	ldr	r5, [pc, #28]	@ (800f928 <_fstat_r+0x20>)
 800f90c:	2300      	movs	r3, #0
 800f90e:	4604      	mov	r4, r0
 800f910:	4608      	mov	r0, r1
 800f912:	4611      	mov	r1, r2
 800f914:	602b      	str	r3, [r5, #0]
 800f916:	f7f3 f839 	bl	800298c <_fstat>
 800f91a:	1c43      	adds	r3, r0, #1
 800f91c:	d102      	bne.n	800f924 <_fstat_r+0x1c>
 800f91e:	682b      	ldr	r3, [r5, #0]
 800f920:	b103      	cbz	r3, 800f924 <_fstat_r+0x1c>
 800f922:	6023      	str	r3, [r4, #0]
 800f924:	bd38      	pop	{r3, r4, r5, pc}
 800f926:	bf00      	nop
 800f928:	20000bec 	.word	0x20000bec

0800f92c <_isatty_r>:
 800f92c:	b538      	push	{r3, r4, r5, lr}
 800f92e:	4d06      	ldr	r5, [pc, #24]	@ (800f948 <_isatty_r+0x1c>)
 800f930:	2300      	movs	r3, #0
 800f932:	4604      	mov	r4, r0
 800f934:	4608      	mov	r0, r1
 800f936:	602b      	str	r3, [r5, #0]
 800f938:	f7f3 f838 	bl	80029ac <_isatty>
 800f93c:	1c43      	adds	r3, r0, #1
 800f93e:	d102      	bne.n	800f946 <_isatty_r+0x1a>
 800f940:	682b      	ldr	r3, [r5, #0]
 800f942:	b103      	cbz	r3, 800f946 <_isatty_r+0x1a>
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	bd38      	pop	{r3, r4, r5, pc}
 800f948:	20000bec 	.word	0x20000bec

0800f94c <_kill_r>:
 800f94c:	b538      	push	{r3, r4, r5, lr}
 800f94e:	4d07      	ldr	r5, [pc, #28]	@ (800f96c <_kill_r+0x20>)
 800f950:	2300      	movs	r3, #0
 800f952:	4604      	mov	r4, r0
 800f954:	4608      	mov	r0, r1
 800f956:	4611      	mov	r1, r2
 800f958:	602b      	str	r3, [r5, #0]
 800f95a:	f7f2 ffb7 	bl	80028cc <_kill>
 800f95e:	1c43      	adds	r3, r0, #1
 800f960:	d102      	bne.n	800f968 <_kill_r+0x1c>
 800f962:	682b      	ldr	r3, [r5, #0]
 800f964:	b103      	cbz	r3, 800f968 <_kill_r+0x1c>
 800f966:	6023      	str	r3, [r4, #0]
 800f968:	bd38      	pop	{r3, r4, r5, pc}
 800f96a:	bf00      	nop
 800f96c:	20000bec 	.word	0x20000bec

0800f970 <_getpid_r>:
 800f970:	f7f2 bfa4 	b.w	80028bc <_getpid>

0800f974 <_init>:
 800f974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f976:	bf00      	nop
 800f978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f97a:	bc08      	pop	{r3}
 800f97c:	469e      	mov	lr, r3
 800f97e:	4770      	bx	lr

0800f980 <_fini>:
 800f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f982:	bf00      	nop
 800f984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f986:	bc08      	pop	{r3}
 800f988:	469e      	mov	lr, r3
 800f98a:	4770      	bx	lr
